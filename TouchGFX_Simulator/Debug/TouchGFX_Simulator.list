
TouchGFX_Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f1f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f0  0801f3c0  0801f3c0  0002f3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000002a2  080217b0  080217b0  000317b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000281a0  08021a54  08021a54  00031a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000024  08049bf4  08049bf4  00059bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08049c18  08049c18  000600e4  2**0
                  CONTENTS
  7 .ARM          00000008  08049c18  08049c18  00059c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08049c20  08049c20  000600e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  08049c20  08049c20  00059c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08049c30  08049c30  00059c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000e4  20000000  08049c38  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a65c  200000e4  08049d1c  000600e4  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a740  08049d1c  0006a740  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000600e4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0008e630  00000000  00000000  00060114  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00014fc3  00000000  00000000  000ee744  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005d80  00000000  00000000  00103708  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005658  00000000  00000000  00109488  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000415d2  00000000  00000000  0010eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0005540e  00000000  00000000  001500b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013ef27  00000000  00000000  001a54c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002e43e7  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00019744  00000000  00000000  002e44e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f3a8 	.word	0x0801f3a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e8 	.word	0x200000e8
 800020c:	0801f3a8 	.word	0x0801f3a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f000 fc32 	bl	8000e24 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fbed 	bl	8000de8 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fbb7 	bl	8000de8 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000100 	.word	0x20000100

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fb04 	bl	8000de8 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 faf6 	bl	8000de8 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fadb 	bl	8000de8 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 facd 	bl	8000de8 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000100 	.word	0x20000100
 8000890:	20000104 	.word	0x20000104

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fa80 	bl	8000db4 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fa6c 	bl	8000db4 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fa5d 	bl	8000de8 <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f9d2 	bl	8000de8 <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f9c2 	bl	8000de8 <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f9b4 	bl	8000de8 <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000100 	.word	0x20000100

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000100 	.word	0x20000100

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f000 f96b 	bl	8000da0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000100 	.word	0x20000100

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <I2Cx_MspInit+0x150>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d14d      	bne.n	8000ba0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000b04:	4b50      	ldr	r3, [pc, #320]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4845      	ldr	r0, [pc, #276]	; (8000c4c <I2Cx_MspInit+0x158>)
 8000b38:	f001 fda2 	bl	8002680 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4840      	ldr	r0, [pc, #256]	; (8000c4c <I2Cx_MspInit+0x158>)
 8000b4a:	f001 fd99 	bl	8002680 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a3d      	ldr	r2, [pc, #244]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	4a37      	ldr	r2, [pc, #220]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b70:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b7c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	2048      	movs	r0, #72	; 0x48
 8000b84:	f000 ff56 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000b88:	2048      	movs	r0, #72	; 0x48
 8000b8a:	f000 ff6f 	bl	8001a6c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210f      	movs	r1, #15
 8000b92:	2049      	movs	r0, #73	; 0x49
 8000b94:	f000 ff4e 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000b98:	2049      	movs	r0, #73	; 0x49
 8000b9a:	f000 ff67 	bl	8001a6c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000b9e:	e04d      	b.n	8000c3c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481e      	ldr	r0, [pc, #120]	; (8000c50 <I2Cx_MspInit+0x15c>)
 8000bd6:	f001 fd53 	bl	8002680 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481a      	ldr	r0, [pc, #104]	; (8000c50 <I2Cx_MspInit+0x15c>)
 8000be8:	f001 fd4a 	bl	8002680 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c1a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	210f      	movs	r1, #15
 8000c20:	201f      	movs	r0, #31
 8000c22:	f000 ff07 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000c26:	201f      	movs	r0, #31
 8000c28:	f000 ff20 	bl	8001a6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	210f      	movs	r1, #15
 8000c30:	2020      	movs	r0, #32
 8000c32:	f000 feff 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000c36:	2020      	movs	r0, #32
 8000c38:	f000 ff18 	bl	8001a6c <HAL_NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000108 	.word	0x20000108
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40021c00 	.word	0x40021c00
 8000c50:	40020400 	.word	0x40020400

08000c54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f003 ff3d 	bl	8004adc <HAL_I2C_GetState>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d125      	bne.n	8000cb4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <I2Cx_Init+0x68>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d103      	bne.n	8000c78 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <I2Cx_Init+0x6c>)
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e002      	b.n	8000c7e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <I2Cx_Init+0x70>)
 8000c7c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <I2Cx_Init+0x74>)
 8000c82:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff23 	bl	8000af4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f003 fc26 	bl	8004500 <HAL_I2C_Init>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000108 	.word	0x20000108
 8000cc0:	40005c00 	.word	0x40005c00
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40912732 	.word	0x40912732

08000ccc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af04      	add	r7, sp, #16
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4603      	mov	r3, r0
 8000cdc:	72fb      	strb	r3, [r7, #11]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	813b      	strh	r3, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	b299      	uxth	r1, r3
 8000cee:	88f8      	ldrh	r0, [r7, #6]
 8000cf0:	893a      	ldrh	r2, [r7, #8]
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4603      	mov	r3, r0
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f003 fdd0 	bl	80048a8 <HAL_I2C_Mem_Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f832 	bl	8000d80 <I2Cx_Error>
  }
  return status;    
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b08a      	sub	sp, #40	; 0x28
 8000d2a:	af04      	add	r7, sp, #16
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	4611      	mov	r1, r2
 8000d32:	461a      	mov	r2, r3
 8000d34:	4603      	mov	r3, r0
 8000d36:	72fb      	strb	r3, [r7, #11]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	813b      	strh	r3, [r7, #8]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b299      	uxth	r1, r3
 8000d48:	88f8      	ldrh	r0, [r7, #6]
 8000d4a:	893a      	ldrh	r2, [r7, #8]
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f003 fc8f 	bl	8004680 <HAL_I2C_Mem_Write>
 8000d62:	4603      	mov	r3, r0
 8000d64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f000 f805 	bl	8000d80 <I2Cx_Error>
  }
  return status;
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f003 fc47 	bl	8004620 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff5e 	bl	8000c54 <I2Cx_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TS_IO_Init+0x10>)
 8000da6:	f7ff ff55 	bl	8000c54 <I2Cx_Init>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000108 	.word	0x20000108

08000db4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	1d7b      	adds	r3, r7, #5
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <TS_IO_Write+0x30>)
 8000dd8:	f7ff ffa5 	bl	8000d26 <I2Cx_WriteMultiple>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000108 	.word	0x20000108

08000de8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	79f9      	ldrb	r1, [r7, #7]
 8000e02:	2301      	movs	r3, #1
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	f107 030f 	add.w	r3, r7, #15
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <TS_IO_Read+0x38>)
 8000e10:	f7ff ff5c 	bl	8000ccc <I2Cx_ReadMultiple>

  return read_value;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000108 	.word	0x20000108

08000e24 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 fa93 	bl	8001358 <HAL_Delay>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <BSP_TS_Init+0x68>)
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <BSP_TS_Init+0x6c>)
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <BSP_TS_Init+0x70>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2070      	movs	r0, #112	; 0x70
 8000e62:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <BSP_TS_Init+0x70>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2070      	movs	r0, #112	; 0x70
 8000e6a:	4798      	blx	r3
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b51      	cmp	r3, #81	; 0x51
 8000e70:	d111      	bne.n	8000e96 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <BSP_TS_Init+0x74>)
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <BSP_TS_Init+0x70>)
 8000e76:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <BSP_TS_Init+0x78>)
 8000e7a:	2270      	movs	r2, #112	; 0x70
 8000e7c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <BSP_TS_Init+0x7c>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <BSP_TS_Init+0x74>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <BSP_TS_Init+0x78>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	4610      	mov	r0, r2
 8000e92:	4798      	blx	r3
 8000e94:	e001      	b.n	8000e9a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8000e96:	2303      	movs	r3, #3
 8000e98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000158 	.word	0x20000158
 8000ea8:	2000015a 	.word	0x2000015a
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000154 	.word	0x20000154
 8000eb4:	2000015d 	.word	0x2000015d
 8000eb8:	2000015c 	.word	0x2000015c

08000ebc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b097      	sub	sp, #92	; 0x5c
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8000ed6:	4b97      	ldr	r3, [pc, #604]	; (8001134 <BSP_TS_GetState+0x278>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	4a96      	ldr	r2, [pc, #600]	; (8001138 <BSP_TS_GetState+0x27c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	b292      	uxth	r2, r2
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4798      	blx	r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 81a8 	beq.w	8001248 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000efc:	e197      	b.n	800122e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <BSP_TS_GetState+0x278>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4a8c      	ldr	r2, [pc, #560]	; (8001138 <BSP_TS_GetState+0x27c>)
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	b290      	uxth	r0, r2
 8000f0a:	f107 0120 	add.w	r1, r7, #32
 8000f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	188c      	adds	r4, r1, r2
 8000f14:	f107 0114 	add.w	r1, r7, #20
 8000f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f1a:	0052      	lsls	r2, r2, #1
 8000f1c:	440a      	add	r2, r1
 8000f1e:	4621      	mov	r1, r4
 8000f20:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8000f22:	4b86      	ldr	r3, [pc, #536]	; (800113c <BSP_TS_GetState+0x280>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d11b      	bne.n	8000f62 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8000f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f32:	4413      	add	r3, r2
 8000f34:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8000f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000f40:	440b      	add	r3, r1
 8000f42:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8000f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f4e:	4413      	add	r3, r2
 8000f50:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8000f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8000f62:	4b76      	ldr	r3, [pc, #472]	; (800113c <BSP_TS_GetState+0x280>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d010      	beq.n	8000f90 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8000f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f76:	4413      	add	r3, r2
 8000f78:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000f7c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8000f90:	4b6a      	ldr	r3, [pc, #424]	; (800113c <BSP_TS_GetState+0x280>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d010      	beq.n	8000fbe <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8000f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000faa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000fb8:	440b      	add	r3, r1
 8000fba:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	; (800113c <BSP_TS_GetState+0x280>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d01b      	beq.n	8001002 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8000fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8000fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000fe0:	440b      	add	r3, r1
 8000fe2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8000fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fee:	4413      	add	r3, r2
 8000ff0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8000ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800100a:	4413      	add	r3, r2
 800100c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001010:	4619      	mov	r1, r3
 8001012:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <BSP_TS_GetState+0x284>)
 8001014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	4299      	cmp	r1, r3
 800101c:	d90e      	bls.n	800103c <BSP_TS_GetState+0x180>
 800101e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001026:	4413      	add	r3, r2
 8001028:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800102c:	4944      	ldr	r1, [pc, #272]	; (8001140 <BSP_TS_GetState+0x284>)
 800102e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001030:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001034:	b29b      	uxth	r3, r3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	e00d      	b.n	8001058 <BSP_TS_GetState+0x19c>
 800103c:	4a40      	ldr	r2, [pc, #256]	; (8001140 <BSP_TS_GetState+0x284>)
 800103e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	b29a      	uxth	r2, r3
 8001046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800104e:	440b      	add	r3, r1
 8001050:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800105c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001064:	4413      	add	r3, r2
 8001066:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800106a:	4619      	mov	r1, r3
 800106c:	4a35      	ldr	r2, [pc, #212]	; (8001144 <BSP_TS_GetState+0x288>)
 800106e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	4299      	cmp	r1, r3
 8001076:	d90e      	bls.n	8001096 <BSP_TS_GetState+0x1da>
 8001078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001080:	4413      	add	r3, r2
 8001082:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001086:	492f      	ldr	r1, [pc, #188]	; (8001144 <BSP_TS_GetState+0x288>)
 8001088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800108a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108e:	b29b      	uxth	r3, r3
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	e00d      	b.n	80010b2 <BSP_TS_GetState+0x1f6>
 8001096:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <BSP_TS_GetState+0x288>)
 8001098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80010a8:	440b      	add	r3, r1
 80010aa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80010b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80010ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80010be:	4413      	add	r3, r2
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	dd17      	ble.n	80010f4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80010c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010cc:	4413      	add	r3, r2
 80010ce:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <BSP_TS_GetState+0x284>)
 80010d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80010dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010e4:	4413      	add	r3, r2
 80010e6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <BSP_TS_GetState+0x288>)
 80010ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <BSP_TS_GetState+0x27c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b70      	cmp	r3, #112	; 0x70
 80010fa:	d125      	bne.n	8001148 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80010fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001104:	4413      	add	r3, r2
 8001106:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	460a      	mov	r2, r1
 8001114:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8001116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800111e:	4413      	add	r3, r2
 8001120:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001128:	3304      	adds	r3, #4
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	460a      	mov	r2, r1
 8001130:	809a      	strh	r2, [r3, #4]
 8001132:	e02c      	b.n	800118e <BSP_TS_GetState+0x2d2>
 8001134:	20000154 	.word	0x20000154
 8001138:	2000015d 	.word	0x2000015d
 800113c:	2000015c 	.word	0x2000015c
 8001140:	20000160 	.word	0x20000160
 8001144:	20000174 	.word	0x20000174
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <BSP_TS_GetState+0x398>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4a42      	ldr	r2, [pc, #264]	; (8001258 <BSP_TS_GetState+0x39c>)
 8001150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	fb03 f301 	mul.w	r3, r3, r1
 800115a:	0b1b      	lsrs	r3, r3, #12
 800115c:	b299      	uxth	r1, r3
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	460a      	mov	r2, r1
 8001168:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <BSP_TS_GetState+0x3a0>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	4a3b      	ldr	r2, [pc, #236]	; (8001260 <BSP_TS_GetState+0x3a4>)
 8001172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	fb03 f301 	mul.w	r3, r3, r1
 800117c:	0b1b      	lsrs	r3, r3, #12
 800117e:	b299      	uxth	r1, r3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001184:	3304      	adds	r3, #4
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	460a      	mov	r2, r1
 800118c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <BSP_TS_GetState+0x3a8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b298      	uxth	r0, r3
 8001194:	f107 010c 	add.w	r1, r7, #12
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	460b      	mov	r3, r1
 80011a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011a6:	f7ff fbcd 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	b2d9      	uxtb	r1, r3
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b2:	4413      	add	r3, r2
 80011b4:	3316      	adds	r3, #22
 80011b6:	460a      	mov	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	b2d9      	uxtb	r1, r3
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c2:	4413      	add	r3, r2
 80011c4:	3320      	adds	r3, #32
 80011c6:	460a      	mov	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d827      	bhi.n	8001220 <BSP_TS_GetState+0x364>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <BSP_TS_GetState+0x31c>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001205 	.word	0x08001205
 80011e4:	08001213 	.word	0x08001213
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ec:	4413      	add	r3, r2
 80011ee:	331b      	adds	r3, #27
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
          break;
 80011f4:	e018      	b.n	8001228 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011fa:	4413      	add	r3, r2
 80011fc:	331b      	adds	r3, #27
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
          break;
 8001202:	e011      	b.n	8001228 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001208:	4413      	add	r3, r2
 800120a:	331b      	adds	r3, #27
 800120c:	2203      	movs	r2, #3
 800120e:	701a      	strb	r2, [r3, #0]
          break;
 8001210:	e00a      	b.n	8001228 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001216:	4413      	add	r3, r2
 8001218:	331b      	adds	r3, #27
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
          break;
 800121e:	e003      	b.n	8001228 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8001226:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8001228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800122a:	3301      	adds	r3, #1
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001236:	4293      	cmp	r3, r2
 8001238:	f4ff ae61 	bcc.w	8000efe <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f813 	bl	8001268 <BSP_TS_Get_GestureId>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8001248:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800124c:	4618      	mov	r0, r3
 800124e:	3754      	adds	r7, #84	; 0x54
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	20000158 	.word	0x20000158
 8001258:	20000160 	.word	0x20000160
 800125c:	2000015a 	.word	0x2000015a
 8001260:	20000174 	.word	0x20000174
 8001264:	2000015d 	.word	0x2000015d

08001268 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <BSP_TS_Get_GestureId+0x90>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fb44 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b18      	cmp	r3, #24
 800128e:	d01b      	beq.n	80012c8 <BSP_TS_Get_GestureId+0x60>
 8001290:	2b18      	cmp	r3, #24
 8001292:	d806      	bhi.n	80012a2 <BSP_TS_Get_GestureId+0x3a>
 8001294:	2b10      	cmp	r3, #16
 8001296:	d00f      	beq.n	80012b8 <BSP_TS_Get_GestureId+0x50>
 8001298:	2b14      	cmp	r3, #20
 800129a:	d011      	beq.n	80012c0 <BSP_TS_Get_GestureId+0x58>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <BSP_TS_Get_GestureId+0x48>
 80012a0:	e022      	b.n	80012e8 <BSP_TS_Get_GestureId+0x80>
 80012a2:	2b40      	cmp	r3, #64	; 0x40
 80012a4:	d018      	beq.n	80012d8 <BSP_TS_Get_GestureId+0x70>
 80012a6:	2b49      	cmp	r3, #73	; 0x49
 80012a8:	d01a      	beq.n	80012e0 <BSP_TS_Get_GestureId+0x78>
 80012aa:	2b1c      	cmp	r3, #28
 80012ac:	d010      	beq.n	80012d0 <BSP_TS_Get_GestureId+0x68>
 80012ae:	e01b      	b.n	80012e8 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012b6:	e01a      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012be:	e016      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012c6:	e012      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012ce:	e00e      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2204      	movs	r2, #4
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012d6:	e00a      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2205      	movs	r2, #5
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012de:	e006      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2206      	movs	r2, #6
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012e6:	e002      	b.n	80012ee <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
      break;
 80012ec:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000015d 	.word	0x2000015d

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 fb8c 	bl	8001a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f016 fc40 	bl	8017b8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f015 fe5e 	bl	8016fcc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000028 	.word	0x20000028
 800133c:	20009bf0 	.word	0x20009bf0

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20009bf0 	.word	0x20009bf0

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_Delay+0x40>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000028 	.word	0x20000028

0800139c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e031      	b.n	8001416 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f015 fe2e 	bl	801701c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_ADC_Init+0x84>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f94e 	bl	800168c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
 8001406:	e001      	b.n	800140c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	ffffeefd 	.word	0xffffeefd

08001424 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1c>
 800143c:	2302      	movs	r3, #2
 800143e:	e115      	b.n	800166c <HAL_ADC_ConfigChannel+0x248>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d935      	bls.n	80014bc <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	3b1e      	subs	r3, #30
 8001466:	2207      	movs	r2, #7
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43da      	mvns	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a7f      	ldr	r2, [pc, #508]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d10a      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68d9      	ldr	r1, [r3, #12]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	061a      	lsls	r2, r3, #24
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	e035      	b.n	8001502 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68d9      	ldr	r1, [r3, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4403      	add	r3, r0
 80014ae:	3b1e      	subs	r3, #30
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	e022      	b.n	8001502 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6919      	ldr	r1, [r3, #16]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	2207      	movs	r2, #7
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6919      	ldr	r1, [r3, #16]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4403      	add	r3, r0
 80014f8:	409a      	lsls	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d824      	bhi.n	8001554 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b05      	subs	r3, #5
 800151c:	221f      	movs	r2, #31
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b05      	subs	r3, #5
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
 8001552:	e04c      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d824      	bhi.n	80015a6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b23      	subs	r3, #35	; 0x23
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43da      	mvns	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	400a      	ands	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b23      	subs	r3, #35	; 0x23
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	e023      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	3b41      	subs	r3, #65	; 0x41
 80015b8:	221f      	movs	r2, #31
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b41      	subs	r3, #65	; 0x41
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_ADC_ConfigChannel+0x258>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d109      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1e8>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b12      	cmp	r3, #18
 80015fe:	d105      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_ADC_ConfigChannel+0x25c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_ADC_ConfigChannel+0x25c>)
 8001606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800160a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1a      	ldr	r2, [pc, #104]	; (800167c <HAL_ADC_ConfigChannel+0x258>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d125      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x23e>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d003      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x204>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b11      	cmp	r3, #17
 8001626:	d11c      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_ADC_ConfigChannel+0x25c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_ADC_ConfigChannel+0x25c>)
 800162e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001632:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d111      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_ADC_ConfigChannel+0x260>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_ADC_ConfigChannel+0x264>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	0c9a      	lsrs	r2, r3, #18
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001654:	e002      	b.n	800165c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f9      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	10000012 	.word	0x10000012
 800167c:	40012000 	.word	0x40012000
 8001680:	40012300 	.word	0x40012300
 8001684:	20000064 	.word	0x20000064
 8001688:	431bde83 	.word	0x431bde83

0800168c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <ADC_Init+0x1ec>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a77      	ldr	r2, [pc, #476]	; (8001878 <ADC_Init+0x1ec>)
 800169a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800169e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016a0:	4b75      	ldr	r3, [pc, #468]	; (8001878 <ADC_Init+0x1ec>)
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4973      	ldr	r1, [pc, #460]	; (8001878 <ADC_Init+0x1ec>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	021a      	lsls	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <ADC_Init+0x1f0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d022      	beq.n	8001766 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800172e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e00f      	b.n	8001786 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0202 	bic.w	r2, r2, #2
 8001794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01b      	beq.n	80017ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	3b01      	subs	r3, #1
 80017e0:	035a      	lsls	r2, r3, #13
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e007      	b.n	80017fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	3b01      	subs	r3, #1
 8001818:	051a      	lsls	r2, r3, #20
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800183e:	025a      	lsls	r2, r3, #9
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	029a      	lsls	r2, r3, #10
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40012300 	.word	0x40012300
 800187c:	0f000001 	.word	0x0f000001

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x40>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00
 80018c4:	05fa0000 	.word	0x05fa0000

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db10      	blt.n	8001954 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4909      	ldr	r1, [pc, #36]	; (8001960 <__NVIC_DisableIRQ+0x40>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	3320      	adds	r3, #32
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800194c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001950:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff2a 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a46:	f7ff ff3f 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff ffb1 	bl	80019b8 <NVIC_EncodePriority>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff80 	bl	8001964 <__NVIC_SetPriority>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff32 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff42 	bl	8001920 <__NVIC_DisableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e054      	b.n	8001b60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7f5b      	ldrb	r3, [r3, #29]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f015 fb02 	bl	80170d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_CRC_Init+0xc4>)
 8001ae0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0218 	bic.w	r2, r2, #24
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	e00c      	b.n	8001b0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6899      	ldr	r1, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f834 	bl	8001b6c <HAL_CRCEx_Polynomial_Set>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e028      	b.n	8001b60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	795b      	ldrb	r3, [r3, #5]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	e004      	b.n	8001b2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6912      	ldr	r2, [r2, #16]
 8001b2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	04c11db7 	.word	0x04c11db7

08001b6c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b7c:	231f      	movs	r3, #31
 8001b7e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b80:	bf00      	nop
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	613a      	str	r2, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b18      	cmp	r3, #24
 8001ba4:	d846      	bhi.n	8001c34 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001ba6:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001c3b 	.word	0x08001c3b
 8001bb0:	08001c35 	.word	0x08001c35
 8001bb4:	08001c35 	.word	0x08001c35
 8001bb8:	08001c35 	.word	0x08001c35
 8001bbc:	08001c35 	.word	0x08001c35
 8001bc0:	08001c35 	.word	0x08001c35
 8001bc4:	08001c35 	.word	0x08001c35
 8001bc8:	08001c35 	.word	0x08001c35
 8001bcc:	08001c29 	.word	0x08001c29
 8001bd0:	08001c35 	.word	0x08001c35
 8001bd4:	08001c35 	.word	0x08001c35
 8001bd8:	08001c35 	.word	0x08001c35
 8001bdc:	08001c35 	.word	0x08001c35
 8001be0:	08001c35 	.word	0x08001c35
 8001be4:	08001c35 	.word	0x08001c35
 8001be8:	08001c35 	.word	0x08001c35
 8001bec:	08001c1d 	.word	0x08001c1d
 8001bf0:	08001c35 	.word	0x08001c35
 8001bf4:	08001c35 	.word	0x08001c35
 8001bf8:	08001c35 	.word	0x08001c35
 8001bfc:	08001c35 	.word	0x08001c35
 8001c00:	08001c35 	.word	0x08001c35
 8001c04:	08001c35 	.word	0x08001c35
 8001c08:	08001c35 	.word	0x08001c35
 8001c0c:	08001c11 	.word	0x08001c11
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d913      	bls.n	8001c3e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c1a:	e010      	b.n	8001c3e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	d90f      	bls.n	8001c42 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c26:	e00c      	b.n	8001c42 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	d90b      	bls.n	8001c46 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c32:	e008      	b.n	8001c46 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	75fb      	strb	r3, [r7, #23]
      break;
 8001c38:	e006      	b.n	8001c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e004      	b.n	8001c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c3e:	bf00      	nop
 8001c40:	e002      	b.n	8001c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c42:	bf00      	nop
 8001c44:	e000      	b.n	8001c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c46:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 0118 	bic.w	r1, r3, #24
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e062      	b.n	8001d50 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f015 fa3a 	bl	8017110 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_DCMI_Init+0xe0>)
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cc8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001cd4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ce0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001cec:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001cf8:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d112      	bne.n	8001d30 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7f1b      	ldrb	r3, [r3, #28]
 8001d0e:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7f5b      	ldrb	r3, [r3, #29]
 8001d14:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d16:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7f9b      	ldrb	r3, [r3, #30]
 8001d1c:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7fdb      	ldrb	r3, [r3, #31]
 8001d26:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001d2c:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001d2e:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 021e 	orr.w	r2, r2, #30
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	ffe0f007 	.word	0xffe0f007

08001d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Start_IT+0x26>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e048      	b.n	8001e14 <HAL_DMA_Start_IT+0xb8>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d137      	bne.n	8001e06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f842 	bl	8001e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	223f      	movs	r2, #63	; 0x3f
 8001db6:	409a      	lsls	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0216 	orr.w	r2, r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e005      	b.n	8001e12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	d108      	bne.n	8001e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e72:	e007      	b.n	8001e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	60da      	str	r2, [r3, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e039      	b.n	8001f16 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f012 fb98 	bl	80145ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee0:	f023 0107 	bic.w	r1, r3, #7
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_DMA2D_Init+0x90>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68d1      	ldr	r1, [r2, #12]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	ffffc000 	.word	0xffffc000

08001f24 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e05f      	b.n	8001ff6 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_DMA2D_DeInit+0xdc>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d02e      	beq.n	8001fa0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8c1 	bl	80020d8 <HAL_DMA2D_Abort>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d021      	beq.n	8001fa0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e04a      	b.n	8001ff6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d108      	bne.n	8001f80 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8f7 	bl	8002164 <HAL_DMA2D_CLUTLoading_Abort>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d011      	beq.n	8001fa0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e03a      	b.n	8001ff6 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d108      	bne.n	8001fa0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8e7 	bl	8002164 <HAL_DMA2D_CLUTLoading_Abort>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e02a      	b.n	8001ff6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f012 fb2d 	bl	8014638 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_DMA2D_Start_IT+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e020      	b.n	8002062 <HAL_DMA2D_Start_IT+0x5e>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fa84 	bl	8002548 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800204e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af02      	add	r7, sp, #8
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002082:	2302      	movs	r3, #2
 8002084:	e024      	b.n	80020d0 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2202      	movs	r2, #2
 8002092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fa4d 	bl	8002548 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80020bc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0205 	bic.w	r2, r3, #5
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0204 	orr.w	r2, r2, #4
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f4:	f7ff f924 	bl	8001340 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80020fa:	e017      	b.n	800212c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80020fc:	f7ff f920 	bl	8001340 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800210a:	d90f      	bls.n	800212c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2203      	movs	r2, #3
 800211c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e017      	b.n	800215c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e0      	bne.n	80020fc <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002148:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3324      	adds	r3, #36	; 0x24
 8002174:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0204 	orr.w	r2, r2, #4
 8002184:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d103      	bne.n	8002194 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	331c      	adds	r3, #28
 8002192:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002194:	f7ff f8d4 	bl	8001340 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800219a:	e017      	b.n	80021cc <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800219c:	f7ff f8d0 	bl	8001340 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021aa:	d90f      	bls.n	80021cc <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e016      	b.n	80021fa <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e1      	bne.n	800219c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80021e6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d026      	beq.n	8002272 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d021      	beq.n	8002272 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800223c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2204      	movs	r2, #4
 8002256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d026      	beq.n	80022ca <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d021      	beq.n	80022ca <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002294:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2220      	movs	r2, #32
 800229c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2204      	movs	r2, #4
 80022ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d026      	beq.n	8002322 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d021      	beq.n	8002322 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00e      	beq.n	8002354 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002344:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f853 	bl	80023fa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01f      	beq.n	80023a8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2202      	movs	r2, #2
 800237e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01f      	beq.n	80023f2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01a      	beq.n	80023f2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2210      	movs	r2, #16
 80023d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f80e 	bl	800240e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_DMA2D_ConfigLayer+0x20>
 8002440:	2302      	movs	r3, #2
 8002442:	e079      	b.n	8002538 <HAL_DMA2D_ConfigLayer+0x114>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	3318      	adds	r3, #24
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_DMA2D_ConfigLayer+0x120>)
 8002470:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b0a      	cmp	r3, #10
 8002478:	d003      	beq.n	8002482 <HAL_DMA2D_ConfigLayer+0x5e>
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b09      	cmp	r3, #9
 8002480:	d107      	bne.n	8002492 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e005      	b.n	800249e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d120      	bne.n	80024e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	ea02 0103 	and.w	r1, r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d003      	beq.n	80024d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	d127      	bne.n	8002526 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
 80024e4:	e01f      	b.n	8002526 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	ea02 0103 	and.w	r1, r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b0a      	cmp	r3, #10
 800250e:	d003      	beq.n	8002518 <HAL_DMA2D_ConfigLayer+0xf4>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b09      	cmp	r3, #9
 8002516:	d106      	bne.n	8002526 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002524:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	ff03000f 	.word	0xff03000f

08002548 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	041a      	lsls	r2, r3, #16
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002580:	d174      	bne.n	800266c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002588:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002590:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002598:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d108      	bne.n	80025ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	e053      	b.n	8002662 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	e048      	b.n	8002662 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d111      	bne.n	80025fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	0cdb      	lsrs	r3, r3, #19
 80025dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	0a9b      	lsrs	r3, r3, #10
 80025e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	08db      	lsrs	r3, r3, #3
 80025e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	02db      	lsls	r3, r3, #11
 80025f2:	4313      	orrs	r3, r2
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e032      	b.n	8002662 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d117      	bne.n	8002634 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	0fdb      	lsrs	r3, r3, #31
 8002608:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	0cdb      	lsrs	r3, r3, #19
 800260e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	0adb      	lsrs	r3, r3, #11
 8002614:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	431a      	orrs	r2, r3
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	03db      	lsls	r3, r3, #15
 800262a:	4313      	orrs	r3, r2
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	e016      	b.n	8002662 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	0f1b      	lsrs	r3, r3, #28
 8002638:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	0d1b      	lsrs	r3, r3, #20
 800263e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	0b1b      	lsrs	r3, r3, #12
 8002644:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	011a      	lsls	r2, r3, #4
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	431a      	orrs	r2, r3
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	031b      	lsls	r3, r3, #12
 800265a:	4313      	orrs	r3, r2
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800266a:	e003      	b.n	8002674 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	60da      	str	r2, [r3, #12]
}
 8002674:	bf00      	nop
 8002676:	372c      	adds	r7, #44	; 0x2c
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e175      	b.n	800298c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8164 	bne.w	8002986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x4e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d123      	bne.n	8002716 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d00b      	beq.n	800276a <HAL_GPIO_Init+0xea>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275e:	2b11      	cmp	r3, #17
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b12      	cmp	r3, #18
 8002768:	d130      	bne.n	80027cc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 0201 	and.w	r2, r3, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80be 	beq.w	8002986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_GPIO_Init+0x320>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a64      	ldr	r2, [pc, #400]	; (80029a0 <HAL_GPIO_Init+0x320>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_GPIO_Init+0x320>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002822:	4a60      	ldr	r2, [pc, #384]	; (80029a4 <HAL_GPIO_Init+0x324>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_GPIO_Init+0x328>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_GPIO_Init+0x32c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a55      	ldr	r2, [pc, #340]	; (80029b0 <HAL_GPIO_Init+0x330>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a54      	ldr	r2, [pc, #336]	; (80029b4 <HAL_GPIO_Init+0x334>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_GPIO_Init+0x338>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x33c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x22a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_GPIO_Init+0x340>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x344>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x222>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x348>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x21e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_GPIO_Init+0x34c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x21a>
 8002896:	2309      	movs	r3, #9
 8002898:	e012      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289a:	230a      	movs	r3, #10
 800289c:	e010      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00e      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d0:	4934      	ldr	r1, [pc, #208]	; (80029a4 <HAL_GPIO_Init+0x324>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_GPIO_Init+0x350>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002902:	4a33      	ldr	r2, [pc, #204]	; (80029d0 <HAL_GPIO_Init+0x350>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_GPIO_Init+0x350>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292c:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <HAL_GPIO_Init+0x350>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_GPIO_Init+0x350>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_GPIO_Init+0x350>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_GPIO_Init+0x350>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_GPIO_Init+0x350>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae86 	bls.w	80026a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	3724      	adds	r7, #36	; 0x24
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40022400 	.word	0x40022400
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e0d9      	b.n	8002ba4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f040 80c9 	bne.w	8002b9e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002a0c:	4a6a      	ldr	r2, [pc, #424]	; (8002bb8 <HAL_GPIO_DeInit+0x1e4>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a62      	ldr	r2, [pc, #392]	; (8002bbc <HAL_GPIO_DeInit+0x1e8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d037      	beq.n	8002aa6 <HAL_GPIO_DeInit+0xd2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a61      	ldr	r2, [pc, #388]	; (8002bc0 <HAL_GPIO_DeInit+0x1ec>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_GPIO_DeInit+0xce>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <HAL_GPIO_DeInit+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_DeInit+0xca>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a5f      	ldr	r2, [pc, #380]	; (8002bc8 <HAL_GPIO_DeInit+0x1f4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_DeInit+0xc6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_GPIO_DeInit+0x1f8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_DeInit+0xc2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <HAL_GPIO_DeInit+0x1fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_DeInit+0xbe>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a5c      	ldr	r2, [pc, #368]	; (8002bd4 <HAL_GPIO_DeInit+0x200>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_DeInit+0xba>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a5b      	ldr	r2, [pc, #364]	; (8002bd8 <HAL_GPIO_DeInit+0x204>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_DeInit+0xb6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a5a      	ldr	r2, [pc, #360]	; (8002bdc <HAL_GPIO_DeInit+0x208>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_DeInit+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a59      	ldr	r2, [pc, #356]	; (8002be0 <HAL_GPIO_DeInit+0x20c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_DeInit+0xae>
 8002a7e:	2309      	movs	r3, #9
 8002a80:	e012      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a82:	230a      	movs	r3, #10
 8002a84:	e010      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e00e      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_DeInit+0xd4>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d132      	bne.n	8002b1e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_GPIO_DeInit+0x1e4>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	4837      	ldr	r0, [pc, #220]	; (8002bb8 <HAL_GPIO_DeInit+0x1e4>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	400a      	ands	r2, r1
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	493d      	ldr	r1, [pc, #244]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002af4:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4939      	ldr	r1, [pc, #228]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b02:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4936      	ldr	r1, [pc, #216]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	4932      	ldr	r1, [pc, #200]	; (8002be4 <HAL_GPIO_DeInit+0x210>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2103      	movs	r1, #3
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	08d2      	lsrs	r2, r2, #3
 8002b54:	4019      	ands	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2103      	movs	r1, #3
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2103      	movs	r1, #3
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	f67f af22 	bls.w	80029f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40021400 	.word	0x40021400
 8002bd4:	40021800 	.word	0x40021800
 8002bd8:	40021c00 	.word	0x40021c00
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40022400 	.word	0x40022400
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e001      	b.n	8002c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4c:	b08d      	sub	sp, #52	; 0x34
 8002c4e:	af0a      	add	r7, sp, #40	; 0x28
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e048      	b.n	8002cee <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f015 f96b 	bl	8017f4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f008 fbbd 	bl	800b402 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	687e      	ldr	r6, [r7, #4]
 8002c90:	466d      	mov	r5, sp
 8002c92:	f106 0410 	add.w	r4, r6, #16
 8002c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ca2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca6:	1d33      	adds	r3, r6, #4
 8002ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	f008 fb40 	bl	800b330 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f008 fbb4 	bl	800b424 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	687e      	ldr	r6, [r7, #4]
 8002cc4:	466d      	mov	r5, sp
 8002cc6:	f106 0410 	add.w	r4, r6, #16
 8002cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cda:	1d33      	adds	r3, r6, #4
 8002cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	f008 fcc6 	bl	800b670 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b089      	sub	sp, #36	; 0x24
 8002cfa:	af04      	add	r7, sp, #16
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	4608      	mov	r0, r1
 8002d00:	4611      	mov	r1, r2
 8002d02:	461a      	mov	r2, r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	70fb      	strb	r3, [r7, #3]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70bb      	strb	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_HC_Init+0x28>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e07f      	b.n	8002e1e <HAL_HCD_HC_Init+0x128>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	333d      	adds	r3, #61	; 0x3d
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3338      	adds	r3, #56	; 0x38
 8002d4a:	787a      	ldrb	r2, [r7, #1]
 8002d4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3340      	adds	r3, #64	; 0x40
 8002d5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d60:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	3339      	adds	r3, #57	; 0x39
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	333f      	adds	r3, #63	; 0x3f
 8002d86:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	78bb      	ldrb	r3, [r7, #2]
 8002d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d94:	b2d8      	uxtb	r0, r3
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	333a      	adds	r3, #58	; 0x3a
 8002da4:	4602      	mov	r2, r0
 8002da6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002da8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da0a      	bge.n	8002dc6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333b      	adds	r3, #59	; 0x3b
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e009      	b.n	8002dda <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	333b      	adds	r3, #59	; 0x3b
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	333c      	adds	r3, #60	; 0x3c
 8002dea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002dee:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	787c      	ldrb	r4, [r7, #1]
 8002df6:	78ba      	ldrb	r2, [r7, #2]
 8002df8:	78f9      	ldrb	r1, [r7, #3]
 8002dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dfc:	9302      	str	r3, [sp, #8]
 8002dfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	f008 fda6 	bl	800b95c <USB_HC_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}

08002e26 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_HCD_HC_Halt+0x1e>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e00f      	b.n	8002e64 <HAL_HCD_HC_Halt+0x3e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f008 ffe0 	bl	800be1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	70fb      	strb	r3, [r7, #3]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70bb      	strb	r3, [r7, #2]
 8002e82:	4613      	mov	r3, r2
 8002e84:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	333b      	adds	r3, #59	; 0x3b
 8002e96:	78ba      	ldrb	r2, [r7, #2]
 8002e98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	333f      	adds	r3, #63	; 0x3f
 8002eaa:	787a      	ldrb	r2, [r7, #1]
 8002eac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002eae:	7c3b      	ldrb	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3342      	adds	r3, #66	; 0x42
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e009      	b.n	8002ede <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3342      	adds	r3, #66	; 0x42
 8002eda:	2202      	movs	r2, #2
 8002edc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ede:	787b      	ldrb	r3, [r7, #1]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	f200 80d6 	bhi.w	8003092 <HAL_HCD_HC_SubmitRequest+0x226>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_HCD_HC_SubmitRequest+0x80>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	0800307d 	.word	0x0800307d
 8002ef4:	08002f69 	.word	0x08002f69
 8002ef8:	08002ff3 	.word	0x08002ff3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002efc:	7c3b      	ldrb	r3, [r7, #16]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	f040 80c9 	bne.w	8003096 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002f04:	78bb      	ldrb	r3, [r7, #2]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 80c5 	bne.w	8003096 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002f0c:	8b3b      	ldrh	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	3351      	adds	r3, #81	; 0x51
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	3351      	adds	r3, #81	; 0x51
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3342      	adds	r3, #66	; 0x42
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f50:	e0a1      	b.n	8003096 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	3342      	adds	r3, #66	; 0x42
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
      break;
 8002f66:	e096      	b.n	8003096 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f68:	78bb      	ldrb	r3, [r7, #2]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d120      	bne.n	8002fb0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3351      	adds	r3, #81	; 0x51
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3342      	adds	r3, #66	; 0x42
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f98:	e07e      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e073      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3350      	adds	r3, #80	; 0x50
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3342      	adds	r3, #66	; 0x42
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e05d      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	3342      	adds	r3, #66	; 0x42
 8002fec:	2202      	movs	r2, #2
 8002fee:	701a      	strb	r2, [r3, #0]
      break;
 8002ff0:	e052      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ff2:	78bb      	ldrb	r3, [r7, #2]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d120      	bne.n	800303a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	3351      	adds	r3, #81	; 0x51
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	3342      	adds	r3, #66	; 0x42
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003022:	e039      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3342      	adds	r3, #66	; 0x42
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
      break;
 8003038:	e02e      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	3350      	adds	r3, #80	; 0x50
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3342      	adds	r3, #66	; 0x42
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
      break;
 8003064:	e018      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3342      	adds	r3, #66	; 0x42
 8003076:	2202      	movs	r2, #2
 8003078:	701a      	strb	r2, [r3, #0]
      break;
 800307a:	e00d      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	3342      	adds	r3, #66	; 0x42
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
      break;
 8003090:	e002      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003096:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	3344      	adds	r3, #68	; 0x44
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	8b39      	ldrh	r1, [r7, #24]
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4403      	add	r3, r0
 80030bc:	3348      	adds	r3, #72	; 0x48
 80030be:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	335c      	adds	r3, #92	; 0x5c
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	334c      	adds	r3, #76	; 0x4c
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	3339      	adds	r3, #57	; 0x39
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	335d      	adds	r3, #93	; 0x5d
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	3338      	adds	r3, #56	; 0x38
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	18d1      	adds	r1, r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	f008 fd20 	bl	800bb70 <USB_HC_StartXfer>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop

0800313c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f008 fa49 	bl	800b5ea <USB_GetMode>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80f1 	bne.w	8003342 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f008 fa2d 	bl	800b5c4 <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80e7 	beq.w	8003340 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f008 fa24 	bl	800b5c4 <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003186:	d104      	bne.n	8003192 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003190:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f008 fa14 	bl	800b5c4 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d104      	bne.n	80031b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f008 fa04 	bl	800b5c4 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c6:	d104      	bne.n	80031d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f008 f9f4 	bl	800b5c4 <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d103      	bne.n	80031ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f008 f9e6 	bl	800b5c4 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003202:	d117      	bne.n	8003234 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003212:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003216:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f014 ff09 	bl	8018030 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f008 fad3 	bl	800b7d0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f008 f9c3 	bl	800b5c4 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003248:	d102      	bne.n	8003250 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f001 f8c8 	bl	80043e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f008 f9b5 	bl	800b5c4 <USB_ReadInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d106      	bne.n	8003272 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f014 fec7 	bl	8017ff8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2208      	movs	r2, #8
 8003270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f008 f9a4 	bl	800b5c4 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003286:	d138      	bne.n	80032fa <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f008 fdb3 	bl	800bdf8 <USB_HC_ReadInterrupt>
 8003292:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e025      	b.n	80032e6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	d106      	bne.n	80032d4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8cf 	bl	8003470 <HCD_HC_IN_IRQHandler>
 80032d2:	e005      	b.n	80032e0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fc5f 	bl	8003b9e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3d4      	bcc.n	800329a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f008 f960 	bl	800b5c4 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b10      	cmp	r3, #16
 800330c:	d101      	bne.n	8003312 <HAL_HCD_IRQHandler+0x1d6>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_HCD_IRQHandler+0x1d8>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d014      	beq.n	8003342 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0210 	bic.w	r2, r2, #16
 8003326:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 ffad 	bl	8004288 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0210 	orr.w	r2, r2, #16
 800333c:	619a      	str	r2, [r3, #24]
 800333e:	e000      	b.n	8003342 <HAL_HCD_IRQHandler+0x206>
      return;
 8003340:	bf00      	nop
    }
  }
}
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_HCD_Start+0x16>
 800335a:	2302      	movs	r3, #2
 800335c:	e013      	b.n	8003386 <HAL_HCD_Start+0x3e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f008 f838 	bl	800b3e0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f008 fa8e 	bl	800b898 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_HCD_Stop+0x16>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e00d      	b.n	80033c0 <HAL_HCD_Stop+0x32>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f008 fe6d 	bl	800c090 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f008 fa35 	bl	800b844 <USB_ResetPort>
 80033da:	4603      	mov	r3, r0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	335c      	adds	r3, #92	; 0x5c
 8003400:	781b      	ldrb	r3, [r3, #0]
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	334c      	adds	r3, #76	; 0x4c
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f008 fa77 	bl	800b938 <USB_GetCurrentFrame>
 800344a:	4603      	mov	r3, r0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f008 fa52 	bl	800b90a <USB_GetHostSpeed>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d119      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	2304      	movs	r3, #4
 80034b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	0151      	lsls	r1, r2, #5
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	440a      	add	r2, r1
 80034c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	60d3      	str	r3, [r2, #12]
 80034d2:	e095      	b.n	8003600 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d109      	bne.n	80034fe <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2320      	movs	r3, #32
 80034fa:	6093      	str	r3, [r2, #8]
 80034fc:	e080      	b.n	8003600 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d134      	bne.n	800357e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	440a      	add	r2, r1
 800352a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	335d      	adds	r3, #93	; 0x5d
 8003544:	2205      	movs	r2, #5
 8003546:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	2310      	movs	r3, #16
 8003558:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	2308      	movs	r3, #8
 800356a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f008 fc4f 	bl	800be1a <USB_HC_Halt>
 800357c:	e040      	b.n	8003600 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d134      	bne.n	8003600 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f008 fc2a 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	2310      	movs	r3, #16
 80035d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	335d      	adds	r3, #93	; 0x5d
 80035e8:	2208      	movs	r2, #8
 80035ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003616:	d122      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	0151      	lsls	r1, r2, #5
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	440a      	add	r2, r1
 800362e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f008 fbe9 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800365a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800365c:	e29b      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 80c1 	bne.w	80037f8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01b      	beq.n	80036b6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	3348      	adds	r3, #72	; 0x48
 800368e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	0159      	lsls	r1, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	440b      	add	r3, r1
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80036a2:	1ad1      	subs	r1, r2, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4403      	add	r3, r0
 80036b2:	334c      	adds	r3, #76	; 0x4c
 80036b4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	335d      	adds	r3, #93	; 0x5d
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	3358      	adds	r3, #88	; 0x58
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	461a      	mov	r2, r3
 80036ec:	2301      	movs	r3, #1
 80036ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	333f      	adds	r3, #63	; 0x3f
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	333f      	adds	r3, #63	; 0x3f
 8003716:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003718:	2b02      	cmp	r3, #2
 800371a:	d121      	bne.n	8003760 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	440a      	add	r2, r1
 8003732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f008 fb67 	bl	800be1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	2310      	movs	r3, #16
 800375c:	6093      	str	r3, [r2, #8]
 800375e:	e034      	b.n	80037ca <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	333f      	adds	r3, #63	; 0x3f
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d129      	bne.n	80037ca <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	440a      	add	r2, r1
 800378c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003794:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	335c      	adds	r3, #92	; 0x5c
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	b2d8      	uxtb	r0, r3
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	335c      	adds	r3, #92	; 0x5c
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4601      	mov	r1, r0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f014 fc41 	bl	801804c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	440b      	add	r3, r1
 80037d8:	3350      	adds	r3, #80	; 0x50
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f083 0301 	eor.w	r3, r3, #1
 80037e0:	b2d8      	uxtb	r0, r3
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	3350      	adds	r3, #80	; 0x50
 80037f2:	4602      	mov	r2, r0
 80037f4:	701a      	strb	r2, [r3, #0]
}
 80037f6:	e1ce      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b02      	cmp	r3, #2
 800380c:	f040 80f1 	bne.w	80039f2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	440a      	add	r2, r1
 8003826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382a:	f023 0302 	bic.w	r3, r3, #2
 800382e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	335d      	adds	r3, #93	; 0x5d
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d10a      	bne.n	800385c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	335c      	adds	r3, #92	; 0x5c
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e0b0      	b.n	80039be <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	440b      	add	r3, r1
 800386a:	335d      	adds	r3, #93	; 0x5d
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10a      	bne.n	8003888 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	335c      	adds	r3, #92	; 0x5c
 8003882:	2205      	movs	r2, #5
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e09a      	b.n	80039be <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	440b      	add	r3, r1
 8003896:	335d      	adds	r3, #93	; 0x5d
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b06      	cmp	r3, #6
 800389c:	d00a      	beq.n	80038b4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	335d      	adds	r3, #93	; 0x5d
 80038ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d156      	bne.n	8003962 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	3358      	adds	r3, #88	; 0x58
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4403      	add	r3, r0
 80038d6:	3358      	adds	r3, #88	; 0x58
 80038d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	3358      	adds	r3, #88	; 0x58
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d914      	bls.n	800391a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	440b      	add	r3, r1
 80038fe:	3358      	adds	r3, #88	; 0x58
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	335c      	adds	r3, #92	; 0x5c
 8003914:	2204      	movs	r2, #4
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e009      	b.n	800392e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	440b      	add	r3, r1
 8003928:	335c      	adds	r3, #92	; 0x5c
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003944:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800394c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e02d      	b.n	80039be <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	335d      	adds	r3, #93	; 0x5d
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d122      	bne.n	80039be <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	2202      	movs	r2, #2
 800398a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	461a      	mov	r2, r3
 80039cc:	2302      	movs	r3, #2
 80039ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	b2d8      	uxtb	r0, r3
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	4601      	mov	r1, r0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f014 fb2e 	bl	801804c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039f0:	e0d1      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	d13e      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	3358      	adds	r3, #88	; 0x58
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4403      	add	r3, r0
 8003a4a:	3358      	adds	r3, #88	; 0x58
 8003a4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	335d      	adds	r3, #93	; 0x5d
 8003a5e:	2206      	movs	r2, #6
 8003a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f008 f9d4 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	6093      	str	r3, [r2, #8]
}
 8003a84:	e087      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d17c      	bne.n	8003b96 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	333f      	adds	r3, #63	; 0x3f
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d122      	bne.n	8003af8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	3358      	adds	r3, #88	; 0x58
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f008 f992 	bl	800be1a <USB_HC_Halt>
 8003af6:	e045      	b.n	8003b84 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	333f      	adds	r3, #63	; 0x3f
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	333f      	adds	r3, #63	; 0x3f
 8003b1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d12f      	bne.n	8003b84 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	3358      	adds	r3, #88	; 0x58
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d121      	bne.n	8003b84 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	335d      	adds	r3, #93	; 0x5d
 8003b50:	2203      	movs	r2, #3
 8003b52:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f008 f94b 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	2310      	movs	r3, #16
 8003b94:	6093      	str	r3, [r2, #8]
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d119      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2304      	movs	r3, #4
 8003bde:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bfa:	f043 0302 	orr.w	r3, r3, #2
 8003bfe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003c00:	e33e      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d141      	bne.n	8003c9c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	461a      	mov	r2, r3
 8003c26:	2320      	movs	r3, #32
 8003c28:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	440b      	add	r3, r1
 8003c38:	333d      	adds	r3, #61	; 0x3d
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 831f 	bne.w	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	440b      	add	r3, r1
 8003c50:	333d      	adds	r3, #61	; 0x3d
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	335c      	adds	r3, #92	; 0x5c
 8003c66:	2202      	movs	r2, #2
 8003c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f008 f8c0 	bl	800be1a <USB_HC_Halt>
}
 8003c9a:	e2f1      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d13f      	bne.n	8003d32 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	335d      	adds	r3, #93	; 0x5d
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	333d      	adds	r3, #61	; 0x3d
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3358      	adds	r3, #88	; 0x58
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f008 f87e 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	6093      	str	r3, [r2, #8]
}
 8003d30:	e2a6      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d122      	bne.n	8003d90 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	0151      	lsls	r1, r2, #5
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	440a      	add	r2, r1
 8003d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f008 f850 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d86:	461a      	mov	r2, r3
 8003d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d8c:	6093      	str	r3, [r2, #8]
}
 8003d8e:	e277      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d135      	bne.n	8003e12 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	3358      	adds	r3, #88	; 0x58
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f008 f818 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	461a      	mov	r2, r3
 8003df8:	2301      	movs	r3, #1
 8003dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	440b      	add	r3, r1
 8003e0a:	335d      	adds	r3, #93	; 0x5d
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
}
 8003e10:	e236      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d12b      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	461a      	mov	r2, r3
 8003e36:	2308      	movs	r3, #8
 8003e38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f007 ffd8 	bl	800be1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	335d      	adds	r3, #93	; 0x5d
 8003e7a:	2205      	movs	r2, #5
 8003e7c:	701a      	strb	r2, [r3, #0]
}
 8003e7e:	e1ff      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d155      	bne.n	8003f42 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3358      	adds	r3, #88	; 0x58
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	335d      	adds	r3, #93	; 0x5d
 8003eba:	2203      	movs	r2, #3
 8003ebc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	333d      	adds	r3, #61	; 0x3d
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d114      	bne.n	8003efe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	333c      	adds	r3, #60	; 0x3c
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	333d      	adds	r3, #61	; 0x3d
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f007 ff76 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	6093      	str	r3, [r2, #8]
}
 8003f40:	e19e      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d12b      	bne.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f007 ff49 	bl	800be1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	335d      	adds	r3, #93	; 0x5d
 8003f98:	2206      	movs	r2, #6
 8003f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	6093      	str	r3, [r2, #8]
}
 8003fae:	e167      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d135      	bne.n	8004034 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f007 ff11 	bl	800be1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	461a      	mov	r2, r3
 8004006:	2310      	movs	r3, #16
 8004008:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800401c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	335d      	adds	r3, #93	; 0x5d
 800402e:	2208      	movs	r2, #8
 8004030:	701a      	strb	r2, [r3, #0]
}
 8004032:	e125      	b.n	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	f040 811a 	bne.w	8004280 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	440a      	add	r2, r1
 8004062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004066:	f023 0302 	bic.w	r3, r3, #2
 800406a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	440b      	add	r3, r1
 800407a:	335d      	adds	r3, #93	; 0x5d
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d137      	bne.n	80040f2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	335c      	adds	r3, #92	; 0x5c
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	333f      	adds	r3, #63	; 0x3f
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d00b      	beq.n	80040c4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	333f      	adds	r3, #63	; 0x3f
 80040bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80040be:	2b03      	cmp	r3, #3
 80040c0:	f040 80c5 	bne.w	800424e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	3351      	adds	r3, #81	; 0x51
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	f083 0301 	eor.w	r3, r3, #1
 80040da:	b2d8      	uxtb	r0, r3
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	3351      	adds	r3, #81	; 0x51
 80040ec:	4602      	mov	r2, r0
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e0ad      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	335d      	adds	r3, #93	; 0x5d
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d10a      	bne.n	800411e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	440b      	add	r3, r1
 8004116:	335c      	adds	r3, #92	; 0x5c
 8004118:	2202      	movs	r2, #2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e097      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	440b      	add	r3, r1
 800412c:	335d      	adds	r3, #93	; 0x5d
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d10a      	bne.n	800414a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	335c      	adds	r3, #92	; 0x5c
 8004144:	2202      	movs	r2, #2
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e081      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	335d      	adds	r3, #93	; 0x5d
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d10a      	bne.n	8004176 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	335c      	adds	r3, #92	; 0x5c
 8004170:	2205      	movs	r2, #5
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e06b      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	440b      	add	r3, r1
 8004184:	335d      	adds	r3, #93	; 0x5d
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d00a      	beq.n	80041a2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	440b      	add	r3, r1
 800419a:	335d      	adds	r3, #93	; 0x5d
 800419c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d155      	bne.n	800424e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	3358      	adds	r3, #88	; 0x58
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c59      	adds	r1, r3, #1
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4403      	add	r3, r0
 80041c4:	3358      	adds	r3, #88	; 0x58
 80041c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	3358      	adds	r3, #88	; 0x58
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d914      	bls.n	8004208 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	440b      	add	r3, r1
 80041ec:	3358      	adds	r3, #88	; 0x58
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	335c      	adds	r3, #92	; 0x5c
 8004202:	2204      	movs	r2, #4
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e009      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	335c      	adds	r3, #92	; 0x5c
 8004218:	2202      	movs	r2, #2
 800421a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004232:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800423a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425a:	461a      	mov	r2, r3
 800425c:	2302      	movs	r3, #2
 800425e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	b2d8      	uxtb	r0, r3
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	335c      	adds	r3, #92	; 0x5c
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4601      	mov	r1, r0
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f013 fee6 	bl	801804c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004280:	bf00      	nop
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	0c5b      	lsrs	r3, r3, #17
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d003      	beq.n	80042cc <HCD_RXQLVL_IRQHandler+0x44>
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	f000 8082 	beq.w	80043ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042ca:	e083      	b.n	80043d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d07f      	beq.n	80043d2 <HCD_RXQLVL_IRQHandler+0x14a>
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	3344      	adds	r3, #68	; 0x44
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d074      	beq.n	80043d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	440b      	add	r3, r1
 80042fa:	3344      	adds	r3, #68	; 0x44
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	b292      	uxth	r2, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f007 f935 	bl	800b572 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	440b      	add	r3, r1
 8004316:	3344      	adds	r3, #68	; 0x44
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	18d1      	adds	r1, r2, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4403      	add	r3, r0
 800432c:	3344      	adds	r3, #68	; 0x44
 800432e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	440b      	add	r3, r1
 800433e:	334c      	adds	r3, #76	; 0x4c
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	18d1      	adds	r1, r2, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4403      	add	r3, r0
 8004354:	334c      	adds	r3, #76	; 0x4c
 8004356:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HCD_RXQLVL_IRQHandler+0x154>)
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d031      	beq.n	80043d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004384:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800438c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	3350      	adds	r3, #80	; 0x50
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	f083 0301 	eor.w	r3, r3, #1
 80043b6:	b2d8      	uxtb	r0, r3
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	440b      	add	r3, r1
 80043c6:	3350      	adds	r3, #80	; 0x50
 80043c8:	4602      	mov	r2, r0
 80043ca:	701a      	strb	r2, [r3, #0]
      break;
 80043cc:	e001      	b.n	80043d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80043d2:	bf00      	nop
  }
}
 80043d4:	bf00      	nop
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	1ff80000 	.word	0x1ff80000

080043e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800440c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d113      	bne.n	8004440 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d10a      	bne.n	8004438 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004430:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f013 fdee 	bl	8018014 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f043 0302 	orr.w	r3, r3, #2
 800443e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d147      	bne.n	80044da <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f043 0308 	orr.w	r3, r3, #8
 8004450:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b04      	cmp	r3, #4
 800445a:	d129      	bne.n	80044b0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d113      	bne.n	800448c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800446a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800446e:	d106      	bne.n	800447e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f007 f9aa 	bl	800b7d0 <USB_InitFSLSPClkSel>
 800447c:	e011      	b.n	80044a2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f007 f9a3 	bl	800b7d0 <USB_InitFSLSPClkSel>
 800448a:	e00a      	b.n	80044a2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d106      	bne.n	80044a2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800449a:	461a      	mov	r2, r3
 800449c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044a0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f013 fde4 	bl	8018070 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f013 fdb3 	bl	8018014 <HAL_HCD_Connect_Callback>
 80044ae:	e014      	b.n	80044da <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f013 fdeb 	bl	801808c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80044c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044c8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80044d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d103      	bne.n	80044ec <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f043 0320 	orr.w	r3, r3, #32
 80044ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07f      	b.n	8004612 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f012 feb0 	bl	801728c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004550:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004560:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	e006      	b.n	8004588 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004586:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d104      	bne.n	800459a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_I2C_Init+0x11c>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	ea42 0103 	orr.w	r1, r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69d9      	ldr	r1, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	02008000 	.word	0x02008000

08004620 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e021      	b.n	8004676 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	; 0x24
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f012 fe96 	bl	801737c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	461a      	mov	r2, r3
 800468e:	4603      	mov	r3, r0
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	460b      	mov	r3, r1
 8004694:	813b      	strh	r3, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	f040 80f9 	bne.w	800489a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_I2C_Mem_Write+0x34>
 80046ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0ed      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_I2C_Mem_Write+0x4e>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0e6      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046d6:	f7fc fe33 	bl	8001340 <HAL_GetTick>
 80046da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	2319      	movs	r3, #25
 80046e2:	2201      	movs	r2, #1
 80046e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fad1 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d1      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2221      	movs	r2, #33	; 0x21
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004720:	88f8      	ldrh	r0, [r7, #6]
 8004722:	893a      	ldrh	r2, [r7, #8]
 8004724:	8979      	ldrh	r1, [r7, #10]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	4603      	mov	r3, r0
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f9e1 	bl	8004af8 <I2C_RequestMemoryWrite>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0a9      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2bff      	cmp	r3, #255	; 0xff
 8004750:	d90e      	bls.n	8004770 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	22ff      	movs	r2, #255	; 0xff
 8004756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	b2da      	uxtb	r2, r3
 800475e:	8979      	ldrh	r1, [r7, #10]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fbb3 	bl	8004ed4 <I2C_TransferConfig>
 800476e:	e00f      	b.n	8004790 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	b2da      	uxtb	r2, r3
 8004780:	8979      	ldrh	r1, [r7, #10]
 8004782:	2300      	movs	r3, #0
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fba2 	bl	8004ed4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fabb 	bl	8004d10 <I2C_WaitOnTXISFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e07b      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d034      	beq.n	8004848 <HAL_I2C_Mem_Write+0x1c8>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d130      	bne.n	8004848 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	2200      	movs	r2, #0
 80047ee:	2180      	movs	r1, #128	; 0x80
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fa4d 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e04d      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	2bff      	cmp	r3, #255	; 0xff
 8004808:	d90e      	bls.n	8004828 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	; 0xff
 800480e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	b2da      	uxtb	r2, r3
 8004816:	8979      	ldrh	r1, [r7, #10]
 8004818:	2300      	movs	r3, #0
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fb57 	bl	8004ed4 <I2C_TransferConfig>
 8004826:	e00f      	b.n	8004848 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	b2da      	uxtb	r2, r3
 8004838:	8979      	ldrh	r1, [r7, #10]
 800483a:	2300      	movs	r3, #0
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fb46 	bl	8004ed4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d19e      	bne.n	8004790 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fa9a 	bl	8004d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e01a      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2220      	movs	r2, #32
 800486c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_I2C_Mem_Write+0x224>)
 800487a:	400b      	ands	r3, r1
 800487c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	fe00e800 	.word	0xfe00e800

080048a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	4608      	mov	r0, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	817b      	strh	r3, [r7, #10]
 80048ba:	460b      	mov	r3, r1
 80048bc:	813b      	strh	r3, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	f040 80fd 	bne.w	8004aca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_I2C_Mem_Read+0x34>
 80048d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0f1      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_I2C_Mem_Read+0x4e>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0ea      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048fe:	f7fc fd1f 	bl	8001340 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f9bd 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d5      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2222      	movs	r2, #34	; 0x22
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004948:	88f8      	ldrh	r0, [r7, #6]
 800494a:	893a      	ldrh	r2, [r7, #8]
 800494c:	8979      	ldrh	r1, [r7, #10]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4603      	mov	r3, r0
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f921 	bl	8004ba0 <I2C_RequestMemoryRead>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0ad      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d90e      	bls.n	8004998 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	b2da      	uxtb	r2, r3
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	4b52      	ldr	r3, [pc, #328]	; (8004ad4 <HAL_I2C_Mem_Read+0x22c>)
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fa9f 	bl	8004ed4 <I2C_TransferConfig>
 8004996:	e00f      	b.n	80049b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	8979      	ldrh	r1, [r7, #10]
 80049aa:	4b4a      	ldr	r3, [pc, #296]	; (8004ad4 <HAL_I2C_Mem_Read+0x22c>)
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fa8e 	bl	8004ed4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	2200      	movs	r2, #0
 80049c0:	2104      	movs	r1, #4
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f964 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07c      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d034      	beq.n	8004a78 <HAL_I2C_Mem_Read+0x1d0>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d130      	bne.n	8004a78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f935 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e04d      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2bff      	cmp	r3, #255	; 0xff
 8004a38:	d90e      	bls.n	8004a58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	22ff      	movs	r2, #255	; 0xff
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	8979      	ldrh	r1, [r7, #10]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa3f 	bl	8004ed4 <I2C_TransferConfig>
 8004a56:	e00f      	b.n	8004a78 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	8979      	ldrh	r1, [r7, #10]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa2e 	bl	8004ed4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d19a      	bne.n	80049b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f982 	bl	8004d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e01a      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_I2C_Mem_Read+0x230>)
 8004aaa:	400b      	ands	r3, r1
 8004aac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	80002400 	.word	0x80002400
 8004ad8:	fe00e800 	.word	0xfe00e800

08004adc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aea:	b2db      	uxtb	r3, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <I2C_RequestMemoryWrite+0xa4>)
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f9d7 	bl	8004ed4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	69b9      	ldr	r1, [r7, #24]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f8f0 	bl	8004d10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e02c      	b.n	8004b94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	629a      	str	r2, [r3, #40]	; 0x28
 8004b4a:	e015      	b.n	8004b78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8d6 	bl	8004d10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e012      	b.n	8004b94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b6e:	893b      	ldrh	r3, [r7, #8]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f884 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	80002000 	.word	0x80002000

08004ba0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	817b      	strh	r3, [r7, #10]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	813b      	strh	r3, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	8979      	ldrh	r1, [r7, #10]
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <I2C_RequestMemoryRead+0xa4>)
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f984 	bl	8004ed4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	69b9      	ldr	r1, [r7, #24]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f89d 	bl	8004d10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02c      	b.n	8004c3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d105      	bne.n	8004bf2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004be6:	893b      	ldrh	r3, [r7, #8]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf0:	e015      	b.n	8004c1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bf2:	893b      	ldrh	r3, [r7, #8]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f883 	bl	8004d10 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e012      	b.n	8004c3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2140      	movs	r1, #64	; 0x40
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f831 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	80002000 	.word	0x80002000

08004c48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d103      	bne.n	8004c66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2200      	movs	r2, #0
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d007      	beq.n	8004c84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	619a      	str	r2, [r3, #24]
  }
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	e022      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d01e      	beq.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fc fb49 	bl	8001340 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e00f      	b.n	8004d08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d0cd      	beq.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d1c:	e02c      	b.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f870 	bl	8004e08 <I2C_IsAcknowledgeFailed>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e02a      	b.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d01e      	beq.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fc fb01 	bl	8001340 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d113      	bne.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d1cb      	bne.n	8004d1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9c:	e028      	b.n	8004df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f830 	bl	8004e08 <I2C_IsAcknowledgeFailed>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e026      	b.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fc fac5 	bl	8001340 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e007      	b.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d1cf      	bne.n	8004d9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d151      	bne.n	8004ec6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e22:	e022      	b.n	8004e6a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d01e      	beq.n	8004e6a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2c:	f7fc fa88 	bl	8001340 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <I2C_IsAcknowledgeFailed+0x3a>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d113      	bne.n	8004e6a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e02e      	b.n	8004ec8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d1d5      	bne.n	8004e24 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2220      	movs	r2, #32
 8004e86:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff fedd 	bl	8004c48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f043 0204 	orr.w	r2, r3, #4
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	fe00e800 	.word	0xfe00e800

08004ed4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	817b      	strh	r3, [r7, #10]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	0d5b      	lsrs	r3, r3, #21
 8004ef0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <I2C_TransferConfig+0x58>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	ea02 0103 	and.w	r1, r2, r3
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f04:	7a7b      	ldrb	r3, [r7, #9]
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	03ff63ff 	.word	0x03ff63ff

08004f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d138      	bne.n	8004fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e032      	b.n	8004fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d139      	bne.n	8005050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e033      	b.n	8005052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2224      	movs	r2, #36	; 0x24
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005050:	2302      	movs	r3, #2
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0bf      	b.n	80051f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f00f f912 	bl	80142b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80050a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b4a      	ldr	r3, [pc, #296]	; (80051fc <HAL_LTDC_Init+0x19c>)
 80050d4:	400b      	ands	r3, r1
 80050d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68d9      	ldr	r1, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <HAL_LTDC_Init+0x19c>)
 8005102:	400b      	ands	r3, r1
 8005104:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68d9      	ldr	r1, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6919      	ldr	r1, [r3, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b33      	ldr	r3, [pc, #204]	; (80051fc <HAL_LTDC_Init+0x19c>)
 8005130:	400b      	ands	r3, r1
 8005132:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6919      	ldr	r1, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b27      	ldr	r3, [pc, #156]	; (80051fc <HAL_LTDC_Init+0x19c>)
 800515e:	400b      	ands	r3, r1
 8005160:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6959      	ldr	r1, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0206 	orr.w	r2, r2, #6
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	f000f800 	.word	0xf000f800

08005200 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f00f f919 	bl	8014440 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d023      	beq.n	800529a <HAL_LTDC_IRQHandler+0x6a>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01e      	beq.n	800529a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0204 	bic.w	r2, r2, #4
 800526a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2204      	movs	r2, #4
 8005272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800527a:	f043 0201 	orr.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2204      	movs	r2, #4
 8005288:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f86f 	bl	8005378 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d023      	beq.n	80052ec <HAL_LTDC_IRQHandler+0xbc>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01e      	beq.n	80052ec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0202 	bic.w	r2, r2, #2
 80052bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2202      	movs	r2, #2
 80052c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052cc:	f043 0202 	orr.w	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f846 	bl	8005378 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d01b      	beq.n	800532e <HAL_LTDC_IRQHandler+0xfe>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d016      	beq.n	800532e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2201      	movs	r2, #1
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f010 f8b9 	bl	80154a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <HAL_LTDC_IRQHandler+0x140>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d016      	beq.n	8005370 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0208 	bic.w	r2, r2, #8
 8005350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2208      	movs	r2, #8
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f80e 	bl	800538c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053a0:	b5b0      	push	{r4, r5, r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_LTDC_ConfigLayer+0x1a>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e02c      	b.n	8005414 <HAL_LTDC_ConfigLayer+0x74>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2134      	movs	r1, #52	; 0x34
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	4413      	add	r3, r2
 80053d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4614      	mov	r4, r2
 80053de:	461d      	mov	r5, r3
 80053e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f8cf 	bl	8005598 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2201      	movs	r2, #1
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bdb0      	pop	{r4, r5, r7, pc}

0800541c <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 800541c:	b480      	push	{r7}
 800541e:	b089      	sub	sp, #36	; 0x24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_LTDC_SetPitch+0x1a>
 8005432:	2302      	movs	r3, #2
 8005434:	e06e      	b.n	8005514 <HAL_LTDC_SetPitch+0xf8>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2134      	movs	r1, #52	; 0x34
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	3348      	adds	r3, #72	; 0x48
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 800545e:	2304      	movs	r3, #4
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e016      	b.n	8005492 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d102      	bne.n	8005470 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800546a:	2303      	movs	r3, #3
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e010      	b.n	8005492 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b04      	cmp	r3, #4
 8005474:	d008      	beq.n	8005488 <HAL_LTDC_SetPitch+0x6c>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d005      	beq.n	8005488 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d002      	beq.n	8005488 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b07      	cmp	r3, #7
 8005486:	d102      	bne.n	800548e <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005488:	2302      	movs	r3, #2
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e001      	b.n	8005492 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 800548e:	2301      	movs	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	01db      	lsls	r3, r3, #7
 80054a8:	4413      	add	r3, r2
 80054aa:	3384      	adds	r3, #132	; 0x84
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	01db      	lsls	r3, r3, #7
 80054b8:	440b      	add	r3, r1
 80054ba:	3384      	adds	r3, #132	; 0x84
 80054bc:	4619      	mov	r1, r3
 80054be:	4b18      	ldr	r3, [pc, #96]	; (8005520 <HAL_LTDC_SetPitch+0x104>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <HAL_LTDC_SetPitch+0x108>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_LTDC_SetPitch+0x108>)
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	4413      	add	r3, r2
 80054dc:	3384      	adds	r3, #132	; 0x84
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4619      	mov	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	01db      	lsls	r3, r3, #7
 80054ea:	440b      	add	r3, r1
 80054ec:	3384      	adds	r3, #132	; 0x84
 80054ee:	4619      	mov	r1, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_LTDC_SetPitch+0x108>)
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_LTDC_SetPitch+0x108>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3724      	adds	r7, #36	; 0x24
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000ffff 	.word	0xe000ffff
 8005524:	40016800 	.word	0x40016800

08005528 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_LTDC_ProgramLineEvent+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e023      	b.n	8005588 <HAL_LTDC_ProgramLineEvent+0x60>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005560:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40016800 	.word	0x40016800

08005598 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b4:	4413      	add	r3, r2
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	01db      	lsls	r3, r3, #7
 80055c4:	4413      	add	r3, r2
 80055c6:	3384      	adds	r3, #132	; 0x84
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	4611      	mov	r1, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	01d2      	lsls	r2, r2, #7
 80055d4:	440a      	add	r2, r1
 80055d6:	3284      	adds	r2, #132	; 0x84
 80055d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ee:	4413      	add	r3, r2
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	440b      	add	r3, r1
 80055fe:	3384      	adds	r3, #132	; 0x84
 8005600:	4619      	mov	r1, r3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005616:	4413      	add	r3, r2
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	01db      	lsls	r3, r3, #7
 8005626:	4413      	add	r3, r2
 8005628:	3384      	adds	r3, #132	; 0x84
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	4611      	mov	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	01d2      	lsls	r2, r2, #7
 8005636:	440a      	add	r2, r1
 8005638:	3284      	adds	r2, #132	; 0x84
 800563a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800563e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800564e:	4413      	add	r3, r2
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	01db      	lsls	r3, r3, #7
 800565c:	440b      	add	r3, r1
 800565e:	3384      	adds	r3, #132	; 0x84
 8005660:	4619      	mov	r1, r3
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4313      	orrs	r3, r2
 8005666:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	01db      	lsls	r3, r3, #7
 8005672:	4413      	add	r3, r2
 8005674:	3384      	adds	r3, #132	; 0x84
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	4611      	mov	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	01d2      	lsls	r2, r2, #7
 8005682:	440a      	add	r2, r1
 8005684:	3284      	adds	r2, #132	; 0x84
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	01db      	lsls	r3, r3, #7
 8005696:	4413      	add	r3, r2
 8005698:	3384      	adds	r3, #132	; 0x84
 800569a:	461a      	mov	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	061b      	lsls	r3, r3, #24
 80056bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	01db      	lsls	r3, r3, #7
 80056c8:	4413      	add	r3, r2
 80056ca:	3384      	adds	r3, #132	; 0x84
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	01db      	lsls	r3, r3, #7
 80056d8:	4413      	add	r3, r2
 80056da:	3384      	adds	r3, #132	; 0x84
 80056dc:	461a      	mov	r2, r3
 80056de:	2300      	movs	r3, #0
 80056e0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e8:	461a      	mov	r2, r3
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	440b      	add	r3, r1
 80056fe:	3384      	adds	r3, #132	; 0x84
 8005700:	4619      	mov	r1, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	4413      	add	r3, r2
 8005714:	3384      	adds	r3, #132	; 0x84
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	4611      	mov	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	01d2      	lsls	r2, r2, #7
 8005722:	440a      	add	r2, r1
 8005724:	3284      	adds	r2, #132	; 0x84
 8005726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800572a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	01db      	lsls	r3, r3, #7
 8005736:	4413      	add	r3, r2
 8005738:	3384      	adds	r3, #132	; 0x84
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	01db      	lsls	r3, r3, #7
 800574c:	4413      	add	r3, r2
 800574e:	3384      	adds	r3, #132	; 0x84
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	01db      	lsls	r3, r3, #7
 800575c:	440b      	add	r3, r1
 800575e:	3384      	adds	r3, #132	; 0x84
 8005760:	4619      	mov	r1, r3
 8005762:	4b58      	ldr	r3, [pc, #352]	; (80058c4 <LTDC_SetConfig+0x32c>)
 8005764:	4013      	ands	r3, r2
 8005766:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	6809      	ldr	r1, [r1, #0]
 8005774:	4608      	mov	r0, r1
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	01c9      	lsls	r1, r1, #7
 800577a:	4401      	add	r1, r0
 800577c:	3184      	adds	r1, #132	; 0x84
 800577e:	4313      	orrs	r3, r2
 8005780:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	01db      	lsls	r3, r3, #7
 800578c:	4413      	add	r3, r2
 800578e:	3384      	adds	r3, #132	; 0x84
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	01db      	lsls	r3, r3, #7
 800579c:	4413      	add	r3, r2
 800579e:	3384      	adds	r3, #132	; 0x84
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	01db      	lsls	r3, r3, #7
 80057b0:	4413      	add	r3, r2
 80057b2:	3384      	adds	r3, #132	; 0x84
 80057b4:	461a      	mov	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80057c4:	2304      	movs	r3, #4
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e01b      	b.n	8005802 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80057d2:	2303      	movs	r3, #3
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e014      	b.n	8005802 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d00b      	beq.n	80057f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d007      	beq.n	80057f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d003      	beq.n	80057f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057f4:	2b07      	cmp	r3, #7
 80057f6:	d102      	bne.n	80057fe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80057f8:	2302      	movs	r3, #2
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e001      	b.n	8005802 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	01db      	lsls	r3, r3, #7
 800580c:	4413      	add	r3, r2
 800580e:	3384      	adds	r3, #132	; 0x84
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	4611      	mov	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	01d2      	lsls	r2, r2, #7
 800581c:	440a      	add	r2, r1
 800581e:	3284      	adds	r2, #132	; 0x84
 8005820:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005824:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	041a      	lsls	r2, r3, #16
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6859      	ldr	r1, [r3, #4]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1acb      	subs	r3, r1, r3
 800583c:	69f9      	ldr	r1, [r7, #28]
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	3303      	adds	r3, #3
 8005844:	68f9      	ldr	r1, [r7, #12]
 8005846:	6809      	ldr	r1, [r1, #0]
 8005848:	4608      	mov	r0, r1
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	01c9      	lsls	r1, r1, #7
 800584e:	4401      	add	r1, r0
 8005850:	3184      	adds	r1, #132	; 0x84
 8005852:	4313      	orrs	r3, r2
 8005854:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	01db      	lsls	r3, r3, #7
 8005860:	4413      	add	r3, r2
 8005862:	3384      	adds	r3, #132	; 0x84
 8005864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	01db      	lsls	r3, r3, #7
 8005870:	440b      	add	r3, r1
 8005872:	3384      	adds	r3, #132	; 0x84
 8005874:	4619      	mov	r1, r3
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <LTDC_SetConfig+0x330>)
 8005878:	4013      	ands	r3, r2
 800587a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	01db      	lsls	r3, r3, #7
 8005886:	4413      	add	r3, r2
 8005888:	3384      	adds	r3, #132	; 0x84
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	01db      	lsls	r3, r3, #7
 800589c:	4413      	add	r3, r2
 800589e:	3384      	adds	r3, #132	; 0x84
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	4611      	mov	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	01d2      	lsls	r2, r2, #7
 80058ac:	440a      	add	r2, r1
 80058ae:	3284      	adds	r2, #132	; 0x84
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	6013      	str	r3, [r2, #0]
}
 80058b6:	bf00      	nop
 80058b8:	3724      	adds	r7, #36	; 0x24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	fffff8f8 	.word	0xfffff8f8
 80058c8:	fffff800 	.word	0xfffff800

080058cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40007000 	.word	0x40007000

080058ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80058f6:	4b23      	ldr	r3, [pc, #140]	; (8005984 <HAL_PWREx_EnableOverDrive+0x98>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <HAL_PWREx_EnableOverDrive+0x98>)
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005900:	6413      	str	r3, [r2, #64]	; 0x40
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_PWREx_EnableOverDrive+0x98>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800590e:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005918:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800591a:	f7fb fd11 	bl	8001340 <HAL_GetTick>
 800591e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005920:	e009      	b.n	8005936 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005922:	f7fb fd0d 	bl	8001340 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005930:	d901      	bls.n	8005936 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e022      	b.n	800597c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800593e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005942:	d1ee      	bne.n	8005922 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <HAL_PWREx_EnableOverDrive+0x9c>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005950:	f7fb fcf6 	bl	8001340 <HAL_GetTick>
 8005954:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005956:	e009      	b.n	800596c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005958:	f7fb fcf2 	bl	8001340 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005966:	d901      	bls.n	800596c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e007      	b.n	800597c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_PWREx_EnableOverDrive+0x9c>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005978:	d1ee      	bne.n	8005958 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	40007000 	.word	0x40007000

0800598c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005998:	f7fb fcd2 	bl	8001340 <HAL_GetTick>
 800599c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e073      	b.n	8005a90 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_QSPI_Init+0x2c>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e06b      	b.n	8005a90 <HAL_QSPI_Init+0x104>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f011 fd05 	bl	80173e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80059da:	f241 3188 	movw	r1, #5000	; 0x1388
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f85e 	bl	8005aa0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	021a      	lsls	r2, r3, #8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2120      	movs	r1, #32
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f856 	bl	8005abc <QSPI_WaitFlagStateUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d135      	bne.n	8005a86 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_QSPI_Init+0x10c>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6852      	ldr	r2, [r2, #4]
 8005a28:	0611      	lsls	r1, r2, #24
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68d2      	ldr	r2, [r2, #12]
 8005a2e:	4311      	orrs	r1, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	69d2      	ldr	r2, [r2, #28]
 8005a34:	4311      	orrs	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6a12      	ldr	r2, [r2, #32]
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <HAL_QSPI_Init+0x110>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6912      	ldr	r2, [r2, #16]
 8005a52:	0411      	lsls	r1, r2, #16
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6952      	ldr	r2, [r2, #20]
 8005a58:	4311      	orrs	r1, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6992      	ldr	r2, [r2, #24]
 8005a5e:	4311      	orrs	r1, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	00ffff2f 	.word	0x00ffff2f
 8005a9c:	ffe0f8fe 	.word	0xffe0f8fe

08005aa0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005acc:	e01a      	b.n	8005b04 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d016      	beq.n	8005b04 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005adc:	f7fb fc30 	bl	8001340 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d20b      	bcs.n	8005b04 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2204      	movs	r2, #4
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f043 0201 	orr.w	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e00e      	b.n	8005b22 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	2300      	moveq	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d1d6      	bne.n	8005ace <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005b34:	2300      	movs	r3, #0
 8005b36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e25c      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8087 	beq.w	8005c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b50:	4b96      	ldr	r3, [pc, #600]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d00c      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b5c:	4b93      	ldr	r3, [pc, #588]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 030c 	and.w	r3, r3, #12
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d112      	bne.n	8005b8e <HAL_RCC_OscConfig+0x62>
 8005b68:	4b90      	ldr	r3, [pc, #576]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b74:	d10b      	bne.n	8005b8e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b76:	4b8d      	ldr	r3, [pc, #564]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d06c      	beq.n	8005c5c <HAL_RCC_OscConfig+0x130>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d168      	bne.n	8005c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e236      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b96:	d106      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x7a>
 8005b98:	4b84      	ldr	r3, [pc, #528]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a83      	ldr	r2, [pc, #524]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	e02e      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x9c>
 8005bae:	4b7f      	ldr	r3, [pc, #508]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a7e      	ldr	r2, [pc, #504]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b7c      	ldr	r3, [pc, #496]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7b      	ldr	r2, [pc, #492]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e01d      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0xc0>
 8005bd2:	4b76      	ldr	r3, [pc, #472]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a75      	ldr	r2, [pc, #468]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4b73      	ldr	r3, [pc, #460]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a72      	ldr	r2, [pc, #456]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8>
 8005bec:	4b6f      	ldr	r3, [pc, #444]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b6c      	ldr	r3, [pc, #432]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a6b      	ldr	r2, [pc, #428]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fb fb98 	bl	8001340 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fb fb94 	bl	8001340 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1ea      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c26:	4b61      	ldr	r3, [pc, #388]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0xe8>
 8005c32:	e014      	b.n	8005c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fb fb84 	bl	8001340 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7fb fb80 	bl	8001340 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	; 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e1d6      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4e:	4b57      	ldr	r3, [pc, #348]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x110>
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d069      	beq.n	8005d3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c6a:	4b50      	ldr	r3, [pc, #320]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c76:	4b4d      	ldr	r3, [pc, #308]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d11c      	bne.n	8005cbc <HAL_RCC_OscConfig+0x190>
 8005c82:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d116      	bne.n	8005cbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x17a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e1aa      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca6:	4b41      	ldr	r3, [pc, #260]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	493d      	ldr	r1, [pc, #244]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cba:	e040      	b.n	8005d3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d023      	beq.n	8005d0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc4:	4b39      	ldr	r3, [pc, #228]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a38      	ldr	r2, [pc, #224]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fb fb36 	bl	8001340 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd8:	f7fb fb32 	bl	8001340 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e188      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cea:	4b30      	ldr	r3, [pc, #192]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4929      	ldr	r1, [pc, #164]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]
 8005d0a:	e018      	b.n	8005d3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d0c:	4b27      	ldr	r3, [pc, #156]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a26      	ldr	r2, [pc, #152]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7fb fb12 	bl	8001340 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d20:	f7fb fb0e 	bl	8001340 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e164      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d32:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d038      	beq.n	8005dbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d019      	beq.n	8005d86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d52:	4b16      	ldr	r3, [pc, #88]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fb faef 	bl	8001340 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d66:	f7fb faeb 	bl	8001340 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e141      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <HAL_RCC_OscConfig+0x23a>
 8005d84:	e01a      	b.n	8005dbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	4a08      	ldr	r2, [pc, #32]	; (8005dac <HAL_RCC_OscConfig+0x280>)
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fb fad5 	bl	8001340 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9a:	f7fb fad1 	bl	8001340 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d903      	bls.n	8005db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e127      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
 8005dac:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db0:	4b94      	ldr	r3, [pc, #592]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ee      	bne.n	8005d9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a4 	beq.w	8005f12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dca:	4b8e      	ldr	r3, [pc, #568]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd6:	4b8b      	ldr	r3, [pc, #556]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	4a8a      	ldr	r2, [pc, #552]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6413      	str	r3, [r2, #64]	; 0x40
 8005de2:	4b88      	ldr	r3, [pc, #544]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005dee:	2301      	movs	r3, #1
 8005df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005df2:	4b85      	ldr	r3, [pc, #532]	; (8006008 <HAL_RCC_OscConfig+0x4dc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d118      	bne.n	8005e30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005dfe:	4b82      	ldr	r3, [pc, #520]	; (8006008 <HAL_RCC_OscConfig+0x4dc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a81      	ldr	r2, [pc, #516]	; (8006008 <HAL_RCC_OscConfig+0x4dc>)
 8005e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e0a:	f7fb fa99 	bl	8001340 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e12:	f7fb fa95 	bl	8001340 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b64      	cmp	r3, #100	; 0x64
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e0eb      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e24:	4b78      	ldr	r3, [pc, #480]	; (8006008 <HAL_RCC_OscConfig+0x4dc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d106      	bne.n	8005e46 <HAL_RCC_OscConfig+0x31a>
 8005e38:	4b72      	ldr	r3, [pc, #456]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	4a71      	ldr	r2, [pc, #452]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	6713      	str	r3, [r2, #112]	; 0x70
 8005e44:	e02d      	b.n	8005ea2 <HAL_RCC_OscConfig+0x376>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x33c>
 8005e4e:	4b6d      	ldr	r3, [pc, #436]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	4a6c      	ldr	r2, [pc, #432]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	4a69      	ldr	r2, [pc, #420]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	6713      	str	r3, [r2, #112]	; 0x70
 8005e66:	e01c      	b.n	8005ea2 <HAL_RCC_OscConfig+0x376>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b05      	cmp	r3, #5
 8005e6e:	d10c      	bne.n	8005e8a <HAL_RCC_OscConfig+0x35e>
 8005e70:	4b64      	ldr	r3, [pc, #400]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	4a63      	ldr	r2, [pc, #396]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e76:	f043 0304 	orr.w	r3, r3, #4
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	4a60      	ldr	r2, [pc, #384]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	6713      	str	r3, [r2, #112]	; 0x70
 8005e88:	e00b      	b.n	8005ea2 <HAL_RCC_OscConfig+0x376>
 8005e8a:	4b5e      	ldr	r3, [pc, #376]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	4a5d      	ldr	r2, [pc, #372]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	6713      	str	r3, [r2, #112]	; 0x70
 8005e96:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	4a5a      	ldr	r2, [pc, #360]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005e9c:	f023 0304 	bic.w	r3, r3, #4
 8005ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d015      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eaa:	f7fb fa49 	bl	8001340 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb0:	e00a      	b.n	8005ec8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb2:	f7fb fa45 	bl	8001340 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e099      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec8:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0ee      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x386>
 8005ed4:	e014      	b.n	8005f00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed6:	f7fb fa33 	bl	8001340 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fb fa2f 	bl	8001340 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e083      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef4:	4b43      	ldr	r3, [pc, #268]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1ee      	bne.n	8005ede <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f06:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	4a3e      	ldr	r2, [pc, #248]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06f      	beq.n	8005ffa <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f1a:	4b3a      	ldr	r3, [pc, #232]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d067      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d149      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2e:	4b35      	ldr	r3, [pc, #212]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a34      	ldr	r2, [pc, #208]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fb fa01 	bl	8001340 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fb f9fd 	bl	8001340 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e053      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	019b      	lsls	r3, r3, #6
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	4313      	orrs	r3, r2
 8005f86:	4a1f      	ldr	r2, [pc, #124]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f8c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1c      	ldr	r2, [pc, #112]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fb f9d1 	bl	8001340 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fb f9cd 	bl	8001340 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e023      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb4:	4b13      	ldr	r3, [pc, #76]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x476>
 8005fc0:	e01b      	b.n	8005ffa <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a0f      	ldr	r2, [pc, #60]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fb f9b7 	bl	8001340 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd6:	f7fb f9b3 	bl	8001340 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e009      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_RCC_OscConfig+0x4d8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x4aa>
 8005ff4:	e001      	b.n	8005ffa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40023800 	.word	0x40023800
 8006008:	40007000 	.word	0x40007000

0800600c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0ce      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006024:	4b69      	ldr	r3, [pc, #420]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d910      	bls.n	8006054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006032:	4b66      	ldr	r3, [pc, #408]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 020f 	bic.w	r2, r3, #15
 800603a:	4964      	ldr	r1, [pc, #400]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b62      	ldr	r3, [pc, #392]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0b6      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800606c:	4b58      	ldr	r3, [pc, #352]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006084:	4b52      	ldr	r3, [pc, #328]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4a51      	ldr	r2, [pc, #324]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800608e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006090:	4b4f      	ldr	r3, [pc, #316]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	494c      	ldr	r1, [pc, #304]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d040      	beq.n	8006130 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d115      	bne.n	80060ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e07d      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d107      	bne.n	80060de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ce:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e071      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060de:	4b3c      	ldr	r3, [pc, #240]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e069      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ee:	4b38      	ldr	r3, [pc, #224]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f023 0203 	bic.w	r2, r3, #3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	4935      	ldr	r1, [pc, #212]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006100:	f7fb f91e 	bl	8001340 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006106:	e00a      	b.n	800611e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006108:	f7fb f91a 	bl	8001340 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f241 3288 	movw	r2, #5000	; 0x1388
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e051      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611e:	4b2c      	ldr	r3, [pc, #176]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 020c 	and.w	r2, r3, #12
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	429a      	cmp	r2, r3
 800612e:	d1eb      	bne.n	8006108 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006130:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d210      	bcs.n	8006160 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613e:	4b23      	ldr	r3, [pc, #140]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 020f 	bic.w	r2, r3, #15
 8006146:	4921      	ldr	r1, [pc, #132]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800614e:	4b1f      	ldr	r3, [pc, #124]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d001      	beq.n	8006160 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e030      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4915      	ldr	r1, [pc, #84]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800617a:	4313      	orrs	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	490d      	ldr	r1, [pc, #52]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	4313      	orrs	r3, r2
 800619c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800619e:	f000 f81d 	bl	80061dc <HAL_RCC_GetSysClockFreq>
 80061a2:	4601      	mov	r1, r0
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <HAL_RCC_ClockConfig+0x1c8>)
 80061b0:	5cd3      	ldrb	r3, [r2, r3]
 80061b2:	fa21 f303 	lsr.w	r3, r1, r3
 80061b6:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <HAL_RCC_ClockConfig+0x1cc>)
 80061b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80061ba:	2000      	movs	r0, #0
 80061bc:	f011 fce6 	bl	8017b8c <HAL_InitTick>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40023c00 	.word	0x40023c00
 80061d0:	40023800 	.word	0x40023800
 80061d4:	080203d4 	.word	0x080203d4
 80061d8:	20000064 	.word	0x20000064

080061dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	2300      	movs	r3, #0
 80061ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061f2:	4b50      	ldr	r3, [pc, #320]	; (8006334 <HAL_RCC_GetSysClockFreq+0x158>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d007      	beq.n	800620e <HAL_RCC_GetSysClockFreq+0x32>
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d008      	beq.n	8006214 <HAL_RCC_GetSysClockFreq+0x38>
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 808d 	bne.w	8006322 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006208:	4b4b      	ldr	r3, [pc, #300]	; (8006338 <HAL_RCC_GetSysClockFreq+0x15c>)
 800620a:	60bb      	str	r3, [r7, #8]
       break;
 800620c:	e08c      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800620e:	4b4b      	ldr	r3, [pc, #300]	; (800633c <HAL_RCC_GetSysClockFreq+0x160>)
 8006210:	60bb      	str	r3, [r7, #8]
      break;
 8006212:	e089      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006214:	4b47      	ldr	r3, [pc, #284]	; (8006334 <HAL_RCC_GetSysClockFreq+0x158>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800621c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800621e:	4b45      	ldr	r3, [pc, #276]	; (8006334 <HAL_RCC_GetSysClockFreq+0x158>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d023      	beq.n	8006272 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622a:	4b42      	ldr	r3, [pc, #264]	; (8006334 <HAL_RCC_GetSysClockFreq+0x158>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	099b      	lsrs	r3, r3, #6
 8006230:	f04f 0400 	mov.w	r4, #0
 8006234:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	ea03 0501 	and.w	r5, r3, r1
 8006240:	ea04 0602 	and.w	r6, r4, r2
 8006244:	4a3d      	ldr	r2, [pc, #244]	; (800633c <HAL_RCC_GetSysClockFreq+0x160>)
 8006246:	fb02 f106 	mul.w	r1, r2, r6
 800624a:	2200      	movs	r2, #0
 800624c:	fb02 f205 	mul.w	r2, r2, r5
 8006250:	440a      	add	r2, r1
 8006252:	493a      	ldr	r1, [pc, #232]	; (800633c <HAL_RCC_GetSysClockFreq+0x160>)
 8006254:	fba5 0101 	umull	r0, r1, r5, r1
 8006258:	1853      	adds	r3, r2, r1
 800625a:	4619      	mov	r1, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f04f 0400 	mov.w	r4, #0
 8006262:	461a      	mov	r2, r3
 8006264:	4623      	mov	r3, r4
 8006266:	f7fa f823 	bl	80002b0 <__aeabi_uldivmod>
 800626a:	4603      	mov	r3, r0
 800626c:	460c      	mov	r4, r1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e049      	b.n	8006306 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006272:	4b30      	ldr	r3, [pc, #192]	; (8006334 <HAL_RCC_GetSysClockFreq+0x158>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	f04f 0400 	mov.w	r4, #0
 800627c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	ea03 0501 	and.w	r5, r3, r1
 8006288:	ea04 0602 	and.w	r6, r4, r2
 800628c:	4629      	mov	r1, r5
 800628e:	4632      	mov	r2, r6
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	f04f 0400 	mov.w	r4, #0
 8006298:	0154      	lsls	r4, r2, #5
 800629a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800629e:	014b      	lsls	r3, r1, #5
 80062a0:	4619      	mov	r1, r3
 80062a2:	4622      	mov	r2, r4
 80062a4:	1b49      	subs	r1, r1, r5
 80062a6:	eb62 0206 	sbc.w	r2, r2, r6
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	f04f 0400 	mov.w	r4, #0
 80062b2:	0194      	lsls	r4, r2, #6
 80062b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062b8:	018b      	lsls	r3, r1, #6
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	eb64 0402 	sbc.w	r4, r4, r2
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	00e2      	lsls	r2, r4, #3
 80062ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80062ce:	00d9      	lsls	r1, r3, #3
 80062d0:	460b      	mov	r3, r1
 80062d2:	4614      	mov	r4, r2
 80062d4:	195b      	adds	r3, r3, r5
 80062d6:	eb44 0406 	adc.w	r4, r4, r6
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	02a2      	lsls	r2, r4, #10
 80062e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80062e8:	0299      	lsls	r1, r3, #10
 80062ea:	460b      	mov	r3, r1
 80062ec:	4614      	mov	r4, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	4621      	mov	r1, r4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f04f 0400 	mov.w	r4, #0
 80062f8:	461a      	mov	r2, r3
 80062fa:	4623      	mov	r3, r4
 80062fc:	f7f9 ffd8 	bl	80002b0 <__aeabi_uldivmod>
 8006300:	4603      	mov	r3, r0
 8006302:	460c      	mov	r4, r1
 8006304:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <HAL_RCC_GetSysClockFreq+0x158>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	0c1b      	lsrs	r3, r3, #16
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	3301      	adds	r3, #1
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	fbb2 f3f3 	udiv	r3, r2, r3
 800631e:	60bb      	str	r3, [r7, #8]
      break;
 8006320:	e002      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006324:	60bb      	str	r3, [r7, #8]
      break;
 8006326:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006328:	68bb      	ldr	r3, [r7, #8]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006332:	bf00      	nop
 8006334:	40023800 	.word	0x40023800
 8006338:	00f42400 	.word	0x00f42400
 800633c:	017d7840 	.word	0x017d7840

08006340 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006344:	4b03      	ldr	r3, [pc, #12]	; (8006354 <HAL_RCC_GetHCLKFreq+0x14>)
 8006346:	681b      	ldr	r3, [r3, #0]
}
 8006348:	4618      	mov	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000064 	.word	0x20000064

08006358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800635c:	f7ff fff0 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8006360:	4601      	mov	r1, r0
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	0a9b      	lsrs	r3, r3, #10
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	4a03      	ldr	r2, [pc, #12]	; (800637c <HAL_RCC_GetPCLK1Freq+0x24>)
 800636e:	5cd3      	ldrb	r3, [r2, r3]
 8006370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006374:	4618      	mov	r0, r3
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40023800 	.word	0x40023800
 800637c:	080203e4 	.word	0x080203e4

08006380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006384:	f7ff ffdc 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8006388:	4601      	mov	r1, r0
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	0b5b      	lsrs	r3, r3, #13
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	4a03      	ldr	r2, [pc, #12]	; (80063a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006396:	5cd3      	ldrb	r3, [r2, r3]
 8006398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40023800 	.word	0x40023800
 80063a4:	080203e4 	.word	0x080203e4

080063a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220f      	movs	r2, #15
 80063b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <HAL_RCC_GetClockConfig+0x5c>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0203 	and.w	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <HAL_RCC_GetClockConfig+0x5c>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <HAL_RCC_GetClockConfig+0x5c>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <HAL_RCC_GetClockConfig+0x5c>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	08db      	lsrs	r3, r3, #3
 80063e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <HAL_RCC_GetClockConfig+0x60>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 020f 	and.w	r2, r3, #15
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	601a      	str	r2, [r3, #0]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	40023c00 	.word	0x40023c00

0800640c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d012      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006434:	4b69      	ldr	r3, [pc, #420]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4a68      	ldr	r2, [pc, #416]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800643a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800643e:	6093      	str	r3, [r2, #8]
 8006440:	4b66      	ldr	r3, [pc, #408]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	4964      	ldr	r1, [pc, #400]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006456:	2301      	movs	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d017      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006466:	4b5d      	ldr	r3, [pc, #372]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	4959      	ldr	r1, [pc, #356]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006484:	d101      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064a2:	4b4e      	ldr	r3, [pc, #312]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	494a      	ldr	r1, [pc, #296]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c0:	d101      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80064de:	2301      	movs	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 808b 	beq.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064f0:	4b3a      	ldr	r3, [pc, #232]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	4a39      	ldr	r2, [pc, #228]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fa:	6413      	str	r3, [r2, #64]	; 0x40
 80064fc:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006508:	4b35      	ldr	r3, [pc, #212]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a34      	ldr	r2, [pc, #208]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800650e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006514:	f7fa ff14 	bl	8001340 <HAL_GetTick>
 8006518:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800651a:	e008      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651c:	f7fa ff10 	bl	8001340 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	; 0x64
 8006528:	d901      	bls.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e355      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800652e:	4b2c      	ldr	r3, [pc, #176]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800653a:	4b28      	ldr	r3, [pc, #160]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d035      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d02e      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006558:	4b20      	ldr	r3, [pc, #128]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006560:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800656c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800656e:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006578:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800657a:	4a18      	ldr	r2, [pc, #96]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006580:	4b16      	ldr	r3, [pc, #88]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d114      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fa fed8 	bl	8001340 <HAL_GetTick>
 8006590:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006592:	e00a      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006594:	f7fa fed4 	bl	8001340 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e317      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065aa:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0ee      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c2:	d111      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065d2:	400b      	ands	r3, r1
 80065d4:	4901      	ldr	r1, [pc, #4]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	608b      	str	r3, [r1, #8]
 80065da:	e00b      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40007000 	.word	0x40007000
 80065e4:	0ffffcff 	.word	0x0ffffcff
 80065e8:	4bb0      	ldr	r3, [pc, #704]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4aaf      	ldr	r2, [pc, #700]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065f2:	6093      	str	r3, [r2, #8]
 80065f4:	4bad      	ldr	r3, [pc, #692]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006600:	49aa      	ldr	r1, [pc, #680]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	d010      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006612:	4ba6      	ldr	r3, [pc, #664]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006618:	4aa4      	ldr	r2, [pc, #656]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800661a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800661e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006622:	4ba2      	ldr	r3, [pc, #648]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006624:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	499f      	ldr	r1, [pc, #636]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006640:	4b9a      	ldr	r3, [pc, #616]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664e:	4997      	ldr	r1, [pc, #604]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006662:	4b92      	ldr	r3, [pc, #584]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006670:	498e      	ldr	r1, [pc, #568]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006684:	4b89      	ldr	r3, [pc, #548]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006692:	4986      	ldr	r1, [pc, #536]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066a6:	4b81      	ldr	r3, [pc, #516]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	497d      	ldr	r1, [pc, #500]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066c8:	4b78      	ldr	r3, [pc, #480]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ce:	f023 0203 	bic.w	r2, r3, #3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	4975      	ldr	r1, [pc, #468]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ea:	4b70      	ldr	r3, [pc, #448]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	f023 020c 	bic.w	r2, r3, #12
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	496c      	ldr	r1, [pc, #432]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800670c:	4b67      	ldr	r3, [pc, #412]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671a:	4964      	ldr	r1, [pc, #400]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800672e:	4b5f      	ldr	r3, [pc, #380]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	495b      	ldr	r1, [pc, #364]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006750:	4b56      	ldr	r3, [pc, #344]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	4953      	ldr	r1, [pc, #332]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006772:	4b4e      	ldr	r3, [pc, #312]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006778:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	494a      	ldr	r1, [pc, #296]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006794:	4b45      	ldr	r3, [pc, #276]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	4942      	ldr	r1, [pc, #264]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80067b6:	4b3d      	ldr	r3, [pc, #244]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	4939      	ldr	r1, [pc, #228]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067d8:	4b34      	ldr	r3, [pc, #208]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e6:	4931      	ldr	r1, [pc, #196]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d011      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067fa:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006808:	4928      	ldr	r1, [pc, #160]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006818:	d101      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800681a:	2301      	movs	r3, #1
 800681c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800682a:	2301      	movs	r3, #1
 800682c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800683a:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800683c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006840:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006848:	4918      	ldr	r1, [pc, #96]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800685c:	4b13      	ldr	r3, [pc, #76]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686c:	490f      	ldr	r1, [pc, #60]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d005      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006882:	f040 80d8 	bne.w	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a08      	ldr	r2, [pc, #32]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800688c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006892:	f7fa fd55 	bl	8001340 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006898:	e00a      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800689a:	f7fa fd51 	bl	8001340 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b64      	cmp	r3, #100	; 0x64
 80068a6:	d903      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e196      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80068ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068b0:	4b6c      	ldr	r3, [pc, #432]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ee      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d021      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11d      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068d0:	4b64      	ldr	r3, [pc, #400]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068de:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e4:	0e1b      	lsrs	r3, r3, #24
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	019a      	lsls	r2, r3, #6
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	431a      	orrs	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	061b      	lsls	r3, r3, #24
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	071b      	lsls	r3, r3, #28
 8006904:	4957      	ldr	r1, [pc, #348]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800692a:	2b00      	cmp	r3, #0
 800692c:	d02e      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006936:	d129      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006938:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006946:	4b47      	ldr	r3, [pc, #284]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694c:	0f1b      	lsrs	r3, r3, #28
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	019a      	lsls	r2, r3, #6
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	431a      	orrs	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	071b      	lsls	r3, r3, #28
 800696c:	493d      	ldr	r1, [pc, #244]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006974:	4b3b      	ldr	r3, [pc, #236]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800697a:	f023 021f 	bic.w	r2, r3, #31
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	3b01      	subs	r3, #1
 8006984:	4937      	ldr	r1, [pc, #220]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01d      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006998:	4b32      	ldr	r3, [pc, #200]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800699a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699e:	0e1b      	lsrs	r3, r3, #24
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069a6:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ac:	0f1b      	lsrs	r3, r3, #28
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	019a      	lsls	r2, r3, #6
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	431a      	orrs	r2, r3
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	061b      	lsls	r3, r3, #24
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	071b      	lsls	r3, r3, #28
 80069cc:	4925      	ldr	r1, [pc, #148]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d011      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	019a      	lsls	r2, r3, #6
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	071b      	lsls	r3, r3, #28
 80069fc:	4919      	ldr	r1, [pc, #100]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a04:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a10:	f7fa fc96 	bl	8001340 <HAL_GetTick>
 8006a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a18:	f7fa fc92 	bl	8001340 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e0d7      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	f040 80cd 	bne.w	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4a:	f7fa fc79 	bl	8001340 <HAL_GetTick>
 8006a4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a50:	e00a      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a52:	f7fa fc75 	bl	8001340 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b64      	cmp	r3, #100	; 0x64
 8006a5e:	d903      	bls.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e0ba      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006a64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a68:	4b5e      	ldr	r3, [pc, #376]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a74:	d0ed      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02e      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d12a      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a9e:	4b51      	ldr	r3, [pc, #324]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006aac:	4b4d      	ldr	r3, [pc, #308]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	0f1b      	lsrs	r3, r3, #28
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	019a      	lsls	r2, r3, #6
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	071b      	lsls	r3, r3, #28
 8006ad2:	4944      	ldr	r1, [pc, #272]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ada:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	493d      	ldr	r1, [pc, #244]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d022      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b08:	d11d      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b0a:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	0e1b      	lsrs	r3, r3, #24
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b18:	4b32      	ldr	r3, [pc, #200]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	019a      	lsls	r2, r3, #6
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	431a      	orrs	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	4929      	ldr	r1, [pc, #164]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d028      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b52:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	0e1b      	lsrs	r3, r3, #24
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b60:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b66:	0c1b      	lsrs	r3, r3, #16
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	019a      	lsls	r2, r3, #6
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	071b      	lsls	r3, r3, #28
 8006b86:	4917      	ldr	r1, [pc, #92]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b8e:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	4911      	ldr	r1, [pc, #68]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb0:	f7fa fbc6 	bl	8001340 <HAL_GetTick>
 8006bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bb8:	f7fa fbc2 	bl	8001340 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e007      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd6:	d1ef      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800

08006be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c06:	f040 8086 	bne.w	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006c0a:	4b8d      	ldr	r3, [pc, #564]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c20:	d03e      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c26:	d073      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d000      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006c2c:	e074      	b.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c2e:	4b84      	ldr	r3, [pc, #528]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c3a:	4b81      	ldr	r3, [pc, #516]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c42:	4a80      	ldr	r2, [pc, #512]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e007      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006c4c:	4b7c      	ldr	r3, [pc, #496]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c54:	4a7c      	ldr	r2, [pc, #496]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006c5c:	4b78      	ldr	r3, [pc, #480]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c62:	0e1b      	lsrs	r3, r3, #24
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006c6a:	4b75      	ldr	r3, [pc, #468]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	fb02 f203 	mul.w	r2, r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006c84:	4b6e      	ldr	r3, [pc, #440]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
        break;
 8006c9e:	e03b      	b.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006ca0:	4b67      	ldr	r3, [pc, #412]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d108      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cac:	4b64      	ldr	r3, [pc, #400]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb4:	4a63      	ldr	r2, [pc, #396]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	e007      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006cbe:	4b60      	ldr	r3, [pc, #384]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc6:	4a60      	ldr	r2, [pc, #384]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ccc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006cce:	4b5c      	ldr	r3, [pc, #368]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd4:	0e1b      	lsrs	r3, r3, #24
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006cdc:	4b58      	ldr	r3, [pc, #352]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	fb02 f203 	mul.w	r2, r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006cf6:	4b52      	ldr	r3, [pc, #328]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	617b      	str	r3, [r7, #20]
        break;
 8006d0e:	e003      	b.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d10:	4b4e      	ldr	r3, [pc, #312]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006d12:	617b      	str	r3, [r7, #20]
        break;
 8006d14:	e000      	b.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006d16:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1e:	f040 8086 	bne.w	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006d22:	4b47      	ldr	r3, [pc, #284]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d28:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d30:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d38:	d03e      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006d3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d3e:	d073      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d000      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006d44:	e074      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d46:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d108      	bne.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d52:	4b3b      	ldr	r3, [pc, #236]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d5a:	4a3a      	ldr	r2, [pc, #232]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e007      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d64:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d6c:	4a36      	ldr	r2, [pc, #216]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d74:	4b32      	ldr	r3, [pc, #200]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	0e1b      	lsrs	r3, r3, #24
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d82:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d88:	099b      	lsrs	r3, r3, #6
 8006d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	fb02 f203 	mul.w	r2, r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d9c:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da2:	0a1b      	lsrs	r3, r3, #8
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]
        break;
 8006db6:	e03b      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006db8:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d108      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dc4:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	e007      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dde:	4a1a      	ldr	r2, [pc, #104]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006de6:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006df4:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfa:	099b      	lsrs	r3, r3, #6
 8006dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	fb02 f203 	mul.w	r2, r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	617b      	str	r3, [r7, #20]
        break;
 8006e26:	e003      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006e2a:	617b      	str	r3, [r7, #20]
        break;
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006e2e:	bf00      	nop

  return frequency;
 8006e30:	697b      	ldr	r3, [r7, #20]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800
 8006e44:	00f42400 	.word	0x00f42400
 8006e48:	017d7840 	.word	0x017d7840
 8006e4c:	00bb8000 	.word	0x00bb8000

08006e50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e06b      	b.n	8006f3a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7f5b      	ldrb	r3, [r3, #29]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f010 fb46 	bl	8017504 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	22ca      	movs	r2, #202	; 0xca
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2253      	movs	r2, #83	; 0x53
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb00 	bl	8007494 <RTC_EnterInitMode>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	22ff      	movs	r2, #255	; 0xff
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e046      	b.n	8006f3a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6899      	ldr	r1, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <HAL_RTC_Init+0xf4>)
 8006eb8:	400b      	ands	r3, r1
 8006eba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6899      	ldr	r1, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68d2      	ldr	r2, [r2, #12]
 8006ee2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6919      	ldr	r1, [r3, #16]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	041a      	lsls	r2, r3, #16
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f06:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0208 	bic.w	r2, r2, #8
 8006f16:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	22ff      	movs	r2, #255	; 0xff
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006f38:	2300      	movs	r3, #0
  }
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	ff8fffbf 	.word	0xff8fffbf

08006f48 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	7f1b      	ldrb	r3, [r3, #28]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_RTC_SetTime+0x1c>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e0a8      	b.n	80070b6 <HAL_RTC_SetTime+0x16e>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d126      	bne.n	8006fc4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 faac 	bl	80074ec <RTC_ByteToBcd2>
 8006f94:	4603      	mov	r3, r0
 8006f96:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 faa5 	bl	80074ec <RTC_ByteToBcd2>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006fa6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	789b      	ldrb	r3, [r3, #2]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fa9d 	bl	80074ec <RTC_ByteToBcd2>
 8006fb2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006fb4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e018      	b.n	8006ff6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006fe4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006fea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	7b1b      	ldrb	r3, [r3, #12]
 8006ff0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	22ca      	movs	r2, #202	; 0xca
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2253      	movs	r2, #83	; 0x53
 8007004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa44 	bl	8007494 <RTC_EnterInitMode>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	22ff      	movs	r2, #255	; 0xff
 8007018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2204      	movs	r2, #4
 800701e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e045      	b.n	80070b6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	6979      	ldr	r1, [r7, #20]
 8007030:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <HAL_RTC_SetTime+0x178>)
 8007032:	400b      	ands	r3, r1
 8007034:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007044:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6899      	ldr	r1, [r3, #8]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800706c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d111      	bne.n	80070a0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f9e1 	bl	8007444 <HAL_RTC_WaitForSynchro>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2204      	movs	r2, #4
 8007094:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e00a      	b.n	80070b6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80070b4:	2300      	movs	r3, #0
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd90      	pop	{r4, r7, pc}
 80070be:	bf00      	nop
 80070c0:	007f7f7f 	.word	0x007f7f7f

080070c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	7f1b      	ldrb	r3, [r3, #28]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_RTC_SetDate+0x1c>
 80070dc:	2302      	movs	r3, #2
 80070de:	e092      	b.n	8007206 <HAL_RTC_SetDate+0x142>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2202      	movs	r2, #2
 80070ea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10e      	bne.n	8007110 <HAL_RTC_SetDate+0x4c>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	f023 0310 	bic.w	r3, r3, #16
 8007106:	b2db      	uxtb	r3, r3
 8007108:	330a      	adds	r3, #10
 800710a:	b2da      	uxtb	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11c      	bne.n	8007150 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	78db      	ldrb	r3, [r3, #3]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f9e6 	bl	80074ec <RTC_ByteToBcd2>
 8007120:	4603      	mov	r3, r0
 8007122:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 f9df 	bl	80074ec <RTC_ByteToBcd2>
 800712e:	4603      	mov	r3, r0
 8007130:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007132:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	789b      	ldrb	r3, [r3, #2]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f9d7 	bl	80074ec <RTC_ByteToBcd2>
 800713e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007140:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e00e      	b.n	800716e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	78db      	ldrb	r3, [r3, #3]
 8007154:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800715c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007162:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	22ca      	movs	r2, #202	; 0xca
 8007174:	625a      	str	r2, [r3, #36]	; 0x24
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2253      	movs	r2, #83	; 0x53
 800717c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f988 	bl	8007494 <RTC_EnterInitMode>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	22ff      	movs	r2, #255	; 0xff
 8007190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2204      	movs	r2, #4
 8007196:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e031      	b.n	8007206 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	6979      	ldr	r1, [r7, #20]
 80071a8:	4b19      	ldr	r3, [pc, #100]	; (8007210 <HAL_RTC_SetDate+0x14c>)
 80071aa:	400b      	ands	r3, r1
 80071ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d111      	bne.n	80071f0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f939 	bl	8007444 <HAL_RTC_WaitForSynchro>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2204      	movs	r2, #4
 80071e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e00a      	b.n	8007206 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007204:	2300      	movs	r3, #0
  }
}
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	bf00      	nop
 8007210:	00ffff3f 	.word	0x00ffff3f

08007214 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b089      	sub	sp, #36	; 0x24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	7f1b      	ldrb	r3, [r3, #28]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_RTC_SetAlarm+0x24>
 8007234:	2302      	movs	r3, #2
 8007236:	e101      	b.n	800743c <HAL_RTC_SetAlarm+0x228>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2202      	movs	r2, #2
 8007242:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d137      	bne.n	80072ba <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f942 	bl	80074ec <RTC_ByteToBcd2>
 8007268:	4603      	mov	r3, r0
 800726a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 f93b 	bl	80074ec <RTC_ByteToBcd2>
 8007276:	4603      	mov	r3, r0
 8007278:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800727a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	789b      	ldrb	r3, [r3, #2]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f933 	bl	80074ec <RTC_ByteToBcd2>
 8007286:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007288:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	7b1b      	ldrb	r3, [r3, #12]
 8007290:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007292:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800729c:	4618      	mov	r0, r3
 800729e:	f000 f925 	bl	80074ec <RTC_ByteToBcd2>
 80072a2:	4603      	mov	r3, r0
 80072a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80072ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	e023      	b.n	8007302 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80072da:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80072e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7b1b      	ldrb	r3, [r3, #12]
 80072e6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80072e8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80072f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80072fe:	4313      	orrs	r3, r2
 8007300:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	22ca      	movs	r2, #202	; 0xca
 8007314:	625a      	str	r2, [r3, #36]	; 0x24
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2253      	movs	r2, #83	; 0x53
 800731c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007326:	d13f      	bne.n	80073a8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007336:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007346:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007348:	f7f9 fffa 	bl	8001340 <HAL_GetTick>
 800734c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800734e:	e013      	b.n	8007378 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007350:	f7f9 fff6 	bl	8001340 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800735e:	d90b      	bls.n	8007378 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	22ff      	movs	r2, #255	; 0xff
 8007366:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2203      	movs	r2, #3
 800736c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e061      	b.n	800743c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0e4      	beq.n	8007350 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	e03e      	b.n	8007426 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073b6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073c6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073c8:	f7f9 ffba 	bl	8001340 <HAL_GetTick>
 80073cc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80073ce:	e013      	b.n	80073f8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80073d0:	f7f9 ffb6 	bl	8001340 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073de:	d90b      	bls.n	80073f8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	22ff      	movs	r2, #255	; 0xff
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2203      	movs	r2, #3
 80073ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e021      	b.n	800743c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0e4      	beq.n	80073d0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007424:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3724      	adds	r7, #36	; 0x24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd90      	pop	{r4, r7, pc}

08007444 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800745e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007460:	f7f9 ff6e 	bl	8001340 <HAL_GetTick>
 8007464:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007466:	e009      	b.n	800747c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007468:	f7f9 ff6a 	bl	8001340 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007476:	d901      	bls.n	800747c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e007      	b.n	800748c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0ee      	beq.n	8007468 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d119      	bne.n	80074e2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074b8:	f7f9 ff42 	bl	8001340 <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074be:	e009      	b.n	80074d4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074c0:	f7f9 ff3e 	bl	8001340 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ce:	d901      	bls.n	80074d4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e007      	b.n	80074e4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0ee      	beq.n	80074c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80074fa:	e005      	b.n	8007508 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	3b0a      	subs	r3, #10
 8007506:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b09      	cmp	r3, #9
 800750c:	d8f6      	bhi.n	80074fc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	b2da      	uxtb	r2, r3
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	4313      	orrs	r3, r2
 800751a:	b2db      	uxtb	r3, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7f1b      	ldrb	r3, [r3, #28]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e03e      	b.n	80075c2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2202      	movs	r2, #2
 800754e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007558:	4013      	ands	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4313      	orrs	r3, r2
 8007562:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	22ca      	movs	r2, #202	; 0xca
 800756a:	625a      	str	r2, [r3, #36]	; 0x24
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2253      	movs	r2, #83	; 0x53
 8007572:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0206 	bic.w	r2, r2, #6
 8007582:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	430a      	orrs	r2, r1
 8007592:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	22ff      	movs	r2, #255	; 0xff
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	fffff7f7 	.word	0xfffff7f7

080075d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e149      	b.n	8007886 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f010 fa56 	bl	8017ab8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f94f 	bl	80078b8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d007      	beq.n	8007632 <HAL_SAI_Init+0x5e>
 8007622:	2b01      	cmp	r3, #1
 8007624:	d302      	bcc.n	800762c <HAL_SAI_Init+0x58>
 8007626:	2b02      	cmp	r3, #2
 8007628:	d006      	beq.n	8007638 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800762a:	e008      	b.n	800763e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      break;
 8007630:	e005      	b.n	800763e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007632:	2310      	movs	r3, #16
 8007634:	61fb      	str	r3, [r7, #28]
      break;
 8007636:	e002      	b.n	800763e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007638:	2320      	movs	r3, #32
 800763a:	61fb      	str	r3, [r7, #28]
      break;
 800763c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d81d      	bhi.n	8007682 <HAL_SAI_Init+0xae>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <HAL_SAI_Init+0x78>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007663 	.word	0x08007663
 8007654:	0800766b 	.word	0x0800766b
 8007658:	08007673 	.word	0x08007673
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007660:	e010      	b.n	8007684 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007666:	617b      	str	r3, [r7, #20]
      }
      break;
 8007668:	e00c      	b.n	8007684 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800766a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800766e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007670:	e008      	b.n	8007684 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007676:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007680:	e000      	b.n	8007684 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007682:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a81      	ldr	r2, [pc, #516]	; (8007890 <HAL_SAI_Init+0x2bc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_SAI_Init+0xc4>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a80      	ldr	r2, [pc, #512]	; (8007894 <HAL_SAI_Init+0x2c0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d103      	bne.n	80076a0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007698:	4a7f      	ldr	r2, [pc, #508]	; (8007898 <HAL_SAI_Init+0x2c4>)
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e002      	b.n	80076a6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80076a0:	4a7e      	ldr	r2, [pc, #504]	; (800789c <HAL_SAI_Init+0x2c8>)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d043      	beq.n	8007736 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a76      	ldr	r2, [pc, #472]	; (8007890 <HAL_SAI_Init+0x2bc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d004      	beq.n	80076c6 <HAL_SAI_Init+0xf2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a74      	ldr	r2, [pc, #464]	; (8007894 <HAL_SAI_Init+0x2c0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d104      	bne.n	80076d0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80076c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80076ca:	f7ff fa8d 	bl	8006be8 <HAL_RCCEx_GetPeriphCLKFreq>
 80076ce:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a72      	ldr	r2, [pc, #456]	; (80078a0 <HAL_SAI_Init+0x2cc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_SAI_Init+0x110>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a71      	ldr	r2, [pc, #452]	; (80078a4 <HAL_SAI_Init+0x2d0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d104      	bne.n	80076ee <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80076e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80076e8:	f7ff fa7e 	bl	8006be8 <HAL_RCCEx_GetPeriphCLKFreq>
 80076ec:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	025b      	lsls	r3, r3, #9
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a67      	ldr	r2, [pc, #412]	; (80078a8 <HAL_SAI_Init+0x2d4>)
 800770a:	fba2 2303 	umull	r2, r3, r2, r3
 800770e:	08da      	lsrs	r2, r3, #3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	4b64      	ldr	r3, [pc, #400]	; (80078a8 <HAL_SAI_Init+0x2d4>)
 8007718:	fba3 2301 	umull	r2, r3, r3, r1
 800771c:	08da      	lsrs	r2, r3, #3
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	1aca      	subs	r2, r1, r3
 8007728:	2a08      	cmp	r2, #8
 800772a:	d904      	bls.n	8007736 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_SAI_Init+0x172>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d109      	bne.n	800775a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_SAI_Init+0x17e>
 800774e:	2300      	movs	r3, #0
 8007750:	e001      	b.n	8007756 <HAL_SAI_Init+0x182>
 8007752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	e008      	b.n	800776c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	2b01      	cmp	r3, #1
 8007760:	d102      	bne.n	8007768 <HAL_SAI_Init+0x194>
 8007762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007766:	e000      	b.n	800776a <HAL_SAI_Init+0x196>
 8007768:	2300      	movs	r3, #0
 800776a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b4d      	ldr	r3, [pc, #308]	; (80078ac <HAL_SAI_Init+0x2d8>)
 8007778:	400b      	ands	r3, r1
 800777a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007790:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	431a      	orrs	r2, r3
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80077a4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077b0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	051b      	lsls	r3, r3, #20
 80077b8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6859      	ldr	r1, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b38      	ldr	r3, [pc, #224]	; (80078b0 <HAL_SAI_Init+0x2dc>)
 80077ce:	400b      	ands	r3, r1
 80077d0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6859      	ldr	r1, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699a      	ldr	r2, [r3, #24]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6899      	ldr	r1, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <HAL_SAI_Init+0x2e0>)
 80077fc:	400b      	ands	r3, r1
 80077fe:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6899      	ldr	r1, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007810:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007816:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800781c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	3b01      	subs	r3, #1
 8007824:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007826:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68d9      	ldr	r1, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800783e:	400b      	ands	r3, r1
 8007840:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68d9      	ldr	r1, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007856:	041b      	lsls	r3, r3, #16
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785e:	3b01      	subs	r3, #1
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40015804 	.word	0x40015804
 8007894:	40015824 	.word	0x40015824
 8007898:	40015800 	.word	0x40015800
 800789c:	40015c00 	.word	0x40015c00
 80078a0:	40015c04 	.word	0x40015c04
 80078a4:	40015c24 	.word	0x40015c24
 80078a8:	cccccccd 	.word	0xcccccccd
 80078ac:	ff05c010 	.word	0xff05c010
 80078b0:	ffff1ff0 	.word	0xffff1ff0
 80078b4:	fff88000 	.word	0xfff88000

080078b8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80078b8:	b490      	push	{r4, r7}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80078c0:	4b16      	ldr	r3, [pc, #88]	; (800791c <SAI_Disable+0x64>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a16      	ldr	r2, [pc, #88]	; (8007920 <SAI_Disable+0x68>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	0b1b      	lsrs	r3, r3, #12
 80078cc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078e0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80078e2:	4623      	mov	r3, r4
 80078e4:	1e5c      	subs	r4, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	73fb      	strb	r3, [r7, #15]
      break;
 80078fe:	e006      	b.n	800790e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e9      	bne.n	80078e2 <SAI_Disable+0x2a>

  return status;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bc90      	pop	{r4, r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000064 	.word	0x20000064
 8007920:	95cbec1b 	.word	0x95cbec1b

08007924 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e01d      	b.n	8007972 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f00f fdf5 	bl	8017538 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2203      	movs	r2, #3
 8007952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f80f 	bl	800797a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800797a:	b5b0      	push	{r4, r5, r7, lr}
 800797c:	b08e      	sub	sp, #56	; 0x38
 800797e:	af04      	add	r7, sp, #16
 8007980:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007982:	2300      	movs	r3, #0
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800798a:	2300      	movs	r3, #0
 800798c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800799a:	2376      	movs	r3, #118	; 0x76
 800799c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	466c      	mov	r4, sp
 80079a4:	f107 0318 	add.w	r3, r7, #24
 80079a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079b0:	f107 030c 	add.w	r3, r7, #12
 80079b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079b6:	4628      	mov	r0, r5
 80079b8:	f002 ff68 	bl	800a88c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ca:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f002 ff94 	bl	800a8fe <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80079e6:	2002      	movs	r0, #2
 80079e8:	f7f9 fcb6 	bl	8001358 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fe24 	bl	800863a <SD_PowerON>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e013      	b.n	8007a3a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fd48 	bl	80084a8 <SD_InitCard>
 8007a18:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3728      	adds	r7, #40	; 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a44 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08c      	sub	sp, #48	; 0x30
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0b0      	b.n	8007bce <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	f040 80a9 	bne.w	8007bcc <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d907      	bls.n	8007a9e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e097      	b.n	8007bce <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007abc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	4a45      	ldr	r2, [pc, #276]	; (8007bd8 <HAL_SD_ReadBlocks_DMA+0x194>)
 8007ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	4a44      	ldr	r2, [pc, #272]	; (8007bdc <HAL_SD_ReadBlocks_DMA+0x198>)
 8007acc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3380      	adds	r3, #128	; 0x80
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	025b      	lsls	r3, r3, #9
 8007ae8:	089b      	lsrs	r3, r3, #2
 8007aea:	f7fa f937 	bl	8001d5c <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0208 	orr.w	r2, r2, #8
 8007afc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d002      	beq.n	8007b0c <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	025b      	lsls	r3, r3, #9
 8007b0a:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	025b      	lsls	r3, r3, #9
 8007b16:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b18:	2390      	movs	r3, #144	; 0x90
 8007b1a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b24:	2301      	movs	r3, #1
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f107 0214 	add.w	r2, r7, #20
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 ff4c 	bl	800a9d0 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b40:	4618      	mov	r0, r3
 8007b42:	f002 ff71 	bl	800aa28 <SDMMC_CmdBlockLength>
 8007b46:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d010      	beq.n	8007b70 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e02e      	b.n	8007bce <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d90a      	bls.n	8007b8c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2282      	movs	r2, #130	; 0x82
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f002 ff98 	bl	800aab8 <SDMMC_CmdReadMultiBlock>
 8007b88:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b8a:	e009      	b.n	8007ba0 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2281      	movs	r2, #129	; 0x81
 8007b90:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f002 ff69 	bl	800aa70 <SDMMC_CmdReadSingleBlock>
 8007b9e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e002      	b.n	8007bce <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e000      	b.n	8007bce <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007bcc:	2302      	movs	r3, #2
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3730      	adds	r7, #48	; 0x30
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	080083a5 	.word	0x080083a5
 8007bdc:	08008413 	.word	0x08008413

08007be0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	; 0x30
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d107      	bne.n	8007c08 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0b0      	b.n	8007d6a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	f040 80a9 	bne.w	8007d68 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	441a      	add	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d907      	bls.n	8007c3a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e097      	b.n	8007d6a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2200      	movs	r2, #0
 8007c48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 021a 	orr.w	r2, r2, #26
 8007c58:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a45      	ldr	r2, [pc, #276]	; (8007d74 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007c60:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	4a44      	ldr	r2, [pc, #272]	; (8007d78 <HAL_SD_WriteBlocks_DMA+0x198>)
 8007c68:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	2200      	movs	r2, #0
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d002      	beq.n	8007c80 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	025b      	lsls	r3, r3, #9
 8007c7e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 fecd 	bl	800aa28 <SDMMC_CmdBlockLength>
 8007c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d010      	beq.n	8007cb8 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e058      	b.n	8007d6a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d90a      	bls.n	8007cd4 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	22a0      	movs	r2, #160	; 0xa0
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 ff3c 	bl	800ab48 <SDMMC_CmdWriteMultiBlock>
 8007cd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007cd2:	e009      	b.n	8007ce8 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2290      	movs	r2, #144	; 0x90
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f002 ff0d 	bl	800ab00 <SDMMC_CmdWriteSingleBlock>
 8007ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d010      	beq.n	8007d10 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e02c      	b.n	8007d6a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0208 	orr.w	r2, r2, #8
 8007d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3380      	adds	r3, #128	; 0x80
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	025b      	lsls	r3, r3, #9
 8007d32:	089b      	lsrs	r3, r3, #2
 8007d34:	f7fa f812 	bl	8001d5c <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	025b      	lsls	r3, r3, #9
 8007d42:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d44:	2390      	movs	r3, #144	; 0x90
 8007d46:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f107 0214 	add.w	r2, r7, #20
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f002 fe36 	bl	800a9d0 <SDMMC_ConfigData>
    
    return HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e000      	b.n	8007d6a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007d68:	2302      	movs	r3, #2
  }
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3730      	adds	r7, #48	; 0x30
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	0800837b 	.word	0x0800837b
 8007d78:	08008413 	.word	0x08008413

08007d7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da2:	0e1b      	lsrs	r3, r3, #24
 8007da4:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	099b      	lsrs	r3, r3, #6
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	089b      	lsrs	r3, r3, #2
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd8:	0c1b      	lsrs	r3, r3, #16
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e0c:	0e1b      	lsrs	r3, r3, #24
 8007e0e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e20:	0c1b      	lsrs	r3, r3, #16
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	88db      	ldrh	r3, [r3, #6]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	091b      	lsrs	r3, r3, #4
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e52:	0a1b      	lsrs	r3, r3, #8
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	09db      	lsrs	r3, r3, #7
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	099b      	lsrs	r3, r3, #6
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 8086 	bne.w	8007fb4 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	029b      	lsls	r3, r3, #10
 8007eac:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ece:	0e1b      	lsrs	r3, r3, #24
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	099b      	lsrs	r3, r3, #6
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f08:	0c1b      	lsrs	r3, r3, #16
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	095b      	lsrs	r3, r3, #5
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	089b      	lsrs	r3, r3, #2
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 0306 	and.w	r3, r3, #6
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	7e1b      	ldrb	r3, [r3, #24]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	09db      	lsrs	r3, r3, #7
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	7e1b      	ldrb	r3, [r3, #24]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	3302      	adds	r3, #2
 8007f76:	2201      	movs	r2, #1
 8007f78:	409a      	lsls	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7e:	fb02 f203 	mul.w	r2, r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	7a1b      	ldrb	r3, [r3, #8]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4093      	lsls	r3, r2
 8007f92:	461a      	mov	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007fa0:	0a52      	lsrs	r2, r2, #9
 8007fa2:	fb02 f203 	mul.w	r2, r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb0:	661a      	str	r2, [r3, #96]	; 0x60
 8007fb2:	e04d      	b.n	8008050 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d138      	bne.n	800802e <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	0e1b      	lsrs	r3, r3, #24
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	691a      	ldr	r2, [r3, #16]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b2db      	uxtb	r3, r3
 8008006:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	3301      	adds	r3, #1
 800800e:	029a      	lsls	r2, r3, #10
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008022:	659a      	str	r2, [r3, #88]	; 0x58
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	661a      	str	r2, [r3, #96]	; 0x60
 800802c:	e010      	b.n	8008050 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0c1      	b.n	80081d4 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	099b      	lsrs	r3, r3, #6
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800806c:	b2da      	uxtb	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	b2db      	uxtb	r3, r3
 8008078:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	7e9b      	ldrb	r3, [r3, #26]
 800807e:	b2da      	uxtb	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	09db      	lsrs	r3, r3, #7
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	b2db      	uxtb	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809c:	b2da      	uxtb	r2, r3
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	0e1b      	lsrs	r3, r3, #24
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	09db      	lsrs	r3, r3, #7
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	089b      	lsrs	r3, r3, #2
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 030c 	and.w	r3, r3, #12
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	0c1b      	lsrs	r3, r3, #16
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	7fdb      	ldrb	r3, [r3, #31]
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	099b      	lsrs	r3, r3, #6
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	b2db      	uxtb	r3, r3
 800810a:	4313      	orrs	r3, r2
 800810c:	b2da      	uxtb	r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	b2db      	uxtb	r3, r3
 8008144:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	09db      	lsrs	r3, r3, #7
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	b2da      	uxtb	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	099b      	lsrs	r3, r3, #6
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	b2da      	uxtb	r2, r3
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	089b      	lsrs	r3, r3, #2
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	b2da      	uxtb	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008238:	b5b0      	push	{r4, r5, r7, lr}
 800823a:	b08e      	sub	sp, #56	; 0x38
 800823c:	af04      	add	r7, sp, #16
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2203      	movs	r2, #3
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008252:	2b03      	cmp	r3, #3
 8008254:	d02e      	beq.n	80082b4 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825c:	d106      	bne.n	800826c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
 800826a:	e029      	b.n	80082c0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008272:	d10a      	bne.n	800828a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fab2 	bl	80087de <SD_WideBus_Enable>
 800827a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
 8008288:	e01a      	b.n	80082c0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 faf1 	bl	8008878 <SD_WideBus_Disable>
 8008296:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
 80082a4:	e00c      	b.n	80082c0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38
 80082b2:	e005      	b.n	80082c0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e024      	b.n	8008328 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681d      	ldr	r5, [r3, #0]
 8008304:	466c      	mov	r4, sp
 8008306:	f107 0318 	add.w	r3, r7, #24
 800830a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800830e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008318:	4628      	mov	r0, r5
 800831a:	f002 fab7 	bl	800a88c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3728      	adds	r7, #40	; 0x28
 800832c:	46bd      	mov	sp, r7
 800832e:	bdb0      	pop	{r4, r5, r7, pc}

08008330 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008338:	2304      	movs	r3, #4
 800833a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008344:	f107 030c 	add.w	r3, r7, #12
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa1d 	bl	800878a <SD_SendStatus>
 8008350:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	0a5b      	lsrs	r3, r3, #9
 8008368:	b2db      	uxtb	r3, r3
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008396:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	2b82      	cmp	r3, #130	; 0x82
 80083bc:	d111      	bne.n	80083e2 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f002 fbe4 	bl	800ab90 <SDMMC_CmdStopTransfer>
 80083c8:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fccd 	bl	8007d7c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0208 	bic.w	r2, r2, #8
 80083f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f00d faa1 	bl	801594c <HAL_SD_RxCpltCallback>
#endif
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7f9 fcfb 	bl	8001e1c <HAL_DMA_GetError>
 8008426:	4603      	mov	r3, r0
 8008428:	2b02      	cmp	r3, #2
 800842a:	d039      	beq.n	80084a0 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	2b01      	cmp	r3, #1
 8008434:	d004      	beq.n	8008440 <SD_DMAError+0x2e>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843c:	2b01      	cmp	r3, #1
 800843e:	d12c      	bne.n	800849a <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008448:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008458:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff ff62 	bl	8008330 <HAL_SD_GetCardState>
 800846c:	4603      	mov	r3, r0
 800846e:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	2b06      	cmp	r3, #6
 8008474:	d002      	beq.n	800847c <SD_DMAError+0x6a>
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	2b05      	cmp	r3, #5
 800847a:	d10a      	bne.n	8008492 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f002 fb85 	bl	800ab90 <SDMMC_CmdStopTransfer>
 8008486:	4602      	mov	r2, r0
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	431a      	orrs	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff fc6e 	bl	8007d7c <HAL_SD_ErrorCallback>
#endif
  }
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084a8:	b5b0      	push	{r4, r5, r7, lr}
 80084aa:	b094      	sub	sp, #80	; 0x50
 80084ac:	af04      	add	r7, sp, #16
 80084ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80084b4:	2301      	movs	r3, #1
 80084b6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f002 fa2c 	bl	800a91a <SDMMC_GetPowerState>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084cc:	e0b1      	b.n	8008632 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d02f      	beq.n	8008536 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 fc73 	bl	800adc6 <SDMMC_CmdSendCID>
 80084e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <SD_InitCard+0x44>
    {
      return errorstate;
 80084e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ea:	e0a2      	b.n	8008632 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 fa57 	bl	800a9a6 <SDMMC_GetResponse>
 80084f8:	4602      	mov	r2, r0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2104      	movs	r1, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f002 fa4e 	bl	800a9a6 <SDMMC_GetResponse>
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2108      	movs	r1, #8
 8008516:	4618      	mov	r0, r3
 8008518:	f002 fa45 	bl	800a9a6 <SDMMC_GetResponse>
 800851c:	4602      	mov	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	210c      	movs	r1, #12
 8008528:	4618      	mov	r0, r3
 800852a:	f002 fa3c 	bl	800a9a6 <SDMMC_GetResponse>
 800852e:	4602      	mov	r2, r0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	2b03      	cmp	r3, #3
 800853c:	d00d      	beq.n	800855a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f107 020e 	add.w	r2, r7, #14
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f002 fc7d 	bl	800ae48 <SDMMC_CmdSetRelAdd>
 800854e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <SD_InitCard+0xb2>
    {
      return errorstate;
 8008556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008558:	e06b      	b.n	8008632 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855e:	2b03      	cmp	r3, #3
 8008560:	d036      	beq.n	80085d0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008562:	89fb      	ldrh	r3, [r7, #14]
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008572:	041b      	lsls	r3, r3, #16
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f002 fc45 	bl	800ae06 <SDMMC_CmdSendCSD>
 800857c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800857e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <SD_InitCard+0xe0>
    {
      return errorstate;
 8008584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008586:	e054      	b.n	8008632 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f002 fa09 	bl	800a9a6 <SDMMC_GetResponse>
 8008594:	4602      	mov	r2, r0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2104      	movs	r1, #4
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 fa00 	bl	800a9a6 <SDMMC_GetResponse>
 80085a6:	4602      	mov	r2, r0
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2108      	movs	r1, #8
 80085b2:	4618      	mov	r0, r3
 80085b4:	f002 f9f7 	bl	800a9a6 <SDMMC_GetResponse>
 80085b8:	4602      	mov	r2, r0
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	210c      	movs	r1, #12
 80085c4:	4618      	mov	r0, r3
 80085c6:	f002 f9ee 	bl	800a9a6 <SDMMC_GetResponse>
 80085ca:	4602      	mov	r2, r0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2104      	movs	r1, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 f9e5 	bl	800a9a6 <SDMMC_GetResponse>
 80085dc:	4603      	mov	r3, r0
 80085de:	0d1a      	lsrs	r2, r3, #20
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80085e4:	f107 0310 	add.w	r3, r7, #16
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff fbd0 	bl	8007d90 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	f04f 0400 	mov.w	r4, #0
 80085fe:	461a      	mov	r2, r3
 8008600:	4623      	mov	r3, r4
 8008602:	4608      	mov	r0, r1
 8008604:	f002 fae8 	bl	800abd8 <SDMMC_CmdSelDesel>
 8008608:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800860a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <SD_InitCard+0x16c>
  {
    return errorstate;
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	e00e      	b.n	8008632 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681d      	ldr	r5, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	466c      	mov	r4, sp
 800861c:	f103 0210 	add.w	r2, r3, #16
 8008620:	ca07      	ldmia	r2, {r0, r1, r2}
 8008622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008626:	3304      	adds	r3, #4
 8008628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800862a:	4628      	mov	r0, r5
 800862c:	f002 f92e 	bl	800a88c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3740      	adds	r7, #64	; 0x40
 8008636:	46bd      	mov	sp, r7
 8008638:	bdb0      	pop	{r4, r5, r7, pc}

0800863a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fae3 	bl	800ac22 <SDMMC_CmdGoIdleState>
 800865c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <SD_PowerON+0x2e>
  {
    return errorstate;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	e08c      	b.n	8008782 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f002 faf8 	bl	800ac62 <SDMMC_CmdOperCond>
 8008672:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d03d      	beq.n	80086f6 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008680:	e032      	b.n	80086e8 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	60ba      	str	r2, [r7, #8]
 8008688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800868c:	4293      	cmp	r3, r2
 800868e:	d102      	bne.n	8008696 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008694:	e075      	b.n	8008782 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f002 fb01 	bl	800aca4 <SDMMC_CmdAppCommand>
 80086a2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086ae:	e068      	b.n	8008782 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 fb18 	bl	800acec <SDMMC_CmdAppOperCommand>
 80086bc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086c8:	e05b      	b.n	8008782 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f002 f968 	bl	800a9a6 <SDMMC_GetResponse>
 80086d6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	0fdb      	lsrs	r3, r3, #31
 80086dc:	2b01      	cmp	r3, #1
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0c9      	beq.n	8008682 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	645a      	str	r2, [r3, #68]	; 0x44
 80086f4:	e044      	b.n	8008780 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80086fc:	e031      	b.n	8008762 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	60ba      	str	r2, [r7, #8]
 8008704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008708:	4293      	cmp	r3, r2
 800870a:	d102      	bne.n	8008712 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800870c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008710:	e037      	b.n	8008782 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fac3 	bl	800aca4 <SDMMC_CmdAppCommand>
 800871e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <SD_PowerON+0xf0>
      {
        return errorstate;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	e02b      	b.n	8008782 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008732:	4618      	mov	r0, r3
 8008734:	f002 fada 	bl	800acec <SDMMC_CmdAppOperCommand>
 8008738:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <SD_PowerON+0x10a>
      {
        return errorstate;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	e01e      	b.n	8008782 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2100      	movs	r1, #0
 800874a:	4618      	mov	r0, r3
 800874c:	f002 f92b 	bl	800a9a6 <SDMMC_GetResponse>
 8008750:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	0fdb      	lsrs	r3, r3, #31
 8008756:	2b01      	cmp	r3, #1
 8008758:	bf0c      	ite	eq
 800875a:	2301      	moveq	r3, #1
 800875c:	2300      	movne	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0ca      	beq.n	80086fe <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	645a      	str	r2, [r3, #68]	; 0x44
 8008778:	e002      	b.n	8008780 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800879e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087a2:	e018      	b.n	80087d6 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ac:	041b      	lsls	r3, r3, #16
 80087ae:	4619      	mov	r1, r3
 80087b0:	4610      	mov	r0, r2
 80087b2:	f002 fb6c 	bl	800ae8e <SDMMC_CmdSendStatus>
 80087b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <SD_SendStatus+0x38>
  {
    return errorstate;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	e009      	b.n	80087d6 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f002 f8ec 	bl	800a9a6 <SDMMC_GetResponse>
 80087ce:	4602      	mov	r2, r0
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	2300      	movs	r3, #0
 80087ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2100      	movs	r1, #0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 f8d4 	bl	800a9a6 <SDMMC_GetResponse>
 80087fe:	4603      	mov	r3, r0
 8008800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008808:	d102      	bne.n	8008810 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800880a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800880e:	e02f      	b.n	8008870 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f87b 	bl	8008912 <SD_FindSCR>
 800881c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	e023      	b.n	8008870 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01c      	beq.n	800886c <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f002 fa30 	bl	800aca4 <SDMMC_CmdAppCommand>
 8008844:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	e00f      	b.n	8008870 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2102      	movs	r1, #2
 8008856:	4618      	mov	r0, r3
 8008858:	f002 fa6e 	bl	800ad38 <SDMMC_CmdBusWidth>
 800885c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	e003      	b.n	8008870 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008868:	2300      	movs	r3, #0
 800886a:	e001      	b.n	8008870 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800886c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f002 f887 	bl	800a9a6 <SDMMC_GetResponse>
 8008898:	4603      	mov	r3, r0
 800889a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a2:	d102      	bne.n	80088aa <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088a8:	e02f      	b.n	800890a <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f82e 	bl	8008912 <SD_FindSCR>
 80088b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	e023      	b.n	800890a <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01c      	beq.n	8008906 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d4:	041b      	lsls	r3, r3, #16
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f002 f9e3 	bl	800aca4 <SDMMC_CmdAppCommand>
 80088de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	e00f      	b.n	800890a <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fa21 	bl	800ad38 <SDMMC_CmdBusWidth>
 80088f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	e003      	b.n	800890a <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008902:	2300      	movs	r3, #0
 8008904:	e001      	b.n	800890a <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008912:	b590      	push	{r4, r7, lr}
 8008914:	b08f      	sub	sp, #60	; 0x3c
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800891c:	2300      	movs	r3, #0
 800891e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008920:	f7f8 fd0e 	bl	8001340 <HAL_GetTick>
 8008924:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2108      	movs	r1, #8
 8008938:	4618      	mov	r0, r3
 800893a:	f002 f875 	bl	800aa28 <SDMMC_CmdBlockLength>
 800893e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <SD_FindSCR+0x38>
  {
    return errorstate;
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	e0a8      	b.n	8008a9c <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f002 f9a4 	bl	800aca4 <SDMMC_CmdAppCommand>
 800895c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	e099      	b.n	8008a9c <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008968:	f04f 33ff 	mov.w	r3, #4294967295
 800896c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800896e:	2308      	movs	r3, #8
 8008970:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008972:	2330      	movs	r3, #48	; 0x30
 8008974:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008976:	2302      	movs	r3, #2
 8008978:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800897a:	2300      	movs	r3, #0
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800897e:	2301      	movs	r3, #1
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f107 0214 	add.w	r2, r7, #20
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f002 f81f 	bl	800a9d0 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f002 f9f2 	bl	800ad80 <SDMMC_CmdSendSCR>
 800899c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d022      	beq.n	80089ea <SD_FindSCR+0xd8>
  {
    return errorstate;
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	e079      	b.n	8008a9c <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6819      	ldr	r1, [r3, #0]
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	f107 020c 	add.w	r2, r7, #12
 80089c2:	18d4      	adds	r4, r2, r3
 80089c4:	4608      	mov	r0, r1
 80089c6:	f001 ff8d 	bl	800a8e4 <SDMMC_ReadFIFO>
 80089ca:	4603      	mov	r3, r0
 80089cc:	6023      	str	r3, [r4, #0]
      index++;
 80089ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d0:	3301      	adds	r3, #1
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089d4:	f7f8 fcb4 	bl	8001340 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	d102      	bne.n	80089ea <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089e8:	e058      	b.n	8008a9c <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f0:	f240 432a 	movw	r3, #1066	; 0x42a
 80089f4:	4013      	ands	r3, r2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0d6      	beq.n	80089a8 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a10:	2308      	movs	r3, #8
 8008a12:	e043      	b.n	8008a9c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2202      	movs	r2, #2
 8008a28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e036      	b.n	8008a9c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2220      	movs	r2, #32
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a44:	2320      	movs	r3, #32
 8008a46:	e029      	b.n	8008a9c <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	061a      	lsls	r2, r3, #24
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a5e:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a68:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008a74:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a76:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	061a      	lsls	r2, r3, #24
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a84:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a8e:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	0e1b      	lsrs	r3, r3, #24
 8008a94:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	373c      	adds	r7, #60	; 0x3c
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e025      	b.n	8008b04 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f00b fd83 	bl	80145d8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f001 fdab 	bl	800a640 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	461a      	mov	r2, r3
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	f001 fe15 	bl	800a724 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d101      	bne.n	8008b28 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008b24:	2302      	movs	r3, #2
 8008b26:	e018      	b.n	8008b5a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fe73 	bl	800a824 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d104      	bne.n	8008b50 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2205      	movs	r2, #5
 8008b4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008b4e:	e003      	b.n	8008b58 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d101      	bne.n	8008b7c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e00e      	b.n	8008b9a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 fe6b 	bl	800a866 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e04c      	b.n	8008c50 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f00e fd16 	bl	80175fc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0203 	bic.w	r2, r2, #3
 8008be6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <HAL_SPDIFRX_Init+0xb4>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008c00:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008c06:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008c0c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008c12:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008c18:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008c1e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008c24:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008c2a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008c30:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	fff88407 	.word	0xfff88407

08008c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e084      	b.n	8008d78 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f00e fcf9 	bl	8017680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2202      	movs	r2, #2
 8008c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cae:	d902      	bls.n	8008cb6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e002      	b.n	8008cbc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008cc4:	d007      	beq.n	8008cd6 <HAL_SPI_Init+0x7a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cce:	d002      	beq.n	8008cd6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10b      	bne.n	8008cf6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ce6:	d903      	bls.n	8008cf0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30
 8008cee:	e002      	b.n	8008cf6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	ea42 0103 	orr.w	r1, r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	0c1b      	lsrs	r3, r3, #16
 8008d36:	f003 0204 	and.w	r2, r3, #4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	ea42 0103 	orr.w	r1, r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	69da      	ldr	r2, [r3, #28]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e01d      	b.n	8008dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f00e fccc 	bl	8017744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f000 fba2 	bl	8009508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	4b0e      	ldr	r3, [pc, #56]	; (8008e28 <HAL_TIM_Base_Start+0x50>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b06      	cmp	r3, #6
 8008df8:	d00b      	beq.n	8008e12 <HAL_TIM_Base_Start+0x3a>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e00:	d007      	beq.n	8008e12 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0201 	orr.w	r2, r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	00010007 	.word	0x00010007

08008e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <HAL_TIM_Base_Start_IT+0x50>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b06      	cmp	r3, #6
 8008e54:	d00b      	beq.n	8008e6e <HAL_TIM_Base_Start_IT+0x42>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e5c:	d007      	beq.n	8008e6e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f042 0201 	orr.w	r2, r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	00010007 	.word	0x00010007

08008e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e01d      	b.n	8008ece <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f00e fca8 	bl	80177fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f000 fb22 	bl	8009508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d122      	bne.n	8008f32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d11b      	bne.n	8008f32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f06f 0202 	mvn.w	r2, #2
 8008f02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fad7 	bl	80094cc <HAL_TIM_IC_CaptureCallback>
 8008f1e:	e005      	b.n	8008f2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fac9 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fada 	bl	80094e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d122      	bne.n	8008f86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d11b      	bne.n	8008f86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f06f 0204 	mvn.w	r2, #4
 8008f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 faad 	bl	80094cc <HAL_TIM_IC_CaptureCallback>
 8008f72:	e005      	b.n	8008f80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fa9f 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fab0 	bl	80094e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f003 0308 	and.w	r3, r3, #8
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	d122      	bne.n	8008fda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d11b      	bne.n	8008fda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f06f 0208 	mvn.w	r2, #8
 8008faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fa83 	bl	80094cc <HAL_TIM_IC_CaptureCallback>
 8008fc6:	e005      	b.n	8008fd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fa75 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa86 	bl	80094e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d122      	bne.n	800902e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d11b      	bne.n	800902e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f06f 0210 	mvn.w	r2, #16
 8008ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2208      	movs	r2, #8
 8009004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa59 	bl	80094cc <HAL_TIM_IC_CaptureCallback>
 800901a:	e005      	b.n	8009028 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa4b 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa5c 	bl	80094e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b01      	cmp	r3, #1
 800903a:	d10e      	bne.n	800905a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b01      	cmp	r3, #1
 8009048:	d107      	bne.n	800905a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f06f 0201 	mvn.w	r2, #1
 8009052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f00d fd8d 	bl	8016b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009064:	2b80      	cmp	r3, #128	; 0x80
 8009066:	d10e      	bne.n	8009086 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009072:	2b80      	cmp	r3, #128	; 0x80
 8009074:	d107      	bne.n	8009086 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800907e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 febd 	bl	8009e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009094:	d10e      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d107      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 feb0 	bl	8009e14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d10e      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d107      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa0a 	bl	80094f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d10e      	bne.n	800910c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d107      	bne.n	800910c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f06f 0220 	mvn.w	r2, #32
 8009104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fe70 	bl	8009dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800912a:	2302      	movs	r3, #2
 800912c:	e105      	b.n	800933a <HAL_TIM_PWM_ConfigChannel+0x226>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2202      	movs	r2, #2
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b14      	cmp	r3, #20
 8009142:	f200 80f0 	bhi.w	8009326 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009146:	a201      	add	r2, pc, #4	; (adr r2, 800914c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	080091a1 	.word	0x080091a1
 8009150:	08009327 	.word	0x08009327
 8009154:	08009327 	.word	0x08009327
 8009158:	08009327 	.word	0x08009327
 800915c:	080091e1 	.word	0x080091e1
 8009160:	08009327 	.word	0x08009327
 8009164:	08009327 	.word	0x08009327
 8009168:	08009327 	.word	0x08009327
 800916c:	08009223 	.word	0x08009223
 8009170:	08009327 	.word	0x08009327
 8009174:	08009327 	.word	0x08009327
 8009178:	08009327 	.word	0x08009327
 800917c:	08009263 	.word	0x08009263
 8009180:	08009327 	.word	0x08009327
 8009184:	08009327 	.word	0x08009327
 8009188:	08009327 	.word	0x08009327
 800918c:	080092a5 	.word	0x080092a5
 8009190:	08009327 	.word	0x08009327
 8009194:	08009327 	.word	0x08009327
 8009198:	08009327 	.word	0x08009327
 800919c:	080092e5 	.word	0x080092e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fa4e 	bl	8009648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0208 	orr.w	r2, r2, #8
 80091ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0204 	bic.w	r2, r2, #4
 80091ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6999      	ldr	r1, [r3, #24]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	691a      	ldr	r2, [r3, #16]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	619a      	str	r2, [r3, #24]
      break;
 80091de:	e0a3      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 faa0 	bl	800972c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699a      	ldr	r2, [r3, #24]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6999      	ldr	r1, [r3, #24]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	021a      	lsls	r2, r3, #8
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	619a      	str	r2, [r3, #24]
      break;
 8009220:	e082      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 faf7 	bl	800981c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0208 	orr.w	r2, r2, #8
 800923c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69da      	ldr	r2, [r3, #28]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0204 	bic.w	r2, r2, #4
 800924c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69d9      	ldr	r1, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	691a      	ldr	r2, [r3, #16]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	61da      	str	r2, [r3, #28]
      break;
 8009260:	e062      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fb4d 	bl	8009908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69da      	ldr	r2, [r3, #28]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800927c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69da      	ldr	r2, [r3, #28]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800928c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69d9      	ldr	r1, [r3, #28]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	021a      	lsls	r2, r3, #8
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	61da      	str	r2, [r3, #28]
      break;
 80092a2:	e041      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fb84 	bl	80099b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0208 	orr.w	r2, r2, #8
 80092be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092e2:	e021      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fbb6 	bl	8009a5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800930e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	021a      	lsls	r2, r3, #8
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009324:	e000      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009326:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop

08009344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_TIM_ConfigClockSource+0x18>
 8009358:	2302      	movs	r3, #2
 800935a:	e0a6      	b.n	80094aa <HAL_TIM_ConfigClockSource+0x166>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4b4f      	ldr	r3, [pc, #316]	; (80094b4 <HAL_TIM_ConfigClockSource+0x170>)
 8009378:	4013      	ands	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b40      	cmp	r3, #64	; 0x40
 8009392:	d067      	beq.n	8009464 <HAL_TIM_ConfigClockSource+0x120>
 8009394:	2b40      	cmp	r3, #64	; 0x40
 8009396:	d80b      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x6c>
 8009398:	2b10      	cmp	r3, #16
 800939a:	d073      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x140>
 800939c:	2b10      	cmp	r3, #16
 800939e:	d802      	bhi.n	80093a6 <HAL_TIM_ConfigClockSource+0x62>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d06f      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80093a4:	e078      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d06c      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x140>
 80093aa:	2b30      	cmp	r3, #48	; 0x30
 80093ac:	d06a      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80093ae:	e073      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80093b0:	2b70      	cmp	r3, #112	; 0x70
 80093b2:	d00d      	beq.n	80093d0 <HAL_TIM_ConfigClockSource+0x8c>
 80093b4:	2b70      	cmp	r3, #112	; 0x70
 80093b6:	d804      	bhi.n	80093c2 <HAL_TIM_ConfigClockSource+0x7e>
 80093b8:	2b50      	cmp	r3, #80	; 0x50
 80093ba:	d033      	beq.n	8009424 <HAL_TIM_ConfigClockSource+0xe0>
 80093bc:	2b60      	cmp	r3, #96	; 0x60
 80093be:	d041      	beq.n	8009444 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80093c0:	e06a      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80093c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c6:	d066      	beq.n	8009496 <HAL_TIM_ConfigClockSource+0x152>
 80093c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093cc:	d017      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80093ce:	e063      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	6899      	ldr	r1, [r3, #8]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f000 fc0a 	bl	8009bf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	609a      	str	r2, [r3, #8]
      break;
 80093fc:	e04c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6899      	ldr	r1, [r3, #8]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f000 fbf3 	bl	8009bf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009420:	609a      	str	r2, [r3, #8]
      break;
 8009422:	e039      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6859      	ldr	r1, [r3, #4]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	461a      	mov	r2, r3
 8009432:	f000 fb67 	bl	8009b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2150      	movs	r1, #80	; 0x50
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fbc0 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009442:	e029      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	6859      	ldr	r1, [r3, #4]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	461a      	mov	r2, r3
 8009452:	f000 fb86 	bl	8009b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2160      	movs	r1, #96	; 0x60
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fbb0 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009462:	e019      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	6859      	ldr	r1, [r3, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	461a      	mov	r2, r3
 8009472:	f000 fb47 	bl	8009b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2140      	movs	r1, #64	; 0x40
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fba0 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009482:	e009      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f000 fb97 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009494:	e000      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	fffeff88 	.word	0xfffeff88

080094b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a40      	ldr	r2, [pc, #256]	; (800961c <TIM_Base_SetConfig+0x114>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d013      	beq.n	8009548 <TIM_Base_SetConfig+0x40>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009526:	d00f      	beq.n	8009548 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a3d      	ldr	r2, [pc, #244]	; (8009620 <TIM_Base_SetConfig+0x118>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00b      	beq.n	8009548 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a3c      	ldr	r2, [pc, #240]	; (8009624 <TIM_Base_SetConfig+0x11c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_Base_SetConfig+0x40>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a3b      	ldr	r2, [pc, #236]	; (8009628 <TIM_Base_SetConfig+0x120>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_Base_SetConfig+0x40>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a3a      	ldr	r2, [pc, #232]	; (800962c <TIM_Base_SetConfig+0x124>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d108      	bne.n	800955a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a2f      	ldr	r2, [pc, #188]	; (800961c <TIM_Base_SetConfig+0x114>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d02b      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009568:	d027      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a2c      	ldr	r2, [pc, #176]	; (8009620 <TIM_Base_SetConfig+0x118>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d023      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a2b      	ldr	r2, [pc, #172]	; (8009624 <TIM_Base_SetConfig+0x11c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01f      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a2a      	ldr	r2, [pc, #168]	; (8009628 <TIM_Base_SetConfig+0x120>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d01b      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a29      	ldr	r2, [pc, #164]	; (800962c <TIM_Base_SetConfig+0x124>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d017      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a28      	ldr	r2, [pc, #160]	; (8009630 <TIM_Base_SetConfig+0x128>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d013      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a27      	ldr	r2, [pc, #156]	; (8009634 <TIM_Base_SetConfig+0x12c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d00f      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a26      	ldr	r2, [pc, #152]	; (8009638 <TIM_Base_SetConfig+0x130>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00b      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a25      	ldr	r2, [pc, #148]	; (800963c <TIM_Base_SetConfig+0x134>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d007      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a24      	ldr	r2, [pc, #144]	; (8009640 <TIM_Base_SetConfig+0x138>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d003      	beq.n	80095ba <TIM_Base_SetConfig+0xb2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a23      	ldr	r2, [pc, #140]	; (8009644 <TIM_Base_SetConfig+0x13c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d108      	bne.n	80095cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a0a      	ldr	r2, [pc, #40]	; (800961c <TIM_Base_SetConfig+0x114>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_Base_SetConfig+0xf8>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a0c      	ldr	r2, [pc, #48]	; (800962c <TIM_Base_SetConfig+0x124>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d103      	bne.n	8009608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	615a      	str	r2, [r3, #20]
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40010000 	.word	0x40010000
 8009620:	40000400 	.word	0x40000400
 8009624:	40000800 	.word	0x40000800
 8009628:	40000c00 	.word	0x40000c00
 800962c:	40010400 	.word	0x40010400
 8009630:	40014000 	.word	0x40014000
 8009634:	40014400 	.word	0x40014400
 8009638:	40014800 	.word	0x40014800
 800963c:	40001800 	.word	0x40001800
 8009640:	40001c00 	.word	0x40001c00
 8009644:	40002000 	.word	0x40002000

08009648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	f023 0201 	bic.w	r2, r3, #1
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4b2b      	ldr	r3, [pc, #172]	; (8009720 <TIM_OC1_SetConfig+0xd8>)
 8009674:	4013      	ands	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f023 0302 	bic.w	r3, r3, #2
 8009690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a21      	ldr	r2, [pc, #132]	; (8009724 <TIM_OC1_SetConfig+0xdc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d003      	beq.n	80096ac <TIM_OC1_SetConfig+0x64>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a20      	ldr	r2, [pc, #128]	; (8009728 <TIM_OC1_SetConfig+0xe0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d10c      	bne.n	80096c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f023 0308 	bic.w	r3, r3, #8
 80096b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f023 0304 	bic.w	r3, r3, #4
 80096c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a16      	ldr	r2, [pc, #88]	; (8009724 <TIM_OC1_SetConfig+0xdc>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d003      	beq.n	80096d6 <TIM_OC1_SetConfig+0x8e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a15      	ldr	r2, [pc, #84]	; (8009728 <TIM_OC1_SetConfig+0xe0>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d111      	bne.n	80096fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	621a      	str	r2, [r3, #32]
}
 8009714:	bf00      	nop
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	fffeff8f 	.word	0xfffeff8f
 8009724:	40010000 	.word	0x40010000
 8009728:	40010400 	.word	0x40010400

0800972c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	f023 0210 	bic.w	r2, r3, #16
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4b2e      	ldr	r3, [pc, #184]	; (8009810 <TIM_OC2_SetConfig+0xe4>)
 8009758:	4013      	ands	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	021b      	lsls	r3, r3, #8
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f023 0320 	bic.w	r3, r3, #32
 8009776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	4313      	orrs	r3, r2
 8009782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a23      	ldr	r2, [pc, #140]	; (8009814 <TIM_OC2_SetConfig+0xe8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_OC2_SetConfig+0x68>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a22      	ldr	r2, [pc, #136]	; (8009818 <TIM_OC2_SetConfig+0xec>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d10d      	bne.n	80097b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800979a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a18      	ldr	r2, [pc, #96]	; (8009814 <TIM_OC2_SetConfig+0xe8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d003      	beq.n	80097c0 <TIM_OC2_SetConfig+0x94>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a17      	ldr	r2, [pc, #92]	; (8009818 <TIM_OC2_SetConfig+0xec>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d113      	bne.n	80097e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	4313      	orrs	r3, r2
 80097da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	621a      	str	r2, [r3, #32]
}
 8009802:	bf00      	nop
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	feff8fff 	.word	0xfeff8fff
 8009814:	40010000 	.word	0x40010000
 8009818:	40010400 	.word	0x40010400

0800981c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <TIM_OC3_SetConfig+0xe0>)
 8009848:	4013      	ands	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a22      	ldr	r2, [pc, #136]	; (8009900 <TIM_OC3_SetConfig+0xe4>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d003      	beq.n	8009882 <TIM_OC3_SetConfig+0x66>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a21      	ldr	r2, [pc, #132]	; (8009904 <TIM_OC3_SetConfig+0xe8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d10d      	bne.n	800989e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800989c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a17      	ldr	r2, [pc, #92]	; (8009900 <TIM_OC3_SetConfig+0xe4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d003      	beq.n	80098ae <TIM_OC3_SetConfig+0x92>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a16      	ldr	r2, [pc, #88]	; (8009904 <TIM_OC3_SetConfig+0xe8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d113      	bne.n	80098d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	011b      	lsls	r3, r3, #4
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	621a      	str	r2, [r3, #32]
}
 80098f0:	bf00      	nop
 80098f2:	371c      	adds	r7, #28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	fffeff8f 	.word	0xfffeff8f
 8009900:	40010000 	.word	0x40010000
 8009904:	40010400 	.word	0x40010400

08009908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	4b1e      	ldr	r3, [pc, #120]	; (80099ac <TIM_OC4_SetConfig+0xa4>)
 8009934:	4013      	ands	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800993e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	031b      	lsls	r3, r3, #12
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a13      	ldr	r2, [pc, #76]	; (80099b0 <TIM_OC4_SetConfig+0xa8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_OC4_SetConfig+0x68>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a12      	ldr	r2, [pc, #72]	; (80099b4 <TIM_OC4_SetConfig+0xac>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d109      	bne.n	8009984 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	019b      	lsls	r3, r3, #6
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	621a      	str	r2, [r3, #32]
}
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	feff8fff 	.word	0xfeff8fff
 80099b0:	40010000 	.word	0x40010000
 80099b4:	40010400 	.word	0x40010400

080099b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4b1b      	ldr	r3, [pc, #108]	; (8009a50 <TIM_OC5_SetConfig+0x98>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80099f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	041b      	lsls	r3, r3, #16
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a12      	ldr	r2, [pc, #72]	; (8009a54 <TIM_OC5_SetConfig+0x9c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d003      	beq.n	8009a16 <TIM_OC5_SetConfig+0x5e>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a11      	ldr	r2, [pc, #68]	; (8009a58 <TIM_OC5_SetConfig+0xa0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d109      	bne.n	8009a2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	621a      	str	r2, [r3, #32]
}
 8009a44:	bf00      	nop
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	fffeff8f 	.word	0xfffeff8f
 8009a54:	40010000 	.word	0x40010000
 8009a58:	40010400 	.word	0x40010400

08009a5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <TIM_OC6_SetConfig+0x9c>)
 8009a88:	4013      	ands	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	021b      	lsls	r3, r3, #8
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	051b      	lsls	r3, r3, #20
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a13      	ldr	r2, [pc, #76]	; (8009afc <TIM_OC6_SetConfig+0xa0>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d003      	beq.n	8009abc <TIM_OC6_SetConfig+0x60>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a12      	ldr	r2, [pc, #72]	; (8009b00 <TIM_OC6_SetConfig+0xa4>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d109      	bne.n	8009ad0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	029b      	lsls	r3, r3, #10
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	621a      	str	r2, [r3, #32]
}
 8009aea:	bf00      	nop
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	feff8fff 	.word	0xfeff8fff
 8009afc:	40010000 	.word	0x40010000
 8009b00:	40010400 	.word	0x40010400

08009b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	f023 0201 	bic.w	r2, r3, #1
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f023 030a 	bic.w	r3, r3, #10
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	621a      	str	r2, [r3, #32]
}
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b087      	sub	sp, #28
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	f023 0210 	bic.w	r2, r3, #16
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	031b      	lsls	r3, r3, #12
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	621a      	str	r2, [r3, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f043 0307 	orr.w	r3, r3, #7
 8009be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	609a      	str	r2, [r3, #8]
}
 8009bec:	bf00      	nop
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	021a      	lsls	r2, r3, #8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	609a      	str	r2, [r3, #8]
}
 8009c2c:	bf00      	nop
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e045      	b.n	8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1c      	ldr	r2, [pc, #112]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d004      	beq.n	8009c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a1b      	ldr	r2, [pc, #108]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d108      	bne.n	8009c96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	40010000 	.word	0x40010000
 8009cec:	40010400 	.word	0x40010400

08009cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d101      	bne.n	8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	e065      	b.n	8009dd8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	041b      	lsls	r3, r3, #16
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a16      	ldr	r2, [pc, #88]	; (8009de4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d004      	beq.n	8009d9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a14      	ldr	r2, [pc, #80]	; (8009de8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d115      	bne.n	8009dc6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	051b      	lsls	r3, r3, #20
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	40010000 	.word	0x40010000
 8009de8:	40010400 	.word	0x40010400

08009dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e040      	b.n	8009ebc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f00d fda0 	bl	8017990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2224      	movs	r2, #36	; 0x24
 8009e54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f82c 	bl	8009ec4 <UART_SetConfig>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e022      	b.n	8009ebc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fac4 	bl	800a40c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ea2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fb4b 	bl	800a550 <UART_CheckIdleState>
 8009eba:	4603      	mov	r3, r0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4bb1      	ldr	r3, [pc, #708]	; (800a1b8 <UART_SetConfig+0x2f4>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	6939      	ldr	r1, [r7, #16]
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a9f      	ldr	r2, [pc, #636]	; (800a1bc <UART_SetConfig+0x2f8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d121      	bne.n	8009f88 <UART_SetConfig+0xc4>
 8009f44:	4b9e      	ldr	r3, [pc, #632]	; (800a1c0 <UART_SetConfig+0x2fc>)
 8009f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d816      	bhi.n	8009f80 <UART_SetConfig+0xbc>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <UART_SetConfig+0x94>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f75 	.word	0x08009f75
 8009f60:	08009f6f 	.word	0x08009f6f
 8009f64:	08009f7b 	.word	0x08009f7b
 8009f68:	2301      	movs	r3, #1
 8009f6a:	77fb      	strb	r3, [r7, #31]
 8009f6c:	e151      	b.n	800a212 <UART_SetConfig+0x34e>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	77fb      	strb	r3, [r7, #31]
 8009f72:	e14e      	b.n	800a212 <UART_SetConfig+0x34e>
 8009f74:	2304      	movs	r3, #4
 8009f76:	77fb      	strb	r3, [r7, #31]
 8009f78:	e14b      	b.n	800a212 <UART_SetConfig+0x34e>
 8009f7a:	2308      	movs	r3, #8
 8009f7c:	77fb      	strb	r3, [r7, #31]
 8009f7e:	e148      	b.n	800a212 <UART_SetConfig+0x34e>
 8009f80:	2310      	movs	r3, #16
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	bf00      	nop
 8009f86:	e144      	b.n	800a212 <UART_SetConfig+0x34e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a8d      	ldr	r2, [pc, #564]	; (800a1c4 <UART_SetConfig+0x300>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d134      	bne.n	8009ffc <UART_SetConfig+0x138>
 8009f92:	4b8b      	ldr	r3, [pc, #556]	; (800a1c0 <UART_SetConfig+0x2fc>)
 8009f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f98:	f003 030c 	and.w	r3, r3, #12
 8009f9c:	2b0c      	cmp	r3, #12
 8009f9e:	d829      	bhi.n	8009ff4 <UART_SetConfig+0x130>
 8009fa0:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <UART_SetConfig+0xe4>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	08009fdd 	.word	0x08009fdd
 8009fac:	08009ff5 	.word	0x08009ff5
 8009fb0:	08009ff5 	.word	0x08009ff5
 8009fb4:	08009ff5 	.word	0x08009ff5
 8009fb8:	08009fe9 	.word	0x08009fe9
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	08009fe3 	.word	0x08009fe3
 8009fcc:	08009ff5 	.word	0x08009ff5
 8009fd0:	08009ff5 	.word	0x08009ff5
 8009fd4:	08009ff5 	.word	0x08009ff5
 8009fd8:	08009fef 	.word	0x08009fef
 8009fdc:	2300      	movs	r3, #0
 8009fde:	77fb      	strb	r3, [r7, #31]
 8009fe0:	e117      	b.n	800a212 <UART_SetConfig+0x34e>
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	77fb      	strb	r3, [r7, #31]
 8009fe6:	e114      	b.n	800a212 <UART_SetConfig+0x34e>
 8009fe8:	2304      	movs	r3, #4
 8009fea:	77fb      	strb	r3, [r7, #31]
 8009fec:	e111      	b.n	800a212 <UART_SetConfig+0x34e>
 8009fee:	2308      	movs	r3, #8
 8009ff0:	77fb      	strb	r3, [r7, #31]
 8009ff2:	e10e      	b.n	800a212 <UART_SetConfig+0x34e>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	bf00      	nop
 8009ffa:	e10a      	b.n	800a212 <UART_SetConfig+0x34e>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a71      	ldr	r2, [pc, #452]	; (800a1c8 <UART_SetConfig+0x304>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d120      	bne.n	800a048 <UART_SetConfig+0x184>
 800a006:	4b6e      	ldr	r3, [pc, #440]	; (800a1c0 <UART_SetConfig+0x2fc>)
 800a008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a00c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a010:	2b10      	cmp	r3, #16
 800a012:	d00f      	beq.n	800a034 <UART_SetConfig+0x170>
 800a014:	2b10      	cmp	r3, #16
 800a016:	d802      	bhi.n	800a01e <UART_SetConfig+0x15a>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <UART_SetConfig+0x164>
 800a01c:	e010      	b.n	800a040 <UART_SetConfig+0x17c>
 800a01e:	2b20      	cmp	r3, #32
 800a020:	d005      	beq.n	800a02e <UART_SetConfig+0x16a>
 800a022:	2b30      	cmp	r3, #48	; 0x30
 800a024:	d009      	beq.n	800a03a <UART_SetConfig+0x176>
 800a026:	e00b      	b.n	800a040 <UART_SetConfig+0x17c>
 800a028:	2300      	movs	r3, #0
 800a02a:	77fb      	strb	r3, [r7, #31]
 800a02c:	e0f1      	b.n	800a212 <UART_SetConfig+0x34e>
 800a02e:	2302      	movs	r3, #2
 800a030:	77fb      	strb	r3, [r7, #31]
 800a032:	e0ee      	b.n	800a212 <UART_SetConfig+0x34e>
 800a034:	2304      	movs	r3, #4
 800a036:	77fb      	strb	r3, [r7, #31]
 800a038:	e0eb      	b.n	800a212 <UART_SetConfig+0x34e>
 800a03a:	2308      	movs	r3, #8
 800a03c:	77fb      	strb	r3, [r7, #31]
 800a03e:	e0e8      	b.n	800a212 <UART_SetConfig+0x34e>
 800a040:	2310      	movs	r3, #16
 800a042:	77fb      	strb	r3, [r7, #31]
 800a044:	bf00      	nop
 800a046:	e0e4      	b.n	800a212 <UART_SetConfig+0x34e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a5f      	ldr	r2, [pc, #380]	; (800a1cc <UART_SetConfig+0x308>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d120      	bne.n	800a094 <UART_SetConfig+0x1d0>
 800a052:	4b5b      	ldr	r3, [pc, #364]	; (800a1c0 <UART_SetConfig+0x2fc>)
 800a054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a058:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a05c:	2b40      	cmp	r3, #64	; 0x40
 800a05e:	d00f      	beq.n	800a080 <UART_SetConfig+0x1bc>
 800a060:	2b40      	cmp	r3, #64	; 0x40
 800a062:	d802      	bhi.n	800a06a <UART_SetConfig+0x1a6>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <UART_SetConfig+0x1b0>
 800a068:	e010      	b.n	800a08c <UART_SetConfig+0x1c8>
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	d005      	beq.n	800a07a <UART_SetConfig+0x1b6>
 800a06e:	2bc0      	cmp	r3, #192	; 0xc0
 800a070:	d009      	beq.n	800a086 <UART_SetConfig+0x1c2>
 800a072:	e00b      	b.n	800a08c <UART_SetConfig+0x1c8>
 800a074:	2300      	movs	r3, #0
 800a076:	77fb      	strb	r3, [r7, #31]
 800a078:	e0cb      	b.n	800a212 <UART_SetConfig+0x34e>
 800a07a:	2302      	movs	r3, #2
 800a07c:	77fb      	strb	r3, [r7, #31]
 800a07e:	e0c8      	b.n	800a212 <UART_SetConfig+0x34e>
 800a080:	2304      	movs	r3, #4
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e0c5      	b.n	800a212 <UART_SetConfig+0x34e>
 800a086:	2308      	movs	r3, #8
 800a088:	77fb      	strb	r3, [r7, #31]
 800a08a:	e0c2      	b.n	800a212 <UART_SetConfig+0x34e>
 800a08c:	2310      	movs	r3, #16
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	bf00      	nop
 800a092:	e0be      	b.n	800a212 <UART_SetConfig+0x34e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a4d      	ldr	r2, [pc, #308]	; (800a1d0 <UART_SetConfig+0x30c>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d124      	bne.n	800a0e8 <UART_SetConfig+0x224>
 800a09e:	4b48      	ldr	r3, [pc, #288]	; (800a1c0 <UART_SetConfig+0x2fc>)
 800a0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ac:	d012      	beq.n	800a0d4 <UART_SetConfig+0x210>
 800a0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b2:	d802      	bhi.n	800a0ba <UART_SetConfig+0x1f6>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d007      	beq.n	800a0c8 <UART_SetConfig+0x204>
 800a0b8:	e012      	b.n	800a0e0 <UART_SetConfig+0x21c>
 800a0ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0be:	d006      	beq.n	800a0ce <UART_SetConfig+0x20a>
 800a0c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c4:	d009      	beq.n	800a0da <UART_SetConfig+0x216>
 800a0c6:	e00b      	b.n	800a0e0 <UART_SetConfig+0x21c>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	77fb      	strb	r3, [r7, #31]
 800a0cc:	e0a1      	b.n	800a212 <UART_SetConfig+0x34e>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	77fb      	strb	r3, [r7, #31]
 800a0d2:	e09e      	b.n	800a212 <UART_SetConfig+0x34e>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e09b      	b.n	800a212 <UART_SetConfig+0x34e>
 800a0da:	2308      	movs	r3, #8
 800a0dc:	77fb      	strb	r3, [r7, #31]
 800a0de:	e098      	b.n	800a212 <UART_SetConfig+0x34e>
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	77fb      	strb	r3, [r7, #31]
 800a0e4:	bf00      	nop
 800a0e6:	e094      	b.n	800a212 <UART_SetConfig+0x34e>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a39      	ldr	r2, [pc, #228]	; (800a1d4 <UART_SetConfig+0x310>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d124      	bne.n	800a13c <UART_SetConfig+0x278>
 800a0f2:	4b33      	ldr	r3, [pc, #204]	; (800a1c0 <UART_SetConfig+0x2fc>)
 800a0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a100:	d012      	beq.n	800a128 <UART_SetConfig+0x264>
 800a102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a106:	d802      	bhi.n	800a10e <UART_SetConfig+0x24a>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <UART_SetConfig+0x258>
 800a10c:	e012      	b.n	800a134 <UART_SetConfig+0x270>
 800a10e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a112:	d006      	beq.n	800a122 <UART_SetConfig+0x25e>
 800a114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a118:	d009      	beq.n	800a12e <UART_SetConfig+0x26a>
 800a11a:	e00b      	b.n	800a134 <UART_SetConfig+0x270>
 800a11c:	2301      	movs	r3, #1
 800a11e:	77fb      	strb	r3, [r7, #31]
 800a120:	e077      	b.n	800a212 <UART_SetConfig+0x34e>
 800a122:	2302      	movs	r3, #2
 800a124:	77fb      	strb	r3, [r7, #31]
 800a126:	e074      	b.n	800a212 <UART_SetConfig+0x34e>
 800a128:	2304      	movs	r3, #4
 800a12a:	77fb      	strb	r3, [r7, #31]
 800a12c:	e071      	b.n	800a212 <UART_SetConfig+0x34e>
 800a12e:	2308      	movs	r3, #8
 800a130:	77fb      	strb	r3, [r7, #31]
 800a132:	e06e      	b.n	800a212 <UART_SetConfig+0x34e>
 800a134:	2310      	movs	r3, #16
 800a136:	77fb      	strb	r3, [r7, #31]
 800a138:	bf00      	nop
 800a13a:	e06a      	b.n	800a212 <UART_SetConfig+0x34e>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a25      	ldr	r2, [pc, #148]	; (800a1d8 <UART_SetConfig+0x314>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d124      	bne.n	800a190 <UART_SetConfig+0x2cc>
 800a146:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <UART_SetConfig+0x2fc>)
 800a148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a154:	d012      	beq.n	800a17c <UART_SetConfig+0x2b8>
 800a156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a15a:	d802      	bhi.n	800a162 <UART_SetConfig+0x29e>
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d007      	beq.n	800a170 <UART_SetConfig+0x2ac>
 800a160:	e012      	b.n	800a188 <UART_SetConfig+0x2c4>
 800a162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a166:	d006      	beq.n	800a176 <UART_SetConfig+0x2b2>
 800a168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a16c:	d009      	beq.n	800a182 <UART_SetConfig+0x2be>
 800a16e:	e00b      	b.n	800a188 <UART_SetConfig+0x2c4>
 800a170:	2300      	movs	r3, #0
 800a172:	77fb      	strb	r3, [r7, #31]
 800a174:	e04d      	b.n	800a212 <UART_SetConfig+0x34e>
 800a176:	2302      	movs	r3, #2
 800a178:	77fb      	strb	r3, [r7, #31]
 800a17a:	e04a      	b.n	800a212 <UART_SetConfig+0x34e>
 800a17c:	2304      	movs	r3, #4
 800a17e:	77fb      	strb	r3, [r7, #31]
 800a180:	e047      	b.n	800a212 <UART_SetConfig+0x34e>
 800a182:	2308      	movs	r3, #8
 800a184:	77fb      	strb	r3, [r7, #31]
 800a186:	e044      	b.n	800a212 <UART_SetConfig+0x34e>
 800a188:	2310      	movs	r3, #16
 800a18a:	77fb      	strb	r3, [r7, #31]
 800a18c:	bf00      	nop
 800a18e:	e040      	b.n	800a212 <UART_SetConfig+0x34e>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a11      	ldr	r2, [pc, #68]	; (800a1dc <UART_SetConfig+0x318>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d139      	bne.n	800a20e <UART_SetConfig+0x34a>
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <UART_SetConfig+0x2fc>)
 800a19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1a8:	d027      	beq.n	800a1fa <UART_SetConfig+0x336>
 800a1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1ae:	d817      	bhi.n	800a1e0 <UART_SetConfig+0x31c>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01c      	beq.n	800a1ee <UART_SetConfig+0x32a>
 800a1b4:	e027      	b.n	800a206 <UART_SetConfig+0x342>
 800a1b6:	bf00      	nop
 800a1b8:	efff69f3 	.word	0xefff69f3
 800a1bc:	40011000 	.word	0x40011000
 800a1c0:	40023800 	.word	0x40023800
 800a1c4:	40004400 	.word	0x40004400
 800a1c8:	40004800 	.word	0x40004800
 800a1cc:	40004c00 	.word	0x40004c00
 800a1d0:	40005000 	.word	0x40005000
 800a1d4:	40011400 	.word	0x40011400
 800a1d8:	40007800 	.word	0x40007800
 800a1dc:	40007c00 	.word	0x40007c00
 800a1e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1e4:	d006      	beq.n	800a1f4 <UART_SetConfig+0x330>
 800a1e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1ea:	d009      	beq.n	800a200 <UART_SetConfig+0x33c>
 800a1ec:	e00b      	b.n	800a206 <UART_SetConfig+0x342>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e00e      	b.n	800a212 <UART_SetConfig+0x34e>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	e00b      	b.n	800a212 <UART_SetConfig+0x34e>
 800a1fa:	2304      	movs	r3, #4
 800a1fc:	77fb      	strb	r3, [r7, #31]
 800a1fe:	e008      	b.n	800a212 <UART_SetConfig+0x34e>
 800a200:	2308      	movs	r3, #8
 800a202:	77fb      	strb	r3, [r7, #31]
 800a204:	e005      	b.n	800a212 <UART_SetConfig+0x34e>
 800a206:	2310      	movs	r3, #16
 800a208:	77fb      	strb	r3, [r7, #31]
 800a20a:	bf00      	nop
 800a20c:	e001      	b.n	800a212 <UART_SetConfig+0x34e>
 800a20e:	2310      	movs	r3, #16
 800a210:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a21a:	d17c      	bne.n	800a316 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800a21c:	7ffb      	ldrb	r3, [r7, #31]
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d859      	bhi.n	800a2d6 <UART_SetConfig+0x412>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <UART_SetConfig+0x364>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a24d 	.word	0x0800a24d
 800a22c:	0800a26b 	.word	0x0800a26b
 800a230:	0800a289 	.word	0x0800a289
 800a234:	0800a2d7 	.word	0x0800a2d7
 800a238:	0800a2a1 	.word	0x0800a2a1
 800a23c:	0800a2d7 	.word	0x0800a2d7
 800a240:	0800a2d7 	.word	0x0800a2d7
 800a244:	0800a2d7 	.word	0x0800a2d7
 800a248:	0800a2bf 	.word	0x0800a2bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a24c:	f7fc f884 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 800a250:	4603      	mov	r3, r0
 800a252:	005a      	lsls	r2, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	085b      	lsrs	r3, r3, #1
 800a25a:	441a      	add	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	fbb2 f3f3 	udiv	r3, r2, r3
 800a264:	b29b      	uxth	r3, r3
 800a266:	61bb      	str	r3, [r7, #24]
        break;
 800a268:	e038      	b.n	800a2dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a26a:	f7fc f889 	bl	8006380 <HAL_RCC_GetPCLK2Freq>
 800a26e:	4603      	mov	r3, r0
 800a270:	005a      	lsls	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	441a      	add	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	b29b      	uxth	r3, r3
 800a284:	61bb      	str	r3, [r7, #24]
        break;
 800a286:	e029      	b.n	800a2dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	085a      	lsrs	r2, r3, #1
 800a28e:	4b5d      	ldr	r3, [pc, #372]	; (800a404 <UART_SetConfig+0x540>)
 800a290:	4413      	add	r3, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6852      	ldr	r2, [r2, #4]
 800a296:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	61bb      	str	r3, [r7, #24]
        break;
 800a29e:	e01d      	b.n	800a2dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a2a0:	f7fb ff9c 	bl	80061dc <HAL_RCC_GetSysClockFreq>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	005a      	lsls	r2, r3, #1
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	085b      	lsrs	r3, r3, #1
 800a2ae:	441a      	add	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	61bb      	str	r3, [r7, #24]
        break;
 800a2bc:	e00e      	b.n	800a2dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	61bb      	str	r3, [r7, #24]
        break;
 800a2d4:	e002      	b.n	800a2dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	75fb      	strb	r3, [r7, #23]
        break;
 800a2da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b0f      	cmp	r3, #15
 800a2e0:	d916      	bls.n	800a310 <UART_SetConfig+0x44c>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e8:	d212      	bcs.n	800a310 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f023 030f 	bic.w	r3, r3, #15
 800a2f2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	085b      	lsrs	r3, r3, #1
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	89fb      	ldrh	r3, [r7, #14]
 800a302:	4313      	orrs	r3, r2
 800a304:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	89fa      	ldrh	r2, [r7, #14]
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	e06e      	b.n	800a3ee <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	75fb      	strb	r3, [r7, #23]
 800a314:	e06b      	b.n	800a3ee <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800a316:	7ffb      	ldrb	r3, [r7, #31]
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d857      	bhi.n	800a3cc <UART_SetConfig+0x508>
 800a31c:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <UART_SetConfig+0x460>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a365 	.word	0x0800a365
 800a32c:	0800a381 	.word	0x0800a381
 800a330:	0800a3cd 	.word	0x0800a3cd
 800a334:	0800a399 	.word	0x0800a399
 800a338:	0800a3cd 	.word	0x0800a3cd
 800a33c:	0800a3cd 	.word	0x0800a3cd
 800a340:	0800a3cd 	.word	0x0800a3cd
 800a344:	0800a3b5 	.word	0x0800a3b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a348:	f7fc f806 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 800a34c:	4602      	mov	r2, r0
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	441a      	add	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35e:	b29b      	uxth	r3, r3
 800a360:	61bb      	str	r3, [r7, #24]
        break;
 800a362:	e036      	b.n	800a3d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a364:	f7fc f80c 	bl	8006380 <HAL_RCC_GetPCLK2Freq>
 800a368:	4602      	mov	r2, r0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	441a      	add	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	61bb      	str	r3, [r7, #24]
        break;
 800a37e:	e028      	b.n	800a3d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	085a      	lsrs	r2, r3, #1
 800a386:	4b20      	ldr	r3, [pc, #128]	; (800a408 <UART_SetConfig+0x544>)
 800a388:	4413      	add	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	6852      	ldr	r2, [r2, #4]
 800a38e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a392:	b29b      	uxth	r3, r3
 800a394:	61bb      	str	r3, [r7, #24]
        break;
 800a396:	e01c      	b.n	800a3d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a398:	f7fb ff20 	bl	80061dc <HAL_RCC_GetSysClockFreq>
 800a39c:	4602      	mov	r2, r0
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	61bb      	str	r3, [r7, #24]
        break;
 800a3b2:	e00e      	b.n	800a3d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	085b      	lsrs	r3, r3, #1
 800a3ba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	61bb      	str	r3, [r7, #24]
        break;
 800a3ca:	e002      	b.n	800a3d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
        break;
 800a3d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b0f      	cmp	r3, #15
 800a3d6:	d908      	bls.n	800a3ea <UART_SetConfig+0x526>
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3de:	d204      	bcs.n	800a3ea <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	60da      	str	r2, [r3, #12]
 800a3e8:	e001      	b.n	800a3ee <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	01e84800 	.word	0x01e84800
 800a408:	00f42400 	.word	0x00f42400

0800a40c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	f003 0320 	and.w	r3, r3, #32
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01a      	beq.n	800a522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a50a:	d10a      	bne.n	800a522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a55e:	f7f6 feef 	bl	8001340 <HAL_GetTick>
 800a562:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0308 	and.w	r3, r3, #8
 800a56e:	2b08      	cmp	r3, #8
 800a570:	d10e      	bne.n	800a590 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f814 	bl	800a5ae <UART_WaitOnFlagUntilTimeout>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e00a      	b.n	800a5a6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2220      	movs	r2, #32
 800a59a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	603b      	str	r3, [r7, #0]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5be:	e02a      	b.n	800a616 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c6:	d026      	beq.n	800a616 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c8:	f7f6 feba 	bl	8001340 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d302      	bcc.n	800a5de <UART_WaitOnFlagUntilTimeout+0x30>
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d11b      	bne.n	800a616 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0201 	bic.w	r2, r2, #1
 800a5fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2220      	movs	r2, #32
 800a602:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e00f      	b.n	800a636 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69da      	ldr	r2, [r3, #28]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4013      	ands	r3, r2
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	429a      	cmp	r2, r3
 800a624:	bf0c      	ite	eq
 800a626:	2301      	moveq	r3, #1
 800a628:	2300      	movne	r3, #0
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	461a      	mov	r2, r3
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	429a      	cmp	r2, r3
 800a632:	d0c5      	beq.n	800a5c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d027      	beq.n	800a6aa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4b2f      	ldr	r3, [pc, #188]	; (800a720 <FMC_SDRAM_Init+0xe0>)
 800a664:	4013      	ands	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a670:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a676:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a67c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a682:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a688:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a68e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a694:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a69a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	e032      	b.n	800a710 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6b6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a6c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	4b12      	ldr	r3, [pc, #72]	; (800a720 <FMC_SDRAM_Init+0xe0>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6e4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a6ea:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a6f0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a6f6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a6fc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	4313      	orrs	r3, r2
 800a702:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	ffff8000 	.word	0xffff8000

0800a724 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d02e      	beq.n	800a79c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a74a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	3b01      	subs	r3, #1
 800a758:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a75a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	3b01      	subs	r3, #1
 800a762:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a764:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a76e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	3b01      	subs	r3, #1
 800a776:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a778:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	3b01      	subs	r3, #1
 800a780:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a782:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	3b01      	subs	r3, #1
 800a78a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a78c:	4313      	orrs	r3, r2
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	4313      	orrs	r3, r2
 800a792:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	609a      	str	r2, [r3, #8]
 800a79a:	e039      	b.n	800a810 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	4b1e      	ldr	r3, [pc, #120]	; (800a820 <FMC_SDRAM_Timing_Init+0xfc>)
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a7ce:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7de:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7e8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a7f2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	ff0f0fff 	.word	0xff0f0fff

0800a824 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a83c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	3b01      	subs	r3, #1
 800a844:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a846:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a84e:	4313      	orrs	r3, r2
 800a850:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	371c      	adds	r7, #28
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	695a      	ldr	r2, [r3, #20]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a88c:	b084      	sub	sp, #16
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	f107 001c 	add.w	r0, r7, #28
 800a89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a8a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a8a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a8aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a8ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a8b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a8b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <SDMMC_Init+0x54>)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	b004      	add	sp, #16
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	ffff8100 	.word	0xffff8100

0800a8e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2203      	movs	r2, #3
 800a90a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0303 	and.w	r3, r3, #3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
	...

0800a938 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a956:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a95c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a962:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	4313      	orrs	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	4b06      	ldr	r3, [pc, #24]	; (800a988 <SDMMC_SendCommand+0x50>)
 800a970:	4013      	ands	r3, r2
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	fffff000 	.word	0xfffff000

0800a98c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	b2db      	uxtb	r3, r3
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3314      	adds	r3, #20
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	4413      	add	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
}  
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a9fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	431a      	orrs	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0

}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa3a:	2310      	movs	r3, #16
 800aa3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa3e:	2340      	movs	r3, #64	; 0x40
 800aa40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa4a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff ff70 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa58:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5c:	2110      	movs	r1, #16
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fa64 	bl	800af2c <SDMMC_GetCmdResp1>
 800aa64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa66:	69fb      	ldr	r3, [r7, #28]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa82:	2311      	movs	r3, #17
 800aa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa86:	2340      	movs	r3, #64	; 0x40
 800aa88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa92:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa94:	f107 0308 	add.w	r3, r7, #8
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff4c 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aaa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa4:	2111      	movs	r1, #17
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fa40 	bl	800af2c <SDMMC_GetCmdResp1>
 800aaac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaae:	69fb      	ldr	r3, [r7, #28]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3720      	adds	r7, #32
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aac2:	2300      	movs	r3, #0
 800aac4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aaca:	2312      	movs	r3, #18
 800aacc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aace:	2340      	movs	r3, #64	; 0x40
 800aad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad2:	2300      	movs	r3, #0
 800aad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aada:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aadc:	f107 0308 	add.w	r3, r7, #8
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7ff ff28 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaec:	2112      	movs	r1, #18
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fa1c 	bl	800af2c <SDMMC_GetCmdResp1>
 800aaf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf6:	69fb      	ldr	r3, [r7, #28]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab12:	2318      	movs	r3, #24
 800ab14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab22:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff ff04 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab34:	2118      	movs	r1, #24
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9f8 	bl	800af2c <SDMMC_GetCmdResp1>
 800ab3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab5a:	2319      	movs	r3, #25
 800ab5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5e:	2340      	movs	r3, #64	; 0x40
 800ab60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab6c:	f107 0308 	add.w	r3, r7, #8
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fee0 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7c:	2119      	movs	r1, #25
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f9d4 	bl	800af2c <SDMMC_GetCmdResp1>
 800ab84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab86:	69fb      	ldr	r3, [r7, #28]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aba0:	230c      	movs	r3, #12
 800aba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aba4:	2340      	movs	r3, #64	; 0x40
 800aba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff febd 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800abbe:	4a05      	ldr	r2, [pc, #20]	; (800abd4 <SDMMC_CmdStopTransfer+0x44>)
 800abc0:	210c      	movs	r1, #12
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f9b2 	bl	800af2c <SDMMC_GetCmdResp1>
 800abc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abca:	69fb      	ldr	r3, [r7, #28]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	05f5e100 	.word	0x05f5e100

0800abd8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800abe4:	2300      	movs	r3, #0
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800abec:	2307      	movs	r3, #7
 800abee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abf0:	2340      	movs	r3, #64	; 0x40
 800abf2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abf4:	2300      	movs	r3, #0
 800abf6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abfc:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abfe:	f107 0310 	add.w	r3, r7, #16
 800ac02:	4619      	mov	r1, r3
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff fe97 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac0e:	2107      	movs	r1, #7
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 f98b 	bl	800af2c <SDMMC_GetCmdResp1>
 800ac16:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3728      	adds	r7, #40	; 0x28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b088      	sub	sp, #32
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac36:	2300      	movs	r3, #0
 800ac38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac42:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fe74 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f941 	bl	800aed8 <SDMMC_GetCmdError>
 800ac56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b088      	sub	sp, #32
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac6e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac74:	2308      	movs	r3, #8
 800ac76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac78:	2340      	movs	r3, #64	; 0x40
 800ac7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac84:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac86:	f107 0308 	add.w	r3, r7, #8
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fe53 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fb12 	bl	800b2bc <SDMMC_GetCmdResp7>
 800ac98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acae:	2300      	movs	r3, #0
 800acb0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800acb6:	2337      	movs	r3, #55	; 0x37
 800acb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acba:	2340      	movs	r3, #64	; 0x40
 800acbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acc8:	f107 0308 	add.w	r3, r7, #8
 800accc:	4619      	mov	r1, r3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff fe32 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800acd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd8:	2137      	movs	r1, #55	; 0x37
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f926 	bl	800af2c <SDMMC_GetCmdResp1>
 800ace0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace2:	69fb      	ldr	r3, [r7, #28]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <SDMMC_CmdAppOperCommand+0x48>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad02:	2329      	movs	r3, #41	; 0x29
 800ad04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad06:	2340      	movs	r3, #64	; 0x40
 800ad08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad12:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff fe0c 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fa29 	bl	800b178 <SDMMC_GetCmdResp3>
 800ad26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad28:	69fb      	ldr	r3, [r7, #28]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	80100000 	.word	0x80100000

0800ad38 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad4a:	2306      	movs	r3, #6
 800ad4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad4e:	2340      	movs	r3, #64	; 0x40
 800ad50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad5a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad5c:	f107 0308 	add.w	r3, r7, #8
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7ff fde8 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6c:	2106      	movs	r1, #6
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f8dc 	bl	800af2c <SDMMC_GetCmdResp1>
 800ad74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad76:	69fb      	ldr	r3, [r7, #28]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b088      	sub	sp, #32
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad90:	2333      	movs	r3, #51	; 0x33
 800ad92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff fdc5 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800adae:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb2:	2133      	movs	r1, #51	; 0x33
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f8b9 	bl	800af2c <SDMMC_GetCmdResp1>
 800adba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adbc:	69fb      	ldr	r3, [r7, #28]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3720      	adds	r7, #32
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b088      	sub	sp, #32
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800adce:	2300      	movs	r3, #0
 800add0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800add6:	2302      	movs	r3, #2
 800add8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adda:	23c0      	movs	r3, #192	; 0xc0
 800addc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ade2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade8:	f107 0308 	add.w	r3, r7, #8
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff fda2 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f97f 	bl	800b0f8 <SDMMC_GetCmdResp2>
 800adfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adfc:	69fb      	ldr	r3, [r7, #28]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3720      	adds	r7, #32
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b088      	sub	sp, #32
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae18:	2309      	movs	r3, #9
 800ae1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae1c:	23c0      	movs	r3, #192	; 0xc0
 800ae1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae28:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff fd81 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f95e 	bl	800b0f8 <SDMMC_GetCmdResp2>
 800ae3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3720      	adds	r7, #32
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae5e:	2340      	movs	r3, #64	; 0x40
 800ae60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae6c:	f107 0308 	add.w	r3, r7, #8
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fd60 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	2103      	movs	r1, #3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f9af 	bl	800b1e0 <SDMMC_GetCmdResp6>
 800ae82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae84:	69fb      	ldr	r3, [r7, #28]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3720      	adds	r7, #32
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b088      	sub	sp, #32
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aea0:	230d      	movs	r3, #13
 800aea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff fd3d 	bl	800a938 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aebe:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec2:	210d      	movs	r1, #13
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f831 	bl	800af2c <SDMMC_GetCmdResp1>
 800aeca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aecc:	69fb      	ldr	r3, [r7, #28]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aed8:	b490      	push	{r4, r7}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800aee0:	4b10      	ldr	r3, [pc, #64]	; (800af24 <SDMMC_GetCmdError+0x4c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a10      	ldr	r2, [pc, #64]	; (800af28 <SDMMC_GetCmdError+0x50>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	0a5b      	lsrs	r3, r3, #9
 800aeec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800aef4:	4623      	mov	r3, r4
 800aef6:	1e5c      	subs	r4, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d102      	bne.n	800af02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aefc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af00:	e00a      	b.n	800af18 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d0f2      	beq.n	800aef4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800af14:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bc90      	pop	{r4, r7}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000064 	.word	0x20000064
 800af28:	10624dd3 	.word	0x10624dd3

0800af2c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	460b      	mov	r3, r1
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800af3a:	4b6c      	ldr	r3, [pc, #432]	; (800b0ec <SDMMC_GetCmdResp1+0x1c0>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a6c      	ldr	r2, [pc, #432]	; (800b0f0 <SDMMC_GetCmdResp1+0x1c4>)
 800af40:	fba2 2303 	umull	r2, r3, r2, r3
 800af44:	0a5b      	lsrs	r3, r3, #9
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800af4c:	4623      	mov	r3, r4
 800af4e:	1e5c      	subs	r4, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af58:	e0c3      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0f2      	beq.n	800af4c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6a:	f003 0304 	and.w	r3, r3, #4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d004      	beq.n	800af7c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2204      	movs	r2, #4
 800af76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af78:	2304      	movs	r3, #4
 800af7a:	e0b2      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d004      	beq.n	800af92 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af8e:	2301      	movs	r3, #1
 800af90:	e0a7      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff fcfa 	bl	800a98c <SDMMC_GetCommandResponse>
 800af98:	4603      	mov	r3, r0
 800af9a:	461a      	mov	r2, r3
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d001      	beq.n	800afa6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e09d      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800afac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800afae:	2100      	movs	r1, #0
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff fcf8 	bl	800a9a6 <SDMMC_GetResponse>
 800afb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	4b4e      	ldr	r3, [pc, #312]	; (800b0f4 <SDMMC_GetCmdResp1+0x1c8>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e08d      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	da02      	bge.n	800afd2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800afcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afd0:	e087      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800afdc:	2340      	movs	r3, #64	; 0x40
 800afde:	e080      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800afea:	2380      	movs	r3, #128	; 0x80
 800afec:	e079      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800affc:	e071      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b00c:	e069      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01c:	e061      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b02c:	e059      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b03c:	e051      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b04c:	e049      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b05c:	e041      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800b068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b06c:	e039      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b07c:	e031      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b08c:	e029      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b09c:	e021      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0ac:	e019      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0bc:	e011      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0cc:	e009      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 0308 	and.w	r3, r3, #8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0dc:	e001      	b.n	800b0e2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd90      	pop	{r4, r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000064 	.word	0x20000064
 800b0f0:	10624dd3 	.word	0x10624dd3
 800b0f4:	fdffe008 	.word	0xfdffe008

0800b0f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b0f8:	b490      	push	{r4, r7}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b100:	4b1b      	ldr	r3, [pc, #108]	; (800b170 <SDMMC_GetCmdResp2+0x78>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a1b      	ldr	r2, [pc, #108]	; (800b174 <SDMMC_GetCmdResp2+0x7c>)
 800b106:	fba2 2303 	umull	r2, r3, r2, r3
 800b10a:	0a5b      	lsrs	r3, r3, #9
 800b10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b110:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b114:	4623      	mov	r3, r4
 800b116:	1e5c      	subs	r4, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b11c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b120:	e020      	b.n	800b164 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b126:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0f2      	beq.n	800b114 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b132:	f003 0304 	and.w	r3, r3, #4
 800b136:	2b00      	cmp	r3, #0
 800b138:	d004      	beq.n	800b144 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2204      	movs	r2, #4
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b140:	2304      	movs	r3, #4
 800b142:	e00f      	b.n	800b164 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b156:	2301      	movs	r3, #1
 800b158:	e004      	b.n	800b164 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bc90      	pop	{r4, r7}
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20000064 	.word	0x20000064
 800b174:	10624dd3 	.word	0x10624dd3

0800b178 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b178:	b490      	push	{r4, r7}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b180:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <SDMMC_GetCmdResp3+0x60>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a15      	ldr	r2, [pc, #84]	; (800b1dc <SDMMC_GetCmdResp3+0x64>)
 800b186:	fba2 2303 	umull	r2, r3, r2, r3
 800b18a:	0a5b      	lsrs	r3, r3, #9
 800b18c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b190:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b194:	4623      	mov	r3, r4
 800b196:	1e5c      	subs	r4, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b19c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1a0:	e015      	b.n	800b1ce <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0f2      	beq.n	800b194 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b2:	f003 0304 	and.w	r3, r3, #4
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d004      	beq.n	800b1c4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2204      	movs	r2, #4
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1c0:	2304      	movs	r3, #4
 800b1c2:	e004      	b.n	800b1ce <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b1ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bc90      	pop	{r4, r7}
 800b1d6:	4770      	bx	lr
 800b1d8:	20000064 	.word	0x20000064
 800b1dc:	10624dd3 	.word	0x10624dd3

0800b1e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b1e0:	b590      	push	{r4, r7, lr}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b1ee:	4b31      	ldr	r3, [pc, #196]	; (800b2b4 <SDMMC_GetCmdResp6+0xd4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a31      	ldr	r2, [pc, #196]	; (800b2b8 <SDMMC_GetCmdResp6+0xd8>)
 800b1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f8:	0a5b      	lsrs	r3, r3, #9
 800b1fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1fe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b202:	4623      	mov	r3, r4
 800b204:	1e5c      	subs	r4, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d102      	bne.n	800b210 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b20a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b20e:	e04c      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b214:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d0f2      	beq.n	800b202 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d004      	beq.n	800b232 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2204      	movs	r2, #4
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b22e:	2304      	movs	r3, #4
 800b230:	e03b      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d004      	beq.n	800b248 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2201      	movs	r2, #1
 800b242:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b244:	2301      	movs	r3, #1
 800b246:	e030      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7ff fb9f 	bl	800a98c <SDMMC_GetCommandResponse>
 800b24e:	4603      	mov	r3, r0
 800b250:	461a      	mov	r2, r3
 800b252:	7afb      	ldrb	r3, [r7, #11]
 800b254:	4293      	cmp	r3, r2
 800b256:	d001      	beq.n	800b25c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b258:	2301      	movs	r3, #1
 800b25a:	e026      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b262:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b264:	2100      	movs	r1, #0
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f7ff fb9d 	bl	800a9a6 <SDMMC_GetResponse>
 800b26c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d106      	bne.n	800b286 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b282:	2300      	movs	r3, #0
 800b284:	e011      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b294:	e009      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2a4:	e001      	b.n	800b2aa <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd90      	pop	{r4, r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000064 	.word	0x20000064
 800b2b8:	10624dd3 	.word	0x10624dd3

0800b2bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b2bc:	b490      	push	{r4, r7}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b2c4:	4b18      	ldr	r3, [pc, #96]	; (800b328 <SDMMC_GetCmdResp7+0x6c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a18      	ldr	r2, [pc, #96]	; (800b32c <SDMMC_GetCmdResp7+0x70>)
 800b2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ce:	0a5b      	lsrs	r3, r3, #9
 800b2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b2d8:	4623      	mov	r3, r4
 800b2da:	1e5c      	subs	r4, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2e4:	e01a      	b.n	800b31c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0f2      	beq.n	800b2d8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f6:	f003 0304 	and.w	r3, r3, #4
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d004      	beq.n	800b308 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2240      	movs	r2, #64	; 0x40
 800b302:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b304:	2304      	movs	r3, #4
 800b306:	e009      	b.n	800b31c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2240      	movs	r2, #64	; 0x40
 800b318:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b31a:	2300      	movs	r3, #0
  
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bc90      	pop	{r4, r7}
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	20000064 	.word	0x20000064
 800b32c:	10624dd3 	.word	0x10624dd3

0800b330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b330:	b084      	sub	sp, #16
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	f107 001c 	add.w	r0, r7, #28
 800b33e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	2b01      	cmp	r3, #1
 800b346:	d120      	bne.n	800b38a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	4b20      	ldr	r3, [pc, #128]	; (800b3dc <USB_CoreInit+0xac>)
 800b35a:	4013      	ands	r3, r2
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d105      	bne.n	800b37e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f942 	bl	800b608 <USB_CoreReset>
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]
 800b388:	e010      	b.n	800b3ac <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f936 	bl	800b608 <USB_CoreReset>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d10b      	bne.n	800b3ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f043 0206 	orr.w	r2, r3, #6
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f043 0220 	orr.w	r2, r3, #32
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3d6:	b004      	add	sp, #16
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	ffbdffbf 	.word	0xffbdffbf

0800b3e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f043 0201 	orr.w	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b402:	b480      	push	{r7}
 800b404:	b083      	sub	sp, #12
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f023 0201 	bic.w	r2, r3, #1
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d106      	bne.n	800b450 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	e00b      	b.n	800b468 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b450:	78fb      	ldrb	r3, [r7, #3]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60da      	str	r2, [r3, #12]
 800b462:	e001      	b.n	800b468 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e003      	b.n	800b470 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b468:	2032      	movs	r0, #50	; 0x32
 800b46a:	f7f5 ff75 	bl	8001358 <HAL_Delay>

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	019b      	lsls	r3, r3, #6
 800b48a:	f043 0220 	orr.w	r2, r3, #32
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3301      	adds	r3, #1
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <USB_FlushTxFifo+0x48>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d901      	bls.n	800b4a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e006      	b.n	800b4b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d0f0      	beq.n	800b492 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	00030d40 	.word	0x00030d40

0800b4c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2210      	movs	r2, #16
 800b4d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4a09      	ldr	r2, [pc, #36]	; (800b504 <USB_FlushRxFifo+0x40>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d901      	bls.n	800b4e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e006      	b.n	800b4f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	f003 0310 	and.w	r3, r3, #16
 800b4f0:	2b10      	cmp	r3, #16
 800b4f2:	d0f0      	beq.n	800b4d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	00030d40 	.word	0x00030d40

0800b508 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b508:	b480      	push	{r7}
 800b50a:	b089      	sub	sp, #36	; 0x24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4611      	mov	r1, r2
 800b514:	461a      	mov	r2, r3
 800b516:	460b      	mov	r3, r1
 800b518:	71fb      	strb	r3, [r7, #7]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d11a      	bne.n	800b564 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b52e:	88bb      	ldrh	r3, [r7, #4]
 800b530:	3303      	adds	r3, #3
 800b532:	089b      	lsrs	r3, r3, #2
 800b534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b536:	2300      	movs	r3, #0
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	e00f      	b.n	800b55c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	031a      	lsls	r2, r3, #12
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	4413      	add	r3, r2
 800b544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b548:	461a      	mov	r2, r3
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	3304      	adds	r3, #4
 800b554:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	3301      	adds	r3, #1
 800b55a:	61bb      	str	r3, [r7, #24]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	429a      	cmp	r2, r3
 800b562:	d3eb      	bcc.n	800b53c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3724      	adds	r7, #36	; 0x24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b572:	b480      	push	{r7}
 800b574:	b089      	sub	sp, #36	; 0x24
 800b576:	af00      	add	r7, sp, #0
 800b578:	60f8      	str	r0, [r7, #12]
 800b57a:	60b9      	str	r1, [r7, #8]
 800b57c:	4613      	mov	r3, r2
 800b57e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	3303      	adds	r3, #3
 800b58c:	089b      	lsrs	r3, r3, #2
 800b58e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b590:	2300      	movs	r3, #0
 800b592:	61bb      	str	r3, [r7, #24]
 800b594:	e00b      	b.n	800b5ae <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d3ef      	bcc.n	800b596 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b5b6:	69fb      	ldr	r3, [r7, #28]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3724      	adds	r7, #36	; 0x24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	f003 0301 	and.w	r3, r3, #1
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	4a13      	ldr	r2, [pc, #76]	; (800b66c <USB_CoreReset+0x64>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d901      	bls.n	800b626 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e01b      	b.n	800b65e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	daf2      	bge.n	800b614 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	f043 0201 	orr.w	r2, r3, #1
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4a09      	ldr	r2, [pc, #36]	; (800b66c <USB_CoreReset+0x64>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d901      	bls.n	800b650 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e006      	b.n	800b65e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d0f0      	beq.n	800b63e <USB_CoreReset+0x36>

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	00030d40 	.word	0x00030d40

0800b670 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b670:	b084      	sub	sp, #16
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	f107 001c 	add.w	r0, r7, #28
 800b67e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b68c:	461a      	mov	r2, r3
 800b68e:	2300      	movs	r3, #0
 800b690:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d018      	beq.n	800b6dc <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	d10a      	bne.n	800b6c6 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6be:	f043 0304 	orr.w	r3, r3, #4
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	e014      	b.n	800b6f0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6d4:	f023 0304 	bic.w	r3, r3, #4
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	e009      	b.n	800b6f0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6ea:	f023 0304 	bic.w	r3, r3, #4
 800b6ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b6f0:	2110      	movs	r1, #16
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff fec0 	bl	800b478 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff fee3 	bl	800b4c4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e015      	b.n	800b730 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b710:	461a      	mov	r2, r3
 800b712:	f04f 33ff 	mov.w	r3, #4294967295
 800b716:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b724:	461a      	mov	r2, r3
 800b726:	2300      	movs	r3, #0
 800b728:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	429a      	cmp	r2, r3
 800b736:	d3e5      	bcc.n	800b704 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b738:	2101      	movs	r1, #1
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f8ac 	bl	800b898 <USB_DriveVbus>

  HAL_Delay(200U);
 800b740:	20c8      	movs	r0, #200	; 0xc8
 800b742:	f7f5 fe09 	bl	8001358 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b766:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a14      	ldr	r2, [pc, #80]	; (800b7bc <USB_HostInit+0x14c>)
 800b76c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a13      	ldr	r2, [pc, #76]	; (800b7c0 <USB_HostInit+0x150>)
 800b772:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b776:	e009      	b.n	800b78c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2280      	movs	r2, #128	; 0x80
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <USB_HostInit+0x154>)
 800b782:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a10      	ldr	r2, [pc, #64]	; (800b7c8 <USB_HostInit+0x158>)
 800b788:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d105      	bne.n	800b79e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	f043 0210 	orr.w	r2, r3, #16
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <USB_HostInit+0x15c>)
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7b6:	b004      	add	sp, #16
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	01000200 	.word	0x01000200
 800b7c0:	00e00300 	.word	0x00e00300
 800b7c4:	00600080 	.word	0x00600080
 800b7c8:	004000e0 	.word	0x004000e0
 800b7cc:	a3200008 	.word	0xa3200008

0800b7d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7ee:	f023 0303 	bic.w	r3, r3, #3
 800b7f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	78fb      	ldrb	r3, [r7, #3]
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	68f9      	ldr	r1, [r7, #12]
 800b804:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b808:	4313      	orrs	r3, r2
 800b80a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b80c:	78fb      	ldrb	r3, [r7, #3]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d107      	bne.n	800b822 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b818:	461a      	mov	r2, r3
 800b81a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b81e:	6053      	str	r3, [r2, #4]
 800b820:	e009      	b.n	800b836 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b822:	78fb      	ldrb	r3, [r7, #3]
 800b824:	2b02      	cmp	r3, #2
 800b826:	d106      	bne.n	800b836 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b82e:	461a      	mov	r2, r3
 800b830:	f241 7370 	movw	r3, #6000	; 0x1770
 800b834:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b864:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b86e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b872:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b874:	2064      	movs	r0, #100	; 0x64
 800b876:	f7f5 fd6f 	bl	8001358 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b886:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b888:	200a      	movs	r0, #10
 800b88a:	f7f5 fd65 	bl	8001358 <HAL_Delay>

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b8bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d109      	bne.n	800b8dc <USB_DriveVbus+0x44>
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d106      	bne.n	800b8dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e6:	d109      	bne.n	800b8fc <USB_DriveVbus+0x64>
 800b8e8:	78fb      	ldrb	r3, [r7, #3]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d106      	bne.n	800b8fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b085      	sub	sp, #20
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b916:	2300      	movs	r3, #0
 800b918:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	0c5b      	lsrs	r3, r3, #17
 800b928:	f003 0303 	and.w	r3, r3, #3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	b29b      	uxth	r3, r3
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
	...

0800b95c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	4608      	mov	r0, r1
 800b966:	4611      	mov	r1, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	4603      	mov	r3, r0
 800b96c:	70fb      	strb	r3, [r7, #3]
 800b96e:	460b      	mov	r3, r1
 800b970:	70bb      	strb	r3, [r7, #2]
 800b972:	4613      	mov	r3, r2
 800b974:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	015a      	lsls	r2, r3, #5
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	4413      	add	r3, r2
 800b986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b98a:	461a      	mov	r2, r3
 800b98c:	f04f 33ff 	mov.w	r3, #4294967295
 800b990:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b996:	2b03      	cmp	r3, #3
 800b998:	d87e      	bhi.n	800ba98 <USB_HC_Init+0x13c>
 800b99a:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <USB_HC_Init+0x44>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800ba5b 	.word	0x0800ba5b
 800b9a8:	0800b9b1 	.word	0x0800b9b1
 800b9ac:	0800ba1d 	.word	0x0800ba1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f240 439d 	movw	r3, #1181	; 0x49d
 800b9c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b9c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	da10      	bge.n	800b9ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	78fa      	ldrb	r2, [r7, #3]
 800b9dc:	0151      	lsls	r1, r2, #5
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	440a      	add	r2, r1
 800b9e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9ea:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b9ec:	e057      	b.n	800ba9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d051      	beq.n	800ba9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	78fa      	ldrb	r2, [r7, #3]
 800ba0a:	0151      	lsls	r1, r2, #5
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	440a      	add	r2, r1
 800ba10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ba18:	60d3      	str	r3, [r2, #12]
      break;
 800ba1a:	e040      	b.n	800ba9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba28:	461a      	mov	r2, r3
 800ba2a:	f240 639d 	movw	r3, #1693	; 0x69d
 800ba2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	da34      	bge.n	800baa2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	0151      	lsls	r1, r2, #5
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba56:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ba58:	e023      	b.n	800baa2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba66:	461a      	mov	r2, r3
 800ba68:	f240 2325 	movw	r3, #549	; 0x225
 800ba6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da17      	bge.n	800baa6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ba76:	78fb      	ldrb	r3, [r7, #3]
 800ba78:	015a      	lsls	r2, r3, #5
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	0151      	lsls	r1, r2, #5
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	440a      	add	r2, r1
 800ba8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ba94:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ba96:	e006      	b.n	800baa6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba9c:	e004      	b.n	800baa8 <USB_HC_Init+0x14c>
      break;
 800ba9e:	bf00      	nop
 800baa0:	e002      	b.n	800baa8 <USB_HC_Init+0x14c>
      break;
 800baa2:	bf00      	nop
 800baa4:	e000      	b.n	800baa8 <USB_HC_Init+0x14c>
      break;
 800baa6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	f003 030f 	and.w	r3, r3, #15
 800bab6:	2101      	movs	r1, #1
 800bab8:	fa01 f303 	lsl.w	r3, r1, r3
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bac2:	4313      	orrs	r3, r2
 800bac4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bad2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	da03      	bge.n	800bae2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bade:	613b      	str	r3, [r7, #16]
 800bae0:	e001      	b.n	800bae6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800baea:	2b02      	cmp	r3, #2
 800baec:	d103      	bne.n	800baf6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800baee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	e001      	b.n	800bafa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bafa:	787b      	ldrb	r3, [r7, #1]
 800bafc:	059b      	lsls	r3, r3, #22
 800bafe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bb02:	78bb      	ldrb	r3, [r7, #2]
 800bb04:	02db      	lsls	r3, r3, #11
 800bb06:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb0a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb10:	049b      	lsls	r3, r3, #18
 800bb12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bb16:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb1e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	0159      	lsls	r1, r3, #5
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	440b      	add	r3, r1
 800bb2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb30:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb36:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bb38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d10f      	bne.n	800bb60 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	78fa      	ldrb	r2, [r7, #3]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb5e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop

0800bb70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08c      	sub	sp, #48	; 0x30
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	785b      	ldrb	r3, [r3, #1]
 800bb86:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bb88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d028      	beq.n	800bbec <USB_HC_StartXfer+0x7c>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	791b      	ldrb	r3, [r3, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d124      	bne.n	800bbec <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10b      	bne.n	800bbc0 <USB_HC_StartXfer+0x50>
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	795b      	ldrb	r3, [r3, #5]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d107      	bne.n	800bbc0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	785b      	ldrb	r3, [r3, #1]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fa2e 	bl	800c018 <USB_DoPing>
      return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	e112      	b.n	800bde6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d112      	bne.n	800bbec <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	015a      	lsls	r2, r3, #5
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	4413      	add	r3, r2
 800bbce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	0151      	lsls	r1, r2, #5
 800bbd8:	6a3a      	ldr	r2, [r7, #32]
 800bbda:	440a      	add	r2, r1
 800bbdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbe0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bbe4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d018      	beq.n	800bc26 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	8912      	ldrh	r2, [r2, #8]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	8912      	ldrh	r2, [r2, #8]
 800bc04:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc08:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bc0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bc0c:	8b7b      	ldrh	r3, [r7, #26]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d90b      	bls.n	800bc2a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bc12:	8b7b      	ldrh	r3, [r7, #26]
 800bc14:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bc16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	8912      	ldrh	r2, [r2, #8]
 800bc1c:	fb02 f203 	mul.w	r2, r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	611a      	str	r2, [r3, #16]
 800bc24:	e001      	b.n	800bc2a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bc26:	2301      	movs	r3, #1
 800bc28:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	78db      	ldrb	r3, [r3, #3]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d006      	beq.n	800bc40 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bc32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	8912      	ldrh	r2, [r2, #8]
 800bc38:	fb02 f203 	mul.w	r2, r2, r3
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc4a:	04d9      	lsls	r1, r3, #19
 800bc4c:	4b68      	ldr	r3, [pc, #416]	; (800bdf0 <USB_HC_StartXfer+0x280>)
 800bc4e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc50:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	7a9b      	ldrb	r3, [r3, #10]
 800bc56:	075b      	lsls	r3, r3, #29
 800bc58:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc5c:	69f9      	ldr	r1, [r7, #28]
 800bc5e:	0148      	lsls	r0, r1, #5
 800bc60:	6a39      	ldr	r1, [r7, #32]
 800bc62:	4401      	add	r1, r0
 800bc64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc68:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc6a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bc6c:	79fb      	ldrb	r3, [r7, #7]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	68d9      	ldr	r1, [r3, #12]
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc82:	460a      	mov	r2, r1
 800bc84:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bf0c      	ite	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	2300      	movne	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	0151      	lsls	r1, r2, #5
 800bcb0:	6a3a      	ldr	r2, [r7, #32]
 800bcb2:	440a      	add	r2, r1
 800bcb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bcbc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	7e7b      	ldrb	r3, [r7, #25]
 800bcce:	075b      	lsls	r3, r3, #29
 800bcd0:	69f9      	ldr	r1, [r7, #28]
 800bcd2:	0148      	lsls	r0, r1, #5
 800bcd4:	6a39      	ldr	r1, [r7, #32]
 800bcd6:	4401      	add	r1, r0
 800bcd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a41      	ldr	r2, [pc, #260]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bcf0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bcf2:	4b40      	ldr	r3, [pc, #256]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bcfa:	4a3e      	ldr	r2, [pc, #248]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bcfc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	78db      	ldrb	r3, [r3, #3]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d006      	beq.n	800bd14 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bd06:	4b3b      	ldr	r3, [pc, #236]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd0e:	4a39      	ldr	r2, [pc, #228]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	e005      	b.n	800bd20 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bd14:	4b37      	ldr	r3, [pc, #220]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd1c:	4a35      	ldr	r2, [pc, #212]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd1e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd20:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd28:	4a32      	ldr	r2, [pc, #200]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd2a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	6a3b      	ldr	r3, [r7, #32]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd38:	461a      	mov	r2, r3
 800bd3a:	4b2e      	ldr	r3, [pc, #184]	; (800bdf4 <USB_HC_StartXfer+0x284>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800bd40:	79fb      	ldrb	r3, [r7, #7]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d14e      	bne.n	800bde4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	78db      	ldrb	r3, [r3, #3]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d14a      	bne.n	800bde4 <USB_HC_StartXfer+0x274>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d046      	beq.n	800bde4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	79db      	ldrb	r3, [r3, #7]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d830      	bhi.n	800bdc0 <USB_HC_StartXfer+0x250>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <USB_HC_StartXfer+0x1f4>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bd99 	.word	0x0800bd99
 800bd6c:	0800bd75 	.word	0x0800bd75
 800bd70:	0800bd99 	.word	0x0800bd99
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	3303      	adds	r3, #3
 800bd7a:	089b      	lsrs	r3, r3, #2
 800bd7c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bd7e:	8afa      	ldrh	r2, [r7, #22]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d91c      	bls.n	800bdc4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	f043 0220 	orr.w	r2, r3, #32
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	619a      	str	r2, [r3, #24]
          }
          break;
 800bd96:	e015      	b.n	800bdc4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	3303      	adds	r3, #3
 800bd9e:	089b      	lsrs	r3, r3, #2
 800bda0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bda2:	8afa      	ldrh	r2, [r7, #22]
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d90a      	bls.n	800bdc8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	619a      	str	r2, [r3, #24]
          }
          break;
 800bdbe:	e003      	b.n	800bdc8 <USB_HC_StartXfer+0x258>

        default:
          break;
 800bdc0:	bf00      	nop
 800bdc2:	e002      	b.n	800bdca <USB_HC_StartXfer+0x25a>
          break;
 800bdc4:	bf00      	nop
 800bdc6:	e000      	b.n	800bdca <USB_HC_StartXfer+0x25a>
          break;
 800bdc8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	68d9      	ldr	r1, [r3, #12]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	785a      	ldrb	r2, [r3, #1]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	b298      	uxth	r0, r3
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	4603      	mov	r3, r0
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f7ff fb92 	bl	800b508 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3728      	adds	r7, #40	; 0x28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	1ff80000 	.word	0x1ff80000
 800bdf4:	20000188 	.word	0x20000188

0800bdf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	b29b      	uxth	r3, r3
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b087      	sub	sp, #28
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	0c9b      	lsrs	r3, r3, #18
 800be42:	f003 0303 	and.w	r3, r3, #3
 800be46:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <USB_HC_Halt+0x3a>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d16c      	bne.n	800bf2e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	0151      	lsls	r1, r2, #5
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	440a      	add	r2, r1
 800be6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be72:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d143      	bne.n	800bf08 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	4413      	add	r3, r2
 800be88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	0151      	lsls	r1, r2, #5
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	440a      	add	r2, r1
 800be96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	0151      	lsls	r1, r2, #5
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	440a      	add	r2, r1
 800beb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800beba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bebe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	0151      	lsls	r1, r2, #5
 800bed2:	693a      	ldr	r2, [r7, #16]
 800bed4:	440a      	add	r2, r1
 800bed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800beda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bede:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	3301      	adds	r3, #1
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800beec:	d81d      	bhi.n	800bf2a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	015a      	lsls	r2, r3, #5
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	4413      	add	r3, r2
 800bef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf04:	d0ec      	beq.n	800bee0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf06:	e080      	b.n	800c00a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	0151      	lsls	r1, r2, #5
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	440a      	add	r2, r1
 800bf1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf26:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf28:	e06f      	b.n	800c00a <USB_HC_Halt+0x1f0>
          break;
 800bf2a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf2c:	e06d      	b.n	800c00a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	0151      	lsls	r1, r2, #5
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	440a      	add	r2, r1
 800bf44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf4c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d143      	bne.n	800bfe6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	0151      	lsls	r1, r2, #5
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	440a      	add	r2, r1
 800bf74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf7c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	0151      	lsls	r1, r2, #5
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	440a      	add	r2, r1
 800bf94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf9c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	0151      	lsls	r1, r2, #5
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	440a      	add	r2, r1
 800bfb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bfbc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfca:	d81d      	bhi.n	800c008 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfe2:	d0ec      	beq.n	800bfbe <USB_HC_Halt+0x1a4>
 800bfe4:	e011      	b.n	800c00a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	0151      	lsls	r1, r2, #5
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	440a      	add	r2, r1
 800bffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	e000      	b.n	800c00a <USB_HC_Halt+0x1f0>
          break;
 800c008:	bf00      	nop
    }
  }

  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	371c      	adds	r7, #28
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c028:	78fb      	ldrb	r3, [r7, #3]
 800c02a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c02c:	2301      	movs	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	04da      	lsls	r2, r3, #19
 800c034:	4b15      	ldr	r3, [pc, #84]	; (800c08c <USB_DoPing+0x74>)
 800c036:	4013      	ands	r3, r2
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	0151      	lsls	r1, r2, #5
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	440a      	add	r2, r1
 800c040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c048:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	4413      	add	r3, r2
 800c052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c060:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c068:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	015a      	lsls	r2, r3, #5
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	4413      	add	r3, r2
 800c072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c076:	461a      	mov	r2, r3
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	371c      	adds	r7, #28
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	1ff80000 	.word	0x1ff80000

0800c090 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c09c:	2300      	movs	r3, #0
 800c09e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7ff f9ae 	bl	800b402 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c0a6:	2110      	movs	r1, #16
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff f9e5 	bl	800b478 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7ff fa08 	bl	800b4c4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	613b      	str	r3, [r7, #16]
 800c0b8:	e01f      	b.n	800c0fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	613b      	str	r3, [r7, #16]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b0f      	cmp	r3, #15
 800c0fe:	d9dc      	bls.n	800c0ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c100:	2300      	movs	r3, #0
 800c102:	613b      	str	r3, [r7, #16]
 800c104:	e034      	b.n	800c170 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c11c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c124:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c12c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13a:	461a      	mov	r2, r3
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	3301      	adds	r3, #1
 800c144:	617b      	str	r3, [r7, #20]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c14c:	d80c      	bhi.n	800c168 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	4413      	add	r3, r2
 800c156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c164:	d0ec      	beq.n	800c140 <USB_StopHost+0xb0>
 800c166:	e000      	b.n	800c16a <USB_StopHost+0xda>
        break;
 800c168:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	3301      	adds	r3, #1
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	2b0f      	cmp	r3, #15
 800c174:	d9c7      	bls.n	800c106 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c17c:	461a      	mov	r2, r3
 800c17e:	f04f 33ff 	mov.w	r3, #4294967295
 800c182:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f04f 32ff 	mov.w	r2, #4294967295
 800c18a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff f927 	bl	800b3e0 <USB_EnableGlobalInt>

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800c19c:	b590      	push	{r4, r7, lr}
 800c19e:	b089      	sub	sp, #36	; 0x24
 800c1a0:	af04      	add	r7, sp, #16
 800c1a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	2102      	movs	r1, #2
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fc8c 	bl	800cacc <USBH_FindInterface>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ba:	2bff      	cmp	r3, #255	; 0xff
 800c1bc:	f000 812a 	beq.w	800c414 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fc65 	bl	800ca94 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c1d0:	2050      	movs	r0, #80	; 0x50
 800c1d2:	f012 f951 	bl	801e478 <malloc>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	211a      	movs	r1, #26
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b25b      	sxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	da15      	bge.n	800c228 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	211a      	movs	r1, #26
 800c202:	fb01 f303 	mul.w	r3, r1, r3
 800c206:	4413      	add	r3, r2
 800c208:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	211a      	movs	r1, #26
 800c218:	fb01 f303 	mul.w	r3, r1, r3
 800c21c:	4413      	add	r3, r2
 800c21e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c222:	881a      	ldrh	r2, [r3, #0]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	785b      	ldrb	r3, [r3, #1]
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 ff2f 	bl	800e092 <USBH_AllocPipe>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	7819      	ldrb	r1, [r3, #0]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	7858      	ldrb	r0, [r3, #1]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	8952      	ldrh	r2, [r2, #10]
 800c254:	9202      	str	r2, [sp, #8]
 800c256:	2203      	movs	r2, #3
 800c258:	9201      	str	r2, [sp, #4]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	4623      	mov	r3, r4
 800c25e:	4602      	mov	r2, r0
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 fee7 	bl	800e034 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2200      	movs	r2, #0
 800c26c:	4619      	mov	r1, r3
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f00c f888 	bl	8018384 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800c274:	2300      	movs	r3, #0
 800c276:	2200      	movs	r2, #0
 800c278:	210a      	movs	r1, #10
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fc26 	bl	800cacc <USBH_FindInterface>
 800c280:	4603      	mov	r3, r0
 800c282:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	2bff      	cmp	r3, #255	; 0xff
 800c288:	f000 80c4 	beq.w	800c414 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	211a      	movs	r1, #26
 800c292:	fb01 f303 	mul.w	r3, r1, r3
 800c296:	4413      	add	r3, r2
 800c298:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da16      	bge.n	800c2d2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	211a      	movs	r1, #26
 800c2aa:	fb01 f303 	mul.w	r3, r1, r3
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c2b4:	781a      	ldrb	r2, [r3, #0]
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	211a      	movs	r1, #26
 800c2c0:	fb01 f303 	mul.w	r3, r1, r3
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c2ca:	881a      	ldrh	r2, [r3, #0]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	835a      	strh	r2, [r3, #26]
 800c2d0:	e015      	b.n	800c2fe <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	211a      	movs	r1, #26
 800c2d8:	fb01 f303 	mul.w	r3, r1, r3
 800c2dc:	4413      	add	r3, r2
 800c2de:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c2e2:	781a      	ldrb	r2, [r3, #0]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	211a      	movs	r1, #26
 800c2ee:	fb01 f303 	mul.w	r3, r1, r3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c2f8:	881a      	ldrh	r2, [r3, #0]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	211a      	movs	r1, #26
 800c304:	fb01 f303 	mul.w	r3, r1, r3
 800c308:	4413      	add	r3, r2
 800c30a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	b25b      	sxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	da16      	bge.n	800c344 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c316:	7bbb      	ldrb	r3, [r7, #14]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	211a      	movs	r1, #26
 800c31c:	fb01 f303 	mul.w	r3, r1, r3
 800c320:	4413      	add	r3, r2
 800c322:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c326:	781a      	ldrb	r2, [r3, #0]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	211a      	movs	r1, #26
 800c332:	fb01 f303 	mul.w	r3, r1, r3
 800c336:	4413      	add	r3, r2
 800c338:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c33c:	881a      	ldrh	r2, [r3, #0]
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	835a      	strh	r2, [r3, #26]
 800c342:	e015      	b.n	800c370 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c344:	7bbb      	ldrb	r3, [r7, #14]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	211a      	movs	r1, #26
 800c34a:	fb01 f303 	mul.w	r3, r1, r3
 800c34e:	4413      	add	r3, r2
 800c350:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c354:	781a      	ldrb	r2, [r3, #0]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	211a      	movs	r1, #26
 800c360:	fb01 f303 	mul.w	r3, r1, r3
 800c364:	4413      	add	r3, r2
 800c366:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c36a:	881a      	ldrh	r2, [r3, #0]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	7b9b      	ldrb	r3, [r3, #14]
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f001 fe8b 	bl	800e092 <USBH_AllocPipe>
 800c37c:	4603      	mov	r3, r0
 800c37e:	461a      	mov	r2, r3
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	7bdb      	ldrb	r3, [r3, #15]
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 fe81 	bl	800e092 <USBH_AllocPipe>
 800c390:	4603      	mov	r3, r0
 800c392:	461a      	mov	r2, r3
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	7b59      	ldrb	r1, [r3, #13]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	7b98      	ldrb	r0, [r3, #14]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	8b12      	ldrh	r2, [r2, #24]
 800c3b0:	9202      	str	r2, [sp, #8]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	9201      	str	r2, [sp, #4]
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f001 fe39 	bl	800e034 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	7b19      	ldrb	r1, [r3, #12]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	7bd8      	ldrb	r0, [r3, #15]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	8b52      	ldrh	r2, [r2, #26]
 800c3da:	9202      	str	r2, [sp, #8]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	9201      	str	r2, [sp, #4]
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	4623      	mov	r3, r4
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f001 fe24 	bl	800e034 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	7b5b      	ldrb	r3, [r3, #13]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f00b ffc1 	bl	8018384 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	7b1b      	ldrb	r3, [r3, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f00b ffba 	bl	8018384 <USBH_LL_SetToggle>
      status = USBH_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c414:	7bfb      	ldrb	r3, [r7, #15]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd90      	pop	{r4, r7, pc}

0800c41e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c42c:	69db      	ldr	r3, [r3, #28]
 800c42e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00e      	beq.n	800c456 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f001 fe17 	bl	800e072 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fe3f 	bl	800e0ce <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	7b1b      	ldrb	r3, [r3, #12]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00e      	beq.n	800c47c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	7b1b      	ldrb	r3, [r3, #12]
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 fe04 	bl	800e072 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	7b1b      	ldrb	r3, [r3, #12]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 fe2c 	bl	800e0ce <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	7b5b      	ldrb	r3, [r3, #13]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00e      	beq.n	800c4a2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	7b5b      	ldrb	r3, [r3, #13]
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f001 fdf1 	bl	800e072 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	7b5b      	ldrb	r3, [r3, #13]
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f001 fe19 	bl	800e0ce <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00b      	beq.n	800c4c6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f011 ffe6 	bl	801e488 <free>
    phost->pActiveClass->pData = 0U;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800c4d8:	2302      	movs	r3, #2
 800c4da:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4e2:	69db      	ldr	r3, [r3, #28]
 800c4e4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	3340      	adds	r3, #64	; 0x40
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f8b2 	bl	800c656 <GetLineCoding>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d105      	bne.n	800c508 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c502:	2102      	movs	r1, #2
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	4798      	blx	r3
  }
  return status;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c51c:	2301      	movs	r3, #1
 800c51e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c534:	2b04      	cmp	r3, #4
 800c536:	d877      	bhi.n	800c628 <USBH_CDC_Process+0x114>
 800c538:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <USBH_CDC_Process+0x2c>)
 800c53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53e:	bf00      	nop
 800c540:	0800c555 	.word	0x0800c555
 800c544:	0800c55b 	.word	0x0800c55b
 800c548:	0800c58b 	.word	0x0800c58b
 800c54c:	0800c5ff 	.word	0x0800c5ff
 800c550:	0800c60d 	.word	0x0800c60d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73fb      	strb	r3, [r7, #15]
    break;
 800c558:	e06d      	b.n	800c636 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c55e:	4619      	mov	r1, r3
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f897 	bl	800c694 <SetLineCoding>
 800c566:	4603      	mov	r3, r0
 800c568:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d104      	bne.n	800c57a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2202      	movs	r2, #2
 800c574:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c578:	e058      	b.n	800c62c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d055      	beq.n	800c62c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2204      	movs	r2, #4
 800c584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c588:	e050      	b.n	800c62c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	3340      	adds	r3, #64	; 0x40
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f860 	bl	800c656 <GetLineCoding>
 800c596:	4603      	mov	r3, r0
 800c598:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d126      	bne.n	800c5ee <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b2:	791b      	ldrb	r3, [r3, #4]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d13b      	bne.n	800c630 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5c2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d133      	bne.n	800c630 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d12b      	bne.n	800c630 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5e0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d124      	bne.n	800c630 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f984 	bl	800c8f4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c5ec:	e020      	b.n	800c630 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d01d      	beq.n	800c630 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2204      	movs	r2, #4
 800c5f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c5fc:	e018      	b.n	800c630 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f867 	bl	800c6d2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f8f8 	bl	800c7fa <CDC_ProcessReception>
    break;
 800c60a:	e014      	b.n	800c636 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800c60c:	2100      	movs	r1, #0
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fffa 	bl	800d608 <USBH_ClrFeature>
 800c614:	4603      	mov	r3, r0
 800c616:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10a      	bne.n	800c634 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800c626:	e005      	b.n	800c634 <USBH_CDC_Process+0x120>

  default:
    break;
 800c628:	bf00      	nop
 800c62a:	e004      	b.n	800c636 <USBH_CDC_Process+0x122>
    break;
 800c62c:	bf00      	nop
 800c62e:	e002      	b.n	800c636 <USBH_CDC_Process+0x122>
    break;
 800c630:	bf00      	nop
 800c632:	e000      	b.n	800c636 <USBH_CDC_Process+0x122>
    break;
 800c634:	bf00      	nop

  }

  return status;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	22a1      	movs	r2, #161	; 0xa1
 800c664:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2221      	movs	r2, #33	; 0x21
 800c66a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2207      	movs	r2, #7
 800c67c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2207      	movs	r2, #7
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 f99f 	bl	800d9c8 <USBH_CtlReq>
 800c68a:	4603      	mov	r3, r0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2221      	movs	r2, #33	; 0x21
 800c6a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2207      	movs	r2, #7
 800c6ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2207      	movs	r2, #7
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f001 f980 	bl	800d9c8 <USBH_CtlReq>
 800c6c8:	4603      	mov	r3, r0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b086      	sub	sp, #24
 800c6d6:	af02      	add	r7, sp, #8
 800c6d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d002      	beq.n	800c6f8 <CDC_ProcessTransmission+0x26>
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d025      	beq.n	800c742 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800c6f6:	e07c      	b.n	800c7f2 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	8b12      	ldrh	r2, [r2, #24]
 800c700:	4293      	cmp	r3, r2
 800c702:	d90c      	bls.n	800c71e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	69d9      	ldr	r1, [r3, #28]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	8b1a      	ldrh	r2, [r3, #24]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	7b58      	ldrb	r0, [r3, #13]
 800c710:	2301      	movs	r3, #1
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	4603      	mov	r3, r0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f001 fc49 	bl	800dfae <USBH_BulkSendData>
 800c71c:	e00c      	b.n	800c738 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800c726:	b29a      	uxth	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	7b58      	ldrb	r0, [r3, #13]
 800c72c:	2301      	movs	r3, #1
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	4603      	mov	r3, r0
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f001 fc3b 	bl	800dfae <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2202      	movs	r2, #2
 800c73c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800c740:	e057      	b.n	800c7f2 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	7b5b      	ldrb	r3, [r3, #13]
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f00b fdf1 	bl	8018330 <USBH_LL_GetURBState>
 800c74e:	4603      	mov	r3, r0
 800c750:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800c752:	7afb      	ldrb	r3, [r7, #11]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d136      	bne.n	800c7c6 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	8b12      	ldrh	r2, [r2, #24]
 800c760:	4293      	cmp	r3, r2
 800c762:	d90e      	bls.n	800c782 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	8b12      	ldrh	r2, [r2, #24]
 800c76c:	1a9a      	subs	r2, r3, r2
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	8b12      	ldrh	r2, [r2, #24]
 800c77a:	441a      	add	r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	61da      	str	r2, [r3, #28]
 800c780:	e002      	b.n	800c788 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d004      	beq.n	800c79a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c798:	e006      	b.n	800c7a8 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f892 	bl	800c8cc <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2204      	movs	r2, #4
 800c7ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4619      	mov	r1, r3
 800c7c0:	f003 ff0c 	bl	80105dc <osMessagePut>
    break;
 800c7c4:	e014      	b.n	800c7f0 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800c7c6:	7afb      	ldrb	r3, [r7, #11]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d111      	bne.n	800c7f0 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	f003 fef6 	bl	80105dc <osMessagePut>
    break;
 800c7f0:	bf00      	nop
  }
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b086      	sub	sp, #24
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c80c:	2300      	movs	r3, #0
 800c80e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c816:	2b03      	cmp	r3, #3
 800c818:	d002      	beq.n	800c820 <CDC_ProcessReception+0x26>
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	d00e      	beq.n	800c83c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800c81e:	e051      	b.n	800c8c4 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	6a19      	ldr	r1, [r3, #32]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	8b5a      	ldrh	r2, [r3, #26]
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	7b1b      	ldrb	r3, [r3, #12]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 fbe3 	bl	800dff8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2204      	movs	r2, #4
 800c836:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800c83a:	e043      	b.n	800c8c4 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	7b1b      	ldrb	r3, [r3, #12]
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f00b fd74 	bl	8018330 <USBH_LL_GetURBState>
 800c848:	4603      	mov	r3, r0
 800c84a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800c84c:	7cfb      	ldrb	r3, [r7, #19]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d137      	bne.n	800c8c2 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	7b1b      	ldrb	r3, [r3, #12]
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f00b fcd7 	bl	801820c <USBH_LL_GetLastXferSize>
 800c85e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	429a      	cmp	r2, r3
 800c868:	d016      	beq.n	800c898 <CDC_ProcessReception+0x9e>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	8b5b      	ldrh	r3, [r3, #26]
 800c86e:	461a      	mov	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4293      	cmp	r3, r2
 800c874:	d910      	bls.n	800c898 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	1ad2      	subs	r2, r2, r3
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	6a1a      	ldr	r2, [r3, #32]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	441a      	add	r2, r3
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2203      	movs	r2, #3
 800c892:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c896:	e006      	b.n	800c8a6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f81d 	bl	800c8e0 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2204      	movs	r2, #4
 800c8aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	4619      	mov	r1, r3
 800c8be:	f003 fe8d 	bl	80105dc <osMessagePut>
    break;
 800c8c2:	bf00      	nop
  }
}
 800c8c4:	bf00      	nop
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]

}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]

}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]

}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800c908:	b5b0      	push	{r4, r5, r7, lr}
 800c90a:	b08c      	sub	sp, #48	; 0x30
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	4613      	mov	r3, r2
 800c914:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c91c:	2302      	movs	r3, #2
 800c91e:	e03c      	b.n	800c99a <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	79fa      	ldrb	r2, [r7, #7]
 800c924:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 f837 	bl	800c9ac <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c94c:	4a15      	ldr	r2, [pc, #84]	; (800c9a4 <USBH_Init+0x9c>)
 800c94e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c952:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c956:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800c95a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c95e:	2100      	movs	r1, #0
 800c960:	4618      	mov	r0, r3
 800c962:	f003 fe28 	bl	80105b6 <osMessageCreate>
 800c966:	4602      	mov	r2, r0
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c96e:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <USBH_Init+0xa0>)
 800c970:	f107 0414 	add.w	r4, r7, #20
 800c974:	461d      	mov	r5, r3
 800c976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c97a:	682b      	ldr	r3, [r5, #0]
 800c97c:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800c97e:	f107 0314 	add.w	r3, r7, #20
 800c982:	68f9      	ldr	r1, [r7, #12]
 800c984:	4618      	mov	r0, r3
 800c986:	f003 fddb 	bl	8010540 <osThreadCreate>
 800c98a:	4602      	mov	r2, r0
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f00b fb88 	bl	80180a8 <USBH_LL_Init>

  return USBH_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3730      	adds	r7, #48	; 0x30
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0801f3c4 	.word	0x0801f3c4
 800c9a8:	0801f3d8 	.word	0x0801f3d8

0800c9ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800c9b8:	e008      	b.n	800c9cc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	32e0      	adds	r2, #224	; 0xe0
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b0e      	cmp	r3, #14
 800c9d0:	d9f3      	bls.n	800c9ba <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	e009      	b.n	800c9ec <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	4413      	add	r3, r2
 800c9de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9f2:	d3f1      	bcc.n	800c9d8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2240      	movs	r2, #64	; 0x40
 800ca18:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d017      	beq.n	800ca82 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10f      	bne.n	800ca7c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca62:	1c59      	adds	r1, r3, #1
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	33dc      	adds	r3, #220	; 0xdc
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
 800ca7a:	e004      	b.n	800ca86 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	73fb      	strb	r3, [r7, #15]
 800ca80:	e001      	b.n	800ca86 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ca82:	2302      	movs	r3, #2
 800ca84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800caaa:	78fa      	ldrb	r2, [r7, #3]
 800caac:	429a      	cmp	r2, r3
 800caae:	d204      	bcs.n	800caba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	78fa      	ldrb	r2, [r7, #3]
 800cab4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800cab8:	e001      	b.n	800cabe <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800caba:	2302      	movs	r3, #2
 800cabc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	4608      	mov	r0, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	4603      	mov	r3, r0
 800cadc:	70fb      	strb	r3, [r7, #3]
 800cade:	460b      	mov	r3, r1
 800cae0:	70bb      	strb	r3, [r7, #2]
 800cae2:	4613      	mov	r3, r2
 800cae4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800caea:	2300      	movs	r3, #0
 800caec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800caf4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800caf6:	e025      	b.n	800cb44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	221a      	movs	r2, #26
 800cafc:	fb02 f303 	mul.w	r3, r2, r3
 800cb00:	3308      	adds	r3, #8
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	4413      	add	r3, r2
 800cb06:	3302      	adds	r3, #2
 800cb08:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	795b      	ldrb	r3, [r3, #5]
 800cb0e:	78fa      	ldrb	r2, [r7, #3]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d002      	beq.n	800cb1a <USBH_FindInterface+0x4e>
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	2bff      	cmp	r3, #255	; 0xff
 800cb18:	d111      	bne.n	800cb3e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cb1e:	78ba      	ldrb	r2, [r7, #2]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d002      	beq.n	800cb2a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cb24:	78bb      	ldrb	r3, [r7, #2]
 800cb26:	2bff      	cmp	r3, #255	; 0xff
 800cb28:	d109      	bne.n	800cb3e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cb2e:	787a      	ldrb	r2, [r7, #1]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d002      	beq.n	800cb3a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cb34:	787b      	ldrb	r3, [r7, #1]
 800cb36:	2bff      	cmp	r3, #255	; 0xff
 800cb38:	d101      	bne.n	800cb3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
 800cb3c:	e006      	b.n	800cb4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	3301      	adds	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d9d6      	bls.n	800caf8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cb4a:	23ff      	movs	r3, #255	; 0xff
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f00b fadd 	bl	8018120 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800cb66:	2101      	movs	r1, #1
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f00b fbf4 	bl	8018356 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b088      	sub	sp, #32
 800cb7c:	af04      	add	r7, sp, #16
 800cb7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cb80:	2302      	movs	r3, #2
 800cb82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fb7e 	bl	800d28a <USBH_IsPortEnabled>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10c      	bne.n	800cbae <USBH_Process+0x36>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d002      	beq.n	800cbae <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2203      	movs	r2, #3
 800cbac:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b0b      	cmp	r3, #11
 800cbb6:	f200 81ab 	bhi.w	800cf10 <USBH_Process+0x398>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <USBH_Process+0x48>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cbf1 	.word	0x0800cbf1
 800cbc4:	0800cc2f 	.word	0x0800cc2f
 800cbc8:	0800cc43 	.word	0x0800cc43
 800cbcc:	0800ceeb 	.word	0x0800ceeb
 800cbd0:	0800cf11 	.word	0x0800cf11
 800cbd4:	0800cced 	.word	0x0800cced
 800cbd8:	0800ce85 	.word	0x0800ce85
 800cbdc:	0800cd1d 	.word	0x0800cd1d
 800cbe0:	0800cd59 	.word	0x0800cd59
 800cbe4:	0800cd93 	.word	0x0800cd93
 800cbe8:	0800cddb 	.word	0x0800cddb
 800cbec:	0800ced3 	.word	0x0800ced3
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 818b 	beq.w	800cf14 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800cc04:	20c8      	movs	r0, #200	; 0xc8
 800cc06:	f00b fbf0 	bl	80183ea <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f00b fae3 	bl	80181d6 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc24:	2200      	movs	r2, #0
 800cc26:	4619      	mov	r1, r3
 800cc28:	f003 fcd8 	bl	80105dc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800cc2c:	e172      	b.n	800cf14 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	f040 816f 	bne.w	800cf18 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800cc40:	e16a      	b.n	800cf18 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800cc42:	2064      	movs	r0, #100	; 0x64
 800cc44:	f00b fbd1 	bl	80183ea <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f00b fa9f 	bl	801818c <USBH_LL_GetSpeed>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	461a      	mov	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2205      	movs	r2, #5
 800cc5c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800cc5e:	2100      	movs	r1, #0
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f001 fa16 	bl	800e092 <USBH_AllocPipe>
 800cc66:	4603      	mov	r3, r0
 800cc68:	461a      	mov	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800cc6e:	2180      	movs	r1, #128	; 0x80
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 fa0e 	bl	800e092 <USBH_AllocPipe>
 800cc76:	4603      	mov	r3, r0
 800cc78:	461a      	mov	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7919      	ldrb	r1, [r3, #4]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cc92:	b292      	uxth	r2, r2
 800cc94:	9202      	str	r2, [sp, #8]
 800cc96:	2200      	movs	r2, #0
 800cc98:	9201      	str	r2, [sp, #4]
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2280      	movs	r2, #128	; 0x80
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f001 f9c7 	bl	800e034 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	7959      	ldrb	r1, [r3, #5]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800ccba:	b292      	uxth	r2, r2
 800ccbc:	9202      	str	r2, [sp, #8]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	9201      	str	r2, [sp, #4]
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f001 f9b3 	bl	800e034 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cce2:	2200      	movs	r2, #0
 800cce4:	4619      	mov	r1, r3
 800cce6:	f003 fc79 	bl	80105dc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800ccea:	e120      	b.n	800cf2e <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 f923 	bl	800cf38 <USBH_HandleEnum>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f040 8111 	bne.w	800cf1c <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d103      	bne.n	800cd14 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2208      	movs	r2, #8
 800cd10:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800cd12:	e103      	b.n	800cf1c <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2207      	movs	r2, #7
 800cd18:	701a      	strb	r2, [r3, #0]
    break;
 800cd1a:	e0ff      	b.n	800cf1c <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 80fc 	beq.w	800cf20 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cd2e:	2101      	movs	r1, #1
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2208      	movs	r2, #8
 800cd38:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2205      	movs	r2, #5
 800cd3e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4619      	mov	r1, r3
 800cd52:	f003 fc43 	bl	80105dc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cd56:	e0e3      	b.n	800cf20 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	4619      	mov	r1, r3
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fc09 	bl	800d57a <USBH_SetCfg>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d102      	bne.n	800cd74 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2209      	movs	r2, #9
 800cd72:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	f003 fc26 	bl	80105dc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cd90:	e0cd      	b.n	800cf2e <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800cd98:	f003 0320 	and.w	r3, r3, #32
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00a      	beq.n	800cdb6 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cda0:	2101      	movs	r1, #1
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 fc0c 	bl	800d5c0 <USBH_SetFeature>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d106      	bne.n	800cdbc <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	220a      	movs	r2, #10
 800cdb2:	701a      	strb	r2, [r3, #0]
 800cdb4:	e002      	b.n	800cdbc <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	220a      	movs	r2, #10
 800cdba:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	f003 fc02 	bl	80105dc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cdd8:	e0a9      	b.n	800cf2e <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d040      	beq.n	800ce66 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cdec:	2300      	movs	r3, #0
 800cdee:	73fb      	strb	r3, [r7, #15]
 800cdf0:	e017      	b.n	800ce22 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	33dc      	adds	r3, #220	; 0xdc
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	791a      	ldrb	r2, [r3, #4]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d108      	bne.n	800ce1c <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	33dc      	adds	r3, #220	; 0xdc
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	73fb      	strb	r3, [r7, #15]
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0e4      	beq.n	800cdf2 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d016      	beq.n	800ce60 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	4798      	blx	r3
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d109      	bne.n	800ce58 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2206      	movs	r2, #6
 800ce48:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ce50:	2103      	movs	r1, #3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	4798      	blx	r3
 800ce56:	e006      	b.n	800ce66 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	220d      	movs	r2, #13
 800ce5c:	701a      	strb	r2, [r3, #0]
 800ce5e:	e002      	b.n	800ce66 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	220d      	movs	r2, #13
 800ce64:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2205      	movs	r2, #5
 800ce6a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	f003 fbad 	bl	80105dc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800ce82:	e054      	b.n	800cf2e <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00f      	beq.n	800ceae <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4798      	blx	r3
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800ce9e:	7bbb      	ldrb	r3, [r7, #14]
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d13e      	bne.n	800cf24 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	220b      	movs	r2, #11
 800ceaa:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800ceac:	e03a      	b.n	800cf24 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	220d      	movs	r2, #13
 800ceb2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2205      	movs	r2, #5
 800ceb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cec8:	2200      	movs	r2, #0
 800ceca:	4619      	mov	r1, r3
 800cecc:	f003 fb86 	bl	80105dc <osMessagePut>
    break;
 800ced0:	e028      	b.n	800cf24 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d025      	beq.n	800cf28 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cee2:	695b      	ldr	r3, [r3, #20]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	4798      	blx	r3
    }
    break;
 800cee8:	e01e      	b.n	800cf28 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7ff fd5e 	bl	800c9ac <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d018      	beq.n	800cf2c <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800cf0e:	e00d      	b.n	800cf2c <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800cf10:	bf00      	nop
 800cf12:	e00c      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf14:	bf00      	nop
 800cf16:	e00a      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf18:	bf00      	nop
 800cf1a:	e008      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf1c:	bf00      	nop
 800cf1e:	e006      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf20:	bf00      	nop
 800cf22:	e004      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf24:	bf00      	nop
 800cf26:	e002      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf28:	bf00      	nop
 800cf2a:	e000      	b.n	800cf2e <USBH_Process+0x3b6>
    break;
 800cf2c:	bf00      	nop
  }
 return USBH_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af04      	add	r7, sp, #16
 800cf3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cf40:	2301      	movs	r3, #1
 800cf42:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	785b      	ldrb	r3, [r3, #1]
 800cf48:	2b07      	cmp	r3, #7
 800cf4a:	f200 8132 	bhi.w	800d1b2 <USBH_HandleEnum+0x27a>
 800cf4e:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <USBH_HandleEnum+0x1c>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cf75 	.word	0x0800cf75
 800cf58:	0800cfe7 	.word	0x0800cfe7
 800cf5c:	0800cfff 	.word	0x0800cfff
 800cf60:	0800d075 	.word	0x0800d075
 800cf64:	0800d08d 	.word	0x0800d08d
 800cf68:	0800d0ab 	.word	0x0800d0ab
 800cf6c:	0800d117 	.word	0x0800d117
 800cf70:	0800d167 	.word	0x0800d167
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800cf74:	2108      	movs	r1, #8
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa2f 	bl	800d3da <USBH_Get_DevDesc>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f040 8119 	bne.w	800d1b6 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7919      	ldrb	r1, [r3, #4]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800cfa8:	b292      	uxth	r2, r2
 800cfaa:	9202      	str	r2, [sp, #8]
 800cfac:	2200      	movs	r2, #0
 800cfae:	9201      	str	r2, [sp, #4]
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2280      	movs	r2, #128	; 0x80
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f001 f83c 	bl	800e034 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7959      	ldrb	r1, [r3, #5]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800cfd0:	b292      	uxth	r2, r2
 800cfd2:	9202      	str	r2, [sp, #8]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	9201      	str	r2, [sp, #4]
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2200      	movs	r2, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f001 f828 	bl	800e034 <USBH_OpenPipe>

    }
    break;
 800cfe4:	e0e7      	b.n	800d1b6 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800cfe6:	2112      	movs	r1, #18
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f9f6 	bl	800d3da <USBH_Get_DevDesc>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f040 80e2 	bne.w	800d1ba <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2202      	movs	r2, #2
 800cffa:	705a      	strb	r2, [r3, #1]

    }
    break;
 800cffc:	e0dd      	b.n	800d1ba <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800cffe:	2101      	movs	r1, #1
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fa96 	bl	800d532 <USBH_SetAddress>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f040 80d8 	bne.w	800d1be <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800d00e:	2002      	movs	r0, #2
 800d010:	f00b f9eb 	bl	80183ea <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2203      	movs	r2, #3
 800d020:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	7919      	ldrb	r1, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d036:	b292      	uxth	r2, r2
 800d038:	9202      	str	r2, [sp, #8]
 800d03a:	2200      	movs	r2, #0
 800d03c:	9201      	str	r2, [sp, #4]
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	4603      	mov	r3, r0
 800d042:	2280      	movs	r2, #128	; 0x80
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fff5 	bl	800e034 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	7959      	ldrb	r1, [r3, #5]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d05e:	b292      	uxth	r2, r2
 800d060:	9202      	str	r2, [sp, #8]
 800d062:	2200      	movs	r2, #0
 800d064:	9201      	str	r2, [sp, #4]
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	4603      	mov	r3, r0
 800d06a:	2200      	movs	r2, #0
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 ffe1 	bl	800e034 <USBH_OpenPipe>
    }
    break;
 800d072:	e0a4      	b.n	800d1be <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800d074:	2109      	movs	r1, #9
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f9d7 	bl	800d42a <USBH_Get_CfgDesc>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f040 809f 	bne.w	800d1c2 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2204      	movs	r2, #4
 800d088:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d08a:	e09a      	b.n	800d1c2 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f9c8 	bl	800d42a <USBH_Get_CfgDesc>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f040 8092 	bne.w	800d1c6 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2205      	movs	r2, #5
 800d0a6:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d0a8:	e08d      	b.n	800d1c6 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d01e      	beq.n	800d0f2 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d0c0:	23ff      	movs	r3, #255	; 0xff
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f9d5 	bl	800d472 <USBH_Get_StringDesc>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d17d      	bne.n	800d1ca <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2206      	movs	r2, #6
 800d0d2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2205      	movs	r2, #5
 800d0d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	f003 fa76 	bl	80105dc <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d0f0:	e06b      	b.n	800d1ca <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2206      	movs	r2, #6
 800d0f6:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2205      	movs	r2, #5
 800d0fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d10c:	2200      	movs	r2, #0
 800d10e:	4619      	mov	r1, r3
 800d110:	f003 fa64 	bl	80105dc <osMessagePut>
    break;
 800d114:	e059      	b.n	800d1ca <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d010      	beq.n	800d142 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d12c:	23ff      	movs	r3, #255	; 0xff
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f99f 	bl	800d472 <USBH_Get_StringDesc>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d149      	bne.n	800d1ce <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2207      	movs	r2, #7
 800d13e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d140:	e045      	b.n	800d1ce <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2207      	movs	r2, #7
 800d146:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2205      	movs	r2, #5
 800d14c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d15c:	2200      	movs	r2, #0
 800d15e:	4619      	mov	r1, r3
 800d160:	f003 fa3c 	bl	80105dc <osMessagePut>
    break;
 800d164:	e033      	b.n	800d1ce <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00f      	beq.n	800d190 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d17c:	23ff      	movs	r3, #255	; 0xff
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f977 	bl	800d472 <USBH_Get_StringDesc>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d123      	bne.n	800d1d2 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d18e:	e020      	b.n	800d1d2 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2205      	movs	r2, #5
 800d198:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f003 fa16 	bl	80105dc <osMessagePut>
    break;
 800d1b0:	e00f      	b.n	800d1d2 <USBH_HandleEnum+0x29a>

  default:
    break;
 800d1b2:	bf00      	nop
 800d1b4:	e00e      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1b6:	bf00      	nop
 800d1b8:	e00c      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1ba:	bf00      	nop
 800d1bc:	e00a      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1be:	bf00      	nop
 800d1c0:	e008      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1c2:	bf00      	nop
 800d1c4:	e006      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1c6:	bf00      	nop
 800d1c8:	e004      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1ca:	bf00      	nop
 800d1cc:	e002      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1ce:	bf00      	nop
 800d1d0:	e000      	b.n	800d1d4 <USBH_HandleEnum+0x29c>
    break;
 800d1d2:	bf00      	nop
  }
  return Status;
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop

0800d1e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800d1f2:	bf00      	nop
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f804 	bl	800d222 <USBH_HandleSof>
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b0b      	cmp	r3, #11
 800d232:	d10a      	bne.n	800d24a <USBH_HandleSof+0x28>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d005      	beq.n	800d24a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	4798      	blx	r3
  }
}
 800d24a:	bf00      	nop
 800d24c:	3708      	adds	r7, #8
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800d252:	b480      	push	{r7}
 800d254:	b083      	sub	sp, #12
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d262:	bf00      	nop
}
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800d26e:	b480      	push	{r7}
 800d270:	b083      	sub	sp, #12
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d27e:	bf00      	nop
}
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b083      	sub	sp, #12
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800d298:	4618      	mov	r0, r3
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10f      	bne.n	800d2d6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00e      	beq.n	800d2e6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2ce:	2104      	movs	r1, #4
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	4798      	blx	r3
 800d2d4:	e007      	b.n	800d2e6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d102      	bne.n	800d2e6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2202      	movs	r2, #2
 800d2e4:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f003 f96d 	bl	80105dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f00a ff1e 	bl	8018156 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	791b      	ldrb	r3, [r3, #4]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fed4 	bl	800e0ce <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	795b      	ldrb	r3, [r3, #5]
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fece 	bl	800e0ce <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d34a:	2105      	movs	r1, #5
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f00a fee5 	bl	8018120 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2203      	movs	r2, #3
 800d35a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d370:	2200      	movs	r2, #0
 800d372:	4619      	mov	r1, r3
 800d374:	f003 f932 	bl	80105dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b086      	sub	sp, #24
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800d390:	f107 030c 	add.w	r3, r7, #12
 800d394:	f04f 32ff 	mov.w	r2, #4294967295
 800d398:	4618      	mov	r0, r3
 800d39a:	f003 f95f 	bl	801065c <osMessageGet>
    if(event.status == osEventMessage)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b10      	cmp	r3, #16
 800d3a2:	d1f2      	bne.n	800d38a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fbe7 	bl	800cb78 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d3aa:	e7ee      	b.n	800d38a <USBH_Process_OS+0x8>

0800d3ac <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	f003 f906 	bl	80105dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b086      	sub	sp, #24
 800d3de:	af02      	add	r7, sp, #8
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d3ec:	78fb      	ldrb	r3, [r7, #3]
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f864 	bl	800d4c8 <USBH_GetDescriptor>
 800d400:	4603      	mov	r3, r0
 800d402:	73fb      	strb	r3, [r7, #15]
 800d404:	7bfb      	ldrb	r3, [r7, #15]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10a      	bne.n	800d420 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f203 3022 	addw	r0, r3, #802	; 0x322
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d416:	78fa      	ldrb	r2, [r7, #3]
 800d418:	b292      	uxth	r2, r2
 800d41a:	4619      	mov	r1, r3
 800d41c:	f000 f918 	bl	800d650 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b086      	sub	sp, #24
 800d42e:	af02      	add	r7, sp, #8
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	331c      	adds	r3, #28
 800d43a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800d43c:	887b      	ldrh	r3, [r7, #2]
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d446:	2100      	movs	r1, #0
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f83d 	bl	800d4c8 <USBH_GetDescriptor>
 800d44e:	4603      	mov	r3, r0
 800d450:	72fb      	strb	r3, [r7, #11]
 800d452:	7afb      	ldrb	r3, [r7, #11]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d107      	bne.n	800d468 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d45e:	887a      	ldrh	r2, [r7, #2]
 800d460:	68f9      	ldr	r1, [r7, #12]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 f964 	bl	800d730 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800d468:	7afb      	ldrb	r3, [r7, #11]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b088      	sub	sp, #32
 800d476:	af02      	add	r7, sp, #8
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	461a      	mov	r2, r3
 800d47e:	460b      	mov	r3, r1
 800d480:	72fb      	strb	r3, [r7, #11]
 800d482:	4613      	mov	r3, r2
 800d484:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800d486:	7afb      	ldrb	r3, [r7, #11]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d48e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d496:	893b      	ldrh	r3, [r7, #8]
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	460b      	mov	r3, r1
 800d49c:	2100      	movs	r1, #0
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f000 f812 	bl	800d4c8 <USBH_GetDescriptor>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	75fb      	strb	r3, [r7, #23]
 800d4a8:	7dfb      	ldrb	r3, [r7, #23]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d107      	bne.n	800d4be <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d4b4:	893a      	ldrh	r2, [r7, #8]
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 fa37 	bl	800d92c <USBH_ParseStringDesc>
  }
  return status;
 800d4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	607b      	str	r3, [r7, #4]
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	72fb      	strb	r3, [r7, #11]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	789b      	ldrb	r3, [r3, #2]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d11c      	bne.n	800d51c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d4e2:	7afb      	ldrb	r3, [r7, #11]
 800d4e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2206      	movs	r2, #6
 800d4f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	893a      	ldrh	r2, [r7, #8]
 800d4f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d4fa:	893b      	ldrh	r3, [r7, #8]
 800d4fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d504:	d104      	bne.n	800d510 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f240 4209 	movw	r2, #1033	; 0x409
 800d50c:	829a      	strh	r2, [r3, #20]
 800d50e:	e002      	b.n	800d516 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	8b3a      	ldrh	r2, [r7, #24]
 800d51a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800d51c:	8b3b      	ldrh	r3, [r7, #24]
 800d51e:	461a      	mov	r2, r3
 800d520:	6879      	ldr	r1, [r7, #4]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f000 fa50 	bl	800d9c8 <USBH_CtlReq>
 800d528:	4603      	mov	r3, r0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b082      	sub	sp, #8
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	460b      	mov	r3, r1
 800d53c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	789b      	ldrb	r3, [r3, #2]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d10f      	bne.n	800d566 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2205      	movs	r2, #5
 800d550:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d552:	78fb      	ldrb	r3, [r7, #3]
 800d554:	b29a      	uxth	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d566:	2200      	movs	r2, #0
 800d568:	2100      	movs	r1, #0
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 fa2c 	bl	800d9c8 <USBH_CtlReq>
 800d570:	4603      	mov	r3, r0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	789b      	ldrb	r3, [r3, #2]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d10e      	bne.n	800d5ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2209      	movs	r2, #9
 800d598:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	887a      	ldrh	r2, [r7, #2]
 800d59e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fa09 	bl	800d9c8 <USBH_CtlReq>
 800d5b6:	4603      	mov	r3, r0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	789b      	ldrb	r3, [r3, #2]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d10f      	bne.n	800d5f4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2203      	movs	r2, #3
 800d5de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f9e5 	bl	800d9c8 <USBH_CtlReq>
 800d5fe:	4603      	mov	r3, r0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	460b      	mov	r3, r1
 800d612:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	789b      	ldrb	r3, [r3, #2]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d10f      	bne.n	800d63c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2202      	movs	r2, #2
 800d620:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d62e:	78fb      	ldrb	r3, [r7, #3]
 800d630:	b29a      	uxth	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800d63c:	2200      	movs	r2, #0
 800d63e:	2100      	movs	r1, #0
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f9c1 	bl	800d9c8 <USBH_CtlReq>
 800d646:	4603      	mov	r3, r0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	4613      	mov	r3, r2
 800d65c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	781a      	ldrb	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	785a      	ldrb	r2, [r3, #1]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	3302      	adds	r3, #2
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	b29a      	uxth	r2, r3
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	3303      	adds	r3, #3
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	021b      	lsls	r3, r3, #8
 800d680:	b29b      	uxth	r3, r3
 800d682:	4313      	orrs	r3, r2
 800d684:	b29a      	uxth	r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	791a      	ldrb	r2, [r3, #4]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	795a      	ldrb	r2, [r3, #5]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	799a      	ldrb	r2, [r3, #6]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	79da      	ldrb	r2, [r3, #7]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	d939      	bls.n	800d724 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	3308      	adds	r3, #8
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	3309      	adds	r3, #9
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	021b      	lsls	r3, r3, #8
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	330a      	adds	r3, #10
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	330b      	adds	r3, #11
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	330c      	adds	r3, #12
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	330d      	adds	r3, #13
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	021b      	lsls	r3, r3, #8
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	7b9a      	ldrb	r2, [r3, #14]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	7bda      	ldrb	r2, [r3, #15]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	7c1a      	ldrb	r2, [r3, #16]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	7c5a      	ldrb	r2, [r3, #17]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	745a      	strb	r2, [r3, #17]
  }
}
 800d724:	bf00      	nop
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08a      	sub	sp, #40	; 0x28
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	4613      	mov	r3, r2
 800d73c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d742:	2300      	movs	r3, #0
 800d744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d748:	2300      	movs	r3, #0
 800d74a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	781a      	ldrb	r2, [r3, #0]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	785a      	ldrb	r2, [r3, #1]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	3302      	adds	r3, #2
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	b29a      	uxth	r2, r3
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	3303      	adds	r3, #3
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	b29b      	uxth	r3, r3
 800d772:	021b      	lsls	r3, r3, #8
 800d774:	b29b      	uxth	r3, r3
 800d776:	4313      	orrs	r3, r2
 800d778:	b29a      	uxth	r2, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	791a      	ldrb	r2, [r3, #4]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	795a      	ldrb	r2, [r3, #5]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	799a      	ldrb	r2, [r3, #6]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	79da      	ldrb	r2, [r3, #7]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	7a1a      	ldrb	r2, [r3, #8]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d7a6:	88fb      	ldrh	r3, [r7, #6]
 800d7a8:	2b09      	cmp	r3, #9
 800d7aa:	d95f      	bls.n	800d86c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d7ac:	2309      	movs	r3, #9
 800d7ae:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d7b4:	e051      	b.n	800d85a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d7b6:	f107 0316 	add.w	r3, r7, #22
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7be:	f000 f8e8 	bl	800d992 <USBH_GetNextDesc>
 800d7c2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	785b      	ldrb	r3, [r3, #1]
 800d7c8:	2b04      	cmp	r3, #4
 800d7ca:	d146      	bne.n	800d85a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d7cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7d0:	221a      	movs	r2, #26
 800d7d2:	fb02 f303 	mul.w	r3, r2, r3
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4413      	add	r3, r2
 800d7dc:	3302      	adds	r3, #2
 800d7de:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800d7e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7e2:	69f8      	ldr	r0, [r7, #28]
 800d7e4:	f000 f846 	bl	800d874 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d7f2:	e022      	b.n	800d83a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800d7f4:	f107 0316 	add.w	r3, r7, #22
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7fc:	f000 f8c9 	bl	800d992 <USBH_GetNextDesc>
 800d800:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	785b      	ldrb	r3, [r3, #1]
 800d806:	2b05      	cmp	r3, #5
 800d808:	d117      	bne.n	800d83a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d80a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d80e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d812:	3201      	adds	r2, #1
 800d814:	00d2      	lsls	r2, r2, #3
 800d816:	211a      	movs	r1, #26
 800d818:	fb01 f303 	mul.w	r3, r1, r3
 800d81c:	4413      	add	r3, r2
 800d81e:	3308      	adds	r3, #8
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	4413      	add	r3, r2
 800d824:	3304      	adds	r3, #4
 800d826:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800d828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d82a:	69b8      	ldr	r0, [r7, #24]
 800d82c:	f000 f851 	bl	800d8d2 <USBH_ParseEPDesc>
            ep_ix++;
 800d830:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d834:	3301      	adds	r3, #1
 800d836:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	791b      	ldrb	r3, [r3, #4]
 800d83e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d842:	429a      	cmp	r2, r3
 800d844:	d204      	bcs.n	800d850 <USBH_ParseCfgDesc+0x120>
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	885a      	ldrh	r2, [r3, #2]
 800d84a:	8afb      	ldrh	r3, [r7, #22]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d8d1      	bhi.n	800d7f4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d854:	3301      	adds	r3, #1
 800d856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d85a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d804      	bhi.n	800d86c <USBH_ParseCfgDesc+0x13c>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	885a      	ldrh	r2, [r3, #2]
 800d866:	8afb      	ldrh	r3, [r7, #22]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d8a4      	bhi.n	800d7b6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d86c:	bf00      	nop
 800d86e:	3728      	adds	r7, #40	; 0x28
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781a      	ldrb	r2, [r3, #0]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	785a      	ldrb	r2, [r3, #1]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	789a      	ldrb	r2, [r3, #2]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	78da      	ldrb	r2, [r3, #3]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	791a      	ldrb	r2, [r3, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	795a      	ldrb	r2, [r3, #5]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	799a      	ldrb	r2, [r3, #6]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	79da      	ldrb	r2, [r3, #7]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	7a1a      	ldrb	r2, [r3, #8]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	721a      	strb	r2, [r3, #8]
}
 800d8c6:	bf00      	nop
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	781a      	ldrb	r2, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	785a      	ldrb	r2, [r3, #1]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	789a      	ldrb	r2, [r3, #2]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	78da      	ldrb	r2, [r3, #3]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	3304      	adds	r3, #4
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	b29a      	uxth	r2, r3
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	3305      	adds	r3, #5
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	021b      	lsls	r3, r3, #8
 800d90e:	b29b      	uxth	r3, r3
 800d910:	4313      	orrs	r3, r2
 800d912:	b29a      	uxth	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	799a      	ldrb	r2, [r3, #6]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	719a      	strb	r2, [r3, #6]
}
 800d920:	bf00      	nop
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b087      	sub	sp, #28
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	4613      	mov	r3, r2
 800d938:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3301      	adds	r3, #1
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	2b03      	cmp	r3, #3
 800d942:	d120      	bne.n	800d986 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	1e9a      	subs	r2, r3, #2
 800d94a:	88fb      	ldrh	r3, [r7, #6]
 800d94c:	4293      	cmp	r3, r2
 800d94e:	bf28      	it	cs
 800d950:	4613      	movcs	r3, r2
 800d952:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3302      	adds	r3, #2
 800d958:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d95a:	2300      	movs	r3, #0
 800d95c:	82fb      	strh	r3, [r7, #22]
 800d95e:	e00b      	b.n	800d978 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d960:	8afb      	ldrh	r3, [r7, #22]
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	4413      	add	r3, r2
 800d966:	781a      	ldrb	r2, [r3, #0]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	3301      	adds	r3, #1
 800d970:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d972:	8afb      	ldrh	r3, [r7, #22]
 800d974:	3302      	adds	r3, #2
 800d976:	82fb      	strh	r3, [r7, #22]
 800d978:	8afa      	ldrh	r2, [r7, #22]
 800d97a:	8abb      	ldrh	r3, [r7, #20]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d3ef      	bcc.n	800d960 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2200      	movs	r2, #0
 800d984:	701a      	strb	r2, [r3, #0]
  }
}
 800d986:	bf00      	nop
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800d992:	b480      	push	{r7}
 800d994:	b085      	sub	sp, #20
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	881a      	ldrh	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	4413      	add	r3, r2
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b086      	sub	sp, #24
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	789b      	ldrb	r3, [r3, #2]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d002      	beq.n	800d9e8 <USBH_CtlReq+0x20>
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d01d      	beq.n	800da22 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800d9e6:	e042      	b.n	800da6e <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	68ba      	ldr	r2, [r7, #8]
 800d9ec:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	88fa      	ldrh	r2, [r7, #6]
 800d9f2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2202      	movs	r2, #2
 800d9fe:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800da00:	2301      	movs	r3, #1
 800da02:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2203      	movs	r2, #3
 800da08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da18:	2200      	movs	r2, #0
 800da1a:	4619      	mov	r1, r3
 800da1c:	f002 fdde 	bl	80105dc <osMessagePut>
    break;
 800da20:	e025      	b.n	800da6e <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f000 f828 	bl	800da78 <USBH_HandleControl>
 800da28:	4603      	mov	r3, r0
 800da2a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800da2c:	7dfb      	ldrb	r3, [r7, #23]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d108      	bne.n	800da44 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2201      	movs	r2, #1
 800da36:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	75fb      	strb	r3, [r7, #23]
    break;
 800da42:	e013      	b.n	800da6c <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800da44:	7dfb      	ldrb	r3, [r7, #23]
 800da46:	2b03      	cmp	r3, #3
 800da48:	d108      	bne.n	800da5c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2201      	movs	r2, #1
 800da4e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800da56:	2303      	movs	r3, #3
 800da58:	75fb      	strb	r3, [r7, #23]
    break;
 800da5a:	e007      	b.n	800da6c <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800da5c:	7dfb      	ldrb	r3, [r7, #23]
 800da5e:	2b02      	cmp	r3, #2
 800da60:	d104      	bne.n	800da6c <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2201      	movs	r2, #1
 800da66:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800da68:	2302      	movs	r3, #2
 800da6a:	75fb      	strb	r3, [r7, #23]
    break;
 800da6c:	bf00      	nop
  }
  return status;
 800da6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af02      	add	r7, sp, #8
 800da7e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800da80:	2301      	movs	r3, #1
 800da82:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800da84:	2300      	movs	r3, #0
 800da86:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	7e1b      	ldrb	r3, [r3, #24]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	2b0a      	cmp	r3, #10
 800da90:	f200 821f 	bhi.w	800ded2 <USBH_HandleControl+0x45a>
 800da94:	a201      	add	r2, pc, #4	; (adr r2, 800da9c <USBH_HandleControl+0x24>)
 800da96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9a:	bf00      	nop
 800da9c:	0800dac9 	.word	0x0800dac9
 800daa0:	0800dae3 	.word	0x0800dae3
 800daa4:	0800db85 	.word	0x0800db85
 800daa8:	0800dbab 	.word	0x0800dbab
 800daac:	0800dc37 	.word	0x0800dc37
 800dab0:	0800dc63 	.word	0x0800dc63
 800dab4:	0800dd25 	.word	0x0800dd25
 800dab8:	0800dd47 	.word	0x0800dd47
 800dabc:	0800ddd9 	.word	0x0800ddd9
 800dac0:	0800de01 	.word	0x0800de01
 800dac4:	0800de93 	.word	0x0800de93
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f103 0110 	add.w	r1, r3, #16
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	795b      	ldrb	r3, [r3, #5]
 800dad2:	461a      	mov	r2, r3
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 fa0d 	bl	800def4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2202      	movs	r2, #2
 800dade:	761a      	strb	r2, [r3, #24]
    break;
 800dae0:	e202      	b.n	800dee8 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	795b      	ldrb	r3, [r3, #5]
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f00a fc21 	bl	8018330 <USBH_LL_GetURBState>
 800daee:	4603      	mov	r3, r0
 800daf0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800daf2:	7bbb      	ldrb	r3, [r7, #14]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d12c      	bne.n	800db52 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7c1b      	ldrb	r3, [r3, #16]
 800dafc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db00:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	8adb      	ldrh	r3, [r3, #22]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00a      	beq.n	800db20 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800db0a:	7b7b      	ldrb	r3, [r7, #13]
 800db0c:	2b80      	cmp	r3, #128	; 0x80
 800db0e:	d103      	bne.n	800db18 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2203      	movs	r2, #3
 800db14:	761a      	strb	r2, [r3, #24]
 800db16:	e00d      	b.n	800db34 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2205      	movs	r2, #5
 800db1c:	761a      	strb	r2, [r3, #24]
 800db1e:	e009      	b.n	800db34 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800db20:	7b7b      	ldrb	r3, [r7, #13]
 800db22:	2b80      	cmp	r3, #128	; 0x80
 800db24:	d103      	bne.n	800db2e <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2209      	movs	r2, #9
 800db2a:	761a      	strb	r2, [r3, #24]
 800db2c:	e002      	b.n	800db34 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2207      	movs	r2, #7
 800db32:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2203      	movs	r2, #3
 800db38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db48:	2200      	movs	r2, #0
 800db4a:	4619      	mov	r1, r3
 800db4c:	f002 fd46 	bl	80105dc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800db50:	e1c1      	b.n	800ded6 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800db52:	7bbb      	ldrb	r3, [r7, #14]
 800db54:	2b04      	cmp	r3, #4
 800db56:	d003      	beq.n	800db60 <USBH_HandleControl+0xe8>
 800db58:	7bbb      	ldrb	r3, [r7, #14]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	f040 81bb 	bne.w	800ded6 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	220b      	movs	r2, #11
 800db64:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2203      	movs	r2, #3
 800db6a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db7a:	2200      	movs	r2, #0
 800db7c:	4619      	mov	r1, r3
 800db7e:	f002 fd2d 	bl	80105dc <osMessagePut>
    break;
 800db82:	e1a8      	b.n	800ded6 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6899      	ldr	r1, [r3, #8]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	899a      	ldrh	r2, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	791b      	ldrb	r3, [r3, #4]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f9e8 	bl	800df72 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2204      	movs	r2, #4
 800dba6:	761a      	strb	r2, [r3, #24]
    break;
 800dba8:	e19e      	b.n	800dee8 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	791b      	ldrb	r3, [r3, #4]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f00a fbbd 	bl	8018330 <USBH_LL_GetURBState>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800dbba:	7bbb      	ldrb	r3, [r7, #14]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d110      	bne.n	800dbe2 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2209      	movs	r2, #9
 800dbc4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2203      	movs	r2, #3
 800dbca:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbda:	2200      	movs	r2, #0
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f002 fcfd 	bl	80105dc <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800dbe2:	7bbb      	ldrb	r3, [r7, #14]
 800dbe4:	2b05      	cmp	r3, #5
 800dbe6:	d110      	bne.n	800dc0a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2203      	movs	r2, #3
 800dbf0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc00:	2200      	movs	r2, #0
 800dc02:	4619      	mov	r1, r3
 800dc04:	f002 fcea 	bl	80105dc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dc08:	e167      	b.n	800deda <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800dc0a:	7bbb      	ldrb	r3, [r7, #14]
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	f040 8164 	bne.w	800deda <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	220b      	movs	r2, #11
 800dc16:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2203      	movs	r2, #3
 800dc1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f002 fcd4 	bl	80105dc <osMessagePut>
    break;
 800dc34:	e151      	b.n	800deda <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6899      	ldr	r1, [r3, #8]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	899a      	ldrh	r2, [r3, #12]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	7958      	ldrb	r0, [r3, #5]
 800dc42:	2301      	movs	r3, #1
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	4603      	mov	r3, r0
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f96d 	bl	800df28 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2206      	movs	r2, #6
 800dc5e:	761a      	strb	r2, [r3, #24]
    break;
 800dc60:	e142      	b.n	800dee8 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	795b      	ldrb	r3, [r3, #5]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f00a fb61 	bl	8018330 <USBH_LL_GetURBState>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d111      	bne.n	800dc9c <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2207      	movs	r2, #7
 800dc7c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2203      	movs	r2, #3
 800dc82:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc92:	2200      	movs	r2, #0
 800dc94:	4619      	mov	r1, r3
 800dc96:	f002 fca1 	bl	80105dc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dc9a:	e120      	b.n	800dede <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800dc9c:	7bbb      	ldrb	r3, [r7, #14]
 800dc9e:	2b05      	cmp	r3, #5
 800dca0:	d113      	bne.n	800dcca <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	220c      	movs	r2, #12
 800dca6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	f002 fc8a 	bl	80105dc <osMessagePut>
    break;
 800dcc8:	e109      	b.n	800dede <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800dcca:	7bbb      	ldrb	r3, [r7, #14]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d111      	bne.n	800dcf4 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2205      	movs	r2, #5
 800dcd4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2203      	movs	r2, #3
 800dcda:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcea:	2200      	movs	r2, #0
 800dcec:	4619      	mov	r1, r3
 800dcee:	f002 fc75 	bl	80105dc <osMessagePut>
    break;
 800dcf2:	e0f4      	b.n	800dede <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800dcf4:	7bbb      	ldrb	r3, [r7, #14]
 800dcf6:	2b04      	cmp	r3, #4
 800dcf8:	f040 80f1 	bne.w	800dede <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	220b      	movs	r2, #11
 800dd00:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800dd02:	2302      	movs	r3, #2
 800dd04:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2203      	movs	r2, #3
 800dd0a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	f002 fc5d 	bl	80105dc <osMessagePut>
    break;
 800dd22:	e0dc      	b.n	800dede <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	791b      	ldrb	r3, [r3, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f920 	bl	800df72 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2208      	movs	r2, #8
 800dd42:	761a      	strb	r2, [r3, #24]

    break;
 800dd44:	e0d0      	b.n	800dee8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	791b      	ldrb	r3, [r3, #4]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f00a faef 	bl	8018330 <USBH_LL_GetURBState>
 800dd52:	4603      	mov	r3, r0
 800dd54:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d113      	bne.n	800dd84 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	220d      	movs	r2, #13
 800dd60:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2203      	movs	r2, #3
 800dd6a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	f002 fc2d 	bl	80105dc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dd82:	e0ae      	b.n	800dee2 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800dd84:	7bbb      	ldrb	r3, [r7, #14]
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d111      	bne.n	800ddae <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	220b      	movs	r2, #11
 800dd8e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2203      	movs	r2, #3
 800dd94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dda4:	2200      	movs	r2, #0
 800dda6:	4619      	mov	r1, r3
 800dda8:	f002 fc18 	bl	80105dc <osMessagePut>
    break;
 800ddac:	e099      	b.n	800dee2 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
 800ddb0:	2b05      	cmp	r3, #5
 800ddb2:	f040 8096 	bne.w	800dee2 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2203      	movs	r2, #3
 800ddbe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddce:	2200      	movs	r2, #0
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f002 fc03 	bl	80105dc <osMessagePut>
    break;
 800ddd6:	e084      	b.n	800dee2 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	795a      	ldrb	r2, [r3, #5]
 800dddc:	2301      	movs	r3, #1
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	4613      	mov	r3, r2
 800dde2:	2200      	movs	r2, #0
 800dde4:	2100      	movs	r1, #0
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 f89e 	bl	800df28 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	220a      	movs	r2, #10
 800ddfc:	761a      	strb	r2, [r3, #24]
    break;
 800ddfe:	e073      	b.n	800dee8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	795b      	ldrb	r3, [r3, #5]
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f00a fa92 	bl	8018330 <USBH_LL_GetURBState>
 800de0c:	4603      	mov	r3, r0
 800de0e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800de10:	7bbb      	ldrb	r3, [r7, #14]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d113      	bne.n	800de3e <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	220d      	movs	r2, #13
 800de1e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2203      	movs	r2, #3
 800de24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de34:	2200      	movs	r2, #0
 800de36:	4619      	mov	r1, r3
 800de38:	f002 fbd0 	bl	80105dc <osMessagePut>
#endif
#endif
      }

    }
    break;
 800de3c:	e053      	b.n	800dee6 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800de3e:	7bbb      	ldrb	r3, [r7, #14]
 800de40:	2b02      	cmp	r3, #2
 800de42:	d111      	bne.n	800de68 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2209      	movs	r2, #9
 800de48:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2203      	movs	r2, #3
 800de4e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de5e:	2200      	movs	r2, #0
 800de60:	4619      	mov	r1, r3
 800de62:	f002 fbbb 	bl	80105dc <osMessagePut>
    break;
 800de66:	e03e      	b.n	800dee6 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	2b04      	cmp	r3, #4
 800de6c:	d13b      	bne.n	800dee6 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	220b      	movs	r2, #11
 800de72:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2203      	movs	r2, #3
 800de78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de88:	2200      	movs	r2, #0
 800de8a:	4619      	mov	r1, r3
 800de8c:	f002 fba6 	bl	80105dc <osMessagePut>
    break;
 800de90:	e029      	b.n	800dee6 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7e5b      	ldrb	r3, [r3, #25]
 800de96:	3301      	adds	r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	765a      	strb	r2, [r3, #25]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	7e5b      	ldrb	r3, [r3, #25]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d809      	bhi.n	800deba <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f00a f955 	bl	8018156 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2201      	movs	r2, #1
 800deb6:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800deb8:	e016      	b.n	800dee8 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dec0:	2106      	movs	r1, #6
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800decc:	2302      	movs	r3, #2
 800dece:	73fb      	strb	r3, [r7, #15]
    break;
 800ded0:	e00a      	b.n	800dee8 <USBH_HandleControl+0x470>

  default:
    break;
 800ded2:	bf00      	nop
 800ded4:	e008      	b.n	800dee8 <USBH_HandleControl+0x470>
    break;
 800ded6:	bf00      	nop
 800ded8:	e006      	b.n	800dee8 <USBH_HandleControl+0x470>
    break;
 800deda:	bf00      	nop
 800dedc:	e004      	b.n	800dee8 <USBH_HandleControl+0x470>
    break;
 800dede:	bf00      	nop
 800dee0:	e002      	b.n	800dee8 <USBH_HandleControl+0x470>
    break;
 800dee2:	bf00      	nop
 800dee4:	e000      	b.n	800dee8 <USBH_HandleControl+0x470>
    break;
 800dee6:	bf00      	nop
  }
  return status;
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop

0800def4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af04      	add	r7, sp, #16
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	4613      	mov	r3, r2
 800df00:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800df02:	79f9      	ldrb	r1, [r7, #7]
 800df04:	2300      	movs	r3, #0
 800df06:	9303      	str	r3, [sp, #12]
 800df08:	2308      	movs	r3, #8
 800df0a:	9302      	str	r3, [sp, #8]
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	9301      	str	r3, [sp, #4]
 800df10:	2300      	movs	r3, #0
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	2300      	movs	r3, #0
 800df16:	2200      	movs	r2, #0
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f00a f9d8 	bl	80182ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af04      	add	r7, sp, #16
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4611      	mov	r1, r2
 800df34:	461a      	mov	r2, r3
 800df36:	460b      	mov	r3, r1
 800df38:	80fb      	strh	r3, [r7, #6]
 800df3a:	4613      	mov	r3, r2
 800df3c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800df48:	2300      	movs	r3, #0
 800df4a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800df4c:	7979      	ldrb	r1, [r7, #5]
 800df4e:	7e3b      	ldrb	r3, [r7, #24]
 800df50:	9303      	str	r3, [sp, #12]
 800df52:	88fb      	ldrh	r3, [r7, #6]
 800df54:	9302      	str	r3, [sp, #8]
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	2301      	movs	r3, #1
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	2300      	movs	r3, #0
 800df60:	2200      	movs	r2, #0
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f00a f9b3 	bl	80182ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3710      	adds	r7, #16
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b088      	sub	sp, #32
 800df76:	af04      	add	r7, sp, #16
 800df78:	60f8      	str	r0, [r7, #12]
 800df7a:	60b9      	str	r1, [r7, #8]
 800df7c:	4611      	mov	r1, r2
 800df7e:	461a      	mov	r2, r3
 800df80:	460b      	mov	r3, r1
 800df82:	80fb      	strh	r3, [r7, #6]
 800df84:	4613      	mov	r3, r2
 800df86:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800df88:	7979      	ldrb	r1, [r7, #5]
 800df8a:	2300      	movs	r3, #0
 800df8c:	9303      	str	r3, [sp, #12]
 800df8e:	88fb      	ldrh	r3, [r7, #6]
 800df90:	9302      	str	r3, [sp, #8]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	2301      	movs	r3, #1
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	2300      	movs	r3, #0
 800df9c:	2201      	movs	r2, #1
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f00a f995 	bl	80182ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dfa4:	2300      	movs	r3, #0

}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b088      	sub	sp, #32
 800dfb2:	af04      	add	r7, sp, #16
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	4611      	mov	r1, r2
 800dfba:	461a      	mov	r2, r3
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	80fb      	strh	r3, [r7, #6]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800dfd2:	7979      	ldrb	r1, [r7, #5]
 800dfd4:	7e3b      	ldrb	r3, [r7, #24]
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	88fb      	ldrh	r3, [r7, #6]
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f00a f970 	bl	80182ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	af04      	add	r7, sp, #16
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4611      	mov	r1, r2
 800e004:	461a      	mov	r2, r3
 800e006:	460b      	mov	r3, r1
 800e008:	80fb      	strh	r3, [r7, #6]
 800e00a:	4613      	mov	r3, r2
 800e00c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e00e:	7979      	ldrb	r1, [r7, #5]
 800e010:	2300      	movs	r3, #0
 800e012:	9303      	str	r3, [sp, #12]
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	9302      	str	r3, [sp, #8]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	2301      	movs	r3, #1
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	2302      	movs	r3, #2
 800e022:	2201      	movs	r2, #1
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f00a f952 	bl	80182ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af04      	add	r7, sp, #16
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	4608      	mov	r0, r1
 800e03e:	4611      	mov	r1, r2
 800e040:	461a      	mov	r2, r3
 800e042:	4603      	mov	r3, r0
 800e044:	70fb      	strb	r3, [r7, #3]
 800e046:	460b      	mov	r3, r1
 800e048:	70bb      	strb	r3, [r7, #2]
 800e04a:	4613      	mov	r3, r2
 800e04c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800e04e:	7878      	ldrb	r0, [r7, #1]
 800e050:	78ba      	ldrb	r2, [r7, #2]
 800e052:	78f9      	ldrb	r1, [r7, #3]
 800e054:	8b3b      	ldrh	r3, [r7, #24]
 800e056:	9302      	str	r3, [sp, #8]
 800e058:	7d3b      	ldrb	r3, [r7, #20]
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	7c3b      	ldrb	r3, [r7, #16]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4603      	mov	r3, r0
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f00a f8e5 	bl	8018232 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800e068:	2300      	movs	r3, #0

}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	460b      	mov	r3, r1
 800e07c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800e07e:	78fb      	ldrb	r3, [r7, #3]
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f00a f904 	bl	8018290 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e088:	2300      	movs	r3, #0

}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b084      	sub	sp, #16
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	460b      	mov	r3, r1
 800e09c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f831 	bl	800e106 <USBH_GetFreePipe>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e0a8:	89fb      	ldrh	r3, [r7, #14]
 800e0aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d007      	beq.n	800e0c2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800e0b2:	78fb      	ldrb	r3, [r7, #3]
 800e0b4:	89fa      	ldrh	r2, [r7, #14]
 800e0b6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	32e0      	adds	r2, #224	; 0xe0
 800e0be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800e0c2:	89fb      	ldrh	r3, [r7, #14]
 800e0c4:	b2db      	uxtb	r3, r3
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e0ce:	b480      	push	{r7}
 800e0d0:	b083      	sub	sp, #12
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	2b0a      	cmp	r3, #10
 800e0de:	d80b      	bhi.n	800e0f8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800e0e0:	78fa      	ldrb	r2, [r7, #3]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32e0      	adds	r2, #224	; 0xe0
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	78fa      	ldrb	r2, [r7, #3]
 800e0ec:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	32e0      	adds	r2, #224	; 0xe0
 800e0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800e106:	b480      	push	{r7}
 800e108:	b085      	sub	sp, #20
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e10e:	2300      	movs	r3, #0
 800e110:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e112:	2300      	movs	r3, #0
 800e114:	73fb      	strb	r3, [r7, #15]
 800e116:	e00e      	b.n	800e136 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e118:	7bfa      	ldrb	r2, [r7, #15]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	32e0      	adds	r2, #224	; 0xe0
 800e11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e126:	2b00      	cmp	r3, #0
 800e128:	d102      	bne.n	800e130 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	e007      	b.n	800e140 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800e130:	7bfb      	ldrb	r3, [r7, #15]
 800e132:	3301      	adds	r3, #1
 800e134:	73fb      	strb	r3, [r7, #15]
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	2b0a      	cmp	r3, #10
 800e13a:	d9ed      	bls.n	800e118 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800e13c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e140:	4618      	mov	r0, r3
 800e142:	3714      	adds	r7, #20
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	461a      	mov	r2, r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	817b      	strh	r3, [r7, #10]
 800e15e:	460b      	mov	r3, r1
 800e160:	813b      	strh	r3, [r7, #8]
 800e162:	4613      	mov	r3, r2
 800e164:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	897a      	ldrh	r2, [r7, #10]
 800e16a:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	893a      	ldrh	r2, [r7, #8]
 800e170:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	88fa      	ldrh	r2, [r7, #6]
 800e176:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	8b3a      	ldrh	r2, [r7, #24]
 800e17c:	80da      	strh	r2, [r3, #6]
    }
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	4413      	add	r3, r2
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	b21b      	sxth	r3, r3
    }
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	370c      	adds	r7, #12
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800e1b6:	b480      	push	{r7}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	4413      	add	r3, r2
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	b21b      	sxth	r3, r3
    }
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	807b      	strh	r3, [r7, #2]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800e1f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	db1a      	blt.n	800e234 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff ffc4 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e204:	4603      	mov	r3, r0
 800e206:	461a      	mov	r2, r3
 800e208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e20c:	4293      	cmp	r3, r2
 800e20e:	da11      	bge.n	800e234 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800e216:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	db0a      	blt.n	800e234 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7ff ffc9 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e224:	4603      	mov	r3, r0
 800e226:	461a      	mov	r2, r3
 800e228:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e22c:	4293      	cmp	r3, r2
 800e22e:	da01      	bge.n	800e234 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800e230:	2301      	movs	r3, #1
 800e232:	e000      	b.n	800e236 <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800e234:	2300      	movs	r3, #0
    }
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800e23e:	b590      	push	{r4, r7, lr}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e24e:	6838      	ldr	r0, [r7, #0]
 800e250:	f7ff ff9c 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e254:	4603      	mov	r3, r0
 800e256:	429c      	cmp	r4, r3
 800e258:	da1e      	bge.n	800e298 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f7ff ff96 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	dd14      	ble.n	800e298 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800e274:	6838      	ldr	r0, [r7, #0]
 800e276:	f7ff ff9e 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e27a:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800e27c:	429c      	cmp	r4, r3
 800e27e:	da0b      	bge.n	800e298 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ff98 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e286:	4603      	mov	r3, r0
 800e288:	461a      	mov	r2, r3
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800e290:	429a      	cmp	r2, r3
 800e292:	dd01      	ble.n	800e298 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e294:	2301      	movs	r3, #1
 800e296:	e000      	b.n	800e29a <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800e298:	2300      	movs	r3, #0
    }
 800e29a:	4618      	mov	r0, r3
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd90      	pop	{r4, r7, pc}

0800e2a2 <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	60f8      	str	r0, [r7, #12]
 800e2aa:	60b9      	str	r1, [r7, #8]
 800e2ac:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	6811      	ldr	r1, [r2, #0]
 800e2b4:	6852      	ldr	r2, [r2, #4]
 800e2b6:	6019      	str	r1, [r3, #0]
 800e2b8:	605a      	str	r2, [r3, #4]
        r &= other;
 800e2ba:	6879      	ldr	r1, [r7, #4]
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f000 f805 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800e2c2:	bf00      	nop
    }
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800e2cc:	b590      	push	{r4, r7, lr}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7ff ffb0 	bl	800e23e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d05f      	beq.n	800e3a4 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	dd03      	ble.n	800e2fc <_ZN8touchgfx4RectaNERKS0_+0x30>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2fa:	e002      	b.n	800e302 <_ZN8touchgfx4RectaNERKS0_+0x36>
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e302:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e310:	429a      	cmp	r2, r3
 800e312:	dd04      	ble.n	800e31e <_ZN8touchgfx4RectaNERKS0_+0x52>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3302      	adds	r3, #2
 800e318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e31c:	e002      	b.n	800e324 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e324:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff ff30 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461c      	mov	r4, r3
 800e330:	6838      	ldr	r0, [r7, #0]
 800e332:	f7ff ff2b 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e336:	4603      	mov	r3, r0
 800e338:	429c      	cmp	r4, r3
 800e33a:	da05      	bge.n	800e348 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff ff25 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e342:	4603      	mov	r3, r0
 800e344:	b29b      	uxth	r3, r3
 800e346:	e004      	b.n	800e352 <_ZN8touchgfx4RectaNERKS0_+0x86>
 800e348:	6838      	ldr	r0, [r7, #0]
 800e34a:	f7ff ff1f 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e34e:	4603      	mov	r3, r0
 800e350:	b29b      	uxth	r3, r3
 800e352:	89fa      	ldrh	r2, [r7, #14]
 800e354:	1a9b      	subs	r3, r3, r2
 800e356:	b29b      	uxth	r3, r3
 800e358:	b21a      	sxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff ff29 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e364:	4603      	mov	r3, r0
 800e366:	461c      	mov	r4, r3
 800e368:	6838      	ldr	r0, [r7, #0]
 800e36a:	f7ff ff24 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e36e:	4603      	mov	r3, r0
 800e370:	429c      	cmp	r4, r3
 800e372:	da05      	bge.n	800e380 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7ff ff1e 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	e004      	b.n	800e38a <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800e380:	6838      	ldr	r0, [r7, #0]
 800e382:	f7ff ff18 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e386:	4603      	mov	r3, r0
 800e388:	b29b      	uxth	r3, r3
 800e38a:	89ba      	ldrh	r2, [r7, #12]
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	b29b      	uxth	r3, r3
 800e390:	b21a      	sxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	80da      	strh	r2, [r3, #6]
            x = newX;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	89fa      	ldrh	r2, [r7, #14]
 800e39a:	801a      	strh	r2, [r3, #0]
            y = newY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	89ba      	ldrh	r2, [r7, #12]
 800e3a0:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800e3a2:	e00b      	b.n	800e3bc <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	801a      	strh	r2, [r3, #0]
            y = 0;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	805a      	strh	r2, [r3, #2]
            width = 0;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	809a      	strh	r2, [r3, #4]
            height = 0;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	80da      	strh	r2, [r3, #6]
    }
 800e3bc:	bf00      	nop
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd90      	pop	{r4, r7, pc}

0800e3c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800e3ce:	6838      	ldr	r0, [r7, #0]
 800e3d0:	f000 f884 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	f083 0301 	eor.w	r3, r3, #1
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d079      	beq.n	800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f87b 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d014      	beq.n	800e416 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800e414:	e05e      	b.n	800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e422:	429a      	cmp	r2, r3
 800e424:	da03      	bge.n	800e42e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e42c:	e002      	b.n	800e434 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e434:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e442:	429a      	cmp	r2, r3
 800e444:	da04      	bge.n	800e450 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	3302      	adds	r3, #2
 800e44a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e44e:	e002      	b.n	800e456 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e456:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff fe97 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e45e:	4603      	mov	r3, r0
 800e460:	461c      	mov	r4, r3
 800e462:	6838      	ldr	r0, [r7, #0]
 800e464:	f7ff fe92 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e468:	4603      	mov	r3, r0
 800e46a:	429c      	cmp	r4, r3
 800e46c:	dd04      	ble.n	800e478 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff fe8c 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e474:	4603      	mov	r3, r0
 800e476:	e003      	b.n	800e480 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800e478:	6838      	ldr	r0, [r7, #0]
 800e47a:	f7ff fe87 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800e47e:	4603      	mov	r3, r0
 800e480:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fe97 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e488:	4603      	mov	r3, r0
 800e48a:	461c      	mov	r4, r3
 800e48c:	6838      	ldr	r0, [r7, #0]
 800e48e:	f7ff fe92 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e492:	4603      	mov	r3, r0
 800e494:	429c      	cmp	r4, r3
 800e496:	dd04      	ble.n	800e4a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7ff fe8c 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	e003      	b.n	800e4aa <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800e4a2:	6838      	ldr	r0, [r7, #0]
 800e4a4:	f7ff fe87 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	813b      	strh	r3, [r7, #8]
                x = newX;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	89fa      	ldrh	r2, [r7, #14]
 800e4b0:	801a      	strh	r2, [r3, #0]
                y = newY;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	89ba      	ldrh	r2, [r7, #12]
 800e4b6:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800e4b8:	897a      	ldrh	r2, [r7, #10]
 800e4ba:	89fb      	ldrh	r3, [r7, #14]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	b21a      	sxth	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800e4c6:	893a      	ldrh	r2, [r7, #8]
 800e4c8:	89bb      	ldrh	r3, [r7, #12]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	b21a      	sxth	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	80da      	strh	r2, [r3, #6]
    }
 800e4d4:	bf00      	nop
 800e4d6:	3714      	adds	r7, #20
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd90      	pop	{r4, r7, pc}

0800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d004      	beq.n	800e4f8 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e000      	b.n	800e4fe <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800e4fc:	2300      	movs	r3, #0
    }
 800e4fe:	4618      	mov	r0, r3
 800e500:	370c      	adds	r7, #12
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
	...

0800e50c <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	4a04      	ldr	r2, [pc, #16]	; (800e528 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	601a      	str	r2, [r3, #0]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	08021000 	.word	0x08021000

0800e52c <_ZN8touchgfx8DrawableD0Ev>:
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ffe9 	bl	800e50c <_ZN8touchgfx8DrawableD1Ev>
 800e53a:	2128      	movs	r1, #40	; 0x28
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f00f ff1e 	bl	801e37e <_ZdlPvj>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	3304      	adds	r3, #4
    }
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	4608      	mov	r0, r1
 800e56e:	4611      	mov	r1, r2
 800e570:	461a      	mov	r2, r3
 800e572:	4603      	mov	r3, r0
 800e574:	817b      	strh	r3, [r7, #10]
 800e576:	460b      	mov	r3, r1
 800e578:	813b      	strh	r3, [r7, #8]
 800e57a:	4613      	mov	r3, r2
 800e57c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3334      	adds	r3, #52	; 0x34
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e58a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	4798      	blx	r3
        setWidth(width);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	3338      	adds	r3, #56	; 0x38
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	4798      	blx	r3
        setHeight(height);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	333c      	adds	r3, #60	; 0x3c
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	4798      	blx	r3
    };
 800e5b6:	bf00      	nop
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e5be:	b480      	push	{r7}
 800e5c0:	b083      	sub	sp, #12
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	887a      	ldrh	r2, [r7, #2]
 800e602:	809a      	strh	r2, [r3, #4]
    }
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	460b      	mov	r3, r1
 800e61a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	887a      	ldrh	r2, [r7, #2]
 800e620:	80da      	strh	r2, [r3, #6]
    }
 800e622:	bf00      	nop
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e62e:	b580      	push	{r7, lr}
 800e630:	b082      	sub	sp, #8
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	460b      	mov	r3, r1
 800e638:	807b      	strh	r3, [r7, #2]
 800e63a:	4613      	mov	r3, r2
 800e63c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	332c      	adds	r3, #44	; 0x2c
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e64a:	4611      	mov	r1, r2
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	4798      	blx	r3
        setY(y);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3330      	adds	r3, #48	; 0x30
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e65c:	4611      	mov	r1, r2
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
    }
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	460b      	mov	r3, r1
 800e674:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	887a      	ldrh	r2, [r7, #2]
 800e67a:	811a      	strh	r2, [r3, #8]
    }
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	887a      	ldrh	r2, [r7, #2]
 800e698:	815a      	strh	r2, [r3, #10]
    }
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800e6a6:	b480      	push	{r7}
 800e6a8:	b083      	sub	sp, #12
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	bf00      	nop
 800e6b0:	370c      	adds	r7, #12
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800e6ba:	b480      	push	{r7}
 800e6bc:	b083      	sub	sp, #12
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
 800e6da:	bf00      	nop
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800e6e6:	b480      	push	{r7}
 800e6e8:	b083      	sub	sp, #12
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	6039      	str	r1, [r7, #0]
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e71e:	4618      	mov	r0, r3
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e72a:	b480      	push	{r7}
 800e72c:	b083      	sub	sp, #12
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	807b      	strh	r3, [r7, #2]
 800e750:	4613      	mov	r3, r2
 800e752:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3354      	adds	r3, #84	; 0x54
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	8879      	ldrh	r1, [r7, #2]
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e764:	b292      	uxth	r2, r2
 800e766:	1a8a      	subs	r2, r1, r2
 800e768:	b292      	uxth	r2, r2
 800e76a:	b210      	sxth	r0, r2
 800e76c:	8839      	ldrh	r1, [r7, #0]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e774:	b292      	uxth	r2, r2
 800e776:	1a8a      	subs	r2, r1, r2
 800e778:	b292      	uxth	r2, r2
 800e77a:	b212      	sxth	r2, r2
 800e77c:	4601      	mov	r1, r0
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	4798      	blx	r3
    }
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
	...

0800e78c <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	4a05      	ldr	r2, [pc, #20]	; (800e7ac <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7ff feb5 	bl	800e50c <_ZN8touchgfx8DrawableD1Ev>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	0801fb3c 	.word	0x0801fb3c

0800e7b0 <_ZN8touchgfx9ContainerD0Ev>:
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff ffe7 	bl	800e78c <_ZN8touchgfx9ContainerD1Ev>
 800e7be:	212c      	movs	r1, #44	; 0x2c
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f00f fddc 	bl	801e37e <_ZdlPvj>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800e7d8:	2312      	movs	r3, #18
    }
 800e7da:	4618      	mov	r0, r3
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b085      	sub	sp, #20
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
    bool found = false;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f8:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00d      	beq.n	800e81c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800e800:	7bfb      	ldrb	r3, [r7, #15]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10a      	bne.n	800e81c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	bf0c      	ite	eq
 800e80e:	2301      	moveq	r3, #1
 800e810:	2300      	movne	r3, #0
 800e812:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	699b      	ldr	r3, [r3, #24]
 800e818:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800e81a:	e7ee      	b.n	800e7fa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3714      	adds	r7, #20
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr
	...

0800e82c <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d105      	bne.n	800e84a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800e83e:	4b22      	ldr	r3, [pc, #136]	; (800e8c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800e840:	4a22      	ldr	r2, [pc, #136]	; (800e8cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e842:	2123      	movs	r1, #35	; 0x23
 800e844:	4822      	ldr	r0, [pc, #136]	; (800e8d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e846:	f00f fdb7 	bl	801e3b8 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d005      	beq.n	800e85e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800e852:	4b20      	ldr	r3, [pc, #128]	; (800e8d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800e854:	4a1d      	ldr	r2, [pc, #116]	; (800e8cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e856:	2124      	movs	r1, #36	; 0x24
 800e858:	481d      	ldr	r0, [pc, #116]	; (800e8d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e85a:	f00f fdad 	bl	801e3b8 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2200      	movs	r2, #0
 800e868:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d103      	bne.n	800e87a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800e878:	e021      	b.n	800e8be <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e87e:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00d      	beq.n	800e8a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d105      	bne.n	800e89c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800e890:	4b11      	ldr	r3, [pc, #68]	; (800e8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800e892:	4a0e      	ldr	r2, [pc, #56]	; (800e8cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e894:	2135      	movs	r1, #53	; 0x35
 800e896:	480e      	ldr	r0, [pc, #56]	; (800e8d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e898:	f00f fd8e 	bl	801e3b8 <__assert_func>
            head = head->nextSibling;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800e8a2:	e7ed      	b.n	800e880 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d105      	bne.n	800e8b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800e8ac:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800e8ae:	4a07      	ldr	r2, [pc, #28]	; (800e8cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e8b0:	2138      	movs	r1, #56	; 0x38
 800e8b2:	4807      	ldr	r0, [pc, #28]	; (800e8d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e8b4:	f00f fd80 	bl	801e3b8 <__assert_func>
        head->nextSibling = &d;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	683a      	ldr	r2, [r7, #0]
 800e8bc:	619a      	str	r2, [r3, #24]
}
 800e8be:	bf00      	nop
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	0801f3ec 	.word	0x0801f3ec
 800e8cc:	0801fbc4 	.word	0x0801fbc4
 800e8d0:	0801f418 	.word	0x0801f418
 800e8d4:	0801f470 	.word	0x0801f470
 800e8d8:	0801f4a8 	.word	0x0801f4a8

0800e8dc <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d031      	beq.n	800e952 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d112      	bne.n	800e91e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d103      	bne.n	800e90e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800e90c:	e022      	b.n	800e954 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	699a      	ldr	r2, [r3, #24]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2200      	movs	r2, #0
 800e91a:	619a      	str	r2, [r3, #24]
        return;
 800e91c:	e01a      	b.n	800e954 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e922:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d014      	beq.n	800e954 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	429a      	cmp	r2, r3
 800e932:	d10a      	bne.n	800e94a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	699a      	ldr	r2, [r3, #24]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2200      	movs	r2, #0
 800e940:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2200      	movs	r2, #0
 800e946:	619a      	str	r2, [r3, #24]
            return;
 800e948:	e004      	b.n	800e954 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800e950:	e7e8      	b.n	800e924 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800e952:	bf00      	nop
        }
    }
}
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800e95e:	b480      	push	{r7}
 800e960:	b085      	sub	sp, #20
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00e      	beq.n	800e98c <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e972:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e978:	699a      	ldr	r2, [r3, #24]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800e98a:	e7ec      	b.n	800e966 <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800e98c:	bf00      	nop
 800e98e:	3714      	adds	r7, #20
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e9a6:	bf00      	nop
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b088      	sub	sp, #32
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7ff fea6 	bl	800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	f083 0301 	eor.w	r3, r3, #1
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d103      	bne.n	800e9d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e000      	b.n	800e9de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d14e      	bne.n	800ea80 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800e9e2:	683a      	ldr	r2, [r7, #0]
 800e9e4:	f107 0314 	add.w	r3, r7, #20
 800e9e8:	6810      	ldr	r0, [r2, #0]
 800e9ea:	6851      	ldr	r1, [r2, #4]
 800e9ec:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f2:	61fb      	str	r3, [r7, #28]
    while (d)
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d043      	beq.n	800ea82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800e9fa:	69f8      	ldr	r0, [r7, #28]
 800e9fc:	f7ff fe88 	bl	800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d038      	beq.n	800ea78 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800ea06:	69f8      	ldr	r0, [r7, #28]
 800ea08:	f7ff fda0 	bl	800e54c <_ZNK8touchgfx8Drawable7getRectEv>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	f107 030c 	add.w	r3, r7, #12
 800ea12:	f107 0114 	add.w	r1, r7, #20
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fc43 	bl	800e2a2 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ea1c:	f107 030c 	add.w	r3, r7, #12
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fd5b 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea26:	4603      	mov	r3, r0
 800ea28:	f083 0301 	eor.w	r3, r3, #1
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d022      	beq.n	800ea78 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800ea32:	69f8      	ldr	r0, [r7, #28]
 800ea34:	f7ff fdc3 	bl	800e5be <_ZNK8touchgfx8Drawable4getXEv>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	b28b      	uxth	r3, r1
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	b21b      	sxth	r3, r3
 800ea4a:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800ea4c:	69f8      	ldr	r0, [r7, #28]
 800ea4e:	f7ff fdc3 	bl	800e5d8 <_ZNK8touchgfx8Drawable4getYEv>
 800ea52:	4603      	mov	r3, r0
 800ea54:	4619      	mov	r1, r3
 800ea56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	b28b      	uxth	r3, r1
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	b21b      	sxth	r3, r3
 800ea64:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f107 020c 	add.w	r2, r7, #12
 800ea72:	4611      	mov	r1, r2
 800ea74:	69f8      	ldr	r0, [r7, #28]
 800ea76:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	61fb      	str	r3, [r7, #28]
    while (d)
 800ea7e:	e7b9      	b.n	800e9f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800ea80:	bf00      	nop
    }
}
 800ea82:	3720      	adds	r7, #32
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b087      	sub	sp, #28
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	607b      	str	r3, [r7, #4]
 800ea92:	460b      	mov	r3, r1
 800ea94:	817b      	strh	r3, [r7, #10]
 800ea96:	4613      	mov	r3, r2
 800ea98:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7ff fe44 	bl	800e72a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab2:	617b      	str	r3, [r7, #20]
    while (d)
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d038      	beq.n	800eb2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800eaba:	6978      	ldr	r0, [r7, #20]
 800eabc:	f7ff fe28 	bl	800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00e      	beq.n	800eae4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800eac6:	6978      	ldr	r0, [r7, #20]
 800eac8:	f7ff fd40 	bl	800e54c <_ZNK8touchgfx8Drawable7getRectEv>
 800eacc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ead0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ead4:	4619      	mov	r1, r3
 800ead6:	f7ff fb83 	bl	800e1e0 <_ZNK8touchgfx4Rect9intersectEss>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d001      	beq.n	800eae4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e000      	b.n	800eae6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800eae4:	2300      	movs	r3, #0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d01c      	beq.n	800eb24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800eaea:	897c      	ldrh	r4, [r7, #10]
 800eaec:	6978      	ldr	r0, [r7, #20]
 800eaee:	f7ff fd66 	bl	800e5be <_ZNK8touchgfx8Drawable4getXEv>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	1ae3      	subs	r3, r4, r3
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800eafc:	893c      	ldrh	r4, [r7, #8]
 800eafe:	6978      	ldr	r0, [r7, #20]
 800eb00:	f7ff fd6a 	bl	800e5d8 <_ZNK8touchgfx8Drawable4getYEv>
 800eb04:	4603      	mov	r3, r0
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	1ae3      	subs	r3, r4, r3
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	331c      	adds	r3, #28
 800eb14:	681c      	ldr	r4, [r3, #0]
 800eb16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800eb1a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6978      	ldr	r0, [r7, #20]
 800eb22:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	617b      	str	r3, [r7, #20]
    while (d)
 800eb2a:	e7c3      	b.n	800eab4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800eb2c:	bf00      	nop
 800eb2e:	371c      	adds	r7, #28
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd90      	pop	{r4, r7, pc}

0800eb34 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af02      	add	r7, sp, #8
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800eb3e:	2300      	movs	r3, #0
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	2300      	movs	r3, #0
 800eb44:	2200      	movs	r2, #0
 800eb46:	2100      	movs	r1, #0
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7ff faff 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
}
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b086      	sub	sp, #24
 800eb5a:	af02      	add	r7, sp, #8
 800eb5c:	6078      	str	r0, [r7, #4]
 800eb5e:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb64:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800eb66:	2300      	movs	r3, #0
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2100      	movs	r1, #0
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7ff faeb 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
    while (d)
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00b      	beq.n	800eb94 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7ff fce5 	bl	800e54c <_ZNK8touchgfx8Drawable7getRectEv>
 800eb82:	4603      	mov	r3, r0
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fc1c 	bl	800e3c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	60fb      	str	r3, [r7, #12]
    while (d)
 800eb92:	e7f0      	b.n	800eb76 <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800eb94:	bf00      	nop
}
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b084      	sub	sp, #16
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	460b      	mov	r3, r1
 800eba8:	807b      	strh	r3, [r7, #2]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb2:	60fb      	str	r3, [r7, #12]
    while (d)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00d      	beq.n	800ebd6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	3354      	adds	r3, #84	; 0x54
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ebc6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	4798      	blx	r3
        d = d->nextSibling;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	60fb      	str	r3, [r7, #12]
    while (d)
 800ebd4:	e7ee      	b.n	800ebb4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800ebd6:	bf00      	nop
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b084      	sub	sp, #16
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebec:	60fb      	str	r3, [r7, #12]
    while (d)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00a      	beq.n	800ec0a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68f9      	ldr	r1, [r7, #12]
 800ebfe:	6838      	ldr	r0, [r7, #0]
 800ec00:	4798      	blx	r3
        d = d->nextSibling;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	60fb      	str	r3, [r7, #12]
    while (d)
 800ec08:	e7f1      	b.n	800ebee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800ec0a:	bf00      	nop
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b086      	sub	sp, #24
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d107      	bne.n	800ec36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3364      	adds	r3, #100	; 0x64
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	6879      	ldr	r1, [r7, #4]
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	4798      	blx	r3
        return;
 800ec34:	e026      	b.n	800ec84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10a      	bne.n	800ec52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	615a      	str	r2, [r3, #20]
 800ec50:	e018      	b.n	800ec84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec56:	617b      	str	r3, [r7, #20]
        while (tmp)
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d012      	beq.n	800ec84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d10a      	bne.n	800ec7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	699a      	ldr	r2, [r3, #24]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	615a      	str	r2, [r3, #20]
                return;
 800ec7a:	e003      	b.n	800ec84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	617b      	str	r3, [r7, #20]
        while (tmp)
 800ec82:	e7e9      	b.n	800ec58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b088      	sub	sp, #32
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	60f8      	str	r0, [r7, #12]
 800ec92:	60b9      	str	r1, [r7, #8]
 800ec94:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fd39 	bl	800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f083 0301 	eor.w	r3, r3, #1
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d14b      	bne.n	800ed42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d049      	beq.n	800ed46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb6:	61fb      	str	r3, [r7, #28]
    while (d)
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d044      	beq.n	800ed48 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800ecbe:	69f8      	ldr	r0, [r7, #28]
 800ecc0:	f7ff fd26 	bl	800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d037      	beq.n	800ed3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800ecca:	69f8      	ldr	r0, [r7, #28]
 800eccc:	f7ff fc3e 	bl	800e54c <_ZNK8touchgfx8Drawable7getRectEv>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	f107 0314 	add.w	r3, r7, #20
 800ecd6:	68b9      	ldr	r1, [r7, #8]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7ff fae2 	bl	800e2a2 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ecde:	f107 0314 	add.w	r3, r7, #20
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff fbfa 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f083 0301 	eor.w	r3, r3, #1
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d022      	beq.n	800ed3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800ecf4:	69f8      	ldr	r0, [r7, #28]
 800ecf6:	f7ff fc62 	bl	800e5be <_ZNK8touchgfx8Drawable4getXEv>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	b28b      	uxth	r3, r1
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	b21b      	sxth	r3, r3
 800ed0c:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800ed0e:	69f8      	ldr	r0, [r7, #28]
 800ed10:	f7ff fc62 	bl	800e5d8 <_ZNK8touchgfx8Drawable4getYEv>
 800ed14:	4603      	mov	r3, r0
 800ed16:	4619      	mov	r1, r3
 800ed18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	b28b      	uxth	r3, r1
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	b21b      	sxth	r3, r3
 800ed26:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	3360      	adds	r3, #96	; 0x60
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f107 0114 	add.w	r1, r7, #20
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	69f8      	ldr	r0, [r7, #28]
 800ed38:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	61fb      	str	r3, [r7, #28]
    while (d)
 800ed40:	e7ba      	b.n	800ecb8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800ed42:	bf00      	nop
 800ed44:	e000      	b.n	800ed48 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800ed46:	bf00      	nop
    }
}
 800ed48:	3720      	adds	r7, #32
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800ed4e:	b480      	push	{r7}
 800ed50:	b083      	sub	sp, #12
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
        return rect.width;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
        return rect.height;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800ed76:	4618      	mov	r0, r3
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ed82:	b480      	push	{r7}
 800ed84:	b083      	sub	sp, #12
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	6039      	str	r1, [r7, #0]
        color = col;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	601a      	str	r2, [r3, #0]
    }
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
        this->x = 0;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	80da      	strh	r2, [r3, #6]
    }
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr

0800edce <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800edce:	b480      	push	{r7}
 800edd0:	b083      	sub	sp, #12
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	460b      	mov	r3, r1
 800edd8:	807b      	strh	r3, [r7, #2]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	887a      	ldrh	r2, [r7, #2]
 800edde:	801a      	strh	r2, [r3, #0]
    {
    }
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4618      	mov	r0, r3
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	6078      	str	r0, [r7, #4]
        visible(true)
 800edf8:	4a13      	ldr	r2, [pc, #76]	; (800ee48 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	601a      	str	r2, [r3, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	1d18      	adds	r0, r3, #4
 800ee02:	2300      	movs	r3, #0
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	2300      	movs	r3, #0
 800ee08:	2200      	movs	r2, #0
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	f7ff f99e 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	330c      	adds	r3, #12
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff ffc3 	bl	800eda0 <_ZN8touchgfx4RectC1Ev>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	615a      	str	r2, [r3, #20]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	619a      	str	r2, [r3, #24]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	61da      	str	r2, [r3, #28]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	08021000 	.word	0x08021000

0800ee4c <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	78fa      	ldrb	r2, [r7, #3]
 800ee5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee7a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee82:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee8a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ee8c:	bf00      	nop
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7ff ffe1 	bl	800ee6c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	601a      	str	r2, [r3, #0]
    }
 800eeb8:	bf00      	nop
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7ff ff90 	bl	800edf0 <_ZN8touchgfx8DrawableC1Ev>
 800eed0:	4a03      	ldr	r2, [pc, #12]	; (800eee0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	0801fc08 	.word	0x0801fc08

0800eee4 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	4a05      	ldr	r2, [pc, #20]	; (800ef04 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff fb09 	bl	800e50c <_ZN8touchgfx8DrawableD1Ev>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	0801fc08 	.word	0x0801fc08

0800ef08 <_ZN8touchgfx6WidgetD0Ev>:
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7ff ffe7 	bl	800eee4 <_ZN8touchgfx6WidgetD1Ev>
 800ef16:	2128      	movs	r1, #40	; 0x28
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f00f fa30 	bl	801e37e <_ZdlPvj>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	607b      	str	r3, [r7, #4]
 800ef32:	460b      	mov	r3, r1
 800ef34:	817b      	strh	r3, [r7, #10]
 800ef36:	4613      	mov	r3, r2
 800ef38:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fbe7 	bl	800e710 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d008      	beq.n	800ef5a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff fbed 	bl	800e72a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ef56:	2301      	movs	r3, #1
 800ef58:	e000      	b.n	800ef5c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
        }
    }
 800ef66:	bf00      	nop
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800ef6e:	b480      	push	{r7}
 800ef70:	b083      	sub	sp, #12
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800ef76:	2301      	movs	r3, #1
    }
 800ef78:	4618      	mov	r0, r3
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff ff95 	bl	800eec0 <_ZN8touchgfx6WidgetC1Ev>
 800ef96:	4a0b      	ldr	r2, [pc, #44]	; (800efc4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3326      	adds	r3, #38	; 0x26
 800efa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff ff12 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	22ff      	movs	r2, #255	; 0xff
 800efae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800efb2:	6839      	ldr	r1, [r7, #0]
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 fd82 	bl	800fabe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4618      	mov	r0, r3
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	0801fe6c 	.word	0x0801fe6c

0800efc8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	4a05      	ldr	r2, [pc, #20]	; (800efe8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff ff83 	bl	800eee4 <_ZN8touchgfx6WidgetD1Ev>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	0801fe6c 	.word	0x0801fe6c

0800efec <_ZN8touchgfx5ImageD0Ev>:
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7ff ffe7 	bl	800efc8 <_ZN8touchgfx5ImageD1Ev>
 800effa:	212c      	movs	r1, #44	; 0x2c
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f00f f9be 	bl	801e37e <_ZdlPvj>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4618      	mov	r0, r3
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	4a04      	ldr	r2, [pc, #16]	; (800f028 <_ZN8touchgfx5EventD1Ev+0x1c>)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	601a      	str	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4618      	mov	r0, r3
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	0801fc9c 	.word	0x0801fc9c

0800f02c <_ZN8touchgfx5EventD0Ev>:
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7ff ffe9 	bl	800f00c <_ZN8touchgfx5EventD1Ev>
 800f03a:	2104      	movs	r1, #4
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f00f f99e 	bl	801e37e <_ZdlPvj>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	4a05      	ldr	r2, [pc, #20]	; (800f06c <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff ffd5 	bl	800f00c <_ZN8touchgfx5EventD1Ev>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4618      	mov	r0, r3
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	0801fc88 	.word	0x0801fc88

0800f070 <_ZN8touchgfx10ClickEventD0Ev>:
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f7ff ffe7 	bl	800f04c <_ZN8touchgfx10ClickEventD1Ev>
 800f07e:	210c      	movs	r1, #12
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f00f f97c 	bl	801e37e <_ZdlPvj>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	791b      	ldrb	r3, [r3, #4]
    }
 800f09c:	4618      	mov	r0, r3
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800f0b0:	2300      	movs	r3, #0
    }
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
	...

0800f0c0 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	4a05      	ldr	r2, [pc, #20]	; (800f0e0 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff ff9b 	bl	800f00c <_ZN8touchgfx5EventD1Ev>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	0801fc74 	.word	0x0801fc74

0800f0e4 <_ZN8touchgfx9DragEventD0Ev>:
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ffe7 	bl	800f0c0 <_ZN8touchgfx9DragEventD1Ev>
 800f0f2:	2110      	movs	r1, #16
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f00f f942 	bl	801e37e <_ZdlPvj>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800f10c:	2301      	movs	r3, #1
    }
 800f10e:	4618      	mov	r0, r3
 800f110:	370c      	adds	r7, #12
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr
	...

0800f11c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f11c:	b480      	push	{r7}
 800f11e:	af00      	add	r7, sp, #0
    {
        return instance;
 800f120:	4b03      	ldr	r3, [pc, #12]	; (800f130 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f122:	681b      	ldr	r3, [r3, #0]
    }
 800f124:	4618      	mov	r0, r3
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	20009abc 	.word	0x20009abc

0800f134 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4618      	mov	r0, r3
 800f140:	f7ff febe 	bl	800eec0 <_ZN8touchgfx6WidgetC1Ev>
 800f144:	4a09      	ldr	r2, [pc, #36]	; (800f16c <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	601a      	str	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	629a      	str	r2, [r3, #40]	; 0x28
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2101      	movs	r1, #1
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff fe75 	bl	800ee4c <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4618      	mov	r0, r3
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	0801fd14 	.word	0x0801fd14

0800f170 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	4a05      	ldr	r2, [pc, #20]	; (800f190 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	601a      	str	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff feaf 	bl	800eee4 <_ZN8touchgfx6WidgetD1Ev>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	0801fd14 	.word	0x0801fd14

0800f194 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff ffe7 	bl	800f170 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f1a2:	2130      	movs	r1, #48	; 0x30
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f00f f8ea 	bl	801e37e <_ZdlPvj>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff ffb8 	bl	800f134 <_ZN8touchgfx14AbstractButtonC1Ev>
 800f1c4:	4a0c      	ldr	r2, [pc, #48]	; (800f1f8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	332e      	adds	r3, #46	; 0x2e
 800f1ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff fdfb 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3330      	adds	r3, #48	; 0x30
 800f1dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7ff fdf4 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	22ff      	movs	r2, #255	; 0xff
 800f1ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	0801fd84 	.word	0x0801fd84

0800f1fc <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	4a05      	ldr	r2, [pc, #20]	; (800f21c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff ffaf 	bl	800f170 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4618      	mov	r0, r3
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	0801fd84 	.word	0x0801fd84

0800f220 <_ZN8touchgfx6ButtonD0Ev>:
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f7ff ffe7 	bl	800f1fc <_ZN8touchgfx6ButtonD1Ev>
 800f22e:	2134      	movs	r1, #52	; 0x34
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f00f f8a4 	bl	801e37e <_ZdlPvj>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800f248:	4b07      	ldr	r3, [pc, #28]	; (800f268 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d105      	bne.n	800f25c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800f250:	4b06      	ldr	r3, [pc, #24]	; (800f26c <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800f252:	4a07      	ldr	r2, [pc, #28]	; (800f270 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800f254:	2195      	movs	r1, #149	; 0x95
 800f256:	4807      	ldr	r0, [pc, #28]	; (800f274 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800f258:	f00f f8ae 	bl	801e3b8 <__assert_func>
        return bitmapId;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	881b      	ldrh	r3, [r3, #0]
    }
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	20009b54 	.word	0x20009b54
 800f26c:	0801f4dc 	.word	0x0801f4dc
 800f270:	0801fca8 	.word	0x0801fca8
 800f274:	0801f518 	.word	0x0801f518

0800f278 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    TiledImage(const Bitmap& bmp = Bitmap()) : Image(bmp), xOffset(0), yOffset(0)
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	4618      	mov	r0, r3
 800f288:	f7ff fe7c 	bl	800ef84 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f28c:	4a06      	ldr	r2, [pc, #24]	; (800f2a8 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	859a      	strh	r2, [r3, #44]	; 0x2c
    {
    }
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	0801fedc 	.word	0x0801fedc

0800f2ac <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	4a05      	ldr	r2, [pc, #20]	; (800f2cc <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	601a      	str	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff fe83 	bl	800efc8 <_ZN8touchgfx5ImageD1Ev>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	0801fedc 	.word	0x0801fedc

0800f2d0 <_ZN8touchgfx10TiledImageD0Ev>:
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7ff ffe7 	bl	800f2ac <_ZN8touchgfx10TiledImageD1Ev>
 800f2de:	2130      	movs	r1, #48	; 0x30
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f00f f84c 	bl	801e37e <_ZdlPvj>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f30c:	b480      	push	{r7}
 800f30e:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 800f310:	4b03      	ldr	r3, [pc, #12]	; (800f320 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	689b      	ldr	r3, [r3, #8]
    }
 800f316:	4618      	mov	r0, r3
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr
 800f320:	20009abc 	.word	0x20009abc

0800f324 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	70fb      	strb	r3, [r7, #3]
        {
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	3308      	adds	r3, #8
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff ffda 	bl	800f2f0 <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	601a      	str	r2, [r3, #0]
            this->color = color;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	78fa      	ldrb	r2, [r7, #3]
 800f34c:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	7e3a      	ldrb	r2, [r7, #24]
 800f352:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f35a:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f362:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8bba      	ldrh	r2, [r7, #28]
 800f368:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f370:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f378:	741a      	strb	r2, [r3, #16]
        }
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <_ZNK8touchgfx5Texts7getTextEt>:
     *
     * @param id The id of the text to lookup.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	460b      	mov	r3, r1
 800f38e:	807b      	strh	r3, [r7, #2]
    {
        return currentLanguagePtr[id];
 800f390:	4b05      	ldr	r3, [pc, #20]	; (800f3a8 <_ZNK8touchgfx5Texts7getTextEt+0x24>)
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	887b      	ldrh	r3, [r7, #2]
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	681b      	ldr	r3, [r3, #0]
    }
 800f39c:	4618      	mov	r0, r3
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr
 800f3a8:	20009aa0 	.word	0x20009aa0

0800f3ac <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	807b      	strh	r3, [r7, #2]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	887a      	ldrh	r2, [r7, #2]
 800f3bc:	801a      	strh	r2, [r3, #0]
    {
    }
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	881b      	ldrh	r3, [r3, #0]
 800f3d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	bf14      	ite	ne
 800f3e0:	2301      	movne	r3, #1
 800f3e2:	2300      	moveq	r3, #0
 800f3e4:	b2db      	uxtb	r3, r3
    }
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
	...

0800f3f4 <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 f85b 	bl	800f4b8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800f402:	4b06      	ldr	r3, [pc, #24]	; (800f41c <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	4619      	mov	r1, r3
 800f40c:	4610      	mov	r0, r2
 800f40e:	f7ff ffb9 	bl	800f384 <_ZNK8touchgfx5Texts7getTextEt>
 800f412:	4603      	mov	r3, r0
    }
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	20009b28 	.word	0x20009b28

0800f420 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 f845 	bl	800f4b8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f42e:	4b08      	ldr	r3, [pc, #32]	; (800f450 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	4b08      	ldr	r3, [pc, #32]	; (800f454 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f434:	6819      	ldr	r1, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	440b      	add	r3, r1
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4413      	add	r3, r2
 800f444:	681b      	ldr	r3, [r3, #0]
    }
 800f446:	4618      	mov	r0, r3
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	20009b24 	.word	0x20009b24
 800f454:	20009b1c 	.word	0x20009b1c

0800f458 <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 f829 	bl	800f4b8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 800f466:	4b07      	ldr	r3, [pc, #28]	; (800f484 <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	4413      	add	r3, r2
 800f472:	785b      	ldrb	r3, [r3, #1]
 800f474:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f478:	b2db      	uxtb	r3, r3
    }
 800f47a:	4618      	mov	r0, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	20009b1c 	.word	0x20009b1c

0800f488 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f811 	bl	800f4b8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f496:	4b07      	ldr	r3, [pc, #28]	; (800f4b4 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	881b      	ldrh	r3, [r3, #0]
 800f49e:	005b      	lsls	r3, r3, #1
 800f4a0:	4413      	add	r3, r2
 800f4a2:	785b      	ldrb	r3, [r3, #1]
 800f4a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f4a8:	b2db      	uxtb	r3, r3
    }
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20009b1c 	.word	0x20009b1c

0800f4b8 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f4c0:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d105      	bne.n	800f4d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f4c8:	4b0b      	ldr	r3, [pc, #44]	; (800f4f8 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f4ca:	4a0c      	ldr	r2, [pc, #48]	; (800f4fc <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f4cc:	21cf      	movs	r1, #207	; 0xcf
 800f4ce:	480c      	ldr	r0, [pc, #48]	; (800f500 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f4d0:	f00e ff72 	bl	801e3b8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	881a      	ldrh	r2, [r3, #0]
 800f4d8:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d305      	bcc.n	800f4ec <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f4e0:	4b09      	ldr	r3, [pc, #36]	; (800f508 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f4e2:	4a06      	ldr	r2, [pc, #24]	; (800f4fc <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f4e4:	21d0      	movs	r1, #208	; 0xd0
 800f4e6:	4806      	ldr	r0, [pc, #24]	; (800f500 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f4e8:	f00e ff66 	bl	801e3b8 <__assert_func>
    }
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20009b1c 	.word	0x20009b1c
 800f4f8:	0801f690 	.word	0x0801f690
 800f4fc:	0801fcdc 	.word	0x0801fcdc
 800f500:	0801f6d4 	.word	0x0801f6d4
 800f504:	20009b20 	.word	0x20009b20
 800f508:	0801f724 	.word	0x0801f724

0800f50c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800f51a:	4618      	mov	r0, r3
 800f51c:	370c      	adds	r7, #12
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 800f526:	b480      	push	{r7}
 800f528:	b083      	sub	sp, #12
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 800f52e:	2302      	movs	r3, #2
    }
 800f530:	4618      	mov	r0, r3
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f54c:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800f54e:	6838      	ldr	r0, [r7, #0]
 800f550:	f7ff fd9e 	bl	800f090 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	bf0c      	ite	eq
 800f55a:	2301      	moveq	r3, #1
 800f55c:	2300      	movne	r3, #0
 800f55e:	b2da      	uxtb	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d005      	beq.n	800f57c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 800f570:	7bfb      	ldrb	r3, [r7, #15]
 800f572:	f083 0301 	eor.w	r3, r3, #1
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10a      	bne.n	800f592 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f582:	f083 0301 	eor.w	r3, r3, #1
 800f586:	b2db      	uxtb	r3, r3
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d009      	beq.n	800f5a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 800f58c:	7bfb      	ldrb	r3, [r7, #15]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d006      	beq.n	800f5a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3314      	adds	r3, #20
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4610      	mov	r0, r2
 800f59e:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00b      	beq.n	800f5be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f5a6:	6838      	ldr	r0, [r7, #0]
 800f5a8:	f7ff fd72 	bl	800f090 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d105      	bne.n	800f5be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e000      	b.n	800f5c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d015      	beq.n	800f5f0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	330c      	adds	r3, #12
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	4798      	blx	r3
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d009      	beq.n	800f5f0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
        }
    }
}
 800f5f0:	bf00      	nop
 800f5f2:	3710      	adds	r7, #16
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 800f600:	2305      	movs	r3, #5
    }
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/widgets/Button.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 800f60e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f610:	b08d      	sub	sp, #52	; 0x34
 800f612:	af04      	add	r7, sp, #16
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d002      	beq.n	800f628 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3330      	adds	r3, #48	; 0x30
 800f626:	e001      	b.n	800f62c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	332e      	adds	r3, #46	; 0x2e
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 800f630:	f107 031c 	add.w	r3, r7, #28
 800f634:	4618      	mov	r0, r3
 800f636:	f00c fdd3 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f63a:	4603      	mov	r3, r0
 800f63c:	b21c      	sxth	r4, r3
 800f63e:	f107 031c 	add.w	r3, r7, #28
 800f642:	4618      	mov	r0, r3
 800f644:	f00c fe04 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f648:	4603      	mov	r3, r0
 800f64a:	b21b      	sxth	r3, r3
 800f64c:	f107 0014 	add.w	r0, r7, #20
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	4623      	mov	r3, r4
 800f654:	2200      	movs	r2, #0
 800f656:	2100      	movs	r1, #0
 800f658:	f7fe fd78 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	4618      	mov	r0, r3
 800f664:	f7fe fe32 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800f668:	f107 031c 	add.w	r3, r7, #28
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7ff fde7 	bl	800f240 <_ZNK8touchgfx6Bitmap5getIdEv>
 800f672:	4603      	mov	r3, r0
 800f674:	461a      	mov	r2, r3
 800f676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d00c      	beq.n	800f698 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800f67e:	f107 0314 	add.w	r3, r7, #20
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe ff2a 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800f688:	4603      	mov	r3, r0
 800f68a:	f083 0301 	eor.w	r3, r3, #1
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800f694:	2301      	movs	r3, #1
 800f696:	e000      	b.n	800f69a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 800f698:	2300      	movs	r3, #0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d024      	beq.n	800f6e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 800f69e:	f107 030c 	add.w	r3, r7, #12
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff fb7c 	bl	800eda0 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3324      	adds	r3, #36	; 0x24
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f107 010c 	add.w	r1, r7, #12
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 800f6ba:	f7ff fe27 	bl	800f30c <_ZN8touchgfx3HAL3lcdEv>
 800f6be:	6803      	ldr	r3, [r0, #0]
 800f6c0:	330c      	adds	r3, #12
 800f6c2:	681c      	ldr	r4, [r3, #0]
 800f6c4:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 800f6c8:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f6d2:	f107 011c 	add.w	r1, r7, #28
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	9202      	str	r2, [sp, #8]
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	f107 0314 	add.w	r3, r7, #20
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	4633      	mov	r3, r6
 800f6e4:	462a      	mov	r2, r5
 800f6e6:	47a0      	blx	r4
    }
}
 800f6e8:	bf00      	nop
 800f6ea:	3724      	adds	r7, #36	; 0x24
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 800f6f0:	b590      	push	{r4, r7, lr}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	8812      	ldrh	r2, [r2, #0]
 800f702:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	8812      	ldrh	r2, [r2, #0]
 800f70a:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 800f70c:	68fc      	ldr	r4, [r7, #12]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	3330      	adds	r3, #48	; 0x30
 800f712:	4618      	mov	r0, r3
 800f714:	f00c fd64 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f718:	4603      	mov	r3, r0
 800f71a:	b21b      	sxth	r3, r3
 800f71c:	4619      	mov	r1, r3
 800f71e:	4620      	mov	r0, r4
 800f720:	f7fe ffa3 	bl	800e66a <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 800f724:	68fc      	ldr	r4, [r7, #12]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	3330      	adds	r3, #48	; 0x30
 800f72a:	4618      	mov	r0, r3
 800f72c:	f00c fd90 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f730:	4603      	mov	r3, r0
 800f732:	b21b      	sxth	r3, r3
 800f734:	4619      	mov	r1, r3
 800f736:	4620      	mov	r0, r4
 800f738:	f7fe ffa6 	bl	800e688 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800f73c:	bf00      	nop
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	bd90      	pop	{r4, r7, pc}

0800f744 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af02      	add	r7, sp, #8
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f754:	2bff      	cmp	r3, #255	; 0xff
 800f756:	d008      	beq.n	800f76a <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800f758:	2300      	movs	r3, #0
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	2300      	movs	r3, #0
 800f75e:	2200      	movs	r2, #0
 800f760:	2100      	movs	r1, #0
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7fe fcf2 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800f768:	e015      	b.n	800f796 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d008      	beq.n	800f786 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4611      	mov	r1, r2
 800f77e:	4618      	mov	r0, r3
 800f780:	f00c fd9e 	bl	801c2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f784:	e007      	b.n	800f796 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4611      	mov	r1, r2
 800f790:	4618      	mov	r0, r3
 800f792:	f00c fd95 	bl	801c2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
        const Font* f = typedText.getFont();
        const Unicode::UnicodeChar* s = typedText.getText();
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
    }

    virtual Rect getSolidRect() const
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	6039      	str	r1, [r7, #0]
    {
        return Button::getSolidRect();
 800f7a8:	683a      	ldr	r2, [r7, #0]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7ff ffc8 	bl	800f744 <_ZNK8touchgfx6Button12getSolidRectEv>
    };
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <_ZNK8touchgfx15ButtonWithLabel7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHLABEL.
     */
    virtual uint16_t getType() const
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHLABEL;
 800f7c4:	2307      	movs	r3, #7
    }
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
	...

0800f7d4 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/FontManager.hpp>

namespace touchgfx
{
ButtonWithLabel::ButtonWithLabel()
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
    : Button(), color(0), colorPressed(0), rotation(TEXT_ROTATE_0), textHeightIncludingSpacing(0)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff fce8 	bl	800f1b4 <_ZN8touchgfx6ButtonC1Ev>
 800f7e4:	4a11      	ldr	r2, [pc, #68]	; (800f82c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	601a      	str	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3334      	adds	r3, #52	; 0x34
 800f7ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7ff fdda 	bl	800f3ac <_ZN8touchgfx9TypedTextC1Et>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3338      	adds	r3, #56	; 0x38
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7ff fabf 	bl	800ed82 <_ZN8touchgfx9colortypeC1Em>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	333c      	adds	r3, #60	; 0x3c
 800f808:	2100      	movs	r1, #0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff fab9 	bl	800ed82 <_ZN8touchgfx9colortypeC1Em>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
{
}
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4618      	mov	r0, r3
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	0801fdf8 	.word	0x0801fdf8

0800f830 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:

void ButtonWithLabel::draw(const Rect& area) const
{
 800f830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f832:	b09b      	sub	sp, #108	; 0x6c
 800f834:	af06      	add	r7, sp, #24
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
    Button::draw(area);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	68b9      	ldr	r1, [r7, #8]
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff fee5 	bl	800f60e <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    const Font* fontToDraw = typedText.getFont();
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	3334      	adds	r3, #52	; 0x34
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fde9 	bl	800f420 <_ZNK8touchgfx9TypedText7getFontEv>
 800f84e:	64f8      	str	r0, [r7, #76]	; 0x4c
    if ((fontToDraw != 0) && typedText.hasValidId())
 800f850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f852:	2b00      	cmp	r3, #0
 800f854:	d009      	beq.n	800f86a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	3334      	adds	r3, #52	; 0x34
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff fdb6 	bl	800f3cc <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d001      	beq.n	800f86a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 800f866:	2301      	movs	r3, #1
 800f868:	e000      	b.n	800f86c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800f86a:	2300      	movs	r3, #0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 80db 	beq.w	800fa28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1f8>
    {
        uint8_t height = textHeightIncludingSpacing;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f878:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        int16_t offset;
        Rect labelRect;
 800f87c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f880:	4618      	mov	r0, r3
 800f882:	f7ff fa8d 	bl	800eda0 <_ZN8touchgfx4RectC1Ev>
        switch (rotation)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d02b      	beq.n	800f8e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 800f890:	2b03      	cmp	r3, #3
 800f892:	d029      	beq.n	800f8e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
        {
        default:
        case TEXT_ROTATE_0:
        case TEXT_ROTATE_180:
            offset = (this->getHeight() - height) / 2;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff fa66 	bl	800ed68 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f89c:	4603      	mov	r3, r0
 800f89e:	461a      	mov	r2, r3
 800f8a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	da00      	bge.n	800f8ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x7c>
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	105b      	asrs	r3, r3, #1
 800f8ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(0, offset, this->getWidth(), height);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff fa4a 	bl	800ed4e <_ZNK8touchgfx8Drawable8getWidthEv>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	4619      	mov	r1, r3
 800f8be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f8c2:	b21b      	sxth	r3, r3
 800f8c4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800f8c8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	f7fe fc3b 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800f8d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f8da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f8de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8e2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f8e6:	e028      	b.n	800f93a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x10a>
        case TEXT_ROTATE_90:
        case TEXT_ROTATE_270:
            offset = (this->getWidth() - height) / 2;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff fa2f 	bl	800ed4e <_ZNK8touchgfx8Drawable8getWidthEv>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	da00      	bge.n	800f900 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xd0>
 800f8fe:	3301      	adds	r3, #1
 800f900:	105b      	asrs	r3, r3, #1
 800f902:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(offset, 0, height, this->getHeight());
 800f906:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f90a:	b21c      	sxth	r4, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff fa2a 	bl	800ed68 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f914:	4603      	mov	r3, r0
 800f916:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 800f91a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	4623      	mov	r3, r4
 800f922:	2200      	movs	r2, #0
 800f924:	f7fe fc12 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800f928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f92c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f930:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f934:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f938:	bf00      	nop
        }
        Rect dirty = labelRect & area;
 800f93a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f93e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe fcac 	bl	800e2a2 <_ZNK8touchgfx4RectanERKS0_>

        if (!dirty.isEmpty())
 800f94a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fdc4 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800f954:	4603      	mov	r3, r0
 800f956:	f083 0301 	eor.w	r3, r3, #1
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d063      	beq.n	800fa28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1f8>
        {
            dirty.x -= labelRect.x;
 800f960:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f964:	b29a      	uxth	r2, r3
 800f966:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	b29b      	uxth	r3, r3
 800f970:	b21b      	sxth	r3, r3
 800f972:	853b      	strh	r3, [r7, #40]	; 0x28
            dirty.y -= labelRect.y;
 800f974:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800f978:	b29a      	uxth	r2, r3
 800f97a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f97e:	b29b      	uxth	r3, r3
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	b29b      	uxth	r3, r3
 800f984:	b21b      	sxth	r3, r3
 800f986:	857b      	strh	r3, [r7, #42]	; 0x2a
            translateRectToAbsolute(labelRect);
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3324      	adds	r3, #36	; 0x24
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f996:	4610      	mov	r0, r2
 800f998:	4798      	blx	r3
            LCD::StringVisuals visuals(fontToDraw, pressed ? colorPressed : color, alpha, typedText.getAlignment(), 0, rotation, typedText.getTextDirection(), 0, WIDE_TEXT_NONE);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d003      	beq.n	800f9ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800f9aa:	e002      	b.n	800f9b2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x182>
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f893 6032 	ldrb.w	r6, [r3, #50]	; 0x32
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	3334      	adds	r3, #52	; 0x34
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff fd4b 	bl	800f458 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	607b      	str	r3, [r7, #4]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	3334      	adds	r3, #52	; 0x34
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff fd59 	bl	800f488 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f107 0014 	add.w	r0, r7, #20
 800f9de:	2300      	movs	r3, #0
 800f9e0:	9305      	str	r3, [sp, #20]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	9203      	str	r2, [sp, #12]
 800f9e8:	9502      	str	r5, [sp, #8]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9301      	str	r3, [sp, #4]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	4633      	mov	r3, r6
 800f9f4:	6822      	ldr	r2, [r4, #0]
 800f9f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f9f8:	f7ff fc94 	bl	800f324 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(labelRect, dirty, visuals, typedText.getText());
 800f9fc:	f7ff fc86 	bl	800f30c <_ZN8touchgfx3HAL3lcdEv>
 800fa00:	4604      	mov	r4, r0
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	3334      	adds	r3, #52	; 0x34
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7ff fcf4 	bl	800f3f4 <_ZNK8touchgfx9TypedText7getTextEv>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fa12:	9301      	str	r3, [sp, #4]
 800fa14:	f107 0314 	add.w	r3, r7, #20
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fa20:	ca06      	ldmia	r2, {r1, r2}
 800fa22:	4620      	mov	r0, r4
 800fa24:	f00a fc58 	bl	801a2d8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 800fa28:	bf00      	nop
 800fa2a:	3754      	adds	r7, #84	; 0x54
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa30 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	4a05      	ldr	r2, [pc, #20]	; (800fa50 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7ff fbdb 	bl	800f1fc <_ZN8touchgfx6ButtonD1Ev>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	0801fdf8 	.word	0x0801fdf8

0800fa54 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff ffe7 	bl	800fa30 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800fa62:	2144      	movs	r1, #68	; 0x44
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f00e fc8a 	bl	801e37e <_ZdlPvj>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 800fa74:	b590      	push	{r4, r7, lr}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af02      	add	r7, sp, #8
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800fa7e:	6838      	ldr	r0, [r7, #0]
 800fa80:	f00c fbae 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fa84:	4603      	mov	r3, r0
 800fa86:	b21c      	sxth	r4, r3
 800fa88:	6838      	ldr	r0, [r7, #0]
 800fa8a:	f00c fbe1 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	b21b      	sxth	r3, r3
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	4623      	mov	r3, r4
 800fa96:	2200      	movs	r2, #0
 800fa98:	2100      	movs	r1, #0
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7fe fb56 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
    }
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd90      	pop	{r4, r7, pc}

0800faa8 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 800fab0:	2308      	movs	r3, #8
    }
 800fab2:	4618      	mov	r0, r3
 800fab4:	370c      	adds	r7, #12
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/Image.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 800fabe:	b5b0      	push	{r4, r5, r7, lr}
 800fac0:	b082      	sub	sp, #8
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
 800fac6:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	8812      	ldrh	r2, [r2, #0]
 800face:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 800fad0:	687d      	ldr	r5, [r7, #4]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3338      	adds	r3, #56	; 0x38
 800fad8:	681c      	ldr	r4, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	3326      	adds	r3, #38	; 0x26
 800fade:	4618      	mov	r0, r3
 800fae0:	f00c fb7e 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fae4:	4603      	mov	r3, r0
 800fae6:	b21b      	sxth	r3, r3
 800fae8:	4619      	mov	r1, r3
 800faea:	4628      	mov	r0, r5
 800faec:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 800faee:	687d      	ldr	r5, [r7, #4]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	333c      	adds	r3, #60	; 0x3c
 800faf6:	681c      	ldr	r4, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3326      	adds	r3, #38	; 0x26
 800fafc:	4618      	mov	r0, r3
 800fafe:	f00c fba7 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fb02:	4603      	mov	r3, r0
 800fb04:	b21b      	sxth	r3, r3
 800fb06:	4619      	mov	r1, r3
 800fb08:	4628      	mov	r0, r5
 800fb0a:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3326      	adds	r3, #38	; 0x26
 800fb10:	4618      	mov	r0, r3
 800fb12:	f00c fc2d 	bl	801c370 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800fb16:	4603      	mov	r3, r0
 800fb18:	461a      	mov	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 800fb20:	bf00      	nop
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bdb0      	pop	{r4, r5, r7, pc}

0800fb28 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 800fb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb2a:	b08d      	sub	sp, #52	; 0x34
 800fb2c:	af04      	add	r7, sp, #16
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 800fb32:	f107 0310 	add.w	r3, r7, #16
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7ff f932 	bl	800eda0 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3324      	adds	r3, #36	; 0x24
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f107 0110 	add.w	r1, r7, #16
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fb54:	f107 0318 	add.w	r3, r7, #24
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7ff ff8a 	bl	800fa74 <_ZNK8touchgfx6Bitmap7getRectEv>
 800fb60:	f107 0308 	add.w	r3, r7, #8
 800fb64:	f107 0118 	add.w	r1, r7, #24
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fe fb99 	bl	800e2a2 <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 800fb70:	f107 0308 	add.w	r3, r7, #8
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe fcb1 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	f083 0301 	eor.w	r3, r3, #1
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d017      	beq.n	800fbb6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 800fb86:	f7ff fbc1 	bl	800f30c <_ZN8touchgfx3HAL3lcdEv>
 800fb8a:	6803      	ldr	r3, [r0, #0]
 800fb8c:	330c      	adds	r3, #12
 800fb8e:	681c      	ldr	r4, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800fb96:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800fb9a:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fba4:	2201      	movs	r2, #1
 800fba6:	9202      	str	r2, [sp, #8]
 800fba8:	9301      	str	r3, [sp, #4]
 800fbaa:	f107 0308 	add.w	r3, r7, #8
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	4633      	mov	r3, r6
 800fbb2:	462a      	mov	r2, r5
 800fbb4:	47a0      	blx	r4
    }
}
 800fbb6:	bf00      	nop
 800fbb8:	3724      	adds	r7, #36	; 0x24
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbbe <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b084      	sub	sp, #16
 800fbc2:	af02      	add	r7, sp, #8
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbce:	2bff      	cmp	r3, #255	; 0xff
 800fbd0:	d008      	beq.n	800fbe4 <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2100      	movs	r1, #0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7fe fab5 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800fbe2:	e007      	b.n	800fbf4 <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4611      	mov	r1, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f00c fb66 	bl	801c2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <_ZNK8touchgfx10TiledImage7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TILEDIMAGE;
 800fc04:	2309      	movs	r3, #9
    }
 800fc06:	4618      	mov	r0, r3
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/TiledImage.hpp>

namespace touchgfx
{
void TiledImage::setBitmap(const Bitmap& bmp)
{
 800fc12:	b580      	push	{r7, lr}
 800fc14:	b082      	sub	sp, #8
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
 800fc1a:	6039      	str	r1, [r7, #0]
    Image::setBitmap(bmp);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7ff ff4c 	bl	800fabe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    // Make sure the xOffset and yOffset are correct
    setOffset(xOffset, yOffset);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3368      	adds	r3, #104	; 0x68
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	f9b2 102a 	ldrsh.w	r1, [r2, #42]	; 0x2a
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	f9b2 202c 	ldrsh.w	r2, [r2, #44]	; 0x2c
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	4798      	blx	r3
}
 800fc3e:	bf00      	nop
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <_ZN8touchgfx10TiledImage9setOffsetEss>:

void TiledImage::setOffset(int16_t x, int16_t y)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b082      	sub	sp, #8
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	807b      	strh	r3, [r7, #2]
 800fc52:	4613      	mov	r3, r2
 800fc54:	803b      	strh	r3, [r7, #0]
    setXOffset(x);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	336c      	adds	r3, #108	; 0x6c
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fc62:	4611      	mov	r1, r2
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	4798      	blx	r3
    setYOffset(y);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3370      	adds	r3, #112	; 0x70
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fc74:	4611      	mov	r1, r2
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	4798      	blx	r3
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <_ZN8touchgfx10TiledImage10setXOffsetEs>:

void TiledImage::setXOffset(int16_t x)
{
 800fc82:	b590      	push	{r4, r7, lr}
 800fc84:	b083      	sub	sp, #12
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	807b      	strh	r3, [r7, #2]
    xOffset = x;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	887a      	ldrh	r2, [r7, #2]
 800fc92:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (bitmap.getWidth() != 0)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	3326      	adds	r3, #38	; 0x26
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f00c faa1 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	bf14      	ite	ne
 800fca4:	2301      	movne	r3, #1
 800fca6:	2300      	moveq	r3, #0
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d023      	beq.n	800fcf6 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x74>
    {
        xOffset = ((xOffset % bitmap.getWidth()) + bitmap.getWidth()) % bitmap.getWidth();
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800fcb4:	461c      	mov	r4, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	3326      	adds	r3, #38	; 0x26
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f00c fa90 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	fb94 f2f3 	sdiv	r2, r4, r3
 800fcc6:	fb03 f302 	mul.w	r3, r3, r2
 800fcca:	1ae4      	subs	r4, r4, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3326      	adds	r3, #38	; 0x26
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f00c fa85 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	441c      	add	r4, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	3326      	adds	r3, #38	; 0x26
 800fcde:	4618      	mov	r0, r3
 800fce0:	f00c fa7e 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fce4:	4603      	mov	r3, r0
 800fce6:	fb94 f2f3 	sdiv	r2, r4, r3
 800fcea:	fb03 f302 	mul.w	r3, r3, r2
 800fcee:	1ae3      	subs	r3, r4, r3
 800fcf0:	b21a      	sxth	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
}
 800fcf6:	bf00      	nop
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd90      	pop	{r4, r7, pc}

0800fcfe <_ZN8touchgfx10TiledImage10setYOffsetEs>:

void TiledImage::setYOffset(int16_t y)
{
 800fcfe:	b590      	push	{r4, r7, lr}
 800fd00:	b083      	sub	sp, #12
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	460b      	mov	r3, r1
 800fd08:	807b      	strh	r3, [r7, #2]
    yOffset = y;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	887a      	ldrh	r2, [r7, #2]
 800fd0e:	859a      	strh	r2, [r3, #44]	; 0x2c
    if (bitmap.getHeight() != 0)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3326      	adds	r3, #38	; 0x26
 800fd14:	4618      	mov	r0, r3
 800fd16:	f00c fa9b 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bf14      	ite	ne
 800fd20:	2301      	movne	r3, #1
 800fd22:	2300      	moveq	r3, #0
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d023      	beq.n	800fd72 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x74>
    {
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800fd30:	461c      	mov	r4, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3326      	adds	r3, #38	; 0x26
 800fd36:	4618      	mov	r0, r3
 800fd38:	f00c fa8a 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	fb94 f2f3 	sdiv	r2, r4, r3
 800fd42:	fb03 f302 	mul.w	r3, r3, r2
 800fd46:	1ae4      	subs	r4, r4, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3326      	adds	r3, #38	; 0x26
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f00c fa7f 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd52:	4603      	mov	r3, r0
 800fd54:	441c      	add	r4, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	3326      	adds	r3, #38	; 0x26
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f00c fa78 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd60:	4603      	mov	r3, r0
 800fd62:	fb94 f2f3 	sdiv	r2, r4, r3
 800fd66:	fb03 f302 	mul.w	r3, r3, r2
 800fd6a:	1ae3      	subs	r3, r4, r3
 800fd6c:	b21a      	sxth	r2, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
}
 800fd72:	bf00      	nop
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd90      	pop	{r4, r7, pc}

0800fd7a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:

void TiledImage::getOffset(int16_t& x, int16_t& y)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	60f8      	str	r0, [r7, #12]
 800fd82:	60b9      	str	r1, [r7, #8]
 800fd84:	607a      	str	r2, [r7, #4]
    x = getXOffset();
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	3378      	adds	r3, #120	; 0x78
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	4798      	blx	r3
 800fd92:	4603      	mov	r3, r0
 800fd94:	461a      	mov	r2, r3
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	801a      	strh	r2, [r3, #0]
    y = getYOffset();
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	337c      	adds	r3, #124	; 0x7c
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	4798      	blx	r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	461a      	mov	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	801a      	strh	r2, [r3, #0]
}
 800fdae:	bf00      	nop
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <_ZN8touchgfx10TiledImage10getXOffsetEv>:

int16_t TiledImage::getXOffset()
{
 800fdb6:	b480      	push	{r7}
 800fdb8:	b083      	sub	sp, #12
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
    return xOffset;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <_ZN8touchgfx10TiledImage10getYOffsetEv>:

int16_t TiledImage::getYOffset()
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    return yOffset;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:

void TiledImage::draw(const Rect& invalidatedArea) const
{
 800fdea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdec:	b091      	sub	sp, #68	; 0x44
 800fdee:	af04      	add	r7, sp, #16
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	6039      	str	r1, [r7, #0]
    uint16_t bitmapWidth = bitmap.getWidth();
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3326      	adds	r3, #38	; 0x26
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f00c f9f1 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t bitmapHeight = bitmap.getHeight();
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3326      	adds	r3, #38	; 0x26
 800fe06:	4618      	mov	r0, r3
 800fe08:	f00c fa22 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	853b      	strh	r3, [r7, #40]	; 0x28

    if (bitmapWidth == 0 || bitmapHeight == 0)
 800fe10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	f000 80ca 	beq.w	800ffac <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c2>
 800fe18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f000 80c6 	beq.w	800ffac <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c2>
    {
        return;
    }

    Rect meAbs;
 800fe20:	f107 0310 	add.w	r3, r7, #16
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fe ffbb 	bl	800eda0 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs);
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	3324      	adds	r3, #36	; 0x24
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f107 0110 	add.w	r1, r7, #16
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4798      	blx	r3

    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe42:	461a      	mov	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800fe4a:	441a      	add	r2, r3
 800fe4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe4e:	fb92 f3f3 	sdiv	r3, r2, r3
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800fe56:	fb12 f303 	smulbb	r3, r2, r3
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	84fb      	strh	r3, [r7, #38]	; 0x26
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 800fe6a:	6838      	ldr	r0, [r7, #0]
 800fe6c:	f7fe f98e 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 800fe70:	4603      	mov	r3, r0
 800fe72:	461a      	mov	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800fe7a:	4413      	add	r3, r2
 800fe7c:	1e5a      	subs	r2, r3, #1
 800fe7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe80:	fb92 f3f3 	sdiv	r3, r2, r3
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800fe88:	fb12 f303 	smulbb	r3, r2, r3
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	84bb      	strh	r3, [r7, #36]	; 0x24
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fe96:	461a      	mov	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800fe9e:	441a      	add	r2, r3
 800fea0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fea2:	fb92 f3f3 	sdiv	r3, r2, r3
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800feaa:	fb12 f303 	smulbb	r3, r2, r3
 800feae:	b29a      	uxth	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	b29b      	uxth	r3, r3
 800febc:	847b      	strh	r3, [r7, #34]	; 0x22
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 800febe:	6838      	ldr	r0, [r7, #0]
 800fec0:	f7fe f979 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 800fec4:	4603      	mov	r3, r0
 800fec6:	461a      	mov	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800fece:	4413      	add	r3, r2
 800fed0:	1e5a      	subs	r2, r3, #1
 800fed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fed4:	fb92 f3f3 	sdiv	r3, r2, r3
 800fed8:	b29b      	uxth	r3, r3
 800feda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fedc:	fb12 f303 	smulbb	r3, r2, r3
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	843b      	strh	r3, [r7, #32]
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 800fee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fee6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fee8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800feec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fef0:	429a      	cmp	r2, r3
 800fef2:	dc5c      	bgt.n	800ffae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c4>
    {
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 800fef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fef6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fef8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fefc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	dc4d      	bgt.n	800ffa0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b6>
        {
            Rect dirty = Rect(x, y, bitmapWidth, bitmapHeight) & invalidatedArea;
 800ff04:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 800ff08:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ff0c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800ff10:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800ff14:	f107 0018 	add.w	r0, r7, #24
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	4623      	mov	r3, r4
 800ff1c:	f7fe f916 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800ff20:	f107 0308 	add.w	r3, r7, #8
 800ff24:	f107 0118 	add.w	r1, r7, #24
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fe f9b9 	bl	800e2a2 <_ZNK8touchgfx4RectanERKS0_>
            dirty.x -= x;
 800ff30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	b21b      	sxth	r3, r3
 800ff3e:	813b      	strh	r3, [r7, #8]
            dirty.y -= y;
 800ff40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	b21b      	sxth	r3, r3
 800ff4e:	817b      	strh	r3, [r7, #10]
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
 800ff50:	f7ff f9dc 	bl	800f30c <_ZN8touchgfx3HAL3lcdEv>
 800ff54:	6803      	ldr	r3, [r0, #0]
 800ff56:	330c      	adds	r3, #12
 800ff58:	681c      	ldr	r4, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ff60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff68:	4413      	add	r3, r2
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	b21d      	sxth	r5, r3
 800ff6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff76:	4413      	add	r3, r2
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	b21e      	sxth	r6, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff82:	2201      	movs	r2, #1
 800ff84:	9202      	str	r2, [sp, #8]
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	f107 0308 	add.w	r3, r7, #8
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	4633      	mov	r3, r6
 800ff90:	462a      	mov	r2, r5
 800ff92:	47a0      	blx	r4
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 800ff94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ff96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff98:	4413      	add	r3, r2
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ff9e:	e7ab      	b.n	800fef8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x10e>
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 800ffa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ffa4:	4413      	add	r3, r2
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ffaa:	e79d      	b.n	800fee8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xfe>
        return;
 800ffac:	bf00      	nop
        }
    }
}
 800ffae:	3734      	adds	r7, #52	; 0x34
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffb4 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:

Rect TiledImage::getSolidRect() const
{
 800ffb4:	b590      	push	{r4, r7, lr}
 800ffb6:	b08b      	sub	sp, #44	; 0x2c
 800ffb8:	af02      	add	r7, sp, #8
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffc4:	2bff      	cmp	r3, #255	; 0xff
 800ffc6:	d008      	beq.n	800ffda <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800ffc8:	2300      	movs	r3, #0
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	2300      	movs	r3, #0
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7fe f8ba 	bl	800e14c <_ZN8touchgfx4RectC1Essss>
 800ffd8:	e111      	b.n	80101fe <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x24a>
    }

    Rect solidRect = bitmap.getSolidRect();
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ffe0:	f107 0318 	add.w	r3, r7, #24
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f00c f96a 	bl	801c2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
    if (solidRect.width == bitmap.getWidth())
 800ffec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fff0:	461c      	mov	r4, r3
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	3326      	adds	r3, #38	; 0x26
 800fff6:	4618      	mov	r0, r3
 800fff8:	f00c f8f2 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fffc:	4603      	mov	r3, r0
 800fffe:	429c      	cmp	r4, r3
 8010000:	bf0c      	ite	eq
 8010002:	2301      	moveq	r3, #1
 8010004:	2300      	movne	r3, #0
 8010006:	b2db      	uxtb	r3, r3
 8010008:	2b00      	cmp	r3, #0
 801000a:	d006      	beq.n	801001a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x66>
    {
        solidRect.width = getWidth();
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	4618      	mov	r0, r3
 8010010:	f7fe fe9d 	bl	800ed4e <_ZNK8touchgfx8Drawable8getWidthEv>
 8010014:	4603      	mov	r3, r0
 8010016:	83bb      	strh	r3, [r7, #28]
 8010018:	e069      	b.n	80100ee <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x13a>
    }
    else
    {
        solidRect.x -= xOffset;
 801001a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801001e:	b29a      	uxth	r2, r3
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010026:	b29b      	uxth	r3, r3
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	b29b      	uxth	r3, r3
 801002c:	b21b      	sxth	r3, r3
 801002e:	833b      	strh	r3, [r7, #24]
        Rect solidRect2 = solidRect;
 8010030:	f107 0310 	add.w	r3, r7, #16
 8010034:	f107 0218 	add.w	r2, r7, #24
 8010038:	e892 0003 	ldmia.w	r2, {r0, r1}
 801003c:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.x += bitmap.getWidth();
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	3326      	adds	r3, #38	; 0x26
 8010044:	4618      	mov	r0, r3
 8010046:	f00c f8cb 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801004a:	4603      	mov	r3, r0
 801004c:	461a      	mov	r2, r3
 801004e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010052:	b29b      	uxth	r3, r3
 8010054:	4413      	add	r3, r2
 8010056:	b29b      	uxth	r3, r3
 8010058:	b21b      	sxth	r3, r3
 801005a:	823b      	strh	r3, [r7, #16]
        if (solidRect.x < 0)
 801005c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010060:	2b00      	cmp	r3, #0
 8010062:	da12      	bge.n	801008a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xd6>
        {
            solidRect.width = MAX(solidRect.right(), 0);
 8010064:	f107 0318 	add.w	r3, r7, #24
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe f88f 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	dd06      	ble.n	8010082 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xce>
 8010074:	f107 0318 	add.w	r3, r7, #24
 8010078:	4618      	mov	r0, r3
 801007a:	f7fe f887 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 801007e:	4603      	mov	r3, r0
 8010080:	e000      	b.n	8010084 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xd0>
 8010082:	2300      	movs	r3, #0
 8010084:	83bb      	strh	r3, [r7, #28]
            solidRect.x = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	833b      	strh	r3, [r7, #24]
        }
        if (solidRect2.right() > getWidth())
 801008a:	f107 0310 	add.w	r3, r7, #16
 801008e:	4618      	mov	r0, r3
 8010090:	f7fe f87c 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 8010094:	4603      	mov	r3, r0
 8010096:	461c      	mov	r4, r3
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	4618      	mov	r0, r3
 801009c:	f7fe fe57 	bl	800ed4e <_ZNK8touchgfx8Drawable8getWidthEv>
 80100a0:	4603      	mov	r3, r0
 80100a2:	429c      	cmp	r4, r3
 80100a4:	bfcc      	ite	gt
 80100a6:	2301      	movgt	r3, #1
 80100a8:	2300      	movle	r3, #0
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d010      	beq.n	80100d2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x11e>
        {
            solidRect2.width = solidRect2.right() - getWidth();
 80100b0:	f107 0310 	add.w	r3, r7, #16
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fe f869 	bl	800e18c <_ZNK8touchgfx4Rect5rightEv>
 80100ba:	4603      	mov	r3, r0
 80100bc:	b29c      	uxth	r4, r3
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fe fe44 	bl	800ed4e <_ZNK8touchgfx8Drawable8getWidthEv>
 80100c6:	4603      	mov	r3, r0
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	1ae3      	subs	r3, r4, r3
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	b21b      	sxth	r3, r3
 80100d0:	82bb      	strh	r3, [r7, #20]
        }
        if (solidRect2.width > solidRect.width)
 80100d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80100d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80100da:	429a      	cmp	r2, r3
 80100dc:	dd07      	ble.n	80100ee <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x13a>
        {
            solidRect = solidRect2;
 80100de:	f107 0318 	add.w	r3, r7, #24
 80100e2:	f107 0210 	add.w	r2, r7, #16
 80100e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100ea:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
    if (solidRect.height == bitmap.getHeight())
 80100ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80100f2:	461c      	mov	r4, r3
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	3326      	adds	r3, #38	; 0x26
 80100f8:	4618      	mov	r0, r3
 80100fa:	f00c f8a9 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80100fe:	4603      	mov	r3, r0
 8010100:	429c      	cmp	r4, r3
 8010102:	bf0c      	ite	eq
 8010104:	2301      	moveq	r3, #1
 8010106:	2300      	movne	r3, #0
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	d006      	beq.n	801011c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x168>
    {
        solidRect.height = getHeight();
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	4618      	mov	r0, r3
 8010112:	f7fe fe29 	bl	800ed68 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010116:	4603      	mov	r3, r0
 8010118:	83fb      	strh	r3, [r7, #30]
 801011a:	e069      	b.n	80101f0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x23c>
    }
    else
    {
        solidRect.y -= yOffset;
 801011c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010120:	b29a      	uxth	r2, r3
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010128:	b29b      	uxth	r3, r3
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	b29b      	uxth	r3, r3
 801012e:	b21b      	sxth	r3, r3
 8010130:	837b      	strh	r3, [r7, #26]
        Rect solidRect2 = solidRect;
 8010132:	f107 0308 	add.w	r3, r7, #8
 8010136:	f107 0218 	add.w	r2, r7, #24
 801013a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801013e:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.y += bitmap.getHeight();
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	3326      	adds	r3, #38	; 0x26
 8010146:	4618      	mov	r0, r3
 8010148:	f00c f882 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010154:	b29b      	uxth	r3, r3
 8010156:	4413      	add	r3, r2
 8010158:	b29b      	uxth	r3, r3
 801015a:	b21b      	sxth	r3, r3
 801015c:	817b      	strh	r3, [r7, #10]
        if (solidRect.y < 0)
 801015e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010162:	2b00      	cmp	r3, #0
 8010164:	da12      	bge.n	801018c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1d8>
        {
            solidRect.height = MAX(solidRect.bottom(), 0);
 8010166:	f107 0318 	add.w	r3, r7, #24
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe f823 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	dd06      	ble.n	8010184 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1d0>
 8010176:	f107 0318 	add.w	r3, r7, #24
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe f81b 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 8010180:	4603      	mov	r3, r0
 8010182:	e000      	b.n	8010186 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1d2>
 8010184:	2300      	movs	r3, #0
 8010186:	83fb      	strh	r3, [r7, #30]
            solidRect.y = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	837b      	strh	r3, [r7, #26]
        }
        if (solidRect2.bottom() > getHeight())
 801018c:	f107 0308 	add.w	r3, r7, #8
 8010190:	4618      	mov	r0, r3
 8010192:	f7fe f810 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 8010196:	4603      	mov	r3, r0
 8010198:	461c      	mov	r4, r3
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	4618      	mov	r0, r3
 801019e:	f7fe fde3 	bl	800ed68 <_ZNK8touchgfx8Drawable9getHeightEv>
 80101a2:	4603      	mov	r3, r0
 80101a4:	429c      	cmp	r4, r3
 80101a6:	bfcc      	ite	gt
 80101a8:	2301      	movgt	r3, #1
 80101aa:	2300      	movle	r3, #0
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d010      	beq.n	80101d4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x220>
        {
            solidRect2.height = solidRect2.bottom() - getHeight();
 80101b2:	f107 0308 	add.w	r3, r7, #8
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fd fffd 	bl	800e1b6 <_ZNK8touchgfx4Rect6bottomEv>
 80101bc:	4603      	mov	r3, r0
 80101be:	b29c      	uxth	r4, r3
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe fdd0 	bl	800ed68 <_ZNK8touchgfx8Drawable9getHeightEv>
 80101c8:	4603      	mov	r3, r0
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	1ae3      	subs	r3, r4, r3
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	b21b      	sxth	r3, r3
 80101d2:	81fb      	strh	r3, [r7, #14]
        }
        if (solidRect2.height > solidRect.height)
 80101d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80101d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80101dc:	429a      	cmp	r2, r3
 80101de:	dd07      	ble.n	80101f0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x23c>
        {
            solidRect = solidRect2;
 80101e0:	f107 0318 	add.w	r3, r7, #24
 80101e4:	f107 0208 	add.w	r2, r7, #8
 80101e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101ec:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
    return solidRect;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	461a      	mov	r2, r3
 80101f4:	f107 0318 	add.w	r3, r7, #24
 80101f8:	cb03      	ldmia	r3!, {r0, r1}
 80101fa:	6010      	str	r0, [r2, #0]
 80101fc:	6051      	str	r1, [r2, #4]
}
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	3724      	adds	r7, #36	; 0x24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd90      	pop	{r4, r7, pc}

08010206 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8010206:	b480      	push	{r7}
 8010208:	b083      	sub	sp, #12
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	b29b      	uxth	r3, r3
    }
 8010214:	4618      	mov	r0, r3
 8010216:	370c      	adds	r7, #12
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
        return color;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
    }
 801022c:	4618      	mov	r0, r3
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8010238:	b580      	push	{r7, lr}
 801023a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801023c:	2203      	movs	r2, #3
 801023e:	2100      	movs	r1, #0
 8010240:	2001      	movs	r0, #1
 8010242:	f000 fb9d 	bl	8010980 <xQueueGenericCreate>
 8010246:	4602      	mov	r2, r0
 8010248:	4b0b      	ldr	r3, [pc, #44]	; (8010278 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	4b0a      	ldr	r3, [pc, #40]	; (8010278 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d006      	beq.n	8010262 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8010254:	4b08      	ldr	r3, [pc, #32]	; (8010278 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	2300      	movs	r3, #0
 801025a:	2200      	movs	r2, #0
 801025c:	2100      	movs	r1, #0
 801025e:	f000 fbe9 	bl	8010a34 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8010262:	2200      	movs	r2, #0
 8010264:	2101      	movs	r1, #1
 8010266:	2001      	movs	r0, #1
 8010268:	f000 fb8a 	bl	8010980 <xQueueGenericCreate>
 801026c:	4602      	mov	r2, r0
 801026e:	4b03      	ldr	r3, [pc, #12]	; (801027c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8010270:	601a      	str	r2, [r3, #0]
}
 8010272:	bf00      	nop
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	2000018c 	.word	0x2000018c
 801027c:	20000190 	.word	0x20000190

08010280 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 8010280:	b580      	push	{r7, lr}
 8010282:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8010284:	4b04      	ldr	r3, [pc, #16]	; (8010298 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f04f 31ff 	mov.w	r1, #4294967295
 801028c:	4618      	mov	r0, r3
 801028e:	f000 fee3 	bl	8011058 <xQueueSemaphoreTake>
}
 8010292:	bf00      	nop
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	2000018c 	.word	0x2000018c

0801029c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 801029c:	b580      	push	{r7, lr}
 801029e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80102a0:	4b04      	ldr	r3, [pc, #16]	; (80102b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80102a2:	6818      	ldr	r0, [r3, #0]
 80102a4:	2300      	movs	r3, #0
 80102a6:	2200      	movs	r2, #0
 80102a8:	2100      	movs	r1, #0
 80102aa:	f000 fbc3 	bl	8010a34 <xQueueGenericSend>
}
 80102ae:	bf00      	nop
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	2000018c 	.word	0x2000018c

080102b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80102bc:	4b03      	ldr	r3, [pc, #12]	; (80102cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2100      	movs	r1, #0
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 fec8 	bl	8011058 <xQueueSemaphoreTake>
}
 80102c8:	bf00      	nop
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	2000018c 	.word	0x2000018c

080102d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80102d6:	2300      	movs	r3, #0
 80102d8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80102da:	4b0b      	ldr	r3, [pc, #44]	; (8010308 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	1d3a      	adds	r2, r7, #4
 80102e0:	4611      	mov	r1, r2
 80102e2:	4618      	mov	r0, r3
 80102e4:	f000 fd44 	bl	8010d70 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d007      	beq.n	80102fe <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80102ee:	4b07      	ldr	r3, [pc, #28]	; (801030c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80102f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f3bf 8f4f 	dsb	sy
 80102fa:	f3bf 8f6f 	isb	sy
}
 80102fe:	bf00      	nop
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	2000018c 	.word	0x2000018c
 801030c:	e000ed04 	.word	0xe000ed04

08010310 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
    if (vsync_q)
 8010316:	4b0e      	ldr	r3, [pc, #56]	; (8010350 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d013      	beq.n	8010346 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801031e:	2300      	movs	r3, #0
 8010320:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8010322:	4b0b      	ldr	r3, [pc, #44]	; (8010350 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8010324:	6818      	ldr	r0, [r3, #0]
 8010326:	1d3a      	adds	r2, r7, #4
 8010328:	2300      	movs	r3, #0
 801032a:	490a      	ldr	r1, [pc, #40]	; (8010354 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801032c:	f000 fc84 	bl	8010c38 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d007      	beq.n	8010346 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8010336:	4b08      	ldr	r3, [pc, #32]	; (8010358 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8010338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801033c:	601a      	str	r2, [r3, #0]
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	f3bf 8f6f 	isb	sy
    }
}
 8010346:	bf00      	nop
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	20000190 	.word	0x20000190
 8010354:	2000004c 	.word	0x2000004c
 8010358:	e000ed04 	.word	0xe000ed04

0801035c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 801035c:	b580      	push	{r7, lr}
 801035e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8010360:	4b08      	ldr	r3, [pc, #32]	; (8010384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2200      	movs	r2, #0
 8010366:	4908      	ldr	r1, [pc, #32]	; (8010388 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fd93 	bl	8010e94 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801036e:	4b05      	ldr	r3, [pc, #20]	; (8010384 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f04f 32ff 	mov.w	r2, #4294967295
 8010376:	4904      	ldr	r1, [pc, #16]	; (8010388 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010378:	4618      	mov	r0, r3
 801037a:	f000 fd8b 	bl	8010e94 <xQueueReceive>
}
 801037e:	bf00      	nop
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	20000190 	.word	0x20000190
 8010388:	2000004c 	.word	0x2000004c

0801038c <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d007      	beq.n	80103aa <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 801039a:	f7fe febf 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 801039e:	4603      	mov	r3, r0
 80103a0:	2101      	movs	r1, #1
 80103a2:	4618      	mov	r0, r3
 80103a4:	f009 fdbc 	bl	8019f20 <_ZN8touchgfx3HAL12setMCUActiveEb>
 80103a8:	e006      	b.n	80103b8 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 80103aa:	f7fe feb7 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2100      	movs	r1, #0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f009 fdb4 	bl	8019f20 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 80103b8:	2301      	movs	r3, #1
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	6039      	str	r1, [r7, #0]
        while (1);
 80103cc:	e7fe      	b.n	80103cc <vApplicationStackOverflowHook+0xa>

080103ce <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 80103ce:	b480      	push	{r7}
 80103d0:	b083      	sub	sp, #12
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	6039      	str	r1, [r7, #0]
        while (1);
 80103d8:	e7fe      	b.n	80103d8 <vApplicationMallocFailedHook+0xa>
	...

080103dc <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80103e0:	4902      	ldr	r1, [pc, #8]	; (80103ec <vApplicationIdleHook+0x10>)
 80103e2:	2000      	movs	r0, #0
 80103e4:	f001 fc36 	bl	8011c54 <vTaskSetApplicationTaskTag>
    }
 80103e8:	bf00      	nop
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	0801038d 	.word	0x0801038d

080103f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	4613      	mov	r3, r2
 80103fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80103fe:	2301      	movs	r3, #1
 8010400:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010402:	2300      	movs	r3, #0
 8010404:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010406:	4b1f      	ldr	r3, [pc, #124]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010408:	7a5b      	ldrb	r3, [r3, #9]
 801040a:	b2db      	uxtb	r3, r3
 801040c:	2b00      	cmp	r3, #0
 801040e:	d131      	bne.n	8010474 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010410:	4b1c      	ldr	r3, [pc, #112]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010412:	7a5b      	ldrb	r3, [r3, #9]
 8010414:	b2db      	uxtb	r3, r3
 8010416:	461a      	mov	r2, r3
 8010418:	4b1a      	ldr	r3, [pc, #104]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 801041a:	2100      	movs	r1, #0
 801041c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801041e:	4b19      	ldr	r3, [pc, #100]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010420:	7a5b      	ldrb	r3, [r3, #9]
 8010422:	b2db      	uxtb	r3, r3
 8010424:	4a17      	ldr	r2, [pc, #92]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	4413      	add	r3, r2
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801042e:	4b15      	ldr	r3, [pc, #84]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010430:	7a5b      	ldrb	r3, [r3, #9]
 8010432:	b2db      	uxtb	r3, r3
 8010434:	461a      	mov	r2, r3
 8010436:	4b13      	ldr	r3, [pc, #76]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010438:	4413      	add	r3, r2
 801043a:	79fa      	ldrb	r2, [r7, #7]
 801043c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801043e:	4b11      	ldr	r3, [pc, #68]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 8010440:	7a5b      	ldrb	r3, [r3, #9]
 8010442:	b2db      	uxtb	r3, r3
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	b2d1      	uxtb	r1, r2
 8010448:	4a0e      	ldr	r2, [pc, #56]	; (8010484 <FATFS_LinkDriverEx+0x94>)
 801044a:	7251      	strb	r1, [r2, #9]
 801044c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801044e:	7dbb      	ldrb	r3, [r7, #22]
 8010450:	3330      	adds	r3, #48	; 0x30
 8010452:	b2da      	uxtb	r2, r3
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	3301      	adds	r3, #1
 801045c:	223a      	movs	r2, #58	; 0x3a
 801045e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	3302      	adds	r3, #2
 8010464:	222f      	movs	r2, #47	; 0x2f
 8010466:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	3303      	adds	r3, #3
 801046c:	2200      	movs	r2, #0
 801046e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010474:	7dfb      	ldrb	r3, [r7, #23]
}
 8010476:	4618      	mov	r0, r3
 8010478:	371c      	adds	r7, #28
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	20000194 	.word	0x20000194

08010488 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010492:	2200      	movs	r2, #0
 8010494:	6839      	ldr	r1, [r7, #0]
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7ff ffaa 	bl	80103f0 <FATFS_LinkDriverEx>
 801049c:	4603      	mov	r3, r0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80104a6:	b480      	push	{r7}
 80104a8:	b085      	sub	sp, #20
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	4603      	mov	r3, r0
 80104ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80104b0:	2300      	movs	r3, #0
 80104b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80104b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104b8:	2b84      	cmp	r3, #132	; 0x84
 80104ba:	d005      	beq.n	80104c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80104bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	4413      	add	r3, r2
 80104c4:	3303      	adds	r3, #3
 80104c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80104c8:	68fb      	ldr	r3, [r7, #12]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr

080104d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80104d6:	b480      	push	{r7}
 80104d8:	b083      	sub	sp, #12
 80104da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104dc:	f3ef 8305 	mrs	r3, IPSR
 80104e0:	607b      	str	r3, [r7, #4]
  return(result);
 80104e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bf14      	ite	ne
 80104e8:	2301      	movne	r3, #1
 80104ea:	2300      	moveq	r3, #0
 80104ec:	b2db      	uxtb	r3, r3
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80104fa:	b580      	push	{r7, lr}
 80104fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80104fe:	f001 f9d3 	bl	80118a8 <vTaskStartScheduler>
  
  return osOK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	bd80      	pop	{r7, pc}

08010508 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801050c:	f001 fe3a 	bl	8012184 <xTaskGetSchedulerState>
 8010510:	4603      	mov	r3, r0
 8010512:	2b01      	cmp	r3, #1
 8010514:	d101      	bne.n	801051a <osKernelRunning+0x12>
    return 0;
 8010516:	2300      	movs	r3, #0
 8010518:	e000      	b.n	801051c <osKernelRunning+0x14>
  else
    return 1;
 801051a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801051c:	4618      	mov	r0, r3
 801051e:	bd80      	pop	{r7, pc}

08010520 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010524:	f7ff ffd7 	bl	80104d6 <inHandlerMode>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d003      	beq.n	8010536 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801052e:	f001 fac1 	bl	8011ab4 <xTaskGetTickCountFromISR>
 8010532:	4603      	mov	r3, r0
 8010534:	e002      	b.n	801053c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010536:	f001 faad 	bl	8011a94 <xTaskGetTickCount>
 801053a:	4603      	mov	r3, r0
  }
}
 801053c:	4618      	mov	r0, r3
 801053e:	bd80      	pop	{r7, pc}

08010540 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010542:	b087      	sub	sp, #28
 8010544:	af02      	add	r7, sp, #8
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685c      	ldr	r4, [r3, #4]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010556:	b29e      	uxth	r6, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff ffa1 	bl	80104a6 <makeFreeRtosPriority>
 8010564:	4602      	mov	r2, r0
 8010566:	f107 030c 	add.w	r3, r7, #12
 801056a:	9301      	str	r3, [sp, #4]
 801056c:	9200      	str	r2, [sp, #0]
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	4632      	mov	r2, r6
 8010572:	4629      	mov	r1, r5
 8010574:	4620      	mov	r0, r4
 8010576:	f001 f82a 	bl	80115ce <xTaskCreate>
 801057a:	4603      	mov	r3, r0
 801057c:	2b01      	cmp	r3, #1
 801057e:	d001      	beq.n	8010584 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	e000      	b.n	8010586 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8010584:	68fb      	ldr	r3, [r7, #12]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801058e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b084      	sub	sp, #16
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d001      	beq.n	80105a4 <osDelay+0x16>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	e000      	b.n	80105a6 <osDelay+0x18>
 80105a4:	2301      	movs	r3, #1
 80105a6:	4618      	mov	r0, r3
 80105a8:	f001 f948 	bl	801183c <vTaskDelay>
  
  return osOK;
 80105ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3710      	adds	r7, #16
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b082      	sub	sp, #8
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6818      	ldr	r0, [r3, #0]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	4619      	mov	r1, r3
 80105cc:	f000 f9d8 	bl	8010980 <xQueueGenericCreate>
 80105d0:	4603      	mov	r3, r0
#endif
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
	...

080105dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b086      	sub	sp, #24
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80105e8:	2300      	movs	r3, #0
 80105ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d101      	bne.n	80105fa <osMessagePut+0x1e>
    ticks = 1;
 80105f6:	2301      	movs	r3, #1
 80105f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80105fa:	f7ff ff6c 	bl	80104d6 <inHandlerMode>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d018      	beq.n	8010636 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010604:	f107 0210 	add.w	r2, r7, #16
 8010608:	f107 0108 	add.w	r1, r7, #8
 801060c:	2300      	movs	r3, #0
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f000 fb12 	bl	8010c38 <xQueueGenericSendFromISR>
 8010614:	4603      	mov	r3, r0
 8010616:	2b01      	cmp	r3, #1
 8010618:	d001      	beq.n	801061e <osMessagePut+0x42>
      return osErrorOS;
 801061a:	23ff      	movs	r3, #255	; 0xff
 801061c:	e018      	b.n	8010650 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d014      	beq.n	801064e <osMessagePut+0x72>
 8010624:	4b0c      	ldr	r3, [pc, #48]	; (8010658 <osMessagePut+0x7c>)
 8010626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801062a:	601a      	str	r2, [r3, #0]
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	f3bf 8f6f 	isb	sy
 8010634:	e00b      	b.n	801064e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010636:	f107 0108 	add.w	r1, r7, #8
 801063a:	2300      	movs	r3, #0
 801063c:	697a      	ldr	r2, [r7, #20]
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f000 f9f8 	bl	8010a34 <xQueueGenericSend>
 8010644:	4603      	mov	r3, r0
 8010646:	2b01      	cmp	r3, #1
 8010648:	d001      	beq.n	801064e <osMessagePut+0x72>
      return osErrorOS;
 801064a:	23ff      	movs	r3, #255	; 0xff
 801064c:	e000      	b.n	8010650 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3718      	adds	r7, #24
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	e000ed04 	.word	0xe000ed04

0801065c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801065c:	b590      	push	{r4, r7, lr}
 801065e:	b08b      	sub	sp, #44	; 0x2c
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10a      	bne.n	801068c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010676:	2380      	movs	r3, #128	; 0x80
 8010678:	617b      	str	r3, [r7, #20]
    return event;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	461c      	mov	r4, r3
 801067e:	f107 0314 	add.w	r3, r7, #20
 8010682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801068a:	e054      	b.n	8010736 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801068c:	2300      	movs	r3, #0
 801068e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010690:	2300      	movs	r3, #0
 8010692:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069a:	d103      	bne.n	80106a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801069c:	f04f 33ff 	mov.w	r3, #4294967295
 80106a0:	627b      	str	r3, [r7, #36]	; 0x24
 80106a2:	e009      	b.n	80106b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d006      	beq.n	80106b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80106ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <osMessageGet+0x5c>
      ticks = 1;
 80106b4:	2301      	movs	r3, #1
 80106b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80106b8:	f7ff ff0d 	bl	80104d6 <inHandlerMode>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d01c      	beq.n	80106fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80106c2:	f107 0220 	add.w	r2, r7, #32
 80106c6:	f107 0314 	add.w	r3, r7, #20
 80106ca:	3304      	adds	r3, #4
 80106cc:	4619      	mov	r1, r3
 80106ce:	68b8      	ldr	r0, [r7, #8]
 80106d0:	f000 fdd2 	bl	8011278 <xQueueReceiveFromISR>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d102      	bne.n	80106e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80106da:	2310      	movs	r3, #16
 80106dc:	617b      	str	r3, [r7, #20]
 80106de:	e001      	b.n	80106e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80106e0:	2300      	movs	r3, #0
 80106e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d01d      	beq.n	8010726 <osMessageGet+0xca>
 80106ea:	4b15      	ldr	r3, [pc, #84]	; (8010740 <osMessageGet+0xe4>)
 80106ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106f0:	601a      	str	r2, [r3, #0]
 80106f2:	f3bf 8f4f 	dsb	sy
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	e014      	b.n	8010726 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80106fc:	f107 0314 	add.w	r3, r7, #20
 8010700:	3304      	adds	r3, #4
 8010702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010704:	4619      	mov	r1, r3
 8010706:	68b8      	ldr	r0, [r7, #8]
 8010708:	f000 fbc4 	bl	8010e94 <xQueueReceive>
 801070c:	4603      	mov	r3, r0
 801070e:	2b01      	cmp	r3, #1
 8010710:	d102      	bne.n	8010718 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010712:	2310      	movs	r3, #16
 8010714:	617b      	str	r3, [r7, #20]
 8010716:	e006      	b.n	8010726 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <osMessageGet+0xc6>
 801071e:	2300      	movs	r3, #0
 8010720:	e000      	b.n	8010724 <osMessageGet+0xc8>
 8010722:	2340      	movs	r3, #64	; 0x40
 8010724:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	461c      	mov	r4, r3
 801072a:	f107 0314 	add.w	r3, r7, #20
 801072e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	372c      	adds	r7, #44	; 0x2c
 801073a:	46bd      	mov	sp, r7
 801073c:	bd90      	pop	{r4, r7, pc}
 801073e:	bf00      	nop
 8010740:	e000ed04 	.word	0xe000ed04

08010744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f103 0208 	add.w	r2, r3, #8
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f04f 32ff 	mov.w	r2, #4294967295
 801075c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f103 0208 	add.w	r2, r3, #8
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f103 0208 	add.w	r2, r3, #8
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010778:	bf00      	nop
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010792:	bf00      	nop
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr

0801079e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801079e:	b480      	push	{r7}
 80107a0:	b085      	sub	sp, #20
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
 80107a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	689a      	ldr	r2, [r3, #8]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	683a      	ldr	r2, [r7, #0]
 80107c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	683a      	ldr	r2, [r7, #0]
 80107c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	1c5a      	adds	r2, r3, #1
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
}
 80107da:	bf00      	nop
 80107dc:	3714      	adds	r7, #20
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80107e6:	b480      	push	{r7}
 80107e8:	b085      	sub	sp, #20
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fc:	d103      	bne.n	8010806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	691b      	ldr	r3, [r3, #16]
 8010802:	60fb      	str	r3, [r7, #12]
 8010804:	e00c      	b.n	8010820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3308      	adds	r3, #8
 801080a:	60fb      	str	r3, [r7, #12]
 801080c:	e002      	b.n	8010814 <vListInsert+0x2e>
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	60fb      	str	r3, [r7, #12]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	429a      	cmp	r2, r3
 801081e:	d2f6      	bcs.n	801080e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	685a      	ldr	r2, [r3, #4]
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	683a      	ldr	r2, [r7, #0]
 801083a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	601a      	str	r2, [r3, #0]
}
 801084c:	bf00      	nop
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	691b      	ldr	r3, [r3, #16]
 8010864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	6892      	ldr	r2, [r2, #8]
 801086e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	6852      	ldr	r2, [r2, #4]
 8010878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	429a      	cmp	r2, r3
 8010882:	d103      	bne.n	801088c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	689a      	ldr	r2, [r3, #8]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	1e5a      	subs	r2, r3, #1
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d10b      	bne.n	80108d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80108c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c4:	b672      	cpsid	i
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	b662      	cpsie	i
 80108d4:	60bb      	str	r3, [r7, #8]
 80108d6:	e7fe      	b.n	80108d6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80108d8:	f001 ffa6 	bl	8012828 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108e4:	68f9      	ldr	r1, [r7, #12]
 80108e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80108e8:	fb01 f303 	mul.w	r3, r1, r3
 80108ec:	441a      	add	r2, r3
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2200      	movs	r2, #0
 80108f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010908:	3b01      	subs	r3, #1
 801090a:	68f9      	ldr	r1, [r7, #12]
 801090c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801090e:	fb01 f303 	mul.w	r3, r1, r3
 8010912:	441a      	add	r2, r3
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	22ff      	movs	r2, #255	; 0xff
 801091c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	22ff      	movs	r2, #255	; 0xff
 8010924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d114      	bne.n	8010958 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	691b      	ldr	r3, [r3, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d01a      	beq.n	801096c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	3310      	adds	r3, #16
 801093a:	4618      	mov	r0, r3
 801093c:	f001 fa7c 	bl	8011e38 <xTaskRemoveFromEventList>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d012      	beq.n	801096c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010946:	4b0d      	ldr	r3, [pc, #52]	; (801097c <xQueueGenericReset+0xd0>)
 8010948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801094c:	601a      	str	r2, [r3, #0]
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	f3bf 8f6f 	isb	sy
 8010956:	e009      	b.n	801096c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3310      	adds	r3, #16
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff fef1 	bl	8010744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	3324      	adds	r3, #36	; 0x24
 8010966:	4618      	mov	r0, r3
 8010968:	f7ff feec 	bl	8010744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801096c:	f001 ff8e 	bl	801288c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010970:	2301      	movs	r3, #1
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	e000ed04 	.word	0xe000ed04

08010980 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010980:	b580      	push	{r7, lr}
 8010982:	b08a      	sub	sp, #40	; 0x28
 8010984:	af02      	add	r7, sp, #8
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	4613      	mov	r3, r2
 801098c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d10b      	bne.n	80109ac <xQueueGenericCreate+0x2c>
 8010994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010998:	b672      	cpsid	i
 801099a:	f383 8811 	msr	BASEPRI, r3
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	b662      	cpsie	i
 80109a8:	613b      	str	r3, [r7, #16]
 80109aa:	e7fe      	b.n	80109aa <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d102      	bne.n	80109b8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	61fb      	str	r3, [r7, #28]
 80109b6:	e004      	b.n	80109c2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	fb02 f303 	mul.w	r3, r2, r3
 80109c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	3348      	adds	r3, #72	; 0x48
 80109c6:	4618      	mov	r0, r3
 80109c8:	f002 f850 	bl	8012a6c <pvPortMalloc>
 80109cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d00b      	beq.n	80109ec <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	3348      	adds	r3, #72	; 0x48
 80109d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109da:	79fa      	ldrb	r2, [r7, #7]
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	4613      	mov	r3, r2
 80109e2:	697a      	ldr	r2, [r7, #20]
 80109e4:	68b9      	ldr	r1, [r7, #8]
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f000 f805 	bl	80109f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80109ec:	69bb      	ldr	r3, [r7, #24]
	}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3720      	adds	r7, #32
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b084      	sub	sp, #16
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	60f8      	str	r0, [r7, #12]
 80109fe:	60b9      	str	r1, [r7, #8]
 8010a00:	607a      	str	r2, [r7, #4]
 8010a02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d103      	bne.n	8010a12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	69ba      	ldr	r2, [r7, #24]
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	e002      	b.n	8010a18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	68ba      	ldr	r2, [r7, #8]
 8010a22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a24:	2101      	movs	r1, #1
 8010a26:	69b8      	ldr	r0, [r7, #24]
 8010a28:	f7ff ff40 	bl	80108ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a2c:	bf00      	nop
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b08e      	sub	sp, #56	; 0x38
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
 8010a40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a42:	2300      	movs	r3, #0
 8010a44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10b      	bne.n	8010a68 <xQueueGenericSend+0x34>
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	b672      	cpsid	i
 8010a56:	f383 8811 	msr	BASEPRI, r3
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	b662      	cpsie	i
 8010a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a66:	e7fe      	b.n	8010a66 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d103      	bne.n	8010a76 <xQueueGenericSend+0x42>
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <xQueueGenericSend+0x46>
 8010a76:	2301      	movs	r3, #1
 8010a78:	e000      	b.n	8010a7c <xQueueGenericSend+0x48>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10b      	bne.n	8010a98 <xQueueGenericSend+0x64>
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	b672      	cpsid	i
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	b662      	cpsie	i
 8010a94:	627b      	str	r3, [r7, #36]	; 0x24
 8010a96:	e7fe      	b.n	8010a96 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d103      	bne.n	8010aa6 <xQueueGenericSend+0x72>
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d101      	bne.n	8010aaa <xQueueGenericSend+0x76>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e000      	b.n	8010aac <xQueueGenericSend+0x78>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d10b      	bne.n	8010ac8 <xQueueGenericSend+0x94>
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	b672      	cpsid	i
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	b662      	cpsie	i
 8010ac4:	623b      	str	r3, [r7, #32]
 8010ac6:	e7fe      	b.n	8010ac6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ac8:	f001 fb5c 	bl	8012184 <xTaskGetSchedulerState>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d102      	bne.n	8010ad8 <xQueueGenericSend+0xa4>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d101      	bne.n	8010adc <xQueueGenericSend+0xa8>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e000      	b.n	8010ade <xQueueGenericSend+0xaa>
 8010adc:	2300      	movs	r3, #0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10b      	bne.n	8010afa <xQueueGenericSend+0xc6>
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	b672      	cpsid	i
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	b662      	cpsie	i
 8010af6:	61fb      	str	r3, [r7, #28]
 8010af8:	e7fe      	b.n	8010af8 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010afa:	f001 fe95 	bl	8012828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d302      	bcc.n	8010b10 <xQueueGenericSend+0xdc>
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d129      	bne.n	8010b64 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	68b9      	ldr	r1, [r7, #8]
 8010b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b16:	f000 fc4a 	bl	80113ae <prvCopyDataToQueue>
 8010b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d010      	beq.n	8010b46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	3324      	adds	r3, #36	; 0x24
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f001 f985 	bl	8011e38 <xTaskRemoveFromEventList>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d013      	beq.n	8010b5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b34:	4b3f      	ldr	r3, [pc, #252]	; (8010c34 <xQueueGenericSend+0x200>)
 8010b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b3a:	601a      	str	r2, [r3, #0]
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	f3bf 8f6f 	isb	sy
 8010b44:	e00a      	b.n	8010b5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d007      	beq.n	8010b5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b4c:	4b39      	ldr	r3, [pc, #228]	; (8010c34 <xQueueGenericSend+0x200>)
 8010b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b52:	601a      	str	r2, [r3, #0]
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b5c:	f001 fe96 	bl	801288c <vPortExitCritical>
				return pdPASS;
 8010b60:	2301      	movs	r3, #1
 8010b62:	e063      	b.n	8010c2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d103      	bne.n	8010b72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b6a:	f001 fe8f 	bl	801288c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	e05c      	b.n	8010c2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b78:	f107 0314 	add.w	r3, r7, #20
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f001 f9bf 	bl	8011f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b82:	2301      	movs	r3, #1
 8010b84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b86:	f001 fe81 	bl	801288c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b8a:	f000 fed7 	bl	801193c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b8e:	f001 fe4b 	bl	8012828 <vPortEnterCritical>
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b98:	b25b      	sxtb	r3, r3
 8010b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b9e:	d103      	bne.n	8010ba8 <xQueueGenericSend+0x174>
 8010ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bae:	b25b      	sxtb	r3, r3
 8010bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb4:	d103      	bne.n	8010bbe <xQueueGenericSend+0x18a>
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bbe:	f001 fe65 	bl	801288c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bc2:	1d3a      	adds	r2, r7, #4
 8010bc4:	f107 0314 	add.w	r3, r7, #20
 8010bc8:	4611      	mov	r1, r2
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f001 f9ae 	bl	8011f2c <xTaskCheckForTimeOut>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d124      	bne.n	8010c20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bd8:	f000 fce1 	bl	801159e <prvIsQueueFull>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d018      	beq.n	8010c14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	3310      	adds	r3, #16
 8010be6:	687a      	ldr	r2, [r7, #4]
 8010be8:	4611      	mov	r1, r2
 8010bea:	4618      	mov	r0, r3
 8010bec:	f001 f8fe 	bl	8011dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bf2:	f000 fc6c 	bl	80114ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010bf6:	f000 feaf 	bl	8011958 <xTaskResumeAll>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f47f af7c 	bne.w	8010afa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010c02:	4b0c      	ldr	r3, [pc, #48]	; (8010c34 <xQueueGenericSend+0x200>)
 8010c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c08:	601a      	str	r2, [r3, #0]
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	e772      	b.n	8010afa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c16:	f000 fc5a 	bl	80114ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c1a:	f000 fe9d 	bl	8011958 <xTaskResumeAll>
 8010c1e:	e76c      	b.n	8010afa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c22:	f000 fc54 	bl	80114ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c26:	f000 fe97 	bl	8011958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c2a:	2300      	movs	r3, #0
		}
	}
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3738      	adds	r7, #56	; 0x38
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	e000ed04 	.word	0xe000ed04

08010c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b08e      	sub	sp, #56	; 0x38
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
 8010c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10b      	bne.n	8010c68 <xQueueGenericSendFromISR+0x30>
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	b672      	cpsid	i
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	b662      	cpsie	i
 8010c64:	627b      	str	r3, [r7, #36]	; 0x24
 8010c66:	e7fe      	b.n	8010c66 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d103      	bne.n	8010c76 <xQueueGenericSendFromISR+0x3e>
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <xQueueGenericSendFromISR+0x42>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e000      	b.n	8010c7c <xQueueGenericSendFromISR+0x44>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d10b      	bne.n	8010c98 <xQueueGenericSendFromISR+0x60>
 8010c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c84:	b672      	cpsid	i
 8010c86:	f383 8811 	msr	BASEPRI, r3
 8010c8a:	f3bf 8f6f 	isb	sy
 8010c8e:	f3bf 8f4f 	dsb	sy
 8010c92:	b662      	cpsie	i
 8010c94:	623b      	str	r3, [r7, #32]
 8010c96:	e7fe      	b.n	8010c96 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d103      	bne.n	8010ca6 <xQueueGenericSendFromISR+0x6e>
 8010c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d101      	bne.n	8010caa <xQueueGenericSendFromISR+0x72>
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e000      	b.n	8010cac <xQueueGenericSendFromISR+0x74>
 8010caa:	2300      	movs	r3, #0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d10b      	bne.n	8010cc8 <xQueueGenericSendFromISR+0x90>
 8010cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb4:	b672      	cpsid	i
 8010cb6:	f383 8811 	msr	BASEPRI, r3
 8010cba:	f3bf 8f6f 	isb	sy
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	b662      	cpsie	i
 8010cc4:	61fb      	str	r3, [r7, #28]
 8010cc6:	e7fe      	b.n	8010cc6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cc8:	f001 fe8e 	bl	80129e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8010cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd4:	b672      	cpsid	i
 8010cd6:	f383 8811 	msr	BASEPRI, r3
 8010cda:	f3bf 8f6f 	isb	sy
 8010cde:	f3bf 8f4f 	dsb	sy
 8010ce2:	b662      	cpsie	i
 8010ce4:	61ba      	str	r2, [r7, #24]
 8010ce6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ce8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d302      	bcc.n	8010cfe <xQueueGenericSendFromISR+0xc6>
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d12c      	bne.n	8010d58 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d08:	683a      	ldr	r2, [r7, #0]
 8010d0a:	68b9      	ldr	r1, [r7, #8]
 8010d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d0e:	f000 fb4e 	bl	80113ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d1a:	d112      	bne.n	8010d42 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d016      	beq.n	8010d52 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d26:	3324      	adds	r3, #36	; 0x24
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f001 f885 	bl	8011e38 <xTaskRemoveFromEventList>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d00e      	beq.n	8010d52 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00b      	beq.n	8010d52 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	601a      	str	r2, [r3, #0]
 8010d40:	e007      	b.n	8010d52 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d46:	3301      	adds	r3, #1
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	b25a      	sxtb	r2, r3
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d52:	2301      	movs	r3, #1
 8010d54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010d56:	e001      	b.n	8010d5c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3738      	adds	r7, #56	; 0x38
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08e      	sub	sp, #56	; 0x38
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d10b      	bne.n	8010d9c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d88:	b672      	cpsid	i
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	b662      	cpsie	i
 8010d98:	623b      	str	r3, [r7, #32]
 8010d9a:	e7fe      	b.n	8010d9a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <xQueueGiveFromISR+0x4c>
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	b672      	cpsid	i
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	b662      	cpsie	i
 8010db8:	61fb      	str	r3, [r7, #28]
 8010dba:	e7fe      	b.n	8010dba <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d103      	bne.n	8010dcc <xQueueGiveFromISR+0x5c>
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d101      	bne.n	8010dd0 <xQueueGiveFromISR+0x60>
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e000      	b.n	8010dd2 <xQueueGiveFromISR+0x62>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d10b      	bne.n	8010dee <xQueueGiveFromISR+0x7e>
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	b672      	cpsid	i
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	b662      	cpsie	i
 8010dea:	61bb      	str	r3, [r7, #24]
 8010dec:	e7fe      	b.n	8010dec <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dee:	f001 fdfb 	bl	80129e8 <vPortValidateInterruptPriority>
	__asm volatile
 8010df2:	f3ef 8211 	mrs	r2, BASEPRI
 8010df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfa:	b672      	cpsid	i
 8010dfc:	f383 8811 	msr	BASEPRI, r3
 8010e00:	f3bf 8f6f 	isb	sy
 8010e04:	f3bf 8f4f 	dsb	sy
 8010e08:	b662      	cpsie	i
 8010e0a:	617a      	str	r2, [r7, #20]
 8010e0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010e0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d22b      	bcs.n	8010e7a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e3c:	d112      	bne.n	8010e64 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d016      	beq.n	8010e74 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	3324      	adds	r3, #36	; 0x24
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f000 fff4 	bl	8011e38 <xTaskRemoveFromEventList>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00e      	beq.n	8010e74 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00b      	beq.n	8010e74 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	e007      	b.n	8010e74 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e68:	3301      	adds	r3, #1
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	b25a      	sxtb	r2, r3
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010e74:	2301      	movs	r3, #1
 8010e76:	637b      	str	r3, [r7, #52]	; 0x34
 8010e78:	e001      	b.n	8010e7e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3738      	adds	r7, #56	; 0x38
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
	...

08010e94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b08c      	sub	sp, #48	; 0x30
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	60f8      	str	r0, [r7, #12]
 8010e9c:	60b9      	str	r1, [r7, #8]
 8010e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10b      	bne.n	8010ec6 <xQueueReceive+0x32>
	__asm volatile
 8010eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb2:	b672      	cpsid	i
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
 8010ec0:	b662      	cpsie	i
 8010ec2:	623b      	str	r3, [r7, #32]
 8010ec4:	e7fe      	b.n	8010ec4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d103      	bne.n	8010ed4 <xQueueReceive+0x40>
 8010ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d101      	bne.n	8010ed8 <xQueueReceive+0x44>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	e000      	b.n	8010eda <xQueueReceive+0x46>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10b      	bne.n	8010ef6 <xQueueReceive+0x62>
 8010ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee2:	b672      	cpsid	i
 8010ee4:	f383 8811 	msr	BASEPRI, r3
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	b662      	cpsie	i
 8010ef2:	61fb      	str	r3, [r7, #28]
 8010ef4:	e7fe      	b.n	8010ef4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ef6:	f001 f945 	bl	8012184 <xTaskGetSchedulerState>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d102      	bne.n	8010f06 <xQueueReceive+0x72>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d101      	bne.n	8010f0a <xQueueReceive+0x76>
 8010f06:	2301      	movs	r3, #1
 8010f08:	e000      	b.n	8010f0c <xQueueReceive+0x78>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d10b      	bne.n	8010f28 <xQueueReceive+0x94>
 8010f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f14:	b672      	cpsid	i
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	b662      	cpsie	i
 8010f24:	61bb      	str	r3, [r7, #24]
 8010f26:	e7fe      	b.n	8010f26 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f28:	f001 fc7e 	bl	8012828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d01f      	beq.n	8010f78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f38:	68b9      	ldr	r1, [r7, #8]
 8010f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f3c:	f000 faa1 	bl	8011482 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	1e5a      	subs	r2, r3, #1
 8010f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d00f      	beq.n	8010f70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	3310      	adds	r3, #16
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 ff6f 	bl	8011e38 <xTaskRemoveFromEventList>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d007      	beq.n	8010f70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f60:	4b3c      	ldr	r3, [pc, #240]	; (8011054 <xQueueReceive+0x1c0>)
 8010f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f66:	601a      	str	r2, [r3, #0]
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f70:	f001 fc8c 	bl	801288c <vPortExitCritical>
				return pdPASS;
 8010f74:	2301      	movs	r3, #1
 8010f76:	e069      	b.n	801104c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d103      	bne.n	8010f86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f7e:	f001 fc85 	bl	801288c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f82:	2300      	movs	r3, #0
 8010f84:	e062      	b.n	801104c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d106      	bne.n	8010f9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f8c:	f107 0310 	add.w	r3, r7, #16
 8010f90:	4618      	mov	r0, r3
 8010f92:	f000 ffb5 	bl	8011f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f96:	2301      	movs	r3, #1
 8010f98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f9a:	f001 fc77 	bl	801288c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f9e:	f000 fccd 	bl	801193c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fa2:	f001 fc41 	bl	8012828 <vPortEnterCritical>
 8010fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fac:	b25b      	sxtb	r3, r3
 8010fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb2:	d103      	bne.n	8010fbc <xQueueReceive+0x128>
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fc2:	b25b      	sxtb	r3, r3
 8010fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc8:	d103      	bne.n	8010fd2 <xQueueReceive+0x13e>
 8010fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fd2:	f001 fc5b 	bl	801288c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fd6:	1d3a      	adds	r2, r7, #4
 8010fd8:	f107 0310 	add.w	r3, r7, #16
 8010fdc:	4611      	mov	r1, r2
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f000 ffa4 	bl	8011f2c <xTaskCheckForTimeOut>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d123      	bne.n	8011032 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fec:	f000 fac1 	bl	8011572 <prvIsQueueEmpty>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d017      	beq.n	8011026 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	3324      	adds	r3, #36	; 0x24
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f000 fef4 	bl	8011dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011006:	f000 fa62 	bl	80114ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801100a:	f000 fca5 	bl	8011958 <xTaskResumeAll>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d189      	bne.n	8010f28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011014:	4b0f      	ldr	r3, [pc, #60]	; (8011054 <xQueueReceive+0x1c0>)
 8011016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801101a:	601a      	str	r2, [r3, #0]
 801101c:	f3bf 8f4f 	dsb	sy
 8011020:	f3bf 8f6f 	isb	sy
 8011024:	e780      	b.n	8010f28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011028:	f000 fa51 	bl	80114ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801102c:	f000 fc94 	bl	8011958 <xTaskResumeAll>
 8011030:	e77a      	b.n	8010f28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011034:	f000 fa4b 	bl	80114ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011038:	f000 fc8e 	bl	8011958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801103c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801103e:	f000 fa98 	bl	8011572 <prvIsQueueEmpty>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	f43f af6f 	beq.w	8010f28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801104a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801104c:	4618      	mov	r0, r3
 801104e:	3730      	adds	r7, #48	; 0x30
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	e000ed04 	.word	0xe000ed04

08011058 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08e      	sub	sp, #56	; 0x38
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011062:	2300      	movs	r3, #0
 8011064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801106a:	2300      	movs	r3, #0
 801106c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011070:	2b00      	cmp	r3, #0
 8011072:	d10b      	bne.n	801108c <xQueueSemaphoreTake+0x34>
 8011074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011078:	b672      	cpsid	i
 801107a:	f383 8811 	msr	BASEPRI, r3
 801107e:	f3bf 8f6f 	isb	sy
 8011082:	f3bf 8f4f 	dsb	sy
 8011086:	b662      	cpsie	i
 8011088:	623b      	str	r3, [r7, #32]
 801108a:	e7fe      	b.n	801108a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011090:	2b00      	cmp	r3, #0
 8011092:	d00b      	beq.n	80110ac <xQueueSemaphoreTake+0x54>
 8011094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011098:	b672      	cpsid	i
 801109a:	f383 8811 	msr	BASEPRI, r3
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f3bf 8f4f 	dsb	sy
 80110a6:	b662      	cpsie	i
 80110a8:	61fb      	str	r3, [r7, #28]
 80110aa:	e7fe      	b.n	80110aa <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110ac:	f001 f86a 	bl	8012184 <xTaskGetSchedulerState>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d102      	bne.n	80110bc <xQueueSemaphoreTake+0x64>
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d101      	bne.n	80110c0 <xQueueSemaphoreTake+0x68>
 80110bc:	2301      	movs	r3, #1
 80110be:	e000      	b.n	80110c2 <xQueueSemaphoreTake+0x6a>
 80110c0:	2300      	movs	r3, #0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10b      	bne.n	80110de <xQueueSemaphoreTake+0x86>
 80110c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ca:	b672      	cpsid	i
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	b662      	cpsie	i
 80110da:	61bb      	str	r3, [r7, #24]
 80110dc:	e7fe      	b.n	80110dc <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80110de:	f001 fba3 	bl	8012828 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d024      	beq.n	8011138 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80110ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f0:	1e5a      	subs	r2, r3, #1
 80110f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d104      	bne.n	8011108 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80110fe:	f001 fa0f 	bl	8012520 <pvTaskIncrementMutexHeldCount>
 8011102:	4602      	mov	r2, r0
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00f      	beq.n	8011130 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	3310      	adds	r3, #16
 8011114:	4618      	mov	r0, r3
 8011116:	f000 fe8f 	bl	8011e38 <xTaskRemoveFromEventList>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d007      	beq.n	8011130 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011120:	4b54      	ldr	r3, [pc, #336]	; (8011274 <xQueueSemaphoreTake+0x21c>)
 8011122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011126:	601a      	str	r2, [r3, #0]
 8011128:	f3bf 8f4f 	dsb	sy
 801112c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011130:	f001 fbac 	bl	801288c <vPortExitCritical>
				return pdPASS;
 8011134:	2301      	movs	r3, #1
 8011136:	e098      	b.n	801126a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d112      	bne.n	8011164 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011140:	2b00      	cmp	r3, #0
 8011142:	d00b      	beq.n	801115c <xQueueSemaphoreTake+0x104>
 8011144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011148:	b672      	cpsid	i
 801114a:	f383 8811 	msr	BASEPRI, r3
 801114e:	f3bf 8f6f 	isb	sy
 8011152:	f3bf 8f4f 	dsb	sy
 8011156:	b662      	cpsie	i
 8011158:	617b      	str	r3, [r7, #20]
 801115a:	e7fe      	b.n	801115a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801115c:	f001 fb96 	bl	801288c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011160:	2300      	movs	r3, #0
 8011162:	e082      	b.n	801126a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011166:	2b00      	cmp	r3, #0
 8011168:	d106      	bne.n	8011178 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801116a:	f107 030c 	add.w	r3, r7, #12
 801116e:	4618      	mov	r0, r3
 8011170:	f000 fec6 	bl	8011f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011174:	2301      	movs	r3, #1
 8011176:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011178:	f001 fb88 	bl	801288c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801117c:	f000 fbde 	bl	801193c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011180:	f001 fb52 	bl	8012828 <vPortEnterCritical>
 8011184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801118a:	b25b      	sxtb	r3, r3
 801118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011190:	d103      	bne.n	801119a <xQueueSemaphoreTake+0x142>
 8011192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011194:	2200      	movs	r2, #0
 8011196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111a0:	b25b      	sxtb	r3, r3
 80111a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a6:	d103      	bne.n	80111b0 <xQueueSemaphoreTake+0x158>
 80111a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111b0:	f001 fb6c 	bl	801288c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111b4:	463a      	mov	r2, r7
 80111b6:	f107 030c 	add.w	r3, r7, #12
 80111ba:	4611      	mov	r1, r2
 80111bc:	4618      	mov	r0, r3
 80111be:	f000 feb5 	bl	8011f2c <xTaskCheckForTimeOut>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d132      	bne.n	801122e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111ca:	f000 f9d2 	bl	8011572 <prvIsQueueEmpty>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d026      	beq.n	8011222 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d109      	bne.n	80111f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80111dc:	f001 fb24 	bl	8012828 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f000 ffeb 	bl	80121c0 <xTaskPriorityInherit>
 80111ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80111ec:	f001 fb4e 	bl	801288c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f2:	3324      	adds	r3, #36	; 0x24
 80111f4:	683a      	ldr	r2, [r7, #0]
 80111f6:	4611      	mov	r1, r2
 80111f8:	4618      	mov	r0, r3
 80111fa:	f000 fdf7 	bl	8011dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011200:	f000 f965 	bl	80114ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011204:	f000 fba8 	bl	8011958 <xTaskResumeAll>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	f47f af67 	bne.w	80110de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011210:	4b18      	ldr	r3, [pc, #96]	; (8011274 <xQueueSemaphoreTake+0x21c>)
 8011212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011216:	601a      	str	r2, [r3, #0]
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	e75d      	b.n	80110de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011224:	f000 f953 	bl	80114ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011228:	f000 fb96 	bl	8011958 <xTaskResumeAll>
 801122c:	e757      	b.n	80110de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801122e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011230:	f000 f94d 	bl	80114ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011234:	f000 fb90 	bl	8011958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801123a:	f000 f99a 	bl	8011572 <prvIsQueueEmpty>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	f43f af4c 	beq.w	80110de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00d      	beq.n	8011268 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801124c:	f001 faec 	bl	8012828 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011252:	f000 f894 	bl	801137e <prvGetDisinheritPriorityAfterTimeout>
 8011256:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801125e:	4618      	mov	r0, r3
 8011260:	f001 f8bc 	bl	80123dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011264:	f001 fb12 	bl	801288c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011268:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801126a:	4618      	mov	r0, r3
 801126c:	3738      	adds	r7, #56	; 0x38
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	e000ed04 	.word	0xe000ed04

08011278 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b08e      	sub	sp, #56	; 0x38
 801127c:	af00      	add	r7, sp, #0
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	60b9      	str	r1, [r7, #8]
 8011282:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128a:	2b00      	cmp	r3, #0
 801128c:	d10b      	bne.n	80112a6 <xQueueReceiveFromISR+0x2e>
 801128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011292:	b672      	cpsid	i
 8011294:	f383 8811 	msr	BASEPRI, r3
 8011298:	f3bf 8f6f 	isb	sy
 801129c:	f3bf 8f4f 	dsb	sy
 80112a0:	b662      	cpsie	i
 80112a2:	623b      	str	r3, [r7, #32]
 80112a4:	e7fe      	b.n	80112a4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d103      	bne.n	80112b4 <xQueueReceiveFromISR+0x3c>
 80112ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d101      	bne.n	80112b8 <xQueueReceiveFromISR+0x40>
 80112b4:	2301      	movs	r3, #1
 80112b6:	e000      	b.n	80112ba <xQueueReceiveFromISR+0x42>
 80112b8:	2300      	movs	r3, #0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d10b      	bne.n	80112d6 <xQueueReceiveFromISR+0x5e>
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	b672      	cpsid	i
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	b662      	cpsie	i
 80112d2:	61fb      	str	r3, [r7, #28]
 80112d4:	e7fe      	b.n	80112d4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112d6:	f001 fb87 	bl	80129e8 <vPortValidateInterruptPriority>
	__asm volatile
 80112da:	f3ef 8211 	mrs	r2, BASEPRI
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	b672      	cpsid	i
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	b662      	cpsie	i
 80112f2:	61ba      	str	r2, [r7, #24]
 80112f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011302:	2b00      	cmp	r3, #0
 8011304:	d02f      	beq.n	8011366 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801130c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011310:	68b9      	ldr	r1, [r7, #8]
 8011312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011314:	f000 f8b5 	bl	8011482 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131a:	1e5a      	subs	r2, r3, #1
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011328:	d112      	bne.n	8011350 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d016      	beq.n	8011360 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	3310      	adds	r3, #16
 8011336:	4618      	mov	r0, r3
 8011338:	f000 fd7e 	bl	8011e38 <xTaskRemoveFromEventList>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d00e      	beq.n	8011360 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00b      	beq.n	8011360 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	601a      	str	r2, [r3, #0]
 801134e:	e007      	b.n	8011360 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011354:	3301      	adds	r3, #1
 8011356:	b2db      	uxtb	r3, r3
 8011358:	b25a      	sxtb	r2, r3
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011360:	2301      	movs	r3, #1
 8011362:	637b      	str	r3, [r7, #52]	; 0x34
 8011364:	e001      	b.n	801136a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011366:	2300      	movs	r3, #0
 8011368:	637b      	str	r3, [r7, #52]	; 0x34
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011376:	4618      	mov	r0, r3
 8011378:	3738      	adds	r7, #56	; 0x38
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801137e:	b480      	push	{r7}
 8011380:	b085      	sub	sp, #20
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138a:	2b00      	cmp	r3, #0
 801138c:	d006      	beq.n	801139c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f1c3 0307 	rsb	r3, r3, #7
 8011398:	60fb      	str	r3, [r7, #12]
 801139a:	e001      	b.n	80113a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801139c:	2300      	movs	r3, #0
 801139e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80113a0:	68fb      	ldr	r3, [r7, #12]
	}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3714      	adds	r7, #20
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr

080113ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b086      	sub	sp, #24
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	60f8      	str	r0, [r7, #12]
 80113b6:	60b9      	str	r1, [r7, #8]
 80113b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113ba:	2300      	movs	r3, #0
 80113bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d10d      	bne.n	80113e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d14d      	bne.n	8011470 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	4618      	mov	r0, r3
 80113da:	f000 ff77 	bl	80122cc <xTaskPriorityDisinherit>
 80113de:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2200      	movs	r2, #0
 80113e4:	605a      	str	r2, [r3, #4]
 80113e6:	e043      	b.n	8011470 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d119      	bne.n	8011422 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	6898      	ldr	r0, [r3, #8]
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f6:	461a      	mov	r2, r3
 80113f8:	68b9      	ldr	r1, [r7, #8]
 80113fa:	f00d f84d 	bl	801e498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	689a      	ldr	r2, [r3, #8]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011406:	441a      	add	r2, r3
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	689a      	ldr	r2, [r3, #8]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	429a      	cmp	r2, r3
 8011416:	d32b      	bcc.n	8011470 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	609a      	str	r2, [r3, #8]
 8011420:	e026      	b.n	8011470 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	68d8      	ldr	r0, [r3, #12]
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801142a:	461a      	mov	r2, r3
 801142c:	68b9      	ldr	r1, [r7, #8]
 801142e:	f00d f833 	bl	801e498 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	68da      	ldr	r2, [r3, #12]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143a:	425b      	negs	r3, r3
 801143c:	441a      	add	r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	68da      	ldr	r2, [r3, #12]
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	429a      	cmp	r2, r3
 801144c:	d207      	bcs.n	801145e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	685a      	ldr	r2, [r3, #4]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011456:	425b      	negs	r3, r3
 8011458:	441a      	add	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2b02      	cmp	r3, #2
 8011462:	d105      	bne.n	8011470 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d002      	beq.n	8011470 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	3b01      	subs	r3, #1
 801146e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011478:	697b      	ldr	r3, [r7, #20]
}
 801147a:	4618      	mov	r0, r3
 801147c:	3718      	adds	r7, #24
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b082      	sub	sp, #8
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
 801148a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011490:	2b00      	cmp	r3, #0
 8011492:	d018      	beq.n	80114c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68da      	ldr	r2, [r3, #12]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801149c:	441a      	add	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68da      	ldr	r2, [r3, #12]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d303      	bcc.n	80114b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	68d9      	ldr	r1, [r3, #12]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114be:	461a      	mov	r2, r3
 80114c0:	6838      	ldr	r0, [r7, #0]
 80114c2:	f00c ffe9 	bl	801e498 <memcpy>
	}
}
 80114c6:	bf00      	nop
 80114c8:	3708      	adds	r7, #8
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}

080114ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80114ce:	b580      	push	{r7, lr}
 80114d0:	b084      	sub	sp, #16
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114d6:	f001 f9a7 	bl	8012828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114e2:	e011      	b.n	8011508 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d012      	beq.n	8011512 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	3324      	adds	r3, #36	; 0x24
 80114f0:	4618      	mov	r0, r3
 80114f2:	f000 fca1 	bl	8011e38 <xTaskRemoveFromEventList>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80114fc:	f000 fd7a 	bl	8011ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	3b01      	subs	r3, #1
 8011504:	b2db      	uxtb	r3, r3
 8011506:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801150c:	2b00      	cmp	r3, #0
 801150e:	dce9      	bgt.n	80114e4 <prvUnlockQueue+0x16>
 8011510:	e000      	b.n	8011514 <prvUnlockQueue+0x46>
					break;
 8011512:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	22ff      	movs	r2, #255	; 0xff
 8011518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801151c:	f001 f9b6 	bl	801288c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011520:	f001 f982 	bl	8012828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801152a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801152c:	e011      	b.n	8011552 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	691b      	ldr	r3, [r3, #16]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d012      	beq.n	801155c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	3310      	adds	r3, #16
 801153a:	4618      	mov	r0, r3
 801153c:	f000 fc7c 	bl	8011e38 <xTaskRemoveFromEventList>
 8011540:	4603      	mov	r3, r0
 8011542:	2b00      	cmp	r3, #0
 8011544:	d001      	beq.n	801154a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011546:	f000 fd55 	bl	8011ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801154a:	7bbb      	ldrb	r3, [r7, #14]
 801154c:	3b01      	subs	r3, #1
 801154e:	b2db      	uxtb	r3, r3
 8011550:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011556:	2b00      	cmp	r3, #0
 8011558:	dce9      	bgt.n	801152e <prvUnlockQueue+0x60>
 801155a:	e000      	b.n	801155e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801155c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	22ff      	movs	r2, #255	; 0xff
 8011562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011566:	f001 f991 	bl	801288c <vPortExitCritical>
}
 801156a:	bf00      	nop
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b084      	sub	sp, #16
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801157a:	f001 f955 	bl	8012828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011582:	2b00      	cmp	r3, #0
 8011584:	d102      	bne.n	801158c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011586:	2301      	movs	r3, #1
 8011588:	60fb      	str	r3, [r7, #12]
 801158a:	e001      	b.n	8011590 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801158c:	2300      	movs	r3, #0
 801158e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011590:	f001 f97c 	bl	801288c <vPortExitCritical>

	return xReturn;
 8011594:	68fb      	ldr	r3, [r7, #12]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3710      	adds	r7, #16
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b084      	sub	sp, #16
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80115a6:	f001 f93f 	bl	8012828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d102      	bne.n	80115bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80115b6:	2301      	movs	r3, #1
 80115b8:	60fb      	str	r3, [r7, #12]
 80115ba:	e001      	b.n	80115c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80115bc:	2300      	movs	r3, #0
 80115be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115c0:	f001 f964 	bl	801288c <vPortExitCritical>

	return xReturn;
 80115c4:	68fb      	ldr	r3, [r7, #12]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b08c      	sub	sp, #48	; 0x30
 80115d2:	af04      	add	r7, sp, #16
 80115d4:	60f8      	str	r0, [r7, #12]
 80115d6:	60b9      	str	r1, [r7, #8]
 80115d8:	603b      	str	r3, [r7, #0]
 80115da:	4613      	mov	r3, r2
 80115dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115de:	88fb      	ldrh	r3, [r7, #6]
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f001 fa42 	bl	8012a6c <pvPortMalloc>
 80115e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00e      	beq.n	801160e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80115f0:	2058      	movs	r0, #88	; 0x58
 80115f2:	f001 fa3b 	bl	8012a6c <pvPortMalloc>
 80115f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	697a      	ldr	r2, [r7, #20]
 8011602:	631a      	str	r2, [r3, #48]	; 0x30
 8011604:	e005      	b.n	8011612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011606:	6978      	ldr	r0, [r7, #20]
 8011608:	f001 fafc 	bl	8012c04 <vPortFree>
 801160c:	e001      	b.n	8011612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801160e:	2300      	movs	r3, #0
 8011610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d013      	beq.n	8011640 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011618:	88fa      	ldrh	r2, [r7, #6]
 801161a:	2300      	movs	r3, #0
 801161c:	9303      	str	r3, [sp, #12]
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	9302      	str	r3, [sp, #8]
 8011622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011628:	9300      	str	r3, [sp, #0]
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	68b9      	ldr	r1, [r7, #8]
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f000 f80e 	bl	8011650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011634:	69f8      	ldr	r0, [r7, #28]
 8011636:	f000 f897 	bl	8011768 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801163a:	2301      	movs	r3, #1
 801163c:	61bb      	str	r3, [r7, #24]
 801163e:	e002      	b.n	8011646 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011640:	f04f 33ff 	mov.w	r3, #4294967295
 8011644:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011646:	69bb      	ldr	r3, [r7, #24]
	}
 8011648:	4618      	mov	r0, r3
 801164a:	3720      	adds	r7, #32
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b088      	sub	sp, #32
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
 801165c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011660:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	461a      	mov	r2, r3
 8011668:	21a5      	movs	r1, #165	; 0xa5
 801166a:	f00c ff20 	bl	801e4ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011672:	6879      	ldr	r1, [r7, #4]
 8011674:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011678:	440b      	add	r3, r1
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	4413      	add	r3, r2
 801167e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	f023 0307 	bic.w	r3, r3, #7
 8011686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	f003 0307 	and.w	r3, r3, #7
 801168e:	2b00      	cmp	r3, #0
 8011690:	d00b      	beq.n	80116aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8011692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011696:	b672      	cpsid	i
 8011698:	f383 8811 	msr	BASEPRI, r3
 801169c:	f3bf 8f6f 	isb	sy
 80116a0:	f3bf 8f4f 	dsb	sy
 80116a4:	b662      	cpsie	i
 80116a6:	617b      	str	r3, [r7, #20]
 80116a8:	e7fe      	b.n	80116a8 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80116aa:	2300      	movs	r3, #0
 80116ac:	61fb      	str	r3, [r7, #28]
 80116ae:	e012      	b.n	80116d6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80116b0:	68ba      	ldr	r2, [r7, #8]
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	4413      	add	r3, r2
 80116b6:	7819      	ldrb	r1, [r3, #0]
 80116b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	4413      	add	r3, r2
 80116be:	3334      	adds	r3, #52	; 0x34
 80116c0:	460a      	mov	r2, r1
 80116c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	4413      	add	r3, r2
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d006      	beq.n	80116de <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	3301      	adds	r3, #1
 80116d4:	61fb      	str	r3, [r7, #28]
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	2b0f      	cmp	r3, #15
 80116da:	d9e9      	bls.n	80116b0 <prvInitialiseNewTask+0x60>
 80116dc:	e000      	b.n	80116e0 <prvInitialiseNewTask+0x90>
		{
			break;
 80116de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80116e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e2:	2200      	movs	r2, #0
 80116e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80116e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ea:	2b06      	cmp	r3, #6
 80116ec:	d901      	bls.n	80116f2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80116ee:	2306      	movs	r3, #6
 80116f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80116f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80116f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80116fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011700:	2200      	movs	r2, #0
 8011702:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011706:	3304      	adds	r3, #4
 8011708:	4618      	mov	r0, r3
 801170a:	f7ff f83b 	bl	8010784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	3318      	adds	r3, #24
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff f836 	bl	8010784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801171c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011720:	f1c3 0207 	rsb	r2, r3, #7
 8011724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011726:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801172c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011730:	2200      	movs	r2, #0
 8011732:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011736:	2200      	movs	r2, #0
 8011738:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173c:	2200      	movs	r2, #0
 801173e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011742:	683a      	ldr	r2, [r7, #0]
 8011744:	68f9      	ldr	r1, [r7, #12]
 8011746:	69b8      	ldr	r0, [r7, #24]
 8011748:	f000 ff64 	bl	8012614 <pxPortInitialiseStack>
 801174c:	4602      	mov	r2, r0
 801174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011750:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011754:	2b00      	cmp	r3, #0
 8011756:	d002      	beq.n	801175e <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801175c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801175e:	bf00      	nop
 8011760:	3720      	adds	r7, #32
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
	...

08011768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011770:	f001 f85a 	bl	8012828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011774:	4b2a      	ldr	r3, [pc, #168]	; (8011820 <prvAddNewTaskToReadyList+0xb8>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	3301      	adds	r3, #1
 801177a:	4a29      	ldr	r2, [pc, #164]	; (8011820 <prvAddNewTaskToReadyList+0xb8>)
 801177c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801177e:	4b29      	ldr	r3, [pc, #164]	; (8011824 <prvAddNewTaskToReadyList+0xbc>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d109      	bne.n	801179a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011786:	4a27      	ldr	r2, [pc, #156]	; (8011824 <prvAddNewTaskToReadyList+0xbc>)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801178c:	4b24      	ldr	r3, [pc, #144]	; (8011820 <prvAddNewTaskToReadyList+0xb8>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b01      	cmp	r3, #1
 8011792:	d110      	bne.n	80117b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011794:	f000 fc54 	bl	8012040 <prvInitialiseTaskLists>
 8011798:	e00d      	b.n	80117b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801179a:	4b23      	ldr	r3, [pc, #140]	; (8011828 <prvAddNewTaskToReadyList+0xc0>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d109      	bne.n	80117b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80117a2:	4b20      	ldr	r3, [pc, #128]	; (8011824 <prvAddNewTaskToReadyList+0xbc>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d802      	bhi.n	80117b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80117b0:	4a1c      	ldr	r2, [pc, #112]	; (8011824 <prvAddNewTaskToReadyList+0xbc>)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80117b6:	4b1d      	ldr	r3, [pc, #116]	; (801182c <prvAddNewTaskToReadyList+0xc4>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3301      	adds	r3, #1
 80117bc:	4a1b      	ldr	r2, [pc, #108]	; (801182c <prvAddNewTaskToReadyList+0xc4>)
 80117be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c4:	2201      	movs	r2, #1
 80117c6:	409a      	lsls	r2, r3
 80117c8:	4b19      	ldr	r3, [pc, #100]	; (8011830 <prvAddNewTaskToReadyList+0xc8>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4313      	orrs	r3, r2
 80117ce:	4a18      	ldr	r2, [pc, #96]	; (8011830 <prvAddNewTaskToReadyList+0xc8>)
 80117d0:	6013      	str	r3, [r2, #0]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117d6:	4613      	mov	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	4a15      	ldr	r2, [pc, #84]	; (8011834 <prvAddNewTaskToReadyList+0xcc>)
 80117e0:	441a      	add	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	3304      	adds	r3, #4
 80117e6:	4619      	mov	r1, r3
 80117e8:	4610      	mov	r0, r2
 80117ea:	f7fe ffd8 	bl	801079e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80117ee:	f001 f84d 	bl	801288c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80117f2:	4b0d      	ldr	r3, [pc, #52]	; (8011828 <prvAddNewTaskToReadyList+0xc0>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00e      	beq.n	8011818 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80117fa:	4b0a      	ldr	r3, [pc, #40]	; (8011824 <prvAddNewTaskToReadyList+0xbc>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011804:	429a      	cmp	r2, r3
 8011806:	d207      	bcs.n	8011818 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011808:	4b0b      	ldr	r3, [pc, #44]	; (8011838 <prvAddNewTaskToReadyList+0xd0>)
 801180a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801180e:	601a      	str	r2, [r3, #0]
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	200002a0 	.word	0x200002a0
 8011824:	200001a0 	.word	0x200001a0
 8011828:	200002ac 	.word	0x200002ac
 801182c:	200002bc 	.word	0x200002bc
 8011830:	200002a8 	.word	0x200002a8
 8011834:	200001a4 	.word	0x200001a4
 8011838:	e000ed04 	.word	0xe000ed04

0801183c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011844:	2300      	movs	r3, #0
 8011846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d018      	beq.n	8011880 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801184e:	4b14      	ldr	r3, [pc, #80]	; (80118a0 <vTaskDelay+0x64>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d00b      	beq.n	801186e <vTaskDelay+0x32>
 8011856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801185a:	b672      	cpsid	i
 801185c:	f383 8811 	msr	BASEPRI, r3
 8011860:	f3bf 8f6f 	isb	sy
 8011864:	f3bf 8f4f 	dsb	sy
 8011868:	b662      	cpsie	i
 801186a:	60bb      	str	r3, [r7, #8]
 801186c:	e7fe      	b.n	801186c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801186e:	f000 f865 	bl	801193c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011872:	2100      	movs	r1, #0
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 fe67 	bl	8012548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801187a:	f000 f86d 	bl	8011958 <xTaskResumeAll>
 801187e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d107      	bne.n	8011896 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011886:	4b07      	ldr	r3, [pc, #28]	; (80118a4 <vTaskDelay+0x68>)
 8011888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801188c:	601a      	str	r2, [r3, #0]
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011896:	bf00      	nop
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	200002c8 	.word	0x200002c8
 80118a4:	e000ed04 	.word	0xe000ed04

080118a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b086      	sub	sp, #24
 80118ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80118ae:	4b1d      	ldr	r3, [pc, #116]	; (8011924 <vTaskStartScheduler+0x7c>)
 80118b0:	9301      	str	r3, [sp, #4]
 80118b2:	2300      	movs	r3, #0
 80118b4:	9300      	str	r3, [sp, #0]
 80118b6:	2300      	movs	r3, #0
 80118b8:	2280      	movs	r2, #128	; 0x80
 80118ba:	491b      	ldr	r1, [pc, #108]	; (8011928 <vTaskStartScheduler+0x80>)
 80118bc:	481b      	ldr	r0, [pc, #108]	; (801192c <vTaskStartScheduler+0x84>)
 80118be:	f7ff fe86 	bl	80115ce <xTaskCreate>
 80118c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d117      	bne.n	80118fa <vTaskStartScheduler+0x52>
 80118ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ce:	b672      	cpsid	i
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	b662      	cpsie	i
 80118de:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80118e0:	4b13      	ldr	r3, [pc, #76]	; (8011930 <vTaskStartScheduler+0x88>)
 80118e2:	f04f 32ff 	mov.w	r2, #4294967295
 80118e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80118e8:	4b12      	ldr	r3, [pc, #72]	; (8011934 <vTaskStartScheduler+0x8c>)
 80118ea:	2201      	movs	r2, #1
 80118ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80118ee:	4b12      	ldr	r3, [pc, #72]	; (8011938 <vTaskStartScheduler+0x90>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80118f4:	f000 ff1c 	bl	8012730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80118f8:	e00f      	b.n	801191a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011900:	d10b      	bne.n	801191a <vTaskStartScheduler+0x72>
 8011902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011906:	b672      	cpsid	i
 8011908:	f383 8811 	msr	BASEPRI, r3
 801190c:	f3bf 8f6f 	isb	sy
 8011910:	f3bf 8f4f 	dsb	sy
 8011914:	b662      	cpsie	i
 8011916:	607b      	str	r3, [r7, #4]
 8011918:	e7fe      	b.n	8011918 <vTaskStartScheduler+0x70>
}
 801191a:	bf00      	nop
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	200002c4 	.word	0x200002c4
 8011928:	0801f7f0 	.word	0x0801f7f0
 801192c:	0801200d 	.word	0x0801200d
 8011930:	200002c0 	.word	0x200002c0
 8011934:	200002ac 	.word	0x200002ac
 8011938:	200002a4 	.word	0x200002a4

0801193c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801193c:	b480      	push	{r7}
 801193e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011940:	4b04      	ldr	r3, [pc, #16]	; (8011954 <vTaskSuspendAll+0x18>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	3301      	adds	r3, #1
 8011946:	4a03      	ldr	r2, [pc, #12]	; (8011954 <vTaskSuspendAll+0x18>)
 8011948:	6013      	str	r3, [r2, #0]
}
 801194a:	bf00      	nop
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	200002c8 	.word	0x200002c8

08011958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801195e:	2300      	movs	r3, #0
 8011960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011962:	2300      	movs	r3, #0
 8011964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011966:	4b42      	ldr	r3, [pc, #264]	; (8011a70 <xTaskResumeAll+0x118>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d10b      	bne.n	8011986 <xTaskResumeAll+0x2e>
 801196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011972:	b672      	cpsid	i
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	b662      	cpsie	i
 8011982:	603b      	str	r3, [r7, #0]
 8011984:	e7fe      	b.n	8011984 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011986:	f000 ff4f 	bl	8012828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801198a:	4b39      	ldr	r3, [pc, #228]	; (8011a70 <xTaskResumeAll+0x118>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	3b01      	subs	r3, #1
 8011990:	4a37      	ldr	r2, [pc, #220]	; (8011a70 <xTaskResumeAll+0x118>)
 8011992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011994:	4b36      	ldr	r3, [pc, #216]	; (8011a70 <xTaskResumeAll+0x118>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d161      	bne.n	8011a60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801199c:	4b35      	ldr	r3, [pc, #212]	; (8011a74 <xTaskResumeAll+0x11c>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d05d      	beq.n	8011a60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80119a4:	e02e      	b.n	8011a04 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80119a6:	4b34      	ldr	r3, [pc, #208]	; (8011a78 <xTaskResumeAll+0x120>)
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	3318      	adds	r3, #24
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe ff50 	bl	8010858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	3304      	adds	r3, #4
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fe ff4b 	bl	8010858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c6:	2201      	movs	r2, #1
 80119c8:	409a      	lsls	r2, r3
 80119ca:	4b2c      	ldr	r3, [pc, #176]	; (8011a7c <xTaskResumeAll+0x124>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	4313      	orrs	r3, r2
 80119d0:	4a2a      	ldr	r2, [pc, #168]	; (8011a7c <xTaskResumeAll+0x124>)
 80119d2:	6013      	str	r3, [r2, #0]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119d8:	4613      	mov	r3, r2
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	4413      	add	r3, r2
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4a27      	ldr	r2, [pc, #156]	; (8011a80 <xTaskResumeAll+0x128>)
 80119e2:	441a      	add	r2, r3
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	3304      	adds	r3, #4
 80119e8:	4619      	mov	r1, r3
 80119ea:	4610      	mov	r0, r2
 80119ec:	f7fe fed7 	bl	801079e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f4:	4b23      	ldr	r3, [pc, #140]	; (8011a84 <xTaskResumeAll+0x12c>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d302      	bcc.n	8011a04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80119fe:	4b22      	ldr	r3, [pc, #136]	; (8011a88 <xTaskResumeAll+0x130>)
 8011a00:	2201      	movs	r2, #1
 8011a02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a04:	4b1c      	ldr	r3, [pc, #112]	; (8011a78 <xTaskResumeAll+0x120>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1cc      	bne.n	80119a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d001      	beq.n	8011a16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011a12:	f000 fb91 	bl	8012138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011a16:	4b1d      	ldr	r3, [pc, #116]	; (8011a8c <xTaskResumeAll+0x134>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d010      	beq.n	8011a44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011a22:	f000 f859 	bl	8011ad8 <xTaskIncrementTick>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011a2c:	4b16      	ldr	r3, [pc, #88]	; (8011a88 <xTaskResumeAll+0x130>)
 8011a2e:	2201      	movs	r2, #1
 8011a30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1f1      	bne.n	8011a22 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011a3e:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <xTaskResumeAll+0x134>)
 8011a40:	2200      	movs	r2, #0
 8011a42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011a44:	4b10      	ldr	r3, [pc, #64]	; (8011a88 <xTaskResumeAll+0x130>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d009      	beq.n	8011a60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011a50:	4b0f      	ldr	r3, [pc, #60]	; (8011a90 <xTaskResumeAll+0x138>)
 8011a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a56:	601a      	str	r2, [r3, #0]
 8011a58:	f3bf 8f4f 	dsb	sy
 8011a5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a60:	f000 ff14 	bl	801288c <vPortExitCritical>

	return xAlreadyYielded;
 8011a64:	68bb      	ldr	r3, [r7, #8]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	200002c8 	.word	0x200002c8
 8011a74:	200002a0 	.word	0x200002a0
 8011a78:	20000260 	.word	0x20000260
 8011a7c:	200002a8 	.word	0x200002a8
 8011a80:	200001a4 	.word	0x200001a4
 8011a84:	200001a0 	.word	0x200001a0
 8011a88:	200002b4 	.word	0x200002b4
 8011a8c:	200002b0 	.word	0x200002b0
 8011a90:	e000ed04 	.word	0xe000ed04

08011a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <xTaskGetTickCount+0x1c>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011aa0:	687b      	ldr	r3, [r7, #4]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	200002a4 	.word	0x200002a4

08011ab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011aba:	f000 ff95 	bl	80129e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011abe:	2300      	movs	r3, #0
 8011ac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011ac2:	4b04      	ldr	r3, [pc, #16]	; (8011ad4 <xTaskGetTickCountFromISR+0x20>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ac8:	683b      	ldr	r3, [r7, #0]
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3708      	adds	r7, #8
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	200002a4 	.word	0x200002a4

08011ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b086      	sub	sp, #24
 8011adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ae2:	4b51      	ldr	r3, [pc, #324]	; (8011c28 <xTaskIncrementTick+0x150>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f040 808e 	bne.w	8011c08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011aec:	4b4f      	ldr	r3, [pc, #316]	; (8011c2c <xTaskIncrementTick+0x154>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	3301      	adds	r3, #1
 8011af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011af4:	4a4d      	ldr	r2, [pc, #308]	; (8011c2c <xTaskIncrementTick+0x154>)
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d121      	bne.n	8011b44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011b00:	4b4b      	ldr	r3, [pc, #300]	; (8011c30 <xTaskIncrementTick+0x158>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d00b      	beq.n	8011b22 <xTaskIncrementTick+0x4a>
 8011b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0e:	b672      	cpsid	i
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	b662      	cpsie	i
 8011b1e:	603b      	str	r3, [r7, #0]
 8011b20:	e7fe      	b.n	8011b20 <xTaskIncrementTick+0x48>
 8011b22:	4b43      	ldr	r3, [pc, #268]	; (8011c30 <xTaskIncrementTick+0x158>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	60fb      	str	r3, [r7, #12]
 8011b28:	4b42      	ldr	r3, [pc, #264]	; (8011c34 <xTaskIncrementTick+0x15c>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4a40      	ldr	r2, [pc, #256]	; (8011c30 <xTaskIncrementTick+0x158>)
 8011b2e:	6013      	str	r3, [r2, #0]
 8011b30:	4a40      	ldr	r2, [pc, #256]	; (8011c34 <xTaskIncrementTick+0x15c>)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	6013      	str	r3, [r2, #0]
 8011b36:	4b40      	ldr	r3, [pc, #256]	; (8011c38 <xTaskIncrementTick+0x160>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	4a3e      	ldr	r2, [pc, #248]	; (8011c38 <xTaskIncrementTick+0x160>)
 8011b3e:	6013      	str	r3, [r2, #0]
 8011b40:	f000 fafa 	bl	8012138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b44:	4b3d      	ldr	r3, [pc, #244]	; (8011c3c <xTaskIncrementTick+0x164>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	693a      	ldr	r2, [r7, #16]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d34d      	bcc.n	8011bea <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b4e:	4b38      	ldr	r3, [pc, #224]	; (8011c30 <xTaskIncrementTick+0x158>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d101      	bne.n	8011b5c <xTaskIncrementTick+0x84>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	e000      	b.n	8011b5e <xTaskIncrementTick+0x86>
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d004      	beq.n	8011b6c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b62:	4b36      	ldr	r3, [pc, #216]	; (8011c3c <xTaskIncrementTick+0x164>)
 8011b64:	f04f 32ff 	mov.w	r2, #4294967295
 8011b68:	601a      	str	r2, [r3, #0]
					break;
 8011b6a:	e03e      	b.n	8011bea <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011b6c:	4b30      	ldr	r3, [pc, #192]	; (8011c30 <xTaskIncrementTick+0x158>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011b7c:	693a      	ldr	r2, [r7, #16]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d203      	bcs.n	8011b8c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011b84:	4a2d      	ldr	r2, [pc, #180]	; (8011c3c <xTaskIncrementTick+0x164>)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6013      	str	r3, [r2, #0]
						break;
 8011b8a:	e02e      	b.n	8011bea <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	3304      	adds	r3, #4
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7fe fe61 	bl	8010858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d004      	beq.n	8011ba8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	3318      	adds	r3, #24
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fe fe58 	bl	8010858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bac:	2201      	movs	r2, #1
 8011bae:	409a      	lsls	r2, r3
 8011bb0:	4b23      	ldr	r3, [pc, #140]	; (8011c40 <xTaskIncrementTick+0x168>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4313      	orrs	r3, r2
 8011bb6:	4a22      	ldr	r2, [pc, #136]	; (8011c40 <xTaskIncrementTick+0x168>)
 8011bb8:	6013      	str	r3, [r2, #0]
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4a1f      	ldr	r2, [pc, #124]	; (8011c44 <xTaskIncrementTick+0x16c>)
 8011bc8:	441a      	add	r2, r3
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	3304      	adds	r3, #4
 8011bce:	4619      	mov	r1, r3
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	f7fe fde4 	bl	801079e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bda:	4b1b      	ldr	r3, [pc, #108]	; (8011c48 <xTaskIncrementTick+0x170>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d3b4      	bcc.n	8011b4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011be4:	2301      	movs	r3, #1
 8011be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011be8:	e7b1      	b.n	8011b4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011bea:	4b17      	ldr	r3, [pc, #92]	; (8011c48 <xTaskIncrementTick+0x170>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bf0:	4914      	ldr	r1, [pc, #80]	; (8011c44 <xTaskIncrementTick+0x16c>)
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	4413      	add	r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	440b      	add	r3, r1
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d907      	bls.n	8011c12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011c02:	2301      	movs	r3, #1
 8011c04:	617b      	str	r3, [r7, #20]
 8011c06:	e004      	b.n	8011c12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011c08:	4b10      	ldr	r3, [pc, #64]	; (8011c4c <xTaskIncrementTick+0x174>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	4a0f      	ldr	r2, [pc, #60]	; (8011c4c <xTaskIncrementTick+0x174>)
 8011c10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011c12:	4b0f      	ldr	r3, [pc, #60]	; (8011c50 <xTaskIncrementTick+0x178>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011c1e:	697b      	ldr	r3, [r7, #20]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3718      	adds	r7, #24
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	200002c8 	.word	0x200002c8
 8011c2c:	200002a4 	.word	0x200002a4
 8011c30:	20000258 	.word	0x20000258
 8011c34:	2000025c 	.word	0x2000025c
 8011c38:	200002b8 	.word	0x200002b8
 8011c3c:	200002c0 	.word	0x200002c0
 8011c40:	200002a8 	.word	0x200002a8
 8011c44:	200001a4 	.word	0x200001a4
 8011c48:	200001a0 	.word	0x200001a0
 8011c4c:	200002b0 	.word	0x200002b0
 8011c50:	200002b4 	.word	0x200002b4

08011c54 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d103      	bne.n	8011c6c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011c64:	4b08      	ldr	r3, [pc, #32]	; (8011c88 <vTaskSetApplicationTaskTag+0x34>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	60fb      	str	r3, [r7, #12]
 8011c6a:	e001      	b.n	8011c70 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8011c70:	f000 fdda 	bl	8012828 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	683a      	ldr	r2, [r7, #0]
 8011c78:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8011c7a:	f000 fe07 	bl	801288c <vPortExitCritical>
	}
 8011c7e:	bf00      	nop
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	200001a0 	.word	0x200001a0

08011c8c <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d103      	bne.n	8011ca4 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011c9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ccc <xTaskCallApplicationTaskHook+0x40>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	60fb      	str	r3, [r7, #12]
 8011ca2:	e001      	b.n	8011ca8 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d005      	beq.n	8011cbc <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cb4:	6838      	ldr	r0, [r7, #0]
 8011cb6:	4798      	blx	r3
 8011cb8:	60b8      	str	r0, [r7, #8]
 8011cba:	e001      	b.n	8011cc0 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8011cc0:	68bb      	ldr	r3, [r7, #8]
	}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	200001a0 	.word	0x200001a0

08011cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011cd6:	4b40      	ldr	r3, [pc, #256]	; (8011dd8 <vTaskSwitchContext+0x108>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d003      	beq.n	8011ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011cde:	4b3f      	ldr	r3, [pc, #252]	; (8011ddc <vTaskSwitchContext+0x10c>)
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011ce4:	e073      	b.n	8011dce <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 8011ce6:	4b3d      	ldr	r3, [pc, #244]	; (8011ddc <vTaskSwitchContext+0x10c>)
 8011ce8:	2200      	movs	r2, #0
 8011cea:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8011cec:	4b3c      	ldr	r3, [pc, #240]	; (8011de0 <vTaskSwitchContext+0x110>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2101      	movs	r1, #1
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7ff ffca 	bl	8011c8c <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8011cf8:	4b39      	ldr	r3, [pc, #228]	; (8011de0 <vTaskSwitchContext+0x110>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cfe:	61fb      	str	r3, [r7, #28]
 8011d00:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011d04:	61bb      	str	r3, [r7, #24]
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	69ba      	ldr	r2, [r7, #24]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d111      	bne.n	8011d34 <vTaskSwitchContext+0x64>
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	3304      	adds	r3, #4
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d10b      	bne.n	8011d34 <vTaskSwitchContext+0x64>
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	3308      	adds	r3, #8
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	69ba      	ldr	r2, [r7, #24]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d105      	bne.n	8011d34 <vTaskSwitchContext+0x64>
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	330c      	adds	r3, #12
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	69ba      	ldr	r2, [r7, #24]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d008      	beq.n	8011d46 <vTaskSwitchContext+0x76>
 8011d34:	4b2a      	ldr	r3, [pc, #168]	; (8011de0 <vTaskSwitchContext+0x110>)
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	4b29      	ldr	r3, [pc, #164]	; (8011de0 <vTaskSwitchContext+0x110>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	3334      	adds	r3, #52	; 0x34
 8011d3e:	4619      	mov	r1, r3
 8011d40:	4610      	mov	r0, r2
 8011d42:	f7fe fb3e 	bl	80103c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011d46:	4b27      	ldr	r3, [pc, #156]	; (8011de4 <vTaskSwitchContext+0x114>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	fab3 f383 	clz	r3, r3
 8011d52:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011d54:	7afb      	ldrb	r3, [r7, #11]
 8011d56:	f1c3 031f 	rsb	r3, r3, #31
 8011d5a:	617b      	str	r3, [r7, #20]
 8011d5c:	4922      	ldr	r1, [pc, #136]	; (8011de8 <vTaskSwitchContext+0x118>)
 8011d5e:	697a      	ldr	r2, [r7, #20]
 8011d60:	4613      	mov	r3, r2
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	440b      	add	r3, r1
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d10b      	bne.n	8011d88 <vTaskSwitchContext+0xb8>
	__asm volatile
 8011d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d74:	b672      	cpsid	i
 8011d76:	f383 8811 	msr	BASEPRI, r3
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	b662      	cpsie	i
 8011d84:	607b      	str	r3, [r7, #4]
 8011d86:	e7fe      	b.n	8011d86 <vTaskSwitchContext+0xb6>
 8011d88:	697a      	ldr	r2, [r7, #20]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	009b      	lsls	r3, r3, #2
 8011d8e:	4413      	add	r3, r2
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	4a15      	ldr	r2, [pc, #84]	; (8011de8 <vTaskSwitchContext+0x118>)
 8011d94:	4413      	add	r3, r2
 8011d96:	613b      	str	r3, [r7, #16]
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	685a      	ldr	r2, [r3, #4]
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	605a      	str	r2, [r3, #4]
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	685a      	ldr	r2, [r3, #4]
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	3308      	adds	r3, #8
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d104      	bne.n	8011db8 <vTaskSwitchContext+0xe8>
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	605a      	str	r2, [r3, #4]
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	4a08      	ldr	r2, [pc, #32]	; (8011de0 <vTaskSwitchContext+0x110>)
 8011dc0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8011dc2:	4b07      	ldr	r3, [pc, #28]	; (8011de0 <vTaskSwitchContext+0x110>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7ff ff5f 	bl	8011c8c <xTaskCallApplicationTaskHook>
}
 8011dce:	bf00      	nop
 8011dd0:	3720      	adds	r7, #32
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	200002c8 	.word	0x200002c8
 8011ddc:	200002b4 	.word	0x200002b4
 8011de0:	200001a0 	.word	0x200001a0
 8011de4:	200002a8 	.word	0x200002a8
 8011de8:	200001a4 	.word	0x200001a4

08011dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d10b      	bne.n	8011e14 <vTaskPlaceOnEventList+0x28>
 8011dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e00:	b672      	cpsid	i
 8011e02:	f383 8811 	msr	BASEPRI, r3
 8011e06:	f3bf 8f6f 	isb	sy
 8011e0a:	f3bf 8f4f 	dsb	sy
 8011e0e:	b662      	cpsie	i
 8011e10:	60fb      	str	r3, [r7, #12]
 8011e12:	e7fe      	b.n	8011e12 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e14:	4b07      	ldr	r3, [pc, #28]	; (8011e34 <vTaskPlaceOnEventList+0x48>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	3318      	adds	r3, #24
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7fe fce2 	bl	80107e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e22:	2101      	movs	r1, #1
 8011e24:	6838      	ldr	r0, [r7, #0]
 8011e26:	f000 fb8f 	bl	8012548 <prvAddCurrentTaskToDelayedList>
}
 8011e2a:	bf00      	nop
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	200001a0 	.word	0x200001a0

08011e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10b      	bne.n	8011e66 <xTaskRemoveFromEventList+0x2e>
 8011e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e52:	b672      	cpsid	i
 8011e54:	f383 8811 	msr	BASEPRI, r3
 8011e58:	f3bf 8f6f 	isb	sy
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	b662      	cpsie	i
 8011e62:	60fb      	str	r3, [r7, #12]
 8011e64:	e7fe      	b.n	8011e64 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	3318      	adds	r3, #24
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fe fcf4 	bl	8010858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e70:	4b1d      	ldr	r3, [pc, #116]	; (8011ee8 <xTaskRemoveFromEventList+0xb0>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d11c      	bne.n	8011eb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	3304      	adds	r3, #4
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fe fceb 	bl	8010858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e86:	2201      	movs	r2, #1
 8011e88:	409a      	lsls	r2, r3
 8011e8a:	4b18      	ldr	r3, [pc, #96]	; (8011eec <xTaskRemoveFromEventList+0xb4>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	4a16      	ldr	r2, [pc, #88]	; (8011eec <xTaskRemoveFromEventList+0xb4>)
 8011e92:	6013      	str	r3, [r2, #0]
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e98:	4613      	mov	r3, r2
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	4413      	add	r3, r2
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	4a13      	ldr	r2, [pc, #76]	; (8011ef0 <xTaskRemoveFromEventList+0xb8>)
 8011ea2:	441a      	add	r2, r3
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	4610      	mov	r0, r2
 8011eac:	f7fe fc77 	bl	801079e <vListInsertEnd>
 8011eb0:	e005      	b.n	8011ebe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	3318      	adds	r3, #24
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	480e      	ldr	r0, [pc, #56]	; (8011ef4 <xTaskRemoveFromEventList+0xbc>)
 8011eba:	f7fe fc70 	bl	801079e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec2:	4b0d      	ldr	r3, [pc, #52]	; (8011ef8 <xTaskRemoveFromEventList+0xc0>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d905      	bls.n	8011ed8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011ed0:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <xTaskRemoveFromEventList+0xc4>)
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	601a      	str	r2, [r3, #0]
 8011ed6:	e001      	b.n	8011edc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011edc:	697b      	ldr	r3, [r7, #20]
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3718      	adds	r7, #24
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	200002c8 	.word	0x200002c8
 8011eec:	200002a8 	.word	0x200002a8
 8011ef0:	200001a4 	.word	0x200001a4
 8011ef4:	20000260 	.word	0x20000260
 8011ef8:	200001a0 	.word	0x200001a0
 8011efc:	200002b4 	.word	0x200002b4

08011f00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011f00:	b480      	push	{r7}
 8011f02:	b083      	sub	sp, #12
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f08:	4b06      	ldr	r3, [pc, #24]	; (8011f24 <vTaskInternalSetTimeOutState+0x24>)
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f10:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <vTaskInternalSetTimeOutState+0x28>)
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	605a      	str	r2, [r3, #4]
}
 8011f18:	bf00      	nop
 8011f1a:	370c      	adds	r7, #12
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr
 8011f24:	200002b8 	.word	0x200002b8
 8011f28:	200002a4 	.word	0x200002a4

08011f2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b088      	sub	sp, #32
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10b      	bne.n	8011f54 <xTaskCheckForTimeOut+0x28>
 8011f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f40:	b672      	cpsid	i
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	b662      	cpsie	i
 8011f50:	613b      	str	r3, [r7, #16]
 8011f52:	e7fe      	b.n	8011f52 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d10b      	bne.n	8011f72 <xTaskCheckForTimeOut+0x46>
 8011f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5e:	b672      	cpsid	i
 8011f60:	f383 8811 	msr	BASEPRI, r3
 8011f64:	f3bf 8f6f 	isb	sy
 8011f68:	f3bf 8f4f 	dsb	sy
 8011f6c:	b662      	cpsie	i
 8011f6e:	60fb      	str	r3, [r7, #12]
 8011f70:	e7fe      	b.n	8011f70 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011f72:	f000 fc59 	bl	8012828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011f76:	4b1d      	ldr	r3, [pc, #116]	; (8011fec <xTaskCheckForTimeOut+0xc0>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	69ba      	ldr	r2, [r7, #24]
 8011f82:	1ad3      	subs	r3, r2, r3
 8011f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f8e:	d102      	bne.n	8011f96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011f90:	2300      	movs	r3, #0
 8011f92:	61fb      	str	r3, [r7, #28]
 8011f94:	e023      	b.n	8011fde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	4b15      	ldr	r3, [pc, #84]	; (8011ff0 <xTaskCheckForTimeOut+0xc4>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d007      	beq.n	8011fb2 <xTaskCheckForTimeOut+0x86>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	69ba      	ldr	r2, [r7, #24]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d302      	bcc.n	8011fb2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011fac:	2301      	movs	r3, #1
 8011fae:	61fb      	str	r3, [r7, #28]
 8011fb0:	e015      	b.n	8011fde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	697a      	ldr	r2, [r7, #20]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d20b      	bcs.n	8011fd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	1ad2      	subs	r2, r2, r3
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff ff99 	bl	8011f00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	61fb      	str	r3, [r7, #28]
 8011fd2:	e004      	b.n	8011fde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011fde:	f000 fc55 	bl	801288c <vPortExitCritical>

	return xReturn;
 8011fe2:	69fb      	ldr	r3, [r7, #28]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3720      	adds	r7, #32
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	200002a4 	.word	0x200002a4
 8011ff0:	200002b8 	.word	0x200002b8

08011ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011ff8:	4b03      	ldr	r3, [pc, #12]	; (8012008 <vTaskMissedYield+0x14>)
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	601a      	str	r2, [r3, #0]
}
 8011ffe:	bf00      	nop
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr
 8012008:	200002b4 	.word	0x200002b4

0801200c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012014:	f000 f854 	bl	80120c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012018:	4b07      	ldr	r3, [pc, #28]	; (8012038 <prvIdleTask+0x2c>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d907      	bls.n	8012030 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012020:	4b06      	ldr	r3, [pc, #24]	; (801203c <prvIdleTask+0x30>)
 8012022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012026:	601a      	str	r2, [r3, #0]
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012030:	f7fe f9d4 	bl	80103dc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012034:	e7ee      	b.n	8012014 <prvIdleTask+0x8>
 8012036:	bf00      	nop
 8012038:	200001a4 	.word	0x200001a4
 801203c:	e000ed04 	.word	0xe000ed04

08012040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012046:	2300      	movs	r3, #0
 8012048:	607b      	str	r3, [r7, #4]
 801204a:	e00c      	b.n	8012066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	4613      	mov	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4413      	add	r3, r2
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	4a12      	ldr	r2, [pc, #72]	; (80120a0 <prvInitialiseTaskLists+0x60>)
 8012058:	4413      	add	r3, r2
 801205a:	4618      	mov	r0, r3
 801205c:	f7fe fb72 	bl	8010744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	3301      	adds	r3, #1
 8012064:	607b      	str	r3, [r7, #4]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2b06      	cmp	r3, #6
 801206a:	d9ef      	bls.n	801204c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801206c:	480d      	ldr	r0, [pc, #52]	; (80120a4 <prvInitialiseTaskLists+0x64>)
 801206e:	f7fe fb69 	bl	8010744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012072:	480d      	ldr	r0, [pc, #52]	; (80120a8 <prvInitialiseTaskLists+0x68>)
 8012074:	f7fe fb66 	bl	8010744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012078:	480c      	ldr	r0, [pc, #48]	; (80120ac <prvInitialiseTaskLists+0x6c>)
 801207a:	f7fe fb63 	bl	8010744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801207e:	480c      	ldr	r0, [pc, #48]	; (80120b0 <prvInitialiseTaskLists+0x70>)
 8012080:	f7fe fb60 	bl	8010744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012084:	480b      	ldr	r0, [pc, #44]	; (80120b4 <prvInitialiseTaskLists+0x74>)
 8012086:	f7fe fb5d 	bl	8010744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801208a:	4b0b      	ldr	r3, [pc, #44]	; (80120b8 <prvInitialiseTaskLists+0x78>)
 801208c:	4a05      	ldr	r2, [pc, #20]	; (80120a4 <prvInitialiseTaskLists+0x64>)
 801208e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012090:	4b0a      	ldr	r3, [pc, #40]	; (80120bc <prvInitialiseTaskLists+0x7c>)
 8012092:	4a05      	ldr	r2, [pc, #20]	; (80120a8 <prvInitialiseTaskLists+0x68>)
 8012094:	601a      	str	r2, [r3, #0]
}
 8012096:	bf00      	nop
 8012098:	3708      	adds	r7, #8
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	200001a4 	.word	0x200001a4
 80120a4:	20000230 	.word	0x20000230
 80120a8:	20000244 	.word	0x20000244
 80120ac:	20000260 	.word	0x20000260
 80120b0:	20000274 	.word	0x20000274
 80120b4:	2000028c 	.word	0x2000028c
 80120b8:	20000258 	.word	0x20000258
 80120bc:	2000025c 	.word	0x2000025c

080120c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120c6:	e019      	b.n	80120fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80120c8:	f000 fbae 	bl	8012828 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80120cc:	4b0f      	ldr	r3, [pc, #60]	; (801210c <prvCheckTasksWaitingTermination+0x4c>)
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	3304      	adds	r3, #4
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fe fbbd 	bl	8010858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80120de:	4b0c      	ldr	r3, [pc, #48]	; (8012110 <prvCheckTasksWaitingTermination+0x50>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	3b01      	subs	r3, #1
 80120e4:	4a0a      	ldr	r2, [pc, #40]	; (8012110 <prvCheckTasksWaitingTermination+0x50>)
 80120e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80120e8:	4b0a      	ldr	r3, [pc, #40]	; (8012114 <prvCheckTasksWaitingTermination+0x54>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	3b01      	subs	r3, #1
 80120ee:	4a09      	ldr	r2, [pc, #36]	; (8012114 <prvCheckTasksWaitingTermination+0x54>)
 80120f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80120f2:	f000 fbcb 	bl	801288c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 f80e 	bl	8012118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120fc:	4b05      	ldr	r3, [pc, #20]	; (8012114 <prvCheckTasksWaitingTermination+0x54>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1e1      	bne.n	80120c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012104:	bf00      	nop
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	20000274 	.word	0x20000274
 8012110:	200002a0 	.word	0x200002a0
 8012114:	20000288 	.word	0x20000288

08012118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012124:	4618      	mov	r0, r3
 8012126:	f000 fd6d 	bl	8012c04 <vPortFree>
			vPortFree( pxTCB );
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 fd6a 	bl	8012c04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801213e:	4b0f      	ldr	r3, [pc, #60]	; (801217c <prvResetNextTaskUnblockTime+0x44>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <prvResetNextTaskUnblockTime+0x14>
 8012148:	2301      	movs	r3, #1
 801214a:	e000      	b.n	801214e <prvResetNextTaskUnblockTime+0x16>
 801214c:	2300      	movs	r3, #0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d004      	beq.n	801215c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012152:	4b0b      	ldr	r3, [pc, #44]	; (8012180 <prvResetNextTaskUnblockTime+0x48>)
 8012154:	f04f 32ff 	mov.w	r2, #4294967295
 8012158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801215a:	e008      	b.n	801216e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801215c:	4b07      	ldr	r3, [pc, #28]	; (801217c <prvResetNextTaskUnblockTime+0x44>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	4a05      	ldr	r2, [pc, #20]	; (8012180 <prvResetNextTaskUnblockTime+0x48>)
 801216c:	6013      	str	r3, [r2, #0]
}
 801216e:	bf00      	nop
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop
 801217c:	20000258 	.word	0x20000258
 8012180:	200002c0 	.word	0x200002c0

08012184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801218a:	4b0b      	ldr	r3, [pc, #44]	; (80121b8 <xTaskGetSchedulerState+0x34>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d102      	bne.n	8012198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012192:	2301      	movs	r3, #1
 8012194:	607b      	str	r3, [r7, #4]
 8012196:	e008      	b.n	80121aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012198:	4b08      	ldr	r3, [pc, #32]	; (80121bc <xTaskGetSchedulerState+0x38>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d102      	bne.n	80121a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80121a0:	2302      	movs	r3, #2
 80121a2:	607b      	str	r3, [r7, #4]
 80121a4:	e001      	b.n	80121aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80121a6:	2300      	movs	r3, #0
 80121a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80121aa:	687b      	ldr	r3, [r7, #4]
	}
 80121ac:	4618      	mov	r0, r3
 80121ae:	370c      	adds	r7, #12
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr
 80121b8:	200002ac 	.word	0x200002ac
 80121bc:	200002c8 	.word	0x200002c8

080121c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80121cc:	2300      	movs	r3, #0
 80121ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d06e      	beq.n	80122b4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121da:	4b39      	ldr	r3, [pc, #228]	; (80122c0 <xTaskPriorityInherit+0x100>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d25e      	bcs.n	80122a2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	699b      	ldr	r3, [r3, #24]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	db06      	blt.n	80121fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ec:	4b34      	ldr	r3, [pc, #208]	; (80122c0 <xTaskPriorityInherit+0x100>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f2:	f1c3 0207 	rsb	r2, r3, #7
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	6959      	ldr	r1, [r3, #20]
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012202:	4613      	mov	r3, r2
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	4413      	add	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	4a2e      	ldr	r2, [pc, #184]	; (80122c4 <xTaskPriorityInherit+0x104>)
 801220c:	4413      	add	r3, r2
 801220e:	4299      	cmp	r1, r3
 8012210:	d101      	bne.n	8012216 <xTaskPriorityInherit+0x56>
 8012212:	2301      	movs	r3, #1
 8012214:	e000      	b.n	8012218 <xTaskPriorityInherit+0x58>
 8012216:	2300      	movs	r3, #0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d03a      	beq.n	8012292 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	3304      	adds	r3, #4
 8012220:	4618      	mov	r0, r3
 8012222:	f7fe fb19 	bl	8010858 <uxListRemove>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d115      	bne.n	8012258 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012230:	4924      	ldr	r1, [pc, #144]	; (80122c4 <xTaskPriorityInherit+0x104>)
 8012232:	4613      	mov	r3, r2
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	4413      	add	r3, r2
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	440b      	add	r3, r1
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10a      	bne.n	8012258 <xTaskPriorityInherit+0x98>
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012246:	2201      	movs	r2, #1
 8012248:	fa02 f303 	lsl.w	r3, r2, r3
 801224c:	43da      	mvns	r2, r3
 801224e:	4b1e      	ldr	r3, [pc, #120]	; (80122c8 <xTaskPriorityInherit+0x108>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	4013      	ands	r3, r2
 8012254:	4a1c      	ldr	r2, [pc, #112]	; (80122c8 <xTaskPriorityInherit+0x108>)
 8012256:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012258:	4b19      	ldr	r3, [pc, #100]	; (80122c0 <xTaskPriorityInherit+0x100>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012266:	2201      	movs	r2, #1
 8012268:	409a      	lsls	r2, r3
 801226a:	4b17      	ldr	r3, [pc, #92]	; (80122c8 <xTaskPriorityInherit+0x108>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4313      	orrs	r3, r2
 8012270:	4a15      	ldr	r2, [pc, #84]	; (80122c8 <xTaskPriorityInherit+0x108>)
 8012272:	6013      	str	r3, [r2, #0]
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012278:	4613      	mov	r3, r2
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	4413      	add	r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4a10      	ldr	r2, [pc, #64]	; (80122c4 <xTaskPriorityInherit+0x104>)
 8012282:	441a      	add	r2, r3
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	3304      	adds	r3, #4
 8012288:	4619      	mov	r1, r3
 801228a:	4610      	mov	r0, r2
 801228c:	f7fe fa87 	bl	801079e <vListInsertEnd>
 8012290:	e004      	b.n	801229c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012292:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <xTaskPriorityInherit+0x100>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801229c:	2301      	movs	r3, #1
 801229e:	60fb      	str	r3, [r7, #12]
 80122a0:	e008      	b.n	80122b4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80122a6:	4b06      	ldr	r3, [pc, #24]	; (80122c0 <xTaskPriorityInherit+0x100>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d201      	bcs.n	80122b4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80122b0:	2301      	movs	r3, #1
 80122b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80122b4:	68fb      	ldr	r3, [r7, #12]
	}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	200001a0 	.word	0x200001a0
 80122c4:	200001a4 	.word	0x200001a4
 80122c8:	200002a8 	.word	0x200002a8

080122cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b086      	sub	sp, #24
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80122d8:	2300      	movs	r3, #0
 80122da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d070      	beq.n	80123c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122e2:	4b3b      	ldr	r3, [pc, #236]	; (80123d0 <xTaskPriorityDisinherit+0x104>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	693a      	ldr	r2, [r7, #16]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d00b      	beq.n	8012304 <xTaskPriorityDisinherit+0x38>
 80122ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f0:	b672      	cpsid	i
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
 80122fe:	b662      	cpsie	i
 8012300:	60fb      	str	r3, [r7, #12]
 8012302:	e7fe      	b.n	8012302 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10b      	bne.n	8012324 <xTaskPriorityDisinherit+0x58>
 801230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012310:	b672      	cpsid	i
 8012312:	f383 8811 	msr	BASEPRI, r3
 8012316:	f3bf 8f6f 	isb	sy
 801231a:	f3bf 8f4f 	dsb	sy
 801231e:	b662      	cpsie	i
 8012320:	60bb      	str	r3, [r7, #8]
 8012322:	e7fe      	b.n	8012322 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012328:	1e5a      	subs	r2, r3, #1
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012336:	429a      	cmp	r2, r3
 8012338:	d044      	beq.n	80123c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801233e:	2b00      	cmp	r3, #0
 8012340:	d140      	bne.n	80123c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	3304      	adds	r3, #4
 8012346:	4618      	mov	r0, r3
 8012348:	f7fe fa86 	bl	8010858 <uxListRemove>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d115      	bne.n	801237e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012356:	491f      	ldr	r1, [pc, #124]	; (80123d4 <xTaskPriorityDisinherit+0x108>)
 8012358:	4613      	mov	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4413      	add	r3, r2
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	440b      	add	r3, r1
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d10a      	bne.n	801237e <xTaskPriorityDisinherit+0xb2>
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236c:	2201      	movs	r2, #1
 801236e:	fa02 f303 	lsl.w	r3, r2, r3
 8012372:	43da      	mvns	r2, r3
 8012374:	4b18      	ldr	r3, [pc, #96]	; (80123d8 <xTaskPriorityDisinherit+0x10c>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4013      	ands	r3, r2
 801237a:	4a17      	ldr	r2, [pc, #92]	; (80123d8 <xTaskPriorityDisinherit+0x10c>)
 801237c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238a:	f1c3 0207 	rsb	r2, r3, #7
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012396:	2201      	movs	r2, #1
 8012398:	409a      	lsls	r2, r3
 801239a:	4b0f      	ldr	r3, [pc, #60]	; (80123d8 <xTaskPriorityDisinherit+0x10c>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4313      	orrs	r3, r2
 80123a0:	4a0d      	ldr	r2, [pc, #52]	; (80123d8 <xTaskPriorityDisinherit+0x10c>)
 80123a2:	6013      	str	r3, [r2, #0]
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a8:	4613      	mov	r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	4413      	add	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4a08      	ldr	r2, [pc, #32]	; (80123d4 <xTaskPriorityDisinherit+0x108>)
 80123b2:	441a      	add	r2, r3
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	3304      	adds	r3, #4
 80123b8:	4619      	mov	r1, r3
 80123ba:	4610      	mov	r0, r2
 80123bc:	f7fe f9ef 	bl	801079e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80123c0:	2301      	movs	r3, #1
 80123c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123c4:	697b      	ldr	r3, [r7, #20]
	}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3718      	adds	r7, #24
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	200001a0 	.word	0x200001a0
 80123d4:	200001a4 	.word	0x200001a4
 80123d8:	200002a8 	.word	0x200002a8

080123dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b088      	sub	sp, #32
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80123ea:	2301      	movs	r3, #1
 80123ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	f000 808a 	beq.w	801250a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10b      	bne.n	8012416 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80123fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012402:	b672      	cpsid	i
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	b662      	cpsie	i
 8012412:	60fb      	str	r3, [r7, #12]
 8012414:	e7fe      	b.n	8012414 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801241a:	683a      	ldr	r2, [r7, #0]
 801241c:	429a      	cmp	r2, r3
 801241e:	d902      	bls.n	8012426 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	61fb      	str	r3, [r7, #28]
 8012424:	e002      	b.n	801242c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801242a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012430:	69fa      	ldr	r2, [r7, #28]
 8012432:	429a      	cmp	r2, r3
 8012434:	d069      	beq.n	801250a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801243a:	697a      	ldr	r2, [r7, #20]
 801243c:	429a      	cmp	r2, r3
 801243e:	d164      	bne.n	801250a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012440:	4b34      	ldr	r3, [pc, #208]	; (8012514 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	69ba      	ldr	r2, [r7, #24]
 8012446:	429a      	cmp	r2, r3
 8012448:	d10b      	bne.n	8012462 <vTaskPriorityDisinheritAfterTimeout+0x86>
 801244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801244e:	b672      	cpsid	i
 8012450:	f383 8811 	msr	BASEPRI, r3
 8012454:	f3bf 8f6f 	isb	sy
 8012458:	f3bf 8f4f 	dsb	sy
 801245c:	b662      	cpsie	i
 801245e:	60bb      	str	r3, [r7, #8]
 8012460:	e7fe      	b.n	8012460 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012462:	69bb      	ldr	r3, [r7, #24]
 8012464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012466:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	69fa      	ldr	r2, [r7, #28]
 801246c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	699b      	ldr	r3, [r3, #24]
 8012472:	2b00      	cmp	r3, #0
 8012474:	db04      	blt.n	8012480 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	f1c3 0207 	rsb	r2, r3, #7
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	6959      	ldr	r1, [r3, #20]
 8012484:	693a      	ldr	r2, [r7, #16]
 8012486:	4613      	mov	r3, r2
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	4413      	add	r3, r2
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	4a22      	ldr	r2, [pc, #136]	; (8012518 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012490:	4413      	add	r3, r2
 8012492:	4299      	cmp	r1, r3
 8012494:	d101      	bne.n	801249a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801249a:	2300      	movs	r3, #0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d034      	beq.n	801250a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	3304      	adds	r3, #4
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe f9d7 	bl	8010858 <uxListRemove>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d115      	bne.n	80124dc <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124b4:	4918      	ldr	r1, [pc, #96]	; (8012518 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80124b6:	4613      	mov	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4413      	add	r3, r2
 80124bc:	009b      	lsls	r3, r3, #2
 80124be:	440b      	add	r3, r1
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10a      	bne.n	80124dc <vTaskPriorityDisinheritAfterTimeout+0x100>
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ca:	2201      	movs	r2, #1
 80124cc:	fa02 f303 	lsl.w	r3, r2, r3
 80124d0:	43da      	mvns	r2, r3
 80124d2:	4b12      	ldr	r3, [pc, #72]	; (801251c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4013      	ands	r3, r2
 80124d8:	4a10      	ldr	r2, [pc, #64]	; (801251c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124da:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e0:	2201      	movs	r2, #1
 80124e2:	409a      	lsls	r2, r3
 80124e4:	4b0d      	ldr	r3, [pc, #52]	; (801251c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4313      	orrs	r3, r2
 80124ea:	4a0c      	ldr	r2, [pc, #48]	; (801251c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124ec:	6013      	str	r3, [r2, #0]
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f2:	4613      	mov	r3, r2
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4a07      	ldr	r2, [pc, #28]	; (8012518 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80124fc:	441a      	add	r2, r3
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	3304      	adds	r3, #4
 8012502:	4619      	mov	r1, r3
 8012504:	4610      	mov	r0, r2
 8012506:	f7fe f94a 	bl	801079e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801250a:	bf00      	nop
 801250c:	3720      	adds	r7, #32
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
 8012512:	bf00      	nop
 8012514:	200001a0 	.word	0x200001a0
 8012518:	200001a4 	.word	0x200001a4
 801251c:	200002a8 	.word	0x200002a8

08012520 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012520:	b480      	push	{r7}
 8012522:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012524:	4b07      	ldr	r3, [pc, #28]	; (8012544 <pvTaskIncrementMutexHeldCount+0x24>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d004      	beq.n	8012536 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801252c:	4b05      	ldr	r3, [pc, #20]	; (8012544 <pvTaskIncrementMutexHeldCount+0x24>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012532:	3201      	adds	r2, #1
 8012534:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012536:	4b03      	ldr	r3, [pc, #12]	; (8012544 <pvTaskIncrementMutexHeldCount+0x24>)
 8012538:	681b      	ldr	r3, [r3, #0]
	}
 801253a:	4618      	mov	r0, r3
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr
 8012544:	200001a0 	.word	0x200001a0

08012548 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012552:	4b29      	ldr	r3, [pc, #164]	; (80125f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012558:	4b28      	ldr	r3, [pc, #160]	; (80125fc <prvAddCurrentTaskToDelayedList+0xb4>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	3304      	adds	r3, #4
 801255e:	4618      	mov	r0, r3
 8012560:	f7fe f97a 	bl	8010858 <uxListRemove>
 8012564:	4603      	mov	r3, r0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d10b      	bne.n	8012582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801256a:	4b24      	ldr	r3, [pc, #144]	; (80125fc <prvAddCurrentTaskToDelayedList+0xb4>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012570:	2201      	movs	r2, #1
 8012572:	fa02 f303 	lsl.w	r3, r2, r3
 8012576:	43da      	mvns	r2, r3
 8012578:	4b21      	ldr	r3, [pc, #132]	; (8012600 <prvAddCurrentTaskToDelayedList+0xb8>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4013      	ands	r3, r2
 801257e:	4a20      	ldr	r2, [pc, #128]	; (8012600 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012588:	d10a      	bne.n	80125a0 <prvAddCurrentTaskToDelayedList+0x58>
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d007      	beq.n	80125a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012590:	4b1a      	ldr	r3, [pc, #104]	; (80125fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3304      	adds	r3, #4
 8012596:	4619      	mov	r1, r3
 8012598:	481a      	ldr	r0, [pc, #104]	; (8012604 <prvAddCurrentTaskToDelayedList+0xbc>)
 801259a:	f7fe f900 	bl	801079e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801259e:	e026      	b.n	80125ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4413      	add	r3, r2
 80125a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80125a8:	4b14      	ldr	r3, [pc, #80]	; (80125fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	68ba      	ldr	r2, [r7, #8]
 80125ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80125b0:	68ba      	ldr	r2, [r7, #8]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d209      	bcs.n	80125cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125b8:	4b13      	ldr	r3, [pc, #76]	; (8012608 <prvAddCurrentTaskToDelayedList+0xc0>)
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	4b0f      	ldr	r3, [pc, #60]	; (80125fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	3304      	adds	r3, #4
 80125c2:	4619      	mov	r1, r3
 80125c4:	4610      	mov	r0, r2
 80125c6:	f7fe f90e 	bl	80107e6 <vListInsert>
}
 80125ca:	e010      	b.n	80125ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125cc:	4b0f      	ldr	r3, [pc, #60]	; (801260c <prvAddCurrentTaskToDelayedList+0xc4>)
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	4b0a      	ldr	r3, [pc, #40]	; (80125fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	3304      	adds	r3, #4
 80125d6:	4619      	mov	r1, r3
 80125d8:	4610      	mov	r0, r2
 80125da:	f7fe f904 	bl	80107e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80125de:	4b0c      	ldr	r3, [pc, #48]	; (8012610 <prvAddCurrentTaskToDelayedList+0xc8>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	68ba      	ldr	r2, [r7, #8]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d202      	bcs.n	80125ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80125e8:	4a09      	ldr	r2, [pc, #36]	; (8012610 <prvAddCurrentTaskToDelayedList+0xc8>)
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	6013      	str	r3, [r2, #0]
}
 80125ee:	bf00      	nop
 80125f0:	3710      	adds	r7, #16
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	200002a4 	.word	0x200002a4
 80125fc:	200001a0 	.word	0x200001a0
 8012600:	200002a8 	.word	0x200002a8
 8012604:	2000028c 	.word	0x2000028c
 8012608:	2000025c 	.word	0x2000025c
 801260c:	20000258 	.word	0x20000258
 8012610:	200002c0 	.word	0x200002c0

08012614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	3b04      	subs	r3, #4
 8012624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801262c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3b04      	subs	r3, #4
 8012632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	f023 0201 	bic.w	r2, r3, #1
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	3b04      	subs	r3, #4
 8012642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012644:	4a0c      	ldr	r2, [pc, #48]	; (8012678 <pxPortInitialiseStack+0x64>)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	3b14      	subs	r3, #20
 801264e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	3b04      	subs	r3, #4
 801265a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	f06f 0202 	mvn.w	r2, #2
 8012662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	3b20      	subs	r3, #32
 8012668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801266a:	68fb      	ldr	r3, [r7, #12]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3714      	adds	r7, #20
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr
 8012678:	0801267d 	.word	0x0801267d

0801267c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012682:	2300      	movs	r3, #0
 8012684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012686:	4b13      	ldr	r3, [pc, #76]	; (80126d4 <prvTaskExitError+0x58>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801268e:	d00b      	beq.n	80126a8 <prvTaskExitError+0x2c>
 8012690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012694:	b672      	cpsid	i
 8012696:	f383 8811 	msr	BASEPRI, r3
 801269a:	f3bf 8f6f 	isb	sy
 801269e:	f3bf 8f4f 	dsb	sy
 80126a2:	b662      	cpsie	i
 80126a4:	60fb      	str	r3, [r7, #12]
 80126a6:	e7fe      	b.n	80126a6 <prvTaskExitError+0x2a>
 80126a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ac:	b672      	cpsid	i
 80126ae:	f383 8811 	msr	BASEPRI, r3
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	b662      	cpsie	i
 80126bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126be:	bf00      	nop
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d0fc      	beq.n	80126c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126c6:	bf00      	nop
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	20000050 	.word	0x20000050
	...

080126e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80126e0:	4b07      	ldr	r3, [pc, #28]	; (8012700 <pxCurrentTCBConst2>)
 80126e2:	6819      	ldr	r1, [r3, #0]
 80126e4:	6808      	ldr	r0, [r1, #0]
 80126e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ea:	f380 8809 	msr	PSP, r0
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f04f 0000 	mov.w	r0, #0
 80126f6:	f380 8811 	msr	BASEPRI, r0
 80126fa:	4770      	bx	lr
 80126fc:	f3af 8000 	nop.w

08012700 <pxCurrentTCBConst2>:
 8012700:	200001a0 	.word	0x200001a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012704:	bf00      	nop
 8012706:	bf00      	nop

08012708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012708:	4808      	ldr	r0, [pc, #32]	; (801272c <prvPortStartFirstTask+0x24>)
 801270a:	6800      	ldr	r0, [r0, #0]
 801270c:	6800      	ldr	r0, [r0, #0]
 801270e:	f380 8808 	msr	MSP, r0
 8012712:	f04f 0000 	mov.w	r0, #0
 8012716:	f380 8814 	msr	CONTROL, r0
 801271a:	b662      	cpsie	i
 801271c:	b661      	cpsie	f
 801271e:	f3bf 8f4f 	dsb	sy
 8012722:	f3bf 8f6f 	isb	sy
 8012726:	df00      	svc	0
 8012728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801272a:	bf00      	nop
 801272c:	e000ed08 	.word	0xe000ed08

08012730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012736:	4b36      	ldr	r3, [pc, #216]	; (8012810 <xPortStartScheduler+0xe0>)
 8012738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	b2db      	uxtb	r3, r3
 8012740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	22ff      	movs	r2, #255	; 0xff
 8012746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	b2db      	uxtb	r3, r3
 801274e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012750:	78fb      	ldrb	r3, [r7, #3]
 8012752:	b2db      	uxtb	r3, r3
 8012754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012758:	b2da      	uxtb	r2, r3
 801275a:	4b2e      	ldr	r3, [pc, #184]	; (8012814 <xPortStartScheduler+0xe4>)
 801275c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801275e:	4b2e      	ldr	r3, [pc, #184]	; (8012818 <xPortStartScheduler+0xe8>)
 8012760:	2207      	movs	r2, #7
 8012762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012764:	e009      	b.n	801277a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012766:	4b2c      	ldr	r3, [pc, #176]	; (8012818 <xPortStartScheduler+0xe8>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3b01      	subs	r3, #1
 801276c:	4a2a      	ldr	r2, [pc, #168]	; (8012818 <xPortStartScheduler+0xe8>)
 801276e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	b2db      	uxtb	r3, r3
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	b2db      	uxtb	r3, r3
 8012778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801277a:	78fb      	ldrb	r3, [r7, #3]
 801277c:	b2db      	uxtb	r3, r3
 801277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012782:	2b80      	cmp	r3, #128	; 0x80
 8012784:	d0ef      	beq.n	8012766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012786:	4b24      	ldr	r3, [pc, #144]	; (8012818 <xPortStartScheduler+0xe8>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f1c3 0307 	rsb	r3, r3, #7
 801278e:	2b04      	cmp	r3, #4
 8012790:	d00b      	beq.n	80127aa <xPortStartScheduler+0x7a>
 8012792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012796:	b672      	cpsid	i
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	b662      	cpsie	i
 80127a6:	60bb      	str	r3, [r7, #8]
 80127a8:	e7fe      	b.n	80127a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80127aa:	4b1b      	ldr	r3, [pc, #108]	; (8012818 <xPortStartScheduler+0xe8>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	021b      	lsls	r3, r3, #8
 80127b0:	4a19      	ldr	r2, [pc, #100]	; (8012818 <xPortStartScheduler+0xe8>)
 80127b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80127b4:	4b18      	ldr	r3, [pc, #96]	; (8012818 <xPortStartScheduler+0xe8>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80127bc:	4a16      	ldr	r2, [pc, #88]	; (8012818 <xPortStartScheduler+0xe8>)
 80127be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	b2da      	uxtb	r2, r3
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80127c8:	4b14      	ldr	r3, [pc, #80]	; (801281c <xPortStartScheduler+0xec>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a13      	ldr	r2, [pc, #76]	; (801281c <xPortStartScheduler+0xec>)
 80127ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80127d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80127d4:	4b11      	ldr	r3, [pc, #68]	; (801281c <xPortStartScheduler+0xec>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a10      	ldr	r2, [pc, #64]	; (801281c <xPortStartScheduler+0xec>)
 80127da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80127de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80127e0:	f000 f8d4 	bl	801298c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80127e4:	4b0e      	ldr	r3, [pc, #56]	; (8012820 <xPortStartScheduler+0xf0>)
 80127e6:	2200      	movs	r2, #0
 80127e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80127ea:	f000 f8f3 	bl	80129d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80127ee:	4b0d      	ldr	r3, [pc, #52]	; (8012824 <xPortStartScheduler+0xf4>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a0c      	ldr	r2, [pc, #48]	; (8012824 <xPortStartScheduler+0xf4>)
 80127f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80127f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80127fa:	f7ff ff85 	bl	8012708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80127fe:	f7ff fa67 	bl	8011cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8012802:	f7ff ff3b 	bl	801267c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012806:	2300      	movs	r3, #0
}
 8012808:	4618      	mov	r0, r3
 801280a:	3710      	adds	r7, #16
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	e000e400 	.word	0xe000e400
 8012814:	200002cc 	.word	0x200002cc
 8012818:	200002d0 	.word	0x200002d0
 801281c:	e000ed20 	.word	0xe000ed20
 8012820:	20000050 	.word	0x20000050
 8012824:	e000ef34 	.word	0xe000ef34

08012828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012832:	b672      	cpsid	i
 8012834:	f383 8811 	msr	BASEPRI, r3
 8012838:	f3bf 8f6f 	isb	sy
 801283c:	f3bf 8f4f 	dsb	sy
 8012840:	b662      	cpsie	i
 8012842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012844:	4b0f      	ldr	r3, [pc, #60]	; (8012884 <vPortEnterCritical+0x5c>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	3301      	adds	r3, #1
 801284a:	4a0e      	ldr	r2, [pc, #56]	; (8012884 <vPortEnterCritical+0x5c>)
 801284c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801284e:	4b0d      	ldr	r3, [pc, #52]	; (8012884 <vPortEnterCritical+0x5c>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2b01      	cmp	r3, #1
 8012854:	d110      	bne.n	8012878 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012856:	4b0c      	ldr	r3, [pc, #48]	; (8012888 <vPortEnterCritical+0x60>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00b      	beq.n	8012878 <vPortEnterCritical+0x50>
 8012860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012864:	b672      	cpsid	i
 8012866:	f383 8811 	msr	BASEPRI, r3
 801286a:	f3bf 8f6f 	isb	sy
 801286e:	f3bf 8f4f 	dsb	sy
 8012872:	b662      	cpsie	i
 8012874:	603b      	str	r3, [r7, #0]
 8012876:	e7fe      	b.n	8012876 <vPortEnterCritical+0x4e>
	}
}
 8012878:	bf00      	nop
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr
 8012884:	20000050 	.word	0x20000050
 8012888:	e000ed04 	.word	0xe000ed04

0801288c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801288c:	b480      	push	{r7}
 801288e:	b083      	sub	sp, #12
 8012890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012892:	4b12      	ldr	r3, [pc, #72]	; (80128dc <vPortExitCritical+0x50>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d10b      	bne.n	80128b2 <vPortExitCritical+0x26>
 801289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289e:	b672      	cpsid	i
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	b662      	cpsie	i
 80128ae:	607b      	str	r3, [r7, #4]
 80128b0:	e7fe      	b.n	80128b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80128b2:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <vPortExitCritical+0x50>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	3b01      	subs	r3, #1
 80128b8:	4a08      	ldr	r2, [pc, #32]	; (80128dc <vPortExitCritical+0x50>)
 80128ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80128bc:	4b07      	ldr	r3, [pc, #28]	; (80128dc <vPortExitCritical+0x50>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d104      	bne.n	80128ce <vPortExitCritical+0x42>
 80128c4:	2300      	movs	r3, #0
 80128c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80128ce:	bf00      	nop
 80128d0:	370c      	adds	r7, #12
 80128d2:	46bd      	mov	sp, r7
 80128d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d8:	4770      	bx	lr
 80128da:	bf00      	nop
 80128dc:	20000050 	.word	0x20000050

080128e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80128e0:	f3ef 8009 	mrs	r0, PSP
 80128e4:	f3bf 8f6f 	isb	sy
 80128e8:	4b15      	ldr	r3, [pc, #84]	; (8012940 <pxCurrentTCBConst>)
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	f01e 0f10 	tst.w	lr, #16
 80128f0:	bf08      	it	eq
 80128f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80128f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128fa:	6010      	str	r0, [r2, #0]
 80128fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012904:	b672      	cpsid	i
 8012906:	f380 8811 	msr	BASEPRI, r0
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	f3bf 8f6f 	isb	sy
 8012912:	b662      	cpsie	i
 8012914:	f7ff f9dc 	bl	8011cd0 <vTaskSwitchContext>
 8012918:	f04f 0000 	mov.w	r0, #0
 801291c:	f380 8811 	msr	BASEPRI, r0
 8012920:	bc09      	pop	{r0, r3}
 8012922:	6819      	ldr	r1, [r3, #0]
 8012924:	6808      	ldr	r0, [r1, #0]
 8012926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292a:	f01e 0f10 	tst.w	lr, #16
 801292e:	bf08      	it	eq
 8012930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012934:	f380 8809 	msr	PSP, r0
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop

08012940 <pxCurrentTCBConst>:
 8012940:	200001a0 	.word	0x200001a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012944:	bf00      	nop
 8012946:	bf00      	nop

08012948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
	__asm volatile
 801294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012952:	b672      	cpsid	i
 8012954:	f383 8811 	msr	BASEPRI, r3
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	b662      	cpsie	i
 8012962:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012964:	f7ff f8b8 	bl	8011ad8 <xTaskIncrementTick>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d003      	beq.n	8012976 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801296e:	4b06      	ldr	r3, [pc, #24]	; (8012988 <SysTick_Handler+0x40>)
 8012970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	2300      	movs	r3, #0
 8012978:	603b      	str	r3, [r7, #0]
	__asm volatile
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012980:	bf00      	nop
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	e000ed04 	.word	0xe000ed04

0801298c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801298c:	b480      	push	{r7}
 801298e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012990:	4b0b      	ldr	r3, [pc, #44]	; (80129c0 <vPortSetupTimerInterrupt+0x34>)
 8012992:	2200      	movs	r2, #0
 8012994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012996:	4b0b      	ldr	r3, [pc, #44]	; (80129c4 <vPortSetupTimerInterrupt+0x38>)
 8012998:	2200      	movs	r2, #0
 801299a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801299c:	4b0a      	ldr	r3, [pc, #40]	; (80129c8 <vPortSetupTimerInterrupt+0x3c>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4a0a      	ldr	r2, [pc, #40]	; (80129cc <vPortSetupTimerInterrupt+0x40>)
 80129a2:	fba2 2303 	umull	r2, r3, r2, r3
 80129a6:	099b      	lsrs	r3, r3, #6
 80129a8:	4a09      	ldr	r2, [pc, #36]	; (80129d0 <vPortSetupTimerInterrupt+0x44>)
 80129aa:	3b01      	subs	r3, #1
 80129ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80129ae:	4b04      	ldr	r3, [pc, #16]	; (80129c0 <vPortSetupTimerInterrupt+0x34>)
 80129b0:	2207      	movs	r2, #7
 80129b2:	601a      	str	r2, [r3, #0]
}
 80129b4:	bf00      	nop
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	e000e010 	.word	0xe000e010
 80129c4:	e000e018 	.word	0xe000e018
 80129c8:	20000064 	.word	0x20000064
 80129cc:	10624dd3 	.word	0x10624dd3
 80129d0:	e000e014 	.word	0xe000e014

080129d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80129d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80129e4 <vPortEnableVFP+0x10>
 80129d8:	6801      	ldr	r1, [r0, #0]
 80129da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80129de:	6001      	str	r1, [r0, #0]
 80129e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80129e2:	bf00      	nop
 80129e4:	e000ed88 	.word	0xe000ed88

080129e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80129e8:	b480      	push	{r7}
 80129ea:	b085      	sub	sp, #20
 80129ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80129ee:	f3ef 8305 	mrs	r3, IPSR
 80129f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2b0f      	cmp	r3, #15
 80129f8:	d915      	bls.n	8012a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80129fa:	4a18      	ldr	r2, [pc, #96]	; (8012a5c <vPortValidateInterruptPriority+0x74>)
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	4413      	add	r3, r2
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a04:	4b16      	ldr	r3, [pc, #88]	; (8012a60 <vPortValidateInterruptPriority+0x78>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	7afa      	ldrb	r2, [r7, #11]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d20b      	bcs.n	8012a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a12:	b672      	cpsid	i
 8012a14:	f383 8811 	msr	BASEPRI, r3
 8012a18:	f3bf 8f6f 	isb	sy
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	b662      	cpsie	i
 8012a22:	607b      	str	r3, [r7, #4]
 8012a24:	e7fe      	b.n	8012a24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012a26:	4b0f      	ldr	r3, [pc, #60]	; (8012a64 <vPortValidateInterruptPriority+0x7c>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012a2e:	4b0e      	ldr	r3, [pc, #56]	; (8012a68 <vPortValidateInterruptPriority+0x80>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d90b      	bls.n	8012a4e <vPortValidateInterruptPriority+0x66>
 8012a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3a:	b672      	cpsid	i
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	b662      	cpsie	i
 8012a4a:	603b      	str	r3, [r7, #0]
 8012a4c:	e7fe      	b.n	8012a4c <vPortValidateInterruptPriority+0x64>
	}
 8012a4e:	bf00      	nop
 8012a50:	3714      	adds	r7, #20
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	e000e3f0 	.word	0xe000e3f0
 8012a60:	200002cc 	.word	0x200002cc
 8012a64:	e000ed0c 	.word	0xe000ed0c
 8012a68:	200002d0 	.word	0x200002d0

08012a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b08a      	sub	sp, #40	; 0x28
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012a74:	2300      	movs	r3, #0
 8012a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012a78:	f7fe ff60 	bl	801193c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012a7c:	4b5c      	ldr	r3, [pc, #368]	; (8012bf0 <pvPortMalloc+0x184>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012a84:	f000 f91a 	bl	8012cbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012a88:	4b5a      	ldr	r3, [pc, #360]	; (8012bf4 <pvPortMalloc+0x188>)
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	4013      	ands	r3, r2
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f040 8090 	bne.w	8012bb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d01e      	beq.n	8012ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012a9c:	2208      	movs	r2, #8
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f003 0307 	and.w	r3, r3, #7
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d015      	beq.n	8012ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f023 0307 	bic.w	r3, r3, #7
 8012ab4:	3308      	adds	r3, #8
 8012ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f003 0307 	and.w	r3, r3, #7
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d00b      	beq.n	8012ada <pvPortMalloc+0x6e>
 8012ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac6:	b672      	cpsid	i
 8012ac8:	f383 8811 	msr	BASEPRI, r3
 8012acc:	f3bf 8f6f 	isb	sy
 8012ad0:	f3bf 8f4f 	dsb	sy
 8012ad4:	b662      	cpsie	i
 8012ad6:	617b      	str	r3, [r7, #20]
 8012ad8:	e7fe      	b.n	8012ad8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d06a      	beq.n	8012bb6 <pvPortMalloc+0x14a>
 8012ae0:	4b45      	ldr	r3, [pc, #276]	; (8012bf8 <pvPortMalloc+0x18c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d865      	bhi.n	8012bb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012aea:	4b44      	ldr	r3, [pc, #272]	; (8012bfc <pvPortMalloc+0x190>)
 8012aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012aee:	4b43      	ldr	r3, [pc, #268]	; (8012bfc <pvPortMalloc+0x190>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012af4:	e004      	b.n	8012b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d903      	bls.n	8012b12 <pvPortMalloc+0xa6>
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f1      	bne.n	8012af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b12:	4b37      	ldr	r3, [pc, #220]	; (8012bf0 <pvPortMalloc+0x184>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d04c      	beq.n	8012bb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b1c:	6a3b      	ldr	r3, [r7, #32]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2208      	movs	r2, #8
 8012b22:	4413      	add	r3, r2
 8012b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b28:	681a      	ldr	r2, [r3, #0]
 8012b2a:	6a3b      	ldr	r3, [r7, #32]
 8012b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b30:	685a      	ldr	r2, [r3, #4]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	1ad2      	subs	r2, r2, r3
 8012b36:	2308      	movs	r3, #8
 8012b38:	005b      	lsls	r3, r3, #1
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d920      	bls.n	8012b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4413      	add	r3, r2
 8012b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	f003 0307 	and.w	r3, r3, #7
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d00b      	beq.n	8012b68 <pvPortMalloc+0xfc>
 8012b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b54:	b672      	cpsid	i
 8012b56:	f383 8811 	msr	BASEPRI, r3
 8012b5a:	f3bf 8f6f 	isb	sy
 8012b5e:	f3bf 8f4f 	dsb	sy
 8012b62:	b662      	cpsie	i
 8012b64:	613b      	str	r3, [r7, #16]
 8012b66:	e7fe      	b.n	8012b66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6a:	685a      	ldr	r2, [r3, #4]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	1ad2      	subs	r2, r2, r3
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012b7a:	69b8      	ldr	r0, [r7, #24]
 8012b7c:	f000 f900 	bl	8012d80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012b80:	4b1d      	ldr	r3, [pc, #116]	; (8012bf8 <pvPortMalloc+0x18c>)
 8012b82:	681a      	ldr	r2, [r3, #0]
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	4a1b      	ldr	r2, [pc, #108]	; (8012bf8 <pvPortMalloc+0x18c>)
 8012b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012b8e:	4b1a      	ldr	r3, [pc, #104]	; (8012bf8 <pvPortMalloc+0x18c>)
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	4b1b      	ldr	r3, [pc, #108]	; (8012c00 <pvPortMalloc+0x194>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d203      	bcs.n	8012ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012b9a:	4b17      	ldr	r3, [pc, #92]	; (8012bf8 <pvPortMalloc+0x18c>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4a18      	ldr	r2, [pc, #96]	; (8012c00 <pvPortMalloc+0x194>)
 8012ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	685a      	ldr	r2, [r3, #4]
 8012ba6:	4b13      	ldr	r3, [pc, #76]	; (8012bf4 <pvPortMalloc+0x188>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	431a      	orrs	r2, r3
 8012bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012bb6:	f7fe fecf 	bl	8011958 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012bc0:	f7fd fc05 	bl	80103ce <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bc4:	69fb      	ldr	r3, [r7, #28]
 8012bc6:	f003 0307 	and.w	r3, r3, #7
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00b      	beq.n	8012be6 <pvPortMalloc+0x17a>
 8012bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd2:	b672      	cpsid	i
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	b662      	cpsie	i
 8012be2:	60fb      	str	r3, [r7, #12]
 8012be4:	e7fe      	b.n	8012be4 <pvPortMalloc+0x178>
	return pvReturn;
 8012be6:	69fb      	ldr	r3, [r7, #28]
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3728      	adds	r7, #40	; 0x28
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	200082dc 	.word	0x200082dc
 8012bf4:	200082e8 	.word	0x200082e8
 8012bf8:	200082e0 	.word	0x200082e0
 8012bfc:	200082d4 	.word	0x200082d4
 8012c00:	200082e4 	.word	0x200082e4

08012c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b086      	sub	sp, #24
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d04a      	beq.n	8012cac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c16:	2308      	movs	r3, #8
 8012c18:	425b      	negs	r3, r3
 8012c1a:	697a      	ldr	r2, [r7, #20]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	685a      	ldr	r2, [r3, #4]
 8012c28:	4b22      	ldr	r3, [pc, #136]	; (8012cb4 <vPortFree+0xb0>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4013      	ands	r3, r2
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d10b      	bne.n	8012c4a <vPortFree+0x46>
 8012c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c36:	b672      	cpsid	i
 8012c38:	f383 8811 	msr	BASEPRI, r3
 8012c3c:	f3bf 8f6f 	isb	sy
 8012c40:	f3bf 8f4f 	dsb	sy
 8012c44:	b662      	cpsie	i
 8012c46:	60fb      	str	r3, [r7, #12]
 8012c48:	e7fe      	b.n	8012c48 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00b      	beq.n	8012c6a <vPortFree+0x66>
 8012c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c56:	b672      	cpsid	i
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	b662      	cpsie	i
 8012c66:	60bb      	str	r3, [r7, #8]
 8012c68:	e7fe      	b.n	8012c68 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	4b11      	ldr	r3, [pc, #68]	; (8012cb4 <vPortFree+0xb0>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	4013      	ands	r3, r2
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d019      	beq.n	8012cac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d115      	bne.n	8012cac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	685a      	ldr	r2, [r3, #4]
 8012c84:	4b0b      	ldr	r3, [pc, #44]	; (8012cb4 <vPortFree+0xb0>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	43db      	mvns	r3, r3
 8012c8a:	401a      	ands	r2, r3
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012c90:	f7fe fe54 	bl	801193c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	685a      	ldr	r2, [r3, #4]
 8012c98:	4b07      	ldr	r3, [pc, #28]	; (8012cb8 <vPortFree+0xb4>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	4a06      	ldr	r2, [pc, #24]	; (8012cb8 <vPortFree+0xb4>)
 8012ca0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012ca2:	6938      	ldr	r0, [r7, #16]
 8012ca4:	f000 f86c 	bl	8012d80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012ca8:	f7fe fe56 	bl	8011958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012cac:	bf00      	nop
 8012cae:	3718      	adds	r7, #24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	200082e8 	.word	0x200082e8
 8012cb8:	200082e0 	.word	0x200082e0

08012cbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012cc8:	4b27      	ldr	r3, [pc, #156]	; (8012d68 <prvHeapInit+0xac>)
 8012cca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f003 0307 	and.w	r3, r3, #7
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00c      	beq.n	8012cf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	3307      	adds	r3, #7
 8012cda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f023 0307 	bic.w	r3, r3, #7
 8012ce2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	4a1f      	ldr	r2, [pc, #124]	; (8012d68 <prvHeapInit+0xac>)
 8012cec:	4413      	add	r3, r2
 8012cee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012cf4:	4a1d      	ldr	r2, [pc, #116]	; (8012d6c <prvHeapInit+0xb0>)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012cfa:	4b1c      	ldr	r3, [pc, #112]	; (8012d6c <prvHeapInit+0xb0>)
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	68ba      	ldr	r2, [r7, #8]
 8012d04:	4413      	add	r3, r2
 8012d06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d08:	2208      	movs	r2, #8
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	1a9b      	subs	r3, r3, r2
 8012d0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f023 0307 	bic.w	r3, r3, #7
 8012d16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	4a15      	ldr	r2, [pc, #84]	; (8012d70 <prvHeapInit+0xb4>)
 8012d1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012d1e:	4b14      	ldr	r3, [pc, #80]	; (8012d70 <prvHeapInit+0xb4>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2200      	movs	r2, #0
 8012d24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012d26:	4b12      	ldr	r3, [pc, #72]	; (8012d70 <prvHeapInit+0xb4>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	1ad2      	subs	r2, r2, r3
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012d3c:	4b0c      	ldr	r3, [pc, #48]	; (8012d70 <prvHeapInit+0xb4>)
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	4a0a      	ldr	r2, [pc, #40]	; (8012d74 <prvHeapInit+0xb8>)
 8012d4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	4a09      	ldr	r2, [pc, #36]	; (8012d78 <prvHeapInit+0xbc>)
 8012d52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d54:	4b09      	ldr	r3, [pc, #36]	; (8012d7c <prvHeapInit+0xc0>)
 8012d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012d5a:	601a      	str	r2, [r3, #0]
}
 8012d5c:	bf00      	nop
 8012d5e:	3714      	adds	r7, #20
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr
 8012d68:	200002d4 	.word	0x200002d4
 8012d6c:	200082d4 	.word	0x200082d4
 8012d70:	200082dc 	.word	0x200082dc
 8012d74:	200082e4 	.word	0x200082e4
 8012d78:	200082e0 	.word	0x200082e0
 8012d7c:	200082e8 	.word	0x200082e8

08012d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012d80:	b480      	push	{r7}
 8012d82:	b085      	sub	sp, #20
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012d88:	4b28      	ldr	r3, [pc, #160]	; (8012e2c <prvInsertBlockIntoFreeList+0xac>)
 8012d8a:	60fb      	str	r3, [r7, #12]
 8012d8c:	e002      	b.n	8012d94 <prvInsertBlockIntoFreeList+0x14>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	60fb      	str	r3, [r7, #12]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d8f7      	bhi.n	8012d8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	4413      	add	r3, r2
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d108      	bne.n	8012dc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	685a      	ldr	r2, [r3, #4]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	441a      	add	r2, r3
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	68ba      	ldr	r2, [r7, #8]
 8012dcc:	441a      	add	r2, r3
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d118      	bne.n	8012e08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	4b15      	ldr	r3, [pc, #84]	; (8012e30 <prvInsertBlockIntoFreeList+0xb0>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d00d      	beq.n	8012dfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	685a      	ldr	r2, [r3, #4]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	441a      	add	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	601a      	str	r2, [r3, #0]
 8012dfc:	e008      	b.n	8012e10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012dfe:	4b0c      	ldr	r3, [pc, #48]	; (8012e30 <prvInsertBlockIntoFreeList+0xb0>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	601a      	str	r2, [r3, #0]
 8012e06:	e003      	b.n	8012e10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681a      	ldr	r2, [r3, #0]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e10:	68fa      	ldr	r2, [r7, #12]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d002      	beq.n	8012e1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	687a      	ldr	r2, [r7, #4]
 8012e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e1e:	bf00      	nop
 8012e20:	3714      	adds	r7, #20
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop
 8012e2c:	200082d4 	.word	0x200082d4
 8012e30:	200082dc 	.word	0x200082dc

08012e34 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
    {
    }
 8012e3e:	bf00      	nop
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr

08012e4a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8012e4a:	b480      	push	{r7}
 8012e4c:	b083      	sub	sp, #12
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
 8012e52:	6039      	str	r1, [r7, #0]
    {
    }
 8012e54:	bf00      	nop
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr

08012e60 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
    {
    }
 8012e6a:	bf00      	nop
 8012e6c:	370c      	adds	r7, #12
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr

08012e76 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8012e76:	b480      	push	{r7}
 8012e78:	b083      	sub	sp, #12
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	460b      	mov	r3, r1
 8012e80:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012e82:	bf00      	nop
 8012e84:	370c      	adds	r7, #12
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr

08012e8e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8012e8e:	b480      	push	{r7}
 8012e90:	b083      	sub	sp, #12
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
    {
    }
 8012e96:	bf00      	nop
 8012e98:	370c      	adds	r7, #12
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr

08012ea2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8012ea2:	b480      	push	{r7}
 8012ea4:	b083      	sub	sp, #12
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
    {
    }
 8012eaa:	bf00      	nop
 8012eac:	370c      	adds	r7, #12
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr
	...

08012eb8 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8012eb8:	b480      	push	{r7}
 8012eba:	b083      	sub	sp, #12
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
    {
 8012ec0:	4a04      	ldr	r2, [pc, #16]	; (8012ed4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	601a      	str	r2, [r3, #0]
    }
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	370c      	adds	r7, #12
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr
 8012ed4:	080201a4 	.word	0x080201a4

08012ed8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
    }
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff ffe9 	bl	8012eb8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8012ee6:	2104      	movs	r1, #4
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f00b fa48 	bl	801e37e <_ZdlPvj>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2200      	movs	r2, #0
 8012f04:	801a      	strh	r2, [r3, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	805a      	strh	r2, [r3, #2]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	809a      	strh	r2, [r3, #4]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2200      	movs	r2, #0
 8012f16:	80da      	strh	r2, [r3, #6]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	811a      	strh	r2, [r3, #8]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	815a      	strh	r2, [r3, #10]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	819a      	strh	r2, [r3, #12]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	739a      	strb	r2, [r3, #14]
        {
        }
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4618      	mov	r0, r3
 8012f34:	370c      	adds	r7, #12
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr

08012f3e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b082      	sub	sp, #8
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff ffd5 	bl	8012ef8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2200      	movs	r2, #0
 8012f52:	611a      	str	r2, [r3, #16]
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	829a      	strh	r2, [r3, #20]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012f64:	b480      	push	{r7}
 8012f66:	b083      	sub	sp, #12
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
    {
 8012f6c:	4a04      	ldr	r2, [pc, #16]	; (8012f80 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	601a      	str	r2, [r3, #0]
    }
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	370c      	adds	r7, #12
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr
 8012f80:	0802018c 	.word	0x0802018c

08012f84 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
    }
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7ff ffe9 	bl	8012f64 <_ZN8touchgfx15TouchControllerD1Ev>
 8012f92:	2104      	movs	r1, #4
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f00b f9f2 	bl	801e37e <_ZdlPvj>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8012fac:	4a07      	ldr	r2, [pc, #28]	; (8012fcc <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	601a      	str	r2, [r3, #0]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	605a      	str	r2, [r3, #4]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	609a      	str	r2, [r3, #8]
    {
    }
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	08020164 	.word	0x08020164

08012fd0 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	4a04      	ldr	r2, [pc, #16]	; (8012fec <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	601a      	str	r2, [r3, #0]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	370c      	adds	r7, #12
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr
 8012fec:	08020164 	.word	0x08020164

08012ff0 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f7ff ffe9 	bl	8012fd0 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8012ffe:	210c      	movs	r1, #12
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f00b f9bc 	bl	801e37e <_ZdlPvj>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4618      	mov	r0, r3
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	460b      	mov	r3, r1
 801301a:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 801301c:	78fb      	ldrb	r3, [r7, #3]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d011      	beq.n	8013046 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3310      	adds	r3, #16
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	4798      	blx	r3
 801302e:	4602      	mov	r2, r0
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	689b      	ldr	r3, [r3, #8]
 8013034:	1ad3      	subs	r3, r2, r3
 8013036:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	441a      	add	r2, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8013044:	e008      	b.n	8013058 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	3310      	adds	r3, #16
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	4798      	blx	r3
 8013052:	4602      	mov	r2, r0
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	609a      	str	r2, [r3, #8]
    }
 8013058:	bf00      	nop
 801305a:	3710      	adds	r7, #16
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
    }
 801306c:	4618      	mov	r0, r3
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr

08013078 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	683a      	ldr	r2, [r7, #0]
 8013086:	605a      	str	r2, [r3, #4]
    }
 8013088:	bf00      	nop
 801308a:	370c      	adds	r7, #12
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr

08013094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
 80130a0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80130a2:	4a3e      	ldr	r2, [pc, #248]	; (801319c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x108>)
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	601a      	str	r2, [r3, #0]
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	68ba      	ldr	r2, [r7, #8]
 80130ac:	605a      	str	r2, [r3, #4]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	609a      	str	r2, [r3, #8]
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	60da      	str	r2, [r3, #12]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2200      	movs	r2, #0
 80130be:	611a      	str	r2, [r3, #16]
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	2200      	movs	r2, #0
 80130c4:	615a      	str	r2, [r3, #20]
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3318      	adds	r3, #24
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ff ff37 	bl	8012f3e <_ZN8touchgfx8GesturesC1Ev>
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2200      	movs	r2, #0
 80130d4:	635a      	str	r2, [r3, #52]	; 0x34
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2200      	movs	r2, #0
 80130da:	639a      	str	r2, [r3, #56]	; 0x38
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2200      	movs	r2, #0
 80130e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2200      	movs	r2, #0
 80130e6:	641a      	str	r2, [r3, #64]	; 0x40
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2200      	movs	r2, #0
 80130ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2201      	movs	r2, #1
 80130f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2201      	movs	r2, #1
 8013104:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2200      	movs	r2, #0
 801310c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2200      	movs	r2, #0
 8013114:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2201      	movs	r2, #1
 801311c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2200      	movs	r2, #0
 8013124:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2200      	movs	r2, #0
 801312c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2200      	movs	r2, #0
 8013134:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2200      	movs	r2, #0
 801313c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2200      	movs	r2, #0
 801314c:	661a      	str	r2, [r3, #96]	; 0x60
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2200      	movs	r2, #0
 8013152:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 8013156:	4a12      	ldr	r2, [pc, #72]	; (80131a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801315c:	4a11      	ldr	r2, [pc, #68]	; (80131a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 801315e:	8b3b      	ldrh	r3, [r7, #24]
 8013160:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013162:	4a11      	ldr	r2, [pc, #68]	; (80131a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8013164:	8bbb      	ldrh	r3, [r7, #28]
 8013166:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013168:	4b10      	ldr	r3, [pc, #64]	; (80131ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 801316a:	2200      	movs	r2, #0
 801316c:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801316e:	4b0d      	ldr	r3, [pc, #52]	; (80131a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 8013170:	881a      	ldrh	r2, [r3, #0]
 8013172:	4b0f      	ldr	r3, [pc, #60]	; (80131b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 8013174:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013176:	4b0c      	ldr	r3, [pc, #48]	; (80131a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8013178:	881a      	ldrh	r2, [r3, #0]
 801317a:	4b0e      	ldr	r3, [pc, #56]	; (80131b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801317c:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801317e:	8b3a      	ldrh	r2, [r7, #24]
 8013180:	8bbb      	ldrh	r3, [r7, #28]
 8013182:	429a      	cmp	r2, r3
 8013184:	d301      	bcc.n	801318a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf6>
 8013186:	2200      	movs	r2, #0
 8013188:	e000      	b.n	801318c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf8>
 801318a:	2201      	movs	r2, #1
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	4618      	mov	r0, r3
 8013196:	3710      	adds	r7, #16
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}
 801319c:	0802099c 	.word	0x0802099c
 80131a0:	20009abc 	.word	0x20009abc
 80131a4:	20009ab0 	.word	0x20009ab0
 80131a8:	20009ab2 	.word	0x20009ab2
 80131ac:	20009ab4 	.word	0x20009ab4
 80131b0:	20009ab6 	.word	0x20009ab6
 80131b4:	20009ab8 	.word	0x20009ab8

080131b8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	4a04      	ldr	r2, [pc, #16]	; (80131d4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	601a      	str	r2, [r3, #0]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr
 80131d4:	0802099c 	.word	0x0802099c

080131d8 <_ZN8touchgfx3HALD0Ev>:
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f7ff ffe9 	bl	80131b8 <_ZN8touchgfx3HALD1Ev>
 80131e6:	2168      	movs	r1, #104	; 0x68
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f00b f8c8 	bl	801e37e <_ZdlPvj>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	4618      	mov	r0, r3
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	460b      	mov	r3, r1
 8013202:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	78fa      	ldrb	r2, [r7, #3]
 8013208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 801320c:	bf00      	nop
 801320e:	370c      	adds	r7, #12
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr

08013218 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	460b      	mov	r3, r1
 8013222:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	78fa      	ldrb	r2, [r7, #3]
 8013228:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 801322c:	bf00      	nop
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr

08013238 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	460b      	mov	r3, r1
 8013242:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 8013244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013248:	2b00      	cmp	r3, #0
 801324a:	dd03      	ble.n	8013254 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	78fa      	ldrb	r2, [r7, #3]
 8013250:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 8013254:	bf00      	nop
 8013256:	370c      	adds	r7, #12
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr

08013260 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	683a      	ldr	r2, [r7, #0]
 801326e:	611a      	str	r2, [r3, #16]
    }
 8013270:	bf00      	nop
 8013272:	370c      	adds	r7, #12
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	78fa      	ldrb	r2, [r7, #3]
 801328c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 8013290:	bf00      	nop
 8013292:	370c      	adds	r7, #12
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr

0801329c <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	460b      	mov	r3, r1
 80132a6:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	78fa      	ldrb	r2, [r7, #3]
 80132ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 80132b0:	bf00      	nop
 80132b2:	370c      	adds	r7, #12
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr

080132bc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
        texts = t;
 80132c4:	4a04      	ldr	r2, [pc, #16]	; (80132d8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6013      	str	r3, [r2, #0]
    }
 80132ca:	bf00      	nop
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	20009b28 	.word	0x20009b28

080132dc <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
    {
 80132e4:	4a04      	ldr	r2, [pc, #16]	; (80132f8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	601a      	str	r2, [r3, #0]
    }
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	370c      	adds	r7, #12
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr
 80132f8:	08020150 	.word	0x08020150

080132fc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
    }
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ff ffe9 	bl	80132dc <_ZN8touchgfx12FontProviderD1Ev>
 801330a:	2104      	movs	r1, #4
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f00b f836 	bl	801e37e <_ZdlPvj>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	4618      	mov	r0, r3
 8013316:	3708      	adds	r7, #8
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801331c:	b480      	push	{r7}
 801331e:	b085      	sub	sp, #20
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
 8013328:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801332a:	4a0b      	ldr	r2, [pc, #44]	; (8013358 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	601a      	str	r2, [r3, #0]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	605a      	str	r2, [r3, #4]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	609a      	str	r2, [r3, #8]
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	683a      	ldr	r2, [r7, #0]
 8013340:	60da      	str	r2, [r3, #12]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	69ba      	ldr	r2, [r7, #24]
 8013346:	611a      	str	r2, [r3, #16]
    {
    }
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	4618      	mov	r0, r3
 801334c:	3714      	adds	r7, #20
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	08020140 	.word	0x08020140

0801335c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    {
 8013364:	4a04      	ldr	r2, [pc, #16]	; (8013378 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	601a      	str	r2, [r3, #0]
    }
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	370c      	adds	r7, #12
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	08020140 	.word	0x08020140

0801337c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
    }
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff ffe9 	bl	801335c <_ZN8touchgfx7MVPHeapD1Ev>
 801338a:	2114      	movs	r1, #20
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f00a fff6 	bl	801e37e <_ZdlPvj>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	4618      	mov	r0, r3
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD() { }
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	4a04      	ldr	r2, [pc, #16]	; (80133b8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	601a      	str	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	4618      	mov	r0, r3
 80133ae:	370c      	adds	r7, #12
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr
 80133b8:	0802010c 	.word	0x0802010c

080133bc <_ZN8touchgfx3LCDD0Ev>:
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f7ff ffe9 	bl	801339c <_ZN8touchgfx3LCDD1Ev>
 80133ca:	2104      	movs	r1, #4
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f00a ffd6 	bl	801e37e <_ZdlPvj>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4618      	mov	r0, r3
 80133d6:	3708      	adds	r7, #8
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <_ZN8touchgfx3LCD4initEv>:
    virtual void init() { }
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	bf00      	nop
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	460b      	mov	r3, r1
 80133fa:	70fb      	strb	r3, [r7, #3]
    {
    }
 80133fc:	bf00      	nop
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr

08013408 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8013408:	b480      	push	{r7}
 801340a:	b083      	sub	sp, #12
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
    {
 8013410:	4a04      	ldr	r2, [pc, #16]	; (8013424 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	601a      	str	r2, [r3, #0]
    }
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4618      	mov	r0, r3
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr
 8013424:	080200f4 	.word	0x080200f4

08013428 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
    }
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7ff ffe9 	bl	8013408 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013436:	2104      	movs	r1, #4
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f00a ffa0 	bl	801e37e <_ZdlPvj>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	4618      	mov	r0, r3
 8013442:	3708      	adds	r7, #8
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	4a05      	ldr	r2, [pc, #20]	; (8013468 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	601a      	str	r2, [r3, #0]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff fd2d 	bl	8012eb8 <_ZN8touchgfx15UIEventListenerD1Ev>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	4618      	mov	r0, r3
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	08020ed0 	.word	0x08020ed0

0801346c <_ZN8touchgfx11ApplicationD0Ev>:
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7ff ffe7 	bl	8013448 <_ZN8touchgfx11ApplicationD1Ev>
 801347a:	f44f 7198 	mov.w	r1, #304	; 0x130
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f00a ff7d 	bl	801e37e <_ZdlPvj>
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4618      	mov	r0, r3
 8013488:	3708      	adds	r7, #8
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
	...

08013490 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	4a05      	ldr	r2, [pc, #20]	; (80134b0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	601a      	str	r2, [r3, #0]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7ff ffd1 	bl	8013448 <_ZN8touchgfx11ApplicationD1Ev>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	3708      	adds	r7, #8
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	080200b8 	.word	0x080200b8

080134b4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f7ff ffe7 	bl	8013490 <_ZN8touchgfx14MVPApplicationD1Ev>
 80134c2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f00a ff59 	bl	801e37e <_ZdlPvj>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4618      	mov	r0, r3
 80134d0:	3708      	adds	r7, #8
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b082      	sub	sp, #8
 80134da:	af00      	add	r7, sp, #0
 80134dc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 f804 	bl	80134ec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80134e4:	bf00      	nop
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00f      	beq.n	801351e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	330c      	adds	r3, #12
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4610      	mov	r0, r2
 8013512:	4798      	blx	r3
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d001      	beq.n	801351e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801351a:	2301      	movs	r3, #1
 801351c:	e000      	b.n	8013520 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 801351e:	2300      	movs	r3, #0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00e      	beq.n	8013542 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	3308      	adds	r3, #8
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	4610      	mov	r0, r2
 8013538:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2200      	movs	r2, #0
 801353e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8013542:	bf00      	nop
 8013544:	3708      	adds	r7, #8
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
	...

0801354c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	4a08      	ldr	r2, [pc, #32]	; (8013578 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	601a      	str	r2, [r3, #0]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013560:	4618      	mov	r0, r3
 8013562:	f000 fbed 	bl	8013d40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4618      	mov	r0, r3
 801356a:	f7ff ff91 	bl	8013490 <_ZN8touchgfx14MVPApplicationD1Ev>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	08020064 	.word	0x08020064

0801357c <_ZN23FrontendApplicationBaseD0Ev>:
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff ffe1 	bl	801354c <_ZN23FrontendApplicationBaseD1Ev>
 801358a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f00a fef5 	bl	801e37e <_ZdlPvj>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	4618      	mov	r0, r3
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
	...

080135a0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	4a05      	ldr	r2, [pc, #20]	; (80135c0 <_ZN19FrontendApplicationD1Ev+0x20>)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	601a      	str	r2, [r3, #0]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff ffcb 	bl	801354c <_ZN23FrontendApplicationBaseD1Ev>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	08020028 	.word	0x08020028

080135c4 <_ZN19FrontendApplicationD0Ev>:
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7ff ffe7 	bl	80135a0 <_ZN19FrontendApplicationD1Ev>
 80135d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f00a fed1 	bl	801e37e <_ZdlPvj>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	4618      	mov	r0, r3
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80135e6:	b580      	push	{r7, lr}
 80135e8:	b082      	sub	sp, #8
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80135f4:	4618      	mov	r0, r3
 80135f6:	f005 fefd 	bl	80193f4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f007 fb3d 	bl	801ac7c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013602:	bf00      	nop
 8013604:	3708      	adds	r7, #8
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}

0801360a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801360a:	b580      	push	{r7, lr}
 801360c:	b082      	sub	sp, #8
 801360e:	af00      	add	r7, sp, #0
 8013610:	6078      	str	r0, [r7, #4]
 8013612:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	4618      	mov	r0, r3
 8013618:	f005 fa5e 	bl	8018ad8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801361c:	bf00      	nop
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 8013624:	b580      	push	{r7, lr}
 8013626:	b086      	sub	sp, #24
 8013628:	af02      	add	r7, sp, #8
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	68b9      	ldr	r1, [r7, #8]
 801363e:	f7ff fe6d 	bl	801331c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013642:	4a04      	ldr	r2, [pc, #16]	; (8013654 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	601a      	str	r2, [r3, #0]
    {

    }
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	08020014 	.word	0x08020014

08013658 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013658:	b580      	push	{r7, lr}
 801365a:	af00      	add	r7, sp, #0
 801365c:	4801      	ldr	r0, [pc, #4]	; (8013664 <__tcf_0+0xc>)
 801365e:	f000 fab5 	bl	8013bcc <_ZN12FrontendHeapD1Ev>
 8013662:	bd80      	pop	{r7, pc}
 8013664:	200082ec 	.word	0x200082ec

08013668 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013668:	b580      	push	{r7, lr}
 801366a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801366c:	4b08      	ldr	r3, [pc, #32]	; (8013690 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f003 0301 	and.w	r3, r3, #1
 8013674:	2b00      	cmp	r3, #0
 8013676:	d108      	bne.n	801368a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8013678:	4806      	ldr	r0, [pc, #24]	; (8013694 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801367a:	f000 f831 	bl	80136e0 <_ZN12FrontendHeapC1Ev>
 801367e:	4b04      	ldr	r3, [pc, #16]	; (8013690 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013680:	2201      	movs	r2, #1
 8013682:	601a      	str	r2, [r3, #0]
 8013684:	4804      	ldr	r0, [pc, #16]	; (8013698 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8013686:	f00a feb5 	bl	801e3f4 <atexit>
        return instance;
 801368a:	4b02      	ldr	r3, [pc, #8]	; (8013694 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801368c:	4618      	mov	r0, r3
 801368e:	bd80      	pop	{r7, pc}
 8013690:	20008570 	.word	0x20008570
 8013694:	200082ec 	.word	0x200082ec
 8013698:	08013659 	.word	0x08013659

0801369c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	4a05      	ldr	r2, [pc, #20]	; (80136bc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	601a      	str	r2, [r3, #0]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7ff fe55 	bl	801335c <_ZN8touchgfx7MVPHeapD1Ev>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4618      	mov	r0, r3
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	08020014 	.word	0x08020014

080136c0 <_ZN16FrontendHeapBaseD0Ev>:
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f7ff ffe7 	bl	801369c <_ZN16FrontendHeapBaseD1Ev>
 80136ce:	2114      	movs	r1, #20
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f00a fe54 	bl	801e37e <_ZdlPvj>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80136e0:	b590      	push	{r4, r7, lr}
 80136e2:	b085      	sub	sp, #20
 80136e4:	af02      	add	r7, sp, #8
 80136e6:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f103 0114 	add.w	r1, r3, #20
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	4623      	mov	r3, r4
 8013706:	f7ff ff8d 	bl	8013624 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801370a:	4a18      	ldr	r2, [pc, #96]	; (801376c <_ZN12FrontendHeapC1Ev+0x8c>)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	601a      	str	r2, [r3, #0]
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	3314      	adds	r3, #20
 8013714:	4618      	mov	r0, r3
 8013716:	f000 f927 	bl	8013968 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	332c      	adds	r3, #44	; 0x2c
 801371e:	4618      	mov	r0, r3
 8013720:	f000 f956 	bl	80139d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801372a:	4618      	mov	r0, r3
 801372c:	f000 f984 	bl	8013a38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	4619      	mov	r1, r3
 8013740:	f005 fe34 	bl	80193ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801374a:	4618      	mov	r0, r3
 801374c:	f005 fe44 	bl	80193d8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8013758:	4619      	mov	r1, r3
 801375a:	4610      	mov	r0, r2
 801375c:	f7ff ff55 	bl	801360a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	4618      	mov	r0, r3
 8013764:	370c      	adds	r7, #12
 8013766:	46bd      	mov	sp, r7
 8013768:	bd90      	pop	{r4, r7, pc}
 801376a:	bf00      	nop
 801376c:	0801ff64 	.word	0x0801ff64

08013770 <_ZN8touchgfx8LCD16bppD1Ev>:
 */
class LCD16bpp : public LCD
{
public:

    virtual ~LCD16bpp() {}
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	4a05      	ldr	r2, [pc, #20]	; (8013790 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	601a      	str	r2, [r3, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	f7ff fe0b 	bl	801339c <_ZN8touchgfx3LCDD1Ev>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	08021524 	.word	0x08021524

08013794 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f7ff ffe7 	bl	8013770 <_ZN8touchgfx8LCD16bppD1Ev>
 80137a2:	2104      	movs	r1, #4
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f00a fdea 	bl	801e37e <_ZdlPvj>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}

080137b4 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af02      	add	r7, sp, #8
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	603b      	str	r3, [r7, #0]
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	8bbb      	ldrh	r3, [r7, #28]
 80137c6:	9301      	str	r3, [sp, #4]
 80137c8:	8b3b      	ldrh	r3, [r7, #24]
 80137ca:	9300      	str	r3, [sp, #0]
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	68b9      	ldr	r1, [r7, #8]
 80137d2:	f7ff fc5f 	bl	8013094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80137d6:	4a04      	ldr	r2, [pc, #16]	; (80137e8 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	601a      	str	r2, [r3, #0]
    {
    }
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	4618      	mov	r0, r3
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	0802023c 	.word	0x0802023c

080137ec <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	4a04      	ldr	r2, [pc, #16]	; (8013808 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	601a      	str	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr
 8013808:	0802018c 	.word	0x0802018c

0801380c <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4618      	mov	r0, r3
 8013818:	f7ff ffe8 	bl	80137ec <_ZN8touchgfx15TouchControllerC1Ev>
 801381c:	4a03      	ldr	r2, [pc, #12]	; (801382c <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	601a      	str	r2, [r3, #0]
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	4618      	mov	r0, r3
 8013826:	3708      	adds	r7, #8
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	080203b0 	.word	0x080203b0

08013830 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 8013830:	b480      	push	{r7}
 8013832:	af00      	add	r7, sp, #0
  return 480;
 8013834:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8013838:	4618      	mov	r0, r3
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr

08013842 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 8013842:	b480      	push	{r7}
 8013844:	af00      	add	r7, sp, #0
  return 272;
 8013846:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 801384a:	4618      	mov	r0, r3
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8013854:	b580      	push	{r7, lr}
 8013856:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 8013858:	f000 fc74 	bl	8014144 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 801385c:	f000 fcc8 	bl	80141f0 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8013860:	f000 fbe0 	bl	8014024 <_Z11MX_LCD_Initv>
    GPIO::init();
 8013864:	f000 fbb6 	bl	8013fd4 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8013868:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801386c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8013870:	601a      	str	r2, [r3, #0]
}
 8013872:	bf00      	nop
 8013874:	bd80      	pop	{r7, pc}
	...

08013878 <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	4618      	mov	r0, r3
 8013884:	f7ff fb8e 	bl	8012fa4 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 8013888:	4a03      	ldr	r2, [pc, #12]	; (8013898 <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	08020388 	.word	0x08020388

0801389c <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 801389c:	b590      	push	{r4, r7, lr}
 801389e:	b087      	sub	sp, #28
 80138a0:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 80138a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80138a6:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 80138a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80138ac:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 80138ae:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80138b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80138b6:	2200      	movs	r2, #0
 80138b8:	9203      	str	r2, [sp, #12]
 80138ba:	2200      	movs	r2, #0
 80138bc:	9202      	str	r2, [sp, #8]
 80138be:	2200      	movs	r2, #0
 80138c0:	9201      	str	r2, [sp, #4]
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	460b      	mov	r3, r1
 80138c6:	4a19      	ldr	r2, [pc, #100]	; (801392c <_ZN8touchgfx13touchgfx_initEv+0x90>)
 80138c8:	4919      	ldr	r1, [pc, #100]	; (8013930 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 80138ca:	481a      	ldr	r0, [pc, #104]	; (8013934 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 80138cc:	f000 f8e8 	bl	8013aa0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 80138d0:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	3374      	adds	r3, #116	; 0x74
 80138d8:	681c      	ldr	r4, [r3, #0]
 80138da:	4b17      	ldr	r3, [pc, #92]	; (8013938 <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	4619      	mov	r1, r3
 80138e0:	4b16      	ldr	r3, [pc, #88]	; (801393c <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 80138e2:	881a      	ldrh	r2, [r3, #0]
 80138e4:	2301      	movs	r3, #1
 80138e6:	9300      	str	r3, [sp, #0]
 80138e8:	2301      	movs	r3, #1
 80138ea:	6838      	ldr	r0, [r7, #0]
 80138ec:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 80138ee:	2102      	movs	r1, #2
 80138f0:	6838      	ldr	r0, [r7, #0]
 80138f2:	f7ff fca1 	bl	8013238 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 80138f6:	2101      	movs	r1, #1
 80138f8:	6838      	ldr	r0, [r7, #0]
 80138fa:	f7ff fccf 	bl	801329c <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 80138fe:	2100      	movs	r1, #0
 8013900:	6838      	ldr	r0, [r7, #0]
 8013902:	f7ff fc89 	bl	8013218 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 8013906:	2100      	movs	r1, #0
 8013908:	6838      	ldr	r0, [r7, #0]
 801390a:	f7ff fc75 	bl	80131f8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 801390e:	480c      	ldr	r0, [pc, #48]	; (8013940 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8013910:	f001 fe06 	bl	8015520 <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 8013914:	490a      	ldr	r1, [pc, #40]	; (8013940 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8013916:	6838      	ldr	r0, [r7, #0]
 8013918:	f7ff fca2 	bl	8013260 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 801391c:	2101      	movs	r1, #1
 801391e:	6838      	ldr	r0, [r7, #0]
 8013920:	f7ff fcac 	bl	801327c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8013924:	bf00      	nop
 8013926:	370c      	adds	r7, #12
 8013928:	46bd      	mov	sp, r7
 801392a:	bd90      	pop	{r4, r7, pc}
 801392c:	20009018 	.word	0x20009018
 8013930:	2000005c 	.word	0x2000005c
 8013934:	20008578 	.word	0x20008578
 8013938:	20000058 	.word	0x20000058
 801393c:	20000060 	.word	0x20000060
 8013940:	2000901c 	.word	0x2000901c

08013944 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 8013944:	b580      	push	{r7, lr}
 8013946:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 8013948:	f7ff ffa8 	bl	801389c <_ZN8touchgfx13touchgfx_initEv>
}
 801394c:	bf00      	nop
 801394e:	bd80      	pop	{r7, pc}

08013950 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 8013954:	f7fb fbe2 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 8013958:	4602      	mov	r2, r0
 801395a:	6813      	ldr	r3, [r2, #0]
 801395c:	330c      	adds	r3, #12
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	4610      	mov	r0, r2
 8013962:	4798      	blx	r3
}
 8013964:	bf00      	nop
 8013966:	bd80      	pop	{r7, pc}

08013968 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	4618      	mov	r0, r3
 8013974:	f005 fefc 	bl	8019770 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013978:	4a03      	ldr	r2, [pc, #12]	; (8013988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	601a      	str	r2, [r3, #0]
    {
    }
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	3708      	adds	r7, #8
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}
 8013988:	0801ffe0 	.word	0x0801ffe0

0801398c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 801398c:	b580      	push	{r7, lr}
 801398e:	b082      	sub	sp, #8
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
    {
    }
 8013994:	4a05      	ldr	r2, [pc, #20]	; (80139ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	601a      	str	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	4618      	mov	r0, r3
 801399e:	f005 fee5 	bl	801976c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	4618      	mov	r0, r3
 80139a6:	3708      	adds	r7, #8
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0801ffe0 	.word	0x0801ffe0

080139b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
    }
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff ffe7 	bl	801398c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80139be:	2118      	movs	r1, #24
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f00a fcdc 	bl	801e37e <_ZdlPvj>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	4618      	mov	r0, r3
 80139dc:	f005 fec8 	bl	8019770 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80139e0:	4a03      	ldr	r2, [pc, #12]	; (80139f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	601a      	str	r2, [r3, #0]
    }
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	4618      	mov	r0, r3
 80139ea:	3708      	adds	r7, #8
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	0801ffac 	.word	0x0801ffac

080139f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
    }
 80139fc:	4a05      	ldr	r2, [pc, #20]	; (8013a14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	601a      	str	r2, [r3, #0]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f005 feb1 	bl	801976c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}
 8013a14:	0801ffac 	.word	0x0801ffac

08013a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
    }
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7ff ffe7 	bl	80139f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013a26:	21f0      	movs	r1, #240	; 0xf0
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f00a fca8 	bl	801e37e <_ZdlPvj>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	3708      	adds	r7, #8
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}

08013a38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	4618      	mov	r0, r3
 8013a44:	f005 fe94 	bl	8019770 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013a48:	4a03      	ldr	r2, [pc, #12]	; (8013a58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	601a      	str	r2, [r3, #0]
    }
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	4618      	mov	r0, r3
 8013a52:	3708      	adds	r7, #8
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	0801ff78 	.word	0x0801ff78

08013a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
    }
 8013a64:	4a05      	ldr	r2, [pc, #20]	; (8013a7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	601a      	str	r2, [r3, #0]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f005 fe7d 	bl	801976c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	4618      	mov	r0, r3
 8013a76:	3708      	adds	r7, #8
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	0801ff78 	.word	0x0801ff78

08013a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
    }
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7ff ffe7 	bl	8013a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013a8e:	2114      	movs	r1, #20
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f00a fc74 	bl	801e37e <_ZdlPvj>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8013aa0:	b590      	push	{r4, r7, lr}
 8013aa2:	b089      	sub	sp, #36	; 0x24
 8013aa4:	af02      	add	r7, sp, #8
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	607a      	str	r2, [r7, #4]
 8013aac:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 8013aae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013ab2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	4613      	mov	r3, r2
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	68b9      	ldr	r1, [r7, #8]
 8013abe:	68f8      	ldr	r0, [r7, #12]
 8013ac0:	f000 f85c 	bl	8013b7c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8013ac4:	6178      	str	r0, [r7, #20]
    hal.initialize();
 8013ac6:	6978      	ldr	r0, [r7, #20]
 8013ac8:	f006 f824 	bl	8019b14 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8013acc:	f005 fbae 	bl	801922c <_ZN14BitmapDatabase11getInstanceEv>
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	f005 fbb5 	bl	8019240 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	4619      	mov	r1, r3
 8013ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013adc:	9300      	str	r3, [sp, #0]
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f008 fb68 	bl	801c1b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 8013ae8:	480d      	ldr	r0, [pc, #52]	; (8013b20 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 8013aea:	f7ff fbe7 	bl	80132bc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013aee:	2000      	movs	r0, #0
 8013af0:	f005 fbca 	bl	8019288 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8013af4:	480b      	ldr	r0, [pc, #44]	; (8013b24 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 8013af6:	f008 fac9 	bl	801c08c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013afa:	f7ff fdb5 	bl	8013668 <_ZN12FrontendHeap11getInstanceEv>
 8013afe:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	3350      	adds	r3, #80	; 0x50
 8013b06:	681c      	ldr	r4, [r3, #0]
 8013b08:	f007 f982 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	4619      	mov	r1, r3
 8013b10:	6978      	ldr	r0, [r7, #20]
 8013b12:	47a0      	blx	r4

    return hal;
 8013b14:	697b      	ldr	r3, [r7, #20]
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	371c      	adds	r7, #28
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd90      	pop	{r4, r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	20008574 	.word	0x20008574
 8013b24:	20000054 	.word	0x20000054

08013b28 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	4a05      	ldr	r2, [pc, #20]	; (8013b48 <_ZN10STM32F7HALD1Ev+0x20>)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	601a      	str	r2, [r3, #0]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fb3d 	bl	80131b8 <_ZN8touchgfx3HALD1Ev>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4618      	mov	r0, r3
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	0802023c 	.word	0x0802023c

08013b4c <_ZN10STM32F7HALD0Ev>:
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7ff ffe7 	bl	8013b28 <_ZN10STM32F7HALD1Ev>
 8013b5a:	2168      	movs	r1, #104	; 0x68
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f00a fc0e 	bl	801e37e <_ZdlPvj>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	4801      	ldr	r0, [pc, #4]	; (8013b78 <__tcf_1+0xc>)
 8013b72:	f7ff ffd9 	bl	8013b28 <_ZN10STM32F7HALD1Ev>
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	2000902c 	.word	0x2000902c

08013b7c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b086      	sub	sp, #24
 8013b80:	af02      	add	r7, sp, #8
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 8013b8a:	4b0d      	ldr	r3, [pc, #52]	; (8013bc0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f003 0301 	and.w	r3, r3, #1
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d10f      	bne.n	8013bb6 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 8013b96:	887b      	ldrh	r3, [r7, #2]
 8013b98:	8b3a      	ldrh	r2, [r7, #24]
 8013b9a:	9201      	str	r2, [sp, #4]
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	68ba      	ldr	r2, [r7, #8]
 8013ba2:	68f9      	ldr	r1, [r7, #12]
 8013ba4:	4807      	ldr	r0, [pc, #28]	; (8013bc4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 8013ba6:	f7ff fe05 	bl	80137b4 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013baa:	4b05      	ldr	r3, [pc, #20]	; (8013bc0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8013bac:	2201      	movs	r2, #1
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	4805      	ldr	r0, [pc, #20]	; (8013bc8 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 8013bb2:	f00a fc1f 	bl	801e3f4 <atexit>
    return hal;
 8013bb6:	4b03      	ldr	r3, [pc, #12]	; (8013bc4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3710      	adds	r7, #16
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}
 8013bc0:	20009094 	.word	0x20009094
 8013bc4:	2000902c 	.word	0x2000902c
 8013bc8:	08013b6d 	.word	0x08013b6d

08013bcc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	4a10      	ldr	r2, [pc, #64]	; (8013c18 <_ZN12FrontendHeapD1Ev+0x4c>)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7ff fcdd 	bl	80135a0 <_ZN19FrontendApplicationD1Ev>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7ff ff35 	bl	8013a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	332c      	adds	r3, #44	; 0x2c
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7ff fefc 	bl	80139f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	3314      	adds	r3, #20
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7ff fec3 	bl	801398c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7ff fd47 	bl	801369c <_ZN16FrontendHeapBaseD1Ev>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	4618      	mov	r0, r3
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	0801ff64 	.word	0x0801ff64

08013c1c <_ZN12FrontendHeapD0Ev>:
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7ff ffd1 	bl	8013bcc <_ZN12FrontendHeapD1Ev>
 8013c2a:	f44f 7121 	mov.w	r1, #644	; 0x284
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f00a fba5 	bl	801e37e <_ZdlPvj>
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4618      	mov	r0, r3
 8013c38:	3708      	adds	r7, #8
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
	...

08013c40 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	4a05      	ldr	r2, [pc, #20]	; (8013c60 <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	601a      	str	r2, [r3, #0]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff f9bd 	bl	8012fd0 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	08020388 	.word	0x08020388

08013c64 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7ff ffe7 	bl	8013c40 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 8013c72:	2110      	movs	r1, #16
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f00a fb82 	bl	801e37e <_ZdlPvj>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	4a05      	ldr	r2, [pc, #20]	; (8013ca4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	601a      	str	r2, [r3, #0]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7ff f965 	bl	8012f64 <_ZN8touchgfx15TouchControllerD1Ev>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	080203b0 	.word	0x080203b0

08013ca8 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7ff ffe7 	bl	8013c84 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 8013cb6:	2104      	movs	r1, #4
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f00a fb60 	bl	801e37e <_ZdlPvj>
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3708      	adds	r7, #8
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <_Z41__static_initialization_and_destruction_0ii>:
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d10d      	bne.n	8013cf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d108      	bne.n	8013cf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 8013ce2:	4812      	ldr	r0, [pc, #72]	; (8013d2c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8013ce4:	f000 fde2 	bl	80148ac <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 8013ce8:	4811      	ldr	r0, [pc, #68]	; (8013d30 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013cea:	f7ff fd8f 	bl	801380c <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 8013cee:	4811      	ldr	r0, [pc, #68]	; (8013d34 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8013cf0:	f7ff fdc2 	bl	8013878 <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d113      	bne.n	8013d22 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d10e      	bne.n	8013d22 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8013d04:	480c      	ldr	r0, [pc, #48]	; (8013d38 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8013d06:	f7ff fd33 	bl	8013770 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 8013d0a:	480a      	ldr	r0, [pc, #40]	; (8013d34 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8013d0c:	f7ff ff98 	bl	8013c40 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 8013d10:	4807      	ldr	r0, [pc, #28]	; (8013d30 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013d12:	f7ff ffb7 	bl	8013c84 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 8013d16:	4805      	ldr	r0, [pc, #20]	; (8013d2c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8013d18:	f000 fdf2 	bl	8014900 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 8013d1c:	4807      	ldr	r0, [pc, #28]	; (8013d3c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8013d1e:	f000 f831 	bl	8013d84 <_ZN23ApplicationFontProviderD1Ev>
}
 8013d22:	bf00      	nop
 8013d24:	3708      	adds	r7, #8
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	20008578 	.word	0x20008578
 8013d30:	20009018 	.word	0x20009018
 8013d34:	2000901c 	.word	0x2000901c
 8013d38:	2000005c 	.word	0x2000005c
 8013d3c:	20000054 	.word	0x20000054

08013d40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	4a05      	ldr	r2, [pc, #20]	; (8013d60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7ff fb59 	bl	8013408 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	080200a0 	.word	0x080200a0

08013d64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f7ff ffe7 	bl	8013d40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013d72:	2110      	movs	r1, #16
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f00a fb02 	bl	801e37e <_ZdlPvj>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	4a05      	ldr	r2, [pc, #20]	; (8013da4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	601a      	str	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ff faa1 	bl	80132dc <_ZN8touchgfx12FontProviderD1Ev>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	080203f4 	.word	0x080203f4

08013da8 <_ZN23ApplicationFontProviderD0Ev>:
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f7ff ffe7 	bl	8013d84 <_ZN23ApplicationFontProviderD1Ev>
 8013db6:	2104      	movs	r1, #4
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f00a fae0 	bl	801e37e <_ZdlPvj>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013dd0:	2301      	movs	r3, #1
    }
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	370c      	adds	r7, #12
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr

08013dde <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8013dde:	b480      	push	{r7}
 8013de0:	b083      	sub	sp, #12
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013de6:	230c      	movs	r3, #12
    }
 8013de8:	4618      	mov	r0, r3
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8013df4:	b480      	push	{r7}
 8013df6:	b083      	sub	sp, #12
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013e00:	887a      	ldrh	r2, [r7, #2]
 8013e02:	4613      	mov	r3, r2
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	3308      	adds	r3, #8
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4413      	add	r3, r2
    }
 8013e10:	4618      	mov	r0, r3
 8013e12:	370c      	adds	r7, #12
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	460b      	mov	r3, r1
 8013e26:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013e28:	887a      	ldrh	r2, [r7, #2]
 8013e2a:	4613      	mov	r3, r2
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	4413      	add	r3, r2
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	3308      	adds	r3, #8
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	4413      	add	r3, r2
    }
 8013e38:	4618      	mov	r0, r3
 8013e3a:	370c      	adds	r7, #12
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr

08013e44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013e4c:	2301      	movs	r3, #1
    }
 8013e4e:	4618      	mov	r0, r3
 8013e50:	370c      	adds	r7, #12
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr

08013e5a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013e5a:	b480      	push	{r7}
 8013e5c:	b083      	sub	sp, #12
 8013e5e:	af00      	add	r7, sp, #0
 8013e60:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013e62:	23e8      	movs	r3, #232	; 0xe8
    }
 8013e64:	4618      	mov	r0, r3
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013e70:	b480      	push	{r7}
 8013e72:	b083      	sub	sp, #12
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	460b      	mov	r3, r1
 8013e7a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e7c:	887b      	ldrh	r3, [r7, #2]
 8013e7e:	22e8      	movs	r2, #232	; 0xe8
 8013e80:	fb02 f303 	mul.w	r3, r2, r3
 8013e84:	3308      	adds	r3, #8
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	4413      	add	r3, r2
    }
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	370c      	adds	r7, #12
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e94:	4770      	bx	lr

08013e96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013e96:	b480      	push	{r7}
 8013e98:	b083      	sub	sp, #12
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	460b      	mov	r3, r1
 8013ea0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013ea2:	887b      	ldrh	r3, [r7, #2]
 8013ea4:	22e8      	movs	r2, #232	; 0xe8
 8013ea6:	fb02 f303 	mul.w	r3, r2, r3
 8013eaa:	3308      	adds	r3, #8
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	4413      	add	r3, r2
    }
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	370c      	adds	r7, #12
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013ec4:	2301      	movs	r3, #1
    }
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	370c      	adds	r7, #12
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr

08013ed2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013ed2:	b480      	push	{r7}
 8013ed4:	b083      	sub	sp, #12
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013eda:	2310      	movs	r3, #16
    }
 8013edc:	4618      	mov	r0, r3
 8013ede:	370c      	adds	r7, #12
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr

08013ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013ee8:	b480      	push	{r7}
 8013eea:	b083      	sub	sp, #12
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013ef4:	887b      	ldrh	r3, [r7, #2]
 8013ef6:	011b      	lsls	r3, r3, #4
 8013ef8:	3308      	adds	r3, #8
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	4413      	add	r3, r2
    }
 8013efe:	4618      	mov	r0, r3
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr

08013f0a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013f0a:	b480      	push	{r7}
 8013f0c:	b083      	sub	sp, #12
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	6078      	str	r0, [r7, #4]
 8013f12:	460b      	mov	r3, r1
 8013f14:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013f16:	887b      	ldrh	r3, [r7, #2]
 8013f18:	011b      	lsls	r3, r3, #4
 8013f1a:	3308      	adds	r3, #8
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	4413      	add	r3, r2
    }
 8013f20:	4618      	mov	r0, r3
 8013f22:	370c      	adds	r7, #12
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr

08013f2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	68d2      	ldr	r2, [r2, #12]
 8013f3c:	1052      	asrs	r2, r2, #1
 8013f3e:	1899      	adds	r1, r3, r2
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	68db      	ldr	r3, [r3, #12]
 8013f44:	f003 0301 	and.w	r3, r3, #1
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d102      	bne.n	8013f52 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	e00a      	b.n	8013f68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	68d2      	ldr	r2, [r2, #12]
 8013f5a:	1052      	asrs	r2, r2, #1
 8013f5c:	4413      	add	r3, r2
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	6892      	ldr	r2, [r2, #8]
 8013f64:	4413      	add	r3, r2
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	4608      	mov	r0, r1
 8013f6a:	4798      	blx	r3
    }
 8013f6c:	bf00      	nop
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	685b      	ldr	r3, [r3, #4]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d010      	beq.n	8013fa6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d107      	bne.n	8013f9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	f003 0301 	and.w	r3, r3, #1
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d101      	bne.n	8013f9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013f98:	2301      	movs	r3, #1
 8013f9a:	e000      	b.n	8013f9e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d001      	beq.n	8013fa6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	e000      	b.n	8013fa8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8013fa6:	2300      	movs	r3, #0
    }
 8013fa8:	4618      	mov	r0, r3
 8013faa:	370c      	adds	r7, #12
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr

08013fb4 <_GLOBAL__sub_I_LCD_GetXSize>:
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013fbc:	2001      	movs	r0, #1
 8013fbe:	f7ff fe83 	bl	8013cc8 <_Z41__static_initialization_and_destruction_0ii>
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <_GLOBAL__sub_D_LCD_GetXSize>:
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013fcc:	2000      	movs	r0, #0
 8013fce:	f7ff fe7b 	bl	8013cc8 <_Z41__static_initialization_and_destruction_0ii>
 8013fd2:	bd80      	pop	{r7, pc}

08013fd4 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	af00      	add	r7, sp, #0
}
 8013fd8:	bf00      	nop
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
 8013fe2:	b480      	push	{r7}
 8013fe4:	b083      	sub	sp, #12
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	4603      	mov	r3, r0
 8013fea:	71fb      	strb	r3, [r7, #7]
}
 8013fec:	bf00      	nop
 8013fee:	370c      	adds	r7, #12
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff6:	4770      	bx	lr

08013ff8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	4603      	mov	r3, r0
 8014000:	71fb      	strb	r3, [r7, #7]
}
 8014002:	bf00      	nop
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr

0801400e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
 801400e:	b480      	push	{r7}
 8014010:	b083      	sub	sp, #12
 8014012:	af00      	add	r7, sp, #0
 8014014:	4603      	mov	r3, r0
 8014016:	71fb      	strb	r3, [r7, #7]
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8014024:	b580      	push	{r7, lr}
 8014026:	b08e      	sub	sp, #56	; 0x38
 8014028:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 801402a:	4844      	ldr	r0, [pc, #272]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 801402c:	f7f1 f8e8 	bl	8005200 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8014030:	4b42      	ldr	r3, [pc, #264]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014032:	4a43      	ldr	r2, [pc, #268]	; (8014140 <_Z11MX_LCD_Initv+0x11c>)
 8014034:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8014036:	4b41      	ldr	r3, [pc, #260]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014038:	2200      	movs	r2, #0
 801403a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801403c:	4b3f      	ldr	r3, [pc, #252]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 801403e:	2200      	movs	r2, #0
 8014040:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8014042:	4b3e      	ldr	r3, [pc, #248]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014044:	2200      	movs	r2, #0
 8014046:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8014048:	4b3c      	ldr	r3, [pc, #240]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 801404a:	2200      	movs	r2, #0
 801404c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 801404e:	4b3b      	ldr	r3, [pc, #236]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014050:	2228      	movs	r2, #40	; 0x28
 8014052:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8014054:	4b39      	ldr	r3, [pc, #228]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014056:	2209      	movs	r2, #9
 8014058:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 801405a:	4b38      	ldr	r3, [pc, #224]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 801405c:	2235      	movs	r2, #53	; 0x35
 801405e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8014060:	4b36      	ldr	r3, [pc, #216]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014062:	220b      	movs	r2, #11
 8014064:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8014066:	4b35      	ldr	r3, [pc, #212]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014068:	f240 2215 	movw	r2, #533	; 0x215
 801406c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 801406e:	4b33      	ldr	r3, [pc, #204]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014070:	f240 121b 	movw	r2, #283	; 0x11b
 8014074:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8014076:	4b31      	ldr	r3, [pc, #196]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014078:	f240 2235 	movw	r2, #565	; 0x235
 801407c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 801407e:	4b2f      	ldr	r3, [pc, #188]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014080:	f240 121d 	movw	r2, #285	; 0x11d
 8014084:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8014086:	4b2d      	ldr	r3, [pc, #180]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014088:	2200      	movs	r2, #0
 801408a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801408e:	4b2b      	ldr	r3, [pc, #172]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014090:	2200      	movs	r2, #0
 8014092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8014096:	4b29      	ldr	r3, [pc, #164]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 8014098:	2200      	movs	r2, #0
 801409a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801409e:	4827      	ldr	r0, [pc, #156]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 80140a0:	f7f0 ffde 	bl	8005060 <HAL_LTDC_Init>
 80140a4:	4603      	mov	r3, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	bf14      	ite	ne
 80140aa:	2301      	movne	r3, #1
 80140ac:	2300      	moveq	r3, #0
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d001      	beq.n	80140b8 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 80140b4:	f002 fd70 	bl	8016b98 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 80140b8:	2300      	movs	r3, #0
 80140ba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80140bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80140c0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80140c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80140ca:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80140cc:	2302      	movs	r3, #2
 80140ce:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80140d0:	23ff      	movs	r3, #255	; 0xff
 80140d2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80140d4:	2300      	movs	r3, #0
 80140d6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80140d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80140dc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80140de:	2307      	movs	r3, #7
 80140e0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80140e2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80140e6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80140e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80140ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80140ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80140f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80140f4:	2300      	movs	r3, #0
 80140f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80140fa:	2300      	movs	r3, #0
 80140fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8014100:	2300      	movs	r3, #0
 8014102:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8014106:	1d3b      	adds	r3, r7, #4
 8014108:	2200      	movs	r2, #0
 801410a:	4619      	mov	r1, r3
 801410c:	480b      	ldr	r0, [pc, #44]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 801410e:	f7f1 f947 	bl	80053a0 <HAL_LTDC_ConfigLayer>
 8014112:	4603      	mov	r3, r0
 8014114:	2b00      	cmp	r3, #0
 8014116:	bf14      	ite	ne
 8014118:	2301      	movne	r3, #1
 801411a:	2300      	moveq	r3, #0
 801411c:	b2db      	uxtb	r3, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	d001      	beq.n	8014126 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 8014122:	f002 fd39 	bl	8016b98 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 8014126:	2200      	movs	r2, #0
 8014128:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801412c:	4803      	ldr	r0, [pc, #12]	; (801413c <_Z11MX_LCD_Initv+0x118>)
 801412e:	f7f1 f975 	bl	800541c <HAL_LTDC_SetPitch>

}
 8014132:	bf00      	nop
 8014134:	3738      	adds	r7, #56	; 0x38
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	20009098 	.word	0x20009098
 8014140:	40016800 	.word	0x40016800

08014144 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8014144:	b580      	push	{r7, lr}
 8014146:	b088      	sub	sp, #32
 8014148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 801414a:	1d3b      	adds	r3, r7, #4
 801414c:	2200      	movs	r2, #0
 801414e:	601a      	str	r2, [r3, #0]
 8014150:	605a      	str	r2, [r3, #4]
 8014152:	609a      	str	r2, [r3, #8]
 8014154:	60da      	str	r2, [r3, #12]
 8014156:	611a      	str	r2, [r3, #16]
 8014158:	615a      	str	r2, [r3, #20]
 801415a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801415c:	4b22      	ldr	r3, [pc, #136]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 801415e:	4a23      	ldr	r2, [pc, #140]	; (80141ec <_Z11MX_FMC_Initv+0xa8>)
 8014160:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8014162:	4b21      	ldr	r3, [pc, #132]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 8014164:	2200      	movs	r2, #0
 8014166:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8014168:	4b1f      	ldr	r3, [pc, #124]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 801416a:	2200      	movs	r2, #0
 801416c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801416e:	4b1e      	ldr	r3, [pc, #120]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 8014170:	2204      	movs	r2, #4
 8014172:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8014174:	4b1c      	ldr	r3, [pc, #112]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 8014176:	2210      	movs	r2, #16
 8014178:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801417a:	4b1b      	ldr	r3, [pc, #108]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 801417c:	2240      	movs	r2, #64	; 0x40
 801417e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8014180:	4b19      	ldr	r3, [pc, #100]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 8014182:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8014186:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8014188:	4b17      	ldr	r3, [pc, #92]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 801418a:	2200      	movs	r2, #0
 801418c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801418e:	4b16      	ldr	r3, [pc, #88]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 8014190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014194:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8014196:	4b14      	ldr	r3, [pc, #80]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 8014198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801419c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801419e:	4b12      	ldr	r3, [pc, #72]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80141a4:	2302      	movs	r3, #2
 80141a6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80141a8:	2307      	movs	r3, #7
 80141aa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80141ac:	2304      	movs	r3, #4
 80141ae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80141b0:	2307      	movs	r3, #7
 80141b2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80141b4:	2303      	movs	r3, #3
 80141b6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80141b8:	2302      	movs	r3, #2
 80141ba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80141bc:	2302      	movs	r3, #2
 80141be:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80141c0:	1d3b      	adds	r3, r7, #4
 80141c2:	4619      	mov	r1, r3
 80141c4:	4808      	ldr	r0, [pc, #32]	; (80141e8 <_Z11MX_FMC_Initv+0xa4>)
 80141c6:	f7f4 fc6d 	bl	8008aa4 <HAL_SDRAM_Init>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	bf14      	ite	ne
 80141d0:	2301      	movne	r3, #1
 80141d2:	2300      	moveq	r3, #0
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d001      	beq.n	80141de <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 80141da:	f002 fcdd 	bl	8016b98 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80141de:	bf00      	nop
 80141e0:	3720      	adds	r7, #32
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
 80141e6:	bf00      	nop
 80141e8:	20009180 	.word	0x20009180
 80141ec:	a0000140 	.word	0xa0000140

080141f0 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 80141f6:	2300      	movs	r3, #0
 80141f8:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80141fa:	4b2b      	ldr	r3, [pc, #172]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141fc:	2201      	movs	r2, #1
 80141fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8014200:	4b29      	ldr	r3, [pc, #164]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014202:	2210      	movs	r2, #16
 8014204:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014206:	4b28      	ldr	r3, [pc, #160]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014208:	2201      	movs	r2, #1
 801420a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801420c:	4b26      	ldr	r3, [pc, #152]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801420e:	2200      	movs	r2, #0
 8014210:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8014212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014216:	4924      	ldr	r1, [pc, #144]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014218:	4824      	ldr	r0, [pc, #144]	; (80142ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801421a:	f7f4 fc77 	bl	8008b0c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801421e:	2001      	movs	r0, #1
 8014220:	f7ed f89a 	bl	8001358 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8014224:	4b20      	ldr	r3, [pc, #128]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014226:	2202      	movs	r2, #2
 8014228:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801422a:	4b1f      	ldr	r3, [pc, #124]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801422c:	2210      	movs	r2, #16
 801422e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014230:	4b1d      	ldr	r3, [pc, #116]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014232:	2201      	movs	r2, #1
 8014234:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8014236:	4b1c      	ldr	r3, [pc, #112]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014238:	2200      	movs	r2, #0
 801423a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 801423c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014240:	4919      	ldr	r1, [pc, #100]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014242:	481a      	ldr	r0, [pc, #104]	; (80142ac <_Z15MX_SDRAM_InitExv+0xbc>)
 8014244:	f7f4 fc62 	bl	8008b0c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8014248:	4b17      	ldr	r3, [pc, #92]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801424a:	2203      	movs	r2, #3
 801424c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801424e:	4b16      	ldr	r3, [pc, #88]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014250:	2210      	movs	r2, #16
 8014252:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8014254:	4b14      	ldr	r3, [pc, #80]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014256:	2208      	movs	r2, #8
 8014258:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801425a:	4b13      	ldr	r3, [pc, #76]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801425c:	2200      	movs	r2, #0
 801425e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8014260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014264:	4910      	ldr	r1, [pc, #64]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014266:	4811      	ldr	r0, [pc, #68]	; (80142ac <_Z15MX_SDRAM_InitExv+0xbc>)
 8014268:	f7f4 fc50 	bl	8008b0c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 801426c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8014270:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8014272:	4b0d      	ldr	r3, [pc, #52]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014274:	2204      	movs	r2, #4
 8014276:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8014278:	4b0b      	ldr	r3, [pc, #44]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801427a:	2210      	movs	r2, #16
 801427c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801427e:	4b0a      	ldr	r3, [pc, #40]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014280:	2201      	movs	r2, #1
 8014282:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	4a08      	ldr	r2, [pc, #32]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014288:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801428a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801428e:	4906      	ldr	r1, [pc, #24]	; (80142a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014290:	4806      	ldr	r0, [pc, #24]	; (80142ac <_Z15MX_SDRAM_InitExv+0xbc>)
 8014292:	f7f4 fc3b 	bl	8008b0c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8014296:	f240 6173 	movw	r1, #1651	; 0x673
 801429a:	4804      	ldr	r0, [pc, #16]	; (80142ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801429c:	f7f4 fc61 	bl	8008b62 <HAL_SDRAM_ProgramRefreshRate>
}
 80142a0:	bf00      	nop
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	200091b4 	.word	0x200091b4
 80142ac:	20009180 	.word	0x20009180

080142b0 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08e      	sub	sp, #56	; 0x38
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142bc:	2200      	movs	r2, #0
 80142be:	601a      	str	r2, [r3, #0]
 80142c0:	605a      	str	r2, [r3, #4]
 80142c2:	609a      	str	r2, [r3, #8]
 80142c4:	60da      	str	r2, [r3, #12]
 80142c6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	4a55      	ldr	r2, [pc, #340]	; (8014424 <HAL_LTDC_MspInit+0x174>)
 80142ce:	4293      	cmp	r3, r2
 80142d0:	f040 80a3 	bne.w	801441a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80142d4:	4b54      	ldr	r3, [pc, #336]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 80142d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142d8:	4a53      	ldr	r2, [pc, #332]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 80142da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80142de:	6453      	str	r3, [r2, #68]	; 0x44
 80142e0:	4b51      	ldr	r3, [pc, #324]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 80142e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80142e8:	623b      	str	r3, [r7, #32]
 80142ea:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80142ec:	4b4e      	ldr	r3, [pc, #312]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 80142ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f0:	4a4d      	ldr	r2, [pc, #308]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 80142f2:	f043 0310 	orr.w	r3, r3, #16
 80142f6:	6313      	str	r3, [r2, #48]	; 0x30
 80142f8:	4b4b      	ldr	r3, [pc, #300]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 80142fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142fc:	f003 0310 	and.w	r3, r3, #16
 8014300:	61fb      	str	r3, [r7, #28]
 8014302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014304:	4b48      	ldr	r3, [pc, #288]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 8014306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014308:	4a47      	ldr	r2, [pc, #284]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 801430a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801430e:	6313      	str	r3, [r2, #48]	; 0x30
 8014310:	4b45      	ldr	r3, [pc, #276]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 8014312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014318:	61bb      	str	r3, [r7, #24]
 801431a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 801431c:	4b42      	ldr	r3, [pc, #264]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 801431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014320:	4a41      	ldr	r2, [pc, #260]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 8014322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014326:	6313      	str	r3, [r2, #48]	; 0x30
 8014328:	4b3f      	ldr	r3, [pc, #252]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 801432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014330:	617b      	str	r3, [r7, #20]
 8014332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014334:	4b3c      	ldr	r3, [pc, #240]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 8014336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014338:	4a3b      	ldr	r2, [pc, #236]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 801433a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801433e:	6313      	str	r3, [r2, #48]	; 0x30
 8014340:	4b39      	ldr	r3, [pc, #228]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 8014342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014348:	613b      	str	r3, [r7, #16]
 801434a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801434c:	4b36      	ldr	r3, [pc, #216]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 801434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014350:	4a35      	ldr	r2, [pc, #212]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 8014352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014356:	6313      	str	r3, [r2, #48]	; 0x30
 8014358:	4b33      	ldr	r3, [pc, #204]	; (8014428 <HAL_LTDC_MspInit+0x178>)
 801435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8014364:	2310      	movs	r3, #16
 8014366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014368:	2302      	movs	r3, #2
 801436a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801436c:	2300      	movs	r3, #0
 801436e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014370:	2300      	movs	r3, #0
 8014372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014374:	230e      	movs	r3, #14
 8014376:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8014378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801437c:	4619      	mov	r1, r3
 801437e:	482b      	ldr	r0, [pc, #172]	; (801442c <HAL_LTDC_MspInit+0x17c>)
 8014380:	f7ee f97e 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8014384:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8014388:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801438a:	2302      	movs	r3, #2
 801438c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801438e:	2300      	movs	r3, #0
 8014390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014392:	2300      	movs	r3, #0
 8014394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014396:	230e      	movs	r3, #14
 8014398:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801439a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801439e:	4619      	mov	r1, r3
 80143a0:	4823      	ldr	r0, [pc, #140]	; (8014430 <HAL_LTDC_MspInit+0x180>)
 80143a2:	f7ee f96d 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80143a6:	23f7      	movs	r3, #247	; 0xf7
 80143a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143aa:	2302      	movs	r3, #2
 80143ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143ae:	2300      	movs	r3, #0
 80143b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143b2:	2300      	movs	r3, #0
 80143b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80143b6:	230e      	movs	r3, #14
 80143b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80143ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143be:	4619      	mov	r1, r3
 80143c0:	481c      	ldr	r0, [pc, #112]	; (8014434 <HAL_LTDC_MspInit+0x184>)
 80143c2:	f7ee f95d 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80143c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143cc:	2302      	movs	r3, #2
 80143ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143d0:	2300      	movs	r3, #0
 80143d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143d4:	2300      	movs	r3, #0
 80143d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80143d8:	2309      	movs	r3, #9
 80143da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80143dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143e0:	4619      	mov	r1, r3
 80143e2:	4815      	ldr	r0, [pc, #84]	; (8014438 <HAL_LTDC_MspInit+0x188>)
 80143e4:	f7ee f94c 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80143e8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80143ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143ee:	2302      	movs	r3, #2
 80143f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143f2:	2300      	movs	r3, #0
 80143f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143f6:	2300      	movs	r3, #0
 80143f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80143fa:	230e      	movs	r3, #14
 80143fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80143fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014402:	4619      	mov	r1, r3
 8014404:	480d      	ldr	r0, [pc, #52]	; (801443c <HAL_LTDC_MspInit+0x18c>)
 8014406:	f7ee f93b 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801440a:	2200      	movs	r2, #0
 801440c:	2105      	movs	r1, #5
 801440e:	2058      	movs	r0, #88	; 0x58
 8014410:	f7ed fb10 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8014414:	2058      	movs	r0, #88	; 0x58
 8014416:	f7ed fb29 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801441a:	bf00      	nop
 801441c:	3738      	adds	r7, #56	; 0x38
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	40016800 	.word	0x40016800
 8014428:	40023800 	.word	0x40023800
 801442c:	40021000 	.word	0x40021000
 8014430:	40022400 	.word	0x40022400
 8014434:	40022800 	.word	0x40022800
 8014438:	40021800 	.word	0x40021800
 801443c:	40022000 	.word	0x40022000

08014440 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4a13      	ldr	r2, [pc, #76]	; (801449c <HAL_LTDC_MspDeInit+0x5c>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d11f      	bne.n	8014492 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8014452:	4b13      	ldr	r3, [pc, #76]	; (80144a0 <HAL_LTDC_MspDeInit+0x60>)
 8014454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014456:	4a12      	ldr	r2, [pc, #72]	; (80144a0 <HAL_LTDC_MspDeInit+0x60>)
 8014458:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801445c:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 801445e:	2110      	movs	r1, #16
 8014460:	4810      	ldr	r0, [pc, #64]	; (80144a4 <HAL_LTDC_MspDeInit+0x64>)
 8014462:	f7ee fab7 	bl	80029d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8014466:	f64e 71ff 	movw	r1, #61439	; 0xefff
 801446a:	480f      	ldr	r0, [pc, #60]	; (80144a8 <HAL_LTDC_MspDeInit+0x68>)
 801446c:	f7ee fab2 	bl	80029d4 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8014470:	21f7      	movs	r1, #247	; 0xf7
 8014472:	480e      	ldr	r0, [pc, #56]	; (80144ac <HAL_LTDC_MspDeInit+0x6c>)
 8014474:	f7ee faae 	bl	80029d4 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8014478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801447c:	480c      	ldr	r0, [pc, #48]	; (80144b0 <HAL_LTDC_MspDeInit+0x70>)
 801447e:	f7ee faa9 	bl	80029d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8014482:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8014486:	480b      	ldr	r0, [pc, #44]	; (80144b4 <HAL_LTDC_MspDeInit+0x74>)
 8014488:	f7ee faa4 	bl	80029d4 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 801448c:	2058      	movs	r0, #88	; 0x58
 801448e:	f7ed fafb 	bl	8001a88 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8014492:	bf00      	nop
 8014494:	3708      	adds	r7, #8
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	40016800 	.word	0x40016800
 80144a0:	40023800 	.word	0x40023800
 80144a4:	40021000 	.word	0x40021000
 80144a8:	40022400 	.word	0x40022400
 80144ac:	40022800 	.word	0x40022800
 80144b0:	40021800 	.word	0x40021800
 80144b4:	40022000 	.word	0x40022000

080144b8 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80144be:	1d3b      	adds	r3, r7, #4
 80144c0:	2200      	movs	r2, #0
 80144c2:	601a      	str	r2, [r3, #0]
 80144c4:	605a      	str	r2, [r3, #4]
 80144c6:	609a      	str	r2, [r3, #8]
 80144c8:	60da      	str	r2, [r3, #12]
 80144ca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80144cc:	4b3a      	ldr	r3, [pc, #232]	; (80145b8 <_ZL15HAL_FMC_MspInitv+0x100>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d16d      	bne.n	80145b0 <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80144d4:	4b38      	ldr	r3, [pc, #224]	; (80145b8 <_ZL15HAL_FMC_MspInitv+0x100>)
 80144d6:	2201      	movs	r2, #1
 80144d8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80144da:	4b38      	ldr	r3, [pc, #224]	; (80145bc <_ZL15HAL_FMC_MspInitv+0x104>)
 80144dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144de:	4a37      	ldr	r2, [pc, #220]	; (80145bc <_ZL15HAL_FMC_MspInitv+0x104>)
 80144e0:	f043 0301 	orr.w	r3, r3, #1
 80144e4:	6393      	str	r3, [r2, #56]	; 0x38
 80144e6:	4b35      	ldr	r3, [pc, #212]	; (80145bc <_ZL15HAL_FMC_MspInitv+0x104>)
 80144e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144ea:	f003 0301 	and.w	r3, r3, #1
 80144ee:	603b      	str	r3, [r7, #0]
 80144f0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80144f2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80144f6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144f8:	2302      	movs	r3, #2
 80144fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144fc:	2300      	movs	r3, #0
 80144fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014500:	2303      	movs	r3, #3
 8014502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014504:	230c      	movs	r3, #12
 8014506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014508:	1d3b      	adds	r3, r7, #4
 801450a:	4619      	mov	r1, r3
 801450c:	482c      	ldr	r0, [pc, #176]	; (80145c0 <_ZL15HAL_FMC_MspInitv+0x108>)
 801450e:	f7ee f8b7 	bl	8002680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8014512:	f248 1333 	movw	r3, #33075	; 0x8133
 8014516:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014518:	2302      	movs	r3, #2
 801451a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801451c:	2300      	movs	r3, #0
 801451e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014520:	2303      	movs	r3, #3
 8014522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014524:	230c      	movs	r3, #12
 8014526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014528:	1d3b      	adds	r3, r7, #4
 801452a:	4619      	mov	r1, r3
 801452c:	4825      	ldr	r0, [pc, #148]	; (80145c4 <_ZL15HAL_FMC_MspInitv+0x10c>)
 801452e:	f7ee f8a7 	bl	8002680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8014532:	f24c 7303 	movw	r3, #50947	; 0xc703
 8014536:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014538:	2302      	movs	r3, #2
 801453a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801453c:	2300      	movs	r3, #0
 801453e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014540:	2303      	movs	r3, #3
 8014542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014544:	230c      	movs	r3, #12
 8014546:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014548:	1d3b      	adds	r3, r7, #4
 801454a:	4619      	mov	r1, r3
 801454c:	481e      	ldr	r0, [pc, #120]	; (80145c8 <_ZL15HAL_FMC_MspInitv+0x110>)
 801454e:	f7ee f897 	bl	8002680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8014552:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8014556:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014558:	2302      	movs	r3, #2
 801455a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801455c:	2300      	movs	r3, #0
 801455e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014560:	2303      	movs	r3, #3
 8014562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014564:	230c      	movs	r3, #12
 8014566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014568:	1d3b      	adds	r3, r7, #4
 801456a:	4619      	mov	r1, r3
 801456c:	4817      	ldr	r0, [pc, #92]	; (80145cc <_ZL15HAL_FMC_MspInitv+0x114>)
 801456e:	f7ee f887 	bl	8002680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8014572:	2328      	movs	r3, #40	; 0x28
 8014574:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014576:	2302      	movs	r3, #2
 8014578:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801457a:	2300      	movs	r3, #0
 801457c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801457e:	2303      	movs	r3, #3
 8014580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014582:	230c      	movs	r3, #12
 8014584:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014586:	1d3b      	adds	r3, r7, #4
 8014588:	4619      	mov	r1, r3
 801458a:	4811      	ldr	r0, [pc, #68]	; (80145d0 <_ZL15HAL_FMC_MspInitv+0x118>)
 801458c:	f7ee f878 	bl	8002680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8014590:	2308      	movs	r3, #8
 8014592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014594:	2302      	movs	r3, #2
 8014596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014598:	2300      	movs	r3, #0
 801459a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801459c:	2303      	movs	r3, #3
 801459e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80145a0:	230c      	movs	r3, #12
 80145a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80145a4:	1d3b      	adds	r3, r7, #4
 80145a6:	4619      	mov	r1, r3
 80145a8:	480a      	ldr	r0, [pc, #40]	; (80145d4 <_ZL15HAL_FMC_MspInitv+0x11c>)
 80145aa:	f7ee f869 	bl	8002680 <HAL_GPIO_Init>
 80145ae:	e000      	b.n	80145b2 <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 80145b0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80145b2:	3718      	adds	r7, #24
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	200091c4 	.word	0x200091c4
 80145bc:	40023800 	.word	0x40023800
 80145c0:	40021000 	.word	0x40021000
 80145c4:	40021800 	.word	0x40021800
 80145c8:	40020c00 	.word	0x40020c00
 80145cc:	40021400 	.word	0x40021400
 80145d0:	40021c00 	.word	0x40021c00
 80145d4:	40020800 	.word	0x40020800

080145d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80145e0:	f7ff ff6a 	bl	80144b8 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	4a0d      	ldr	r2, [pc, #52]	; (8014630 <HAL_DMA2D_MspInit+0x44>)
 80145fa:	4293      	cmp	r3, r2
 80145fc:	d113      	bne.n	8014626 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80145fe:	4b0d      	ldr	r3, [pc, #52]	; (8014634 <HAL_DMA2D_MspInit+0x48>)
 8014600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014602:	4a0c      	ldr	r2, [pc, #48]	; (8014634 <HAL_DMA2D_MspInit+0x48>)
 8014604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014608:	6313      	str	r3, [r2, #48]	; 0x30
 801460a:	4b0a      	ldr	r3, [pc, #40]	; (8014634 <HAL_DMA2D_MspInit+0x48>)
 801460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801460e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014612:	60fb      	str	r3, [r7, #12]
 8014614:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8014616:	2200      	movs	r2, #0
 8014618:	2105      	movs	r1, #5
 801461a:	205a      	movs	r0, #90	; 0x5a
 801461c:	f7ed fa0a 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8014620:	205a      	movs	r0, #90	; 0x5a
 8014622:	f7ed fa23 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8014626:	bf00      	nop
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	4002b000 	.word	0x4002b000
 8014634:	40023800 	.word	0x40023800

08014638 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	4a07      	ldr	r2, [pc, #28]	; (8014664 <HAL_DMA2D_MspDeInit+0x2c>)
 8014646:	4293      	cmp	r3, r2
 8014648:	d108      	bne.n	801465c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 801464a:	4b07      	ldr	r3, [pc, #28]	; (8014668 <HAL_DMA2D_MspDeInit+0x30>)
 801464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801464e:	4a06      	ldr	r2, [pc, #24]	; (8014668 <HAL_DMA2D_MspDeInit+0x30>)
 8014650:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014654:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8014656:	205a      	movs	r0, #90	; 0x5a
 8014658:	f7ed fa16 	bl	8001a88 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 801465c:	bf00      	nop
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	4002b000 	.word	0x4002b000
 8014668:	40023800 	.word	0x40023800

0801466c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 801466c:	b480      	push	{r7}
 801466e:	b083      	sub	sp, #12
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
    {
 8014674:	4a04      	ldr	r2, [pc, #16]	; (8014688 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	601a      	str	r2, [r3, #0]
    }
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	370c      	adds	r7, #12
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr
 8014688:	08020218 	.word	0x08020218

0801468c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
    }
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7ff ffe9 	bl	801466c <_ZN8touchgfx9DMA_QueueD1Ev>
 801469a:	2104      	movs	r1, #4
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f009 fe6e 	bl	801e37e <_ZdlPvj>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	3340      	adds	r3, #64	; 0x40
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	4798      	blx	r3
    }
 80146c0:	bf00      	nop
 80146c2:	3708      	adds	r7, #8
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}

080146c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
    {
 80146d0:	4a04      	ldr	r2, [pc, #16]	; (80146e4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	601a      	str	r2, [r3, #0]
    }
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr
 80146e4:	08020d24 	.word	0x08020d24

080146e8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
    }
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f7ff ffe9 	bl	80146c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80146f6:	210c      	movs	r1, #12
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f009 fe40 	bl	801e37e <_ZdlPvj>
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	4618      	mov	r0, r3
 8014702:	3708      	adds	r7, #8
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8014712:	4a09      	ldr	r2, [pc, #36]	; (8014738 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	601a      	str	r2, [r3, #0]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	683a      	ldr	r2, [r7, #0]
 801471c:	605a      	str	r2, [r3, #4]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2200      	movs	r2, #0
 8014722:	721a      	strb	r2, [r3, #8]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	725a      	strb	r2, [r3, #9]
    {
    }
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	370c      	adds	r7, #12
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr
 8014738:	08020d24 	.word	0x08020d24

0801473c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	3314      	adds	r3, #20
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4610      	mov	r0, r2
 8014754:	4798      	blx	r3
    }
 8014756:	bf00      	nop
 8014758:	3708      	adds	r7, #8
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801475e:	b580      	push	{r7, lr}
 8014760:	b082      	sub	sp, #8
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	3324      	adds	r3, #36	; 0x24
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4610      	mov	r0, r2
 8014772:	4798      	blx	r3
    }
 8014774:	bf00      	nop
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <__NVIC_EnableIRQ>:
{
 801477c:	b480      	push	{r7}
 801477e:	b083      	sub	sp, #12
 8014780:	af00      	add	r7, sp, #0
 8014782:	4603      	mov	r3, r0
 8014784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801478a:	2b00      	cmp	r3, #0
 801478c:	db0d      	blt.n	80147aa <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014792:	b2db      	uxtb	r3, r3
 8014794:	f003 021f 	and.w	r2, r3, #31
 8014798:	4907      	ldr	r1, [pc, #28]	; (80147b8 <__NVIC_EnableIRQ+0x3c>)
 801479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801479e:	095b      	lsrs	r3, r3, #5
 80147a0:	2001      	movs	r0, #1
 80147a2:	fa00 f202 	lsl.w	r2, r0, r2
 80147a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80147aa:	bf00      	nop
 80147ac:	370c      	adds	r7, #12
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	e000e100 	.word	0xe000e100

080147bc <__NVIC_DisableIRQ>:
{
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	4603      	mov	r3, r0
 80147c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80147c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	db12      	blt.n	80147f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80147ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	f003 021f 	and.w	r2, r3, #31
 80147d8:	4909      	ldr	r1, [pc, #36]	; (8014800 <__NVIC_DisableIRQ+0x44>)
 80147da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147de:	095b      	lsrs	r3, r3, #5
 80147e0:	2001      	movs	r0, #1
 80147e2:	fa00 f202 	lsl.w	r2, r0, r2
 80147e6:	3320      	adds	r3, #32
 80147e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80147ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80147f0:	f3bf 8f6f 	isb	sy
}
 80147f4:	bf00      	nop
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr
 8014800:	e000e100 	.word	0xe000e100

08014804 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8014804:	b480      	push	{r7}
 8014806:	b085      	sub	sp, #20
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	607a      	str	r2, [r7, #4]
 8014810:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801481c:	68ba      	ldr	r2, [r7, #8]
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	430a      	orrs	r2, r1
 8014824:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801482c:	f023 0107 	bic.w	r1, r3, #7
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	430a      	orrs	r2, r1
 8014838:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014840:	4b06      	ldr	r3, [pc, #24]	; (801485c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8014842:	4013      	ands	r3, r2
 8014844:	6839      	ldr	r1, [r7, #0]
 8014846:	68fa      	ldr	r2, [r7, #12]
 8014848:	6812      	ldr	r2, [r2, #0]
 801484a:	430b      	orrs	r3, r1
 801484c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801484e:	2300      	movs	r3, #0
}
 8014850:	4618      	mov	r0, r3
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr
 801485c:	ffffc000 	.word	0xffffc000

08014860 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8014868:	f7fa fc58 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 801486c:	4603      	mov	r3, r0
 801486e:	4618      	mov	r0, r3
 8014870:	f7ff ff64 	bl	801473c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8014874:	bf00      	nop
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 8014884:	bf00      	nop
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	3314      	adds	r3, #20
 801489c:	4618      	mov	r0, r3
 801489e:	f7fa fd27 	bl	800f2f0 <_ZN8touchgfx9colortypeC1Ev>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 80148ac:	b5b0      	push	{r4, r5, r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	330c      	adds	r3, #12
 80148ba:	4619      	mov	r1, r3
 80148bc:	4610      	mov	r0, r2
 80148be:	f7ff ff23 	bl	8014708 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80148c2:	4a0e      	ldr	r2, [pc, #56]	; (80148fc <_ZN10STM32F7DMAC1Ev+0x50>)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	601a      	str	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f103 000c 	add.w	r0, r3, #12
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	3320      	adds	r3, #32
 80148d2:	2260      	movs	r2, #96	; 0x60
 80148d4:	4619      	mov	r1, r3
 80148d6:	f005 fc45 	bl	801a164 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	3320      	adds	r3, #32
 80148de:	245f      	movs	r4, #95	; 0x5f
 80148e0:	461d      	mov	r5, r3
 80148e2:	2c00      	cmp	r4, #0
 80148e4:	db05      	blt.n	80148f2 <_ZN10STM32F7DMAC1Ev+0x46>
 80148e6:	4628      	mov	r0, r5
 80148e8:	f7ff ffd2 	bl	8014890 <_ZN8touchgfx6BlitOpC1Ev>
 80148ec:	351c      	adds	r5, #28
 80148ee:	3c01      	subs	r4, #1
 80148f0:	e7f7      	b.n	80148e2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4618      	mov	r0, r3
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bdb0      	pop	{r4, r5, r7, pc}
 80148fc:	080201cc 	.word	0x080201cc

08014900 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	4a0b      	ldr	r2, [pc, #44]	; (8014938 <_ZN10STM32F7DMAD1Ev+0x38>)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801490e:	480b      	ldr	r0, [pc, #44]	; (801493c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8014910:	f7ed fb08 	bl	8001f24 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014914:	205a      	movs	r0, #90	; 0x5a
 8014916:	f7ff ff51 	bl	80147bc <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	330c      	adds	r3, #12
 801491e:	4618      	mov	r0, r3
 8014920:	f000 fab6 	bl	8014e90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	4618      	mov	r0, r3
 8014928:	f7ff fece 	bl	80146c8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	4618      	mov	r0, r3
 8014930:	3708      	adds	r7, #8
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}
 8014936:	bf00      	nop
 8014938:	080201cc 	.word	0x080201cc
 801493c:	20009140 	.word	0x20009140

08014940 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
}
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff ffd9 	bl	8014900 <_ZN10STM32F7DMAD1Ev>
 801494e:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f009 fd13 	bl	801e37e <_ZdlPvj>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	4618      	mov	r0, r3
 801495c:	3708      	adds	r7, #8
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
	...

08014964 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801496c:	4b09      	ldr	r3, [pc, #36]	; (8014994 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801496e:	4a0a      	ldr	r2, [pc, #40]	; (8014998 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8014970:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8014972:	4808      	ldr	r0, [pc, #32]	; (8014994 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014974:	f7ed fa8c 	bl	8001e90 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014978:	4b06      	ldr	r3, [pc, #24]	; (8014994 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801497a:	4a08      	ldr	r2, [pc, #32]	; (801499c <_ZN10STM32F7DMA10initializeEv+0x38>)
 801497c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801497e:	4b05      	ldr	r3, [pc, #20]	; (8014994 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014980:	4a07      	ldr	r2, [pc, #28]	; (80149a0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8014982:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8014984:	205a      	movs	r0, #90	; 0x5a
 8014986:	f7ff fef9 	bl	801477c <__NVIC_EnableIRQ>
}
 801498a:	bf00      	nop
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	20009140 	.word	0x20009140
 8014998:	4002b000 	.word	0x4002b000
 801499c:	08014861 	.word	0x08014861
 80149a0:	0801487d 	.word	0x0801487d

080149a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 80149ac:	4b07      	ldr	r3, [pc, #28]	; (80149cc <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d001      	beq.n	80149ba <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 80149b6:	2300      	movs	r3, #0
 80149b8:	e001      	b.n	80149be <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 80149ba:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 80149be:	4618      	mov	r0, r3
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	200091c8 	.word	0x200091c8

080149d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80149d0:	b590      	push	{r4, r7, lr}
 80149d2:	b08d      	sub	sp, #52	; 0x34
 80149d4:	af02      	add	r7, sp, #8
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80149da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80149de:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80149e0:	2300      	movs	r3, #0
 80149e2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80149e8:	2b20      	cmp	r3, #32
 80149ea:	d007      	beq.n	80149fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2b40      	cmp	r3, #64	; 0x40
 80149f2:	d003      	beq.n	80149fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b04      	cmp	r3, #4
 80149fa:	d101      	bne.n	8014a00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80149fc:	2301      	movs	r3, #1
 80149fe:	e000      	b.n	8014a02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8014a00:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014a02:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014a08:	2b80      	cmp	r3, #128	; 0x80
 8014a0a:	d004      	beq.n	8014a16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a14:	d101      	bne.n	8014a1a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014a16:	2301      	movs	r3, #1
 8014a18:	e000      	b.n	8014a1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014a1a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014a1c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014a1e:	f7fa fc75 	bl	800f30c <_ZN8touchgfx3HAL3lcdEv>
 8014a22:	4602      	mov	r2, r0
 8014a24:	6813      	ldr	r3, [r2, #0]
 8014a26:	3320      	adds	r3, #32
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4610      	mov	r0, r2
 8014a2c:	4798      	blx	r3
 8014a2e:	4603      	mov	r3, r0
 8014a30:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2b40      	cmp	r3, #64	; 0x40
 8014a38:	d01d      	beq.n	8014a76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014a3a:	2b40      	cmp	r3, #64	; 0x40
 8014a3c:	d804      	bhi.n	8014a48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8014a3e:	2b04      	cmp	r3, #4
 8014a40:	d00e      	beq.n	8014a60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8014a42:	2b20      	cmp	r3, #32
 8014a44:	d017      	beq.n	8014a76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014a46:	e019      	b.n	8014a7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8014a48:	2b80      	cmp	r3, #128	; 0x80
 8014a4a:	d003      	beq.n	8014a54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8014a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a50:	d003      	beq.n	8014a5a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8014a52:	e013      	b.n	8014a7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8014a54:	230a      	movs	r3, #10
 8014a56:	623b      	str	r3, [r7, #32]
        break;
 8014a58:	e01a      	b.n	8014a90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8014a5a:	2309      	movs	r3, #9
 8014a5c:	623b      	str	r3, [r7, #32]
        break;
 8014a5e:	e017      	b.n	8014a90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014a64:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014a66:	7f7b      	ldrb	r3, [r7, #29]
 8014a68:	2b10      	cmp	r3, #16
 8014a6a:	d101      	bne.n	8014a70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8014a6c:	2302      	movs	r3, #2
 8014a6e:	e000      	b.n	8014a72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8014a70:	2301      	movs	r3, #1
 8014a72:	623b      	str	r3, [r7, #32]
        break;
 8014a74:	e00c      	b.n	8014a90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8014a76:	2300      	movs	r3, #0
 8014a78:	623b      	str	r3, [r7, #32]
        break;
 8014a7a:	e009      	b.n	8014a90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014a80:	7f7b      	ldrb	r3, [r7, #29]
 8014a82:	2b10      	cmp	r3, #16
 8014a84:	d101      	bne.n	8014a8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8014a86:	2302      	movs	r3, #2
 8014a88:	e000      	b.n	8014a8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	623b      	str	r3, [r7, #32]
        break;
 8014a8e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014a90:	4a76      	ldr	r2, [pc, #472]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a94:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014a96:	7f7b      	ldrb	r3, [r7, #29]
 8014a98:	2b10      	cmp	r3, #16
 8014a9a:	d101      	bne.n	8014aa0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8014a9c:	2302      	movs	r3, #2
 8014a9e:	e000      	b.n	8014aa2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	4a72      	ldr	r2, [pc, #456]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014aa4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	8a5b      	ldrh	r3, [r3, #18]
 8014aaa:	461a      	mov	r2, r3
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	899b      	ldrh	r3, [r3, #12]
 8014ab0:	1ad3      	subs	r3, r2, r3
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	4b6d      	ldr	r3, [pc, #436]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014ab6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014ab8:	7f7b      	ldrb	r3, [r7, #29]
 8014aba:	2b10      	cmp	r3, #16
 8014abc:	d101      	bne.n	8014ac2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8014abe:	2202      	movs	r2, #2
 8014ac0:	e000      	b.n	8014ac4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8014ac2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	8a5b      	ldrh	r3, [r3, #18]
 8014ac8:	4619      	mov	r1, r3
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	899b      	ldrh	r3, [r3, #12]
 8014ace:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ad2:	4866      	ldr	r0, [pc, #408]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014ad4:	f7ff fe96 	bl	8014804 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014ad8:	4a64      	ldr	r2, [pc, #400]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	8a1b      	ldrh	r3, [r3, #16]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	899b      	ldrh	r3, [r3, #12]
 8014ae8:	1ad3      	subs	r3, r2, r3
 8014aea:	461a      	mov	r2, r3
 8014aec:	4b5f      	ldr	r3, [pc, #380]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014aee:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014af0:	7ffb      	ldrb	r3, [r7, #31]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d103      	bne.n	8014afe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8014af6:	7fbb      	ldrb	r3, [r7, #30]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	f000 8082 	beq.w	8014c02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	7e1b      	ldrb	r3, [r3, #24]
 8014b02:	2bff      	cmp	r3, #255	; 0xff
 8014b04:	d008      	beq.n	8014b18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8014b06:	4b59      	ldr	r3, [pc, #356]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b08:	2202      	movs	r2, #2
 8014b0a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	7e1b      	ldrb	r3, [r3, #24]
 8014b10:	461a      	mov	r2, r3
 8014b12:	4b56      	ldr	r3, [pc, #344]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b14:	635a      	str	r2, [r3, #52]	; 0x34
 8014b16:	e002      	b.n	8014b1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014b18:	4b54      	ldr	r3, [pc, #336]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8014b1e:	7fbb      	ldrb	r3, [r7, #30]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d059      	beq.n	8014bd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8014b24:	7f7b      	ldrb	r3, [r7, #29]
 8014b26:	2b10      	cmp	r3, #16
 8014b28:	d14a      	bne.n	8014bc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	3314      	adds	r3, #20
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fb fb69 	bl	8010206 <_ZNK8touchgfx9colortypecvtEv>
 8014b34:	4603      	mov	r3, r0
 8014b36:	12db      	asrs	r3, r3, #11
 8014b38:	f003 021f 	and.w	r2, r3, #31
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	021b      	lsls	r3, r3, #8
 8014b40:	1a9b      	subs	r3, r3, r2
 8014b42:	4a4b      	ldr	r2, [pc, #300]	; (8014c70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014b44:	fb82 1203 	smull	r1, r2, r2, r3
 8014b48:	441a      	add	r2, r3
 8014b4a:	1112      	asrs	r2, r2, #4
 8014b4c:	17db      	asrs	r3, r3, #31
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	3314      	adds	r3, #20
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fb fb55 	bl	8010206 <_ZNK8touchgfx9colortypecvtEv>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	115b      	asrs	r3, r3, #5
 8014b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014b64:	4613      	mov	r3, r2
 8014b66:	021b      	lsls	r3, r3, #8
 8014b68:	1a9b      	subs	r3, r3, r2
 8014b6a:	4a42      	ldr	r2, [pc, #264]	; (8014c74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8014b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8014b70:	441a      	add	r2, r3
 8014b72:	1152      	asrs	r2, r2, #5
 8014b74:	17db      	asrs	r3, r3, #31
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	3314      	adds	r3, #20
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7fb fb41 	bl	8010206 <_ZNK8touchgfx9colortypecvtEv>
 8014b84:	4603      	mov	r3, r0
 8014b86:	f003 021f 	and.w	r2, r3, #31
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	021b      	lsls	r3, r3, #8
 8014b8e:	1a9b      	subs	r3, r3, r2
 8014b90:	4a37      	ldr	r2, [pc, #220]	; (8014c70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014b92:	fb82 1203 	smull	r1, r2, r2, r3
 8014b96:	441a      	add	r2, r3
 8014b98:	1112      	asrs	r2, r2, #4
 8014b9a:	17db      	asrs	r3, r3, #31
 8014b9c:	1ad3      	subs	r3, r2, r3
 8014b9e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	7e1b      	ldrb	r3, [r3, #24]
 8014ba4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	061a      	lsls	r2, r3, #24
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	041b      	lsls	r3, r3, #16
 8014bae:	431a      	orrs	r2, r3
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	021b      	lsls	r3, r3, #8
 8014bb4:	431a      	orrs	r2, r3
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	4a2c      	ldr	r2, [pc, #176]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014bbc:	6353      	str	r3, [r2, #52]	; 0x34
 8014bbe:	e00b      	b.n	8014bd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	3314      	adds	r3, #20
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fb fb2b 	bl	8010220 <_ZNK8touchgfx9colortype10getColor32Ev>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	7e1b      	ldrb	r3, [r3, #24]
 8014bd0:	061b      	lsls	r3, r3, #24
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	4a25      	ldr	r2, [pc, #148]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014bd6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	8a5b      	ldrh	r3, [r3, #18]
 8014bdc:	461a      	mov	r2, r3
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	899b      	ldrh	r3, [r3, #12]
 8014be2:	1ad3      	subs	r3, r2, r3
 8014be4:	461a      	mov	r2, r3
 8014be6:	4b21      	ldr	r3, [pc, #132]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014be8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014bea:	7f7b      	ldrb	r3, [r7, #29]
 8014bec:	2b10      	cmp	r3, #16
 8014bee:	d101      	bne.n	8014bf4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8014bf0:	2302      	movs	r3, #2
 8014bf2:	e000      	b.n	8014bf6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	4a1d      	ldr	r2, [pc, #116]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014bf8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	481b      	ldr	r0, [pc, #108]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014bfe:	f7ed fc11 	bl	8002424 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014c02:	2101      	movs	r1, #1
 8014c04:	4819      	ldr	r0, [pc, #100]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c06:	f7ed fc0d 	bl	8002424 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8014c0a:	7ffb      	ldrb	r3, [r7, #31]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d102      	bne.n	8014c16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8014c10:	7fbb      	ldrb	r3, [r7, #30]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d015      	beq.n	8014c42 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014c1a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014c20:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014c26:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014c2c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014c32:	9301      	str	r3, [sp, #4]
 8014c34:	9200      	str	r2, [sp, #0]
 8014c36:	4623      	mov	r3, r4
 8014c38:	4602      	mov	r2, r0
 8014c3a:	480c      	ldr	r0, [pc, #48]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c3c:	f7ed fa15 	bl	800206a <HAL_DMA2D_BlendingStart_IT>
 8014c40:	e00f      	b.n	8014c62 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014c46:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014c4c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014c52:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	4803      	ldr	r0, [pc, #12]	; (8014c6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c5e:	f7ed f9d1 	bl	8002004 <HAL_DMA2D_Start_IT>
    }
}
 8014c62:	bf00      	nop
 8014c64:	372c      	adds	r7, #44	; 0x2c
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd90      	pop	{r4, r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	20009140 	.word	0x20009140
 8014c70:	84210843 	.word	0x84210843
 8014c74:	82082083 	.word	0x82082083

08014c78 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014c78:	b590      	push	{r4, r7, lr}
 8014c7a:	b08d      	sub	sp, #52	; 0x34
 8014c7c:	af02      	add	r7, sp, #8
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014c82:	f7fa fb43 	bl	800f30c <_ZN8touchgfx3HAL3lcdEv>
 8014c86:	4602      	mov	r2, r0
 8014c88:	6813      	ldr	r3, [r2, #0]
 8014c8a:	3320      	adds	r3, #32
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	4610      	mov	r0, r2
 8014c90:	4798      	blx	r3
 8014c92:	4603      	mov	r3, r0
 8014c94:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014c96:	7ffb      	ldrb	r3, [r7, #31]
 8014c98:	2b10      	cmp	r3, #16
 8014c9a:	d101      	bne.n	8014ca0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8014c9c:	2302      	movs	r3, #2
 8014c9e:	e000      	b.n	8014ca2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8014ca8:	7ffb      	ldrb	r3, [r7, #31]
 8014caa:	2b10      	cmp	r3, #16
 8014cac:	d149      	bne.n	8014d42 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	3314      	adds	r3, #20
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fb faa7 	bl	8010206 <_ZNK8touchgfx9colortypecvtEv>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	12db      	asrs	r3, r3, #11
 8014cbc:	f003 021f 	and.w	r2, r3, #31
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	021b      	lsls	r3, r3, #8
 8014cc4:	1a9b      	subs	r3, r3, r2
 8014cc6:	4a69      	ldr	r2, [pc, #420]	; (8014e6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8014cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8014ccc:	441a      	add	r2, r3
 8014cce:	1112      	asrs	r2, r2, #4
 8014cd0:	17db      	asrs	r3, r3, #31
 8014cd2:	1ad3      	subs	r3, r2, r3
 8014cd4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	3314      	adds	r3, #20
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fb fa93 	bl	8010206 <_ZNK8touchgfx9colortypecvtEv>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	115b      	asrs	r3, r3, #5
 8014ce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014ce8:	4613      	mov	r3, r2
 8014cea:	021b      	lsls	r3, r3, #8
 8014cec:	1a9b      	subs	r3, r3, r2
 8014cee:	4a60      	ldr	r2, [pc, #384]	; (8014e70 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8014cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8014cf4:	441a      	add	r2, r3
 8014cf6:	1152      	asrs	r2, r2, #5
 8014cf8:	17db      	asrs	r3, r3, #31
 8014cfa:	1ad3      	subs	r3, r2, r3
 8014cfc:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	3314      	adds	r3, #20
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7fb fa7f 	bl	8010206 <_ZNK8touchgfx9colortypecvtEv>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	f003 021f 	and.w	r2, r3, #31
 8014d0e:	4613      	mov	r3, r2
 8014d10:	021b      	lsls	r3, r3, #8
 8014d12:	1a9b      	subs	r3, r3, r2
 8014d14:	4a55      	ldr	r2, [pc, #340]	; (8014e6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8014d16:	fb82 1203 	smull	r1, r2, r2, r3
 8014d1a:	441a      	add	r2, r3
 8014d1c:	1112      	asrs	r2, r2, #4
 8014d1e:	17db      	asrs	r3, r3, #31
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	7e1b      	ldrb	r3, [r3, #24]
 8014d28:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	061a      	lsls	r2, r3, #24
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	041b      	lsls	r3, r3, #16
 8014d32:	431a      	orrs	r2, r3
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	021b      	lsls	r3, r3, #8
 8014d38:	4313      	orrs	r3, r2
 8014d3a:	68fa      	ldr	r2, [r7, #12]
 8014d3c:	4313      	orrs	r3, r2
 8014d3e:	623b      	str	r3, [r7, #32]
 8014d40:	e00b      	b.n	8014d5a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	7e1b      	ldrb	r3, [r3, #24]
 8014d46:	061b      	lsls	r3, r3, #24
 8014d48:	461c      	mov	r4, r3
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	3314      	adds	r3, #20
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fb fa66 	bl	8010220 <_ZNK8touchgfx9colortype10getColor32Ev>
 8014d54:	4603      	mov	r3, r0
 8014d56:	4323      	orrs	r3, r4
 8014d58:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2b08      	cmp	r3, #8
 8014d60:	d103      	bne.n	8014d6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014d66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014d68:	e003      	b.n	8014d72 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8014d6a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014d70:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014d72:	4a40      	ldr	r2, [pc, #256]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d76:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014d78:	7ffb      	ldrb	r3, [r7, #31]
 8014d7a:	2b10      	cmp	r3, #16
 8014d7c:	d101      	bne.n	8014d82 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8014d7e:	2302      	movs	r3, #2
 8014d80:	e000      	b.n	8014d84 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8014d82:	2301      	movs	r3, #1
 8014d84:	4a3b      	ldr	r2, [pc, #236]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d86:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	8a5b      	ldrh	r3, [r3, #18]
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	899b      	ldrh	r3, [r3, #12]
 8014d92:	1ad3      	subs	r3, r2, r3
 8014d94:	461a      	mov	r2, r3
 8014d96:	4b37      	ldr	r3, [pc, #220]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d98:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014d9a:	7ffb      	ldrb	r3, [r7, #31]
 8014d9c:	2b10      	cmp	r3, #16
 8014d9e:	d101      	bne.n	8014da4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8014da0:	2202      	movs	r2, #2
 8014da2:	e000      	b.n	8014da6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8014da4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	8a5b      	ldrh	r3, [r3, #18]
 8014daa:	4619      	mov	r1, r3
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	899b      	ldrh	r3, [r3, #12]
 8014db0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014db4:	482f      	ldr	r0, [pc, #188]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014db6:	f7ff fd25 	bl	8014804 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014dc0:	d11e      	bne.n	8014e00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014dc2:	4b2c      	ldr	r3, [pc, #176]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014dc4:	2201      	movs	r2, #1
 8014dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014dc8:	4a2a      	ldr	r2, [pc, #168]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014dca:	6a3b      	ldr	r3, [r7, #32]
 8014dcc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014dce:	4b29      	ldr	r3, [pc, #164]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014dd0:	2209      	movs	r2, #9
 8014dd2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	8a5b      	ldrh	r3, [r3, #18]
 8014dd8:	461a      	mov	r2, r3
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	899b      	ldrh	r3, [r3, #12]
 8014dde:	1ad3      	subs	r3, r2, r3
 8014de0:	461a      	mov	r2, r3
 8014de2:	4b24      	ldr	r3, [pc, #144]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014de4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014de6:	7ffb      	ldrb	r3, [r7, #31]
 8014de8:	2b10      	cmp	r3, #16
 8014dea:	d101      	bne.n	8014df0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8014dec:	2302      	movs	r3, #2
 8014dee:	e000      	b.n	8014df2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8014df0:	2301      	movs	r3, #1
 8014df2:	4a20      	ldr	r2, [pc, #128]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014df4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014df6:	2100      	movs	r1, #0
 8014df8:	481e      	ldr	r0, [pc, #120]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014dfa:	f7ed fb13 	bl	8002424 <HAL_DMA2D_ConfigLayer>
 8014dfe:	e005      	b.n	8014e0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014e00:	4a1c      	ldr	r2, [pc, #112]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014e02:	69bb      	ldr	r3, [r7, #24]
 8014e04:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014e06:	4b1b      	ldr	r3, [pc, #108]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014e08:	2200      	movs	r2, #0
 8014e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	4819      	ldr	r0, [pc, #100]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014e10:	f7ed fb08 	bl	8002424 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014e1a:	d115      	bne.n	8014e48 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014e20:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014e26:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014e2c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014e32:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014e38:	9301      	str	r3, [sp, #4]
 8014e3a:	9200      	str	r2, [sp, #0]
 8014e3c:	4623      	mov	r3, r4
 8014e3e:	4602      	mov	r2, r0
 8014e40:	480c      	ldr	r0, [pc, #48]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014e42:	f7ed f912 	bl	800206a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014e46:	e00d      	b.n	8014e64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	689b      	ldr	r3, [r3, #8]
 8014e4c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014e52:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014e58:	9300      	str	r3, [sp, #0]
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	6a39      	ldr	r1, [r7, #32]
 8014e5e:	4805      	ldr	r0, [pc, #20]	; (8014e74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014e60:	f7ed f8d0 	bl	8002004 <HAL_DMA2D_Start_IT>
}
 8014e64:	bf00      	nop
 8014e66:	372c      	adds	r7, #44	; 0x2c
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd90      	pop	{r4, r7, pc}
 8014e6c:	84210843 	.word	0x84210843
 8014e70:	82082083 	.word	0x82082083
 8014e74:	20009140 	.word	0x20009140

08014e78 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	4618      	mov	r0, r3
 8014e84:	f005 f95c 	bl	801a140 <_ZN8touchgfx13DMA_Interface5startEv>
}
 8014e88:	bf00      	nop
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	4a05      	ldr	r2, [pc, #20]	; (8014eb0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	601a      	str	r2, [r3, #0]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7ff fbe3 	bl	801466c <_ZN8touchgfx9DMA_QueueD1Ev>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	08020d70 	.word	0x08020d70

08014eb4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7ff ffe7 	bl	8014e90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014ec2:	2114      	movs	r1, #20
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f009 fa5a 	bl	801e37e <_ZdlPvj>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	460b      	mov	r3, r1
 8014ede:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	78fa      	ldrb	r2, [r7, #3]
 8014ee4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2201      	movs	r2, #1
 8014eec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 8014ef0:	bf00      	nop
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	3318      	adds	r3, #24
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	4798      	blx	r3
    }
 8014f10:	bf00      	nop
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}

08014f18 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	685a      	ldr	r2, [r3, #4]
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	4610      	mov	r0, r2
 8014f2e:	4798      	blx	r3
 8014f30:	4603      	mov	r3, r0
    };
 8014f32:	4618      	mov	r0, r3
 8014f34:	3708      	adds	r7, #8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014f3a:	b480      	push	{r7}
 8014f3c:	b083      	sub	sp, #12
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014f48:	3301      	adds	r3, #1
 8014f4a:	b2da      	uxtb	r2, r3
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 8014f52:	bf00      	nop
 8014f54:	370c      	adds	r7, #12
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr

08014f5e <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b082      	sub	sp, #8
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f004 ffc0 	bl	8019eec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	3384      	adds	r3, #132	; 0x84
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	4798      	blx	r3
    }
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8014f80:	b480      	push	{r7}
 8014f82:	b083      	sub	sp, #12
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
        return false;
 8014f8a:	2300      	movs	r3, #0
    }
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b086      	sub	sp, #24
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	4611      	mov	r1, r2
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	80fb      	strh	r3, [r7, #6]
 8014faa:	4613      	mov	r3, r2
 8014fac:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	617b      	str	r3, [r7, #20]
        switch (depth)
 8014fb2:	88fb      	ldrh	r3, [r7, #6]
 8014fb4:	3b01      	subs	r3, #1
 8014fb6:	2b1f      	cmp	r3, #31
 8014fb8:	d862      	bhi.n	8015080 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 8014fba:	a201      	add	r2, pc, #4	; (adr r2, 8014fc0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 8014fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fc0:	0801505d 	.word	0x0801505d
 8014fc4:	0801505d 	.word	0x0801505d
 8014fc8:	08015081 	.word	0x08015081
 8014fcc:	0801505d 	.word	0x0801505d
 8014fd0:	08015081 	.word	0x08015081
 8014fd4:	08015081 	.word	0x08015081
 8014fd8:	08015081 	.word	0x08015081
 8014fdc:	08015041 	.word	0x08015041
 8014fe0:	08015081 	.word	0x08015081
 8014fe4:	08015081 	.word	0x08015081
 8014fe8:	08015081 	.word	0x08015081
 8014fec:	08015081 	.word	0x08015081
 8014ff0:	08015081 	.word	0x08015081
 8014ff4:	08015081 	.word	0x08015081
 8014ff8:	08015081 	.word	0x08015081
 8014ffc:	08015041 	.word	0x08015041
 8015000:	08015081 	.word	0x08015081
 8015004:	08015081 	.word	0x08015081
 8015008:	08015081 	.word	0x08015081
 801500c:	08015081 	.word	0x08015081
 8015010:	08015081 	.word	0x08015081
 8015014:	08015081 	.word	0x08015081
 8015018:	08015081 	.word	0x08015081
 801501c:	08015041 	.word	0x08015041
 8015020:	08015081 	.word	0x08015081
 8015024:	08015081 	.word	0x08015081
 8015028:	08015081 	.word	0x08015081
 801502c:	08015081 	.word	0x08015081
 8015030:	08015081 	.word	0x08015081
 8015034:	08015081 	.word	0x08015081
 8015038:	08015081 	.word	0x08015081
 801503c:	08015041 	.word	0x08015041
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 8015040:	4b29      	ldr	r3, [pc, #164]	; (80150e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	461a      	mov	r2, r3
 8015046:	4b29      	ldr	r3, [pc, #164]	; (80150ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8015048:	881b      	ldrh	r3, [r3, #0]
 801504a:	fb03 f302 	mul.w	r3, r3, r2
 801504e:	88fa      	ldrh	r2, [r7, #6]
 8015050:	08d2      	lsrs	r2, r2, #3
 8015052:	b292      	uxth	r2, r2
 8015054:	fb02 f303 	mul.w	r3, r2, r3
 8015058:	617b      	str	r3, [r7, #20]
            break;
 801505a:	e018      	b.n	801508e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801505c:	4b22      	ldr	r3, [pc, #136]	; (80150e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801505e:	881b      	ldrh	r3, [r3, #0]
 8015060:	461a      	mov	r2, r3
 8015062:	88fb      	ldrh	r3, [r7, #6]
 8015064:	fb03 f302 	mul.w	r3, r3, r2
 8015068:	3307      	adds	r3, #7
 801506a:	2b00      	cmp	r3, #0
 801506c:	da00      	bge.n	8015070 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 801506e:	3307      	adds	r3, #7
 8015070:	10db      	asrs	r3, r3, #3
 8015072:	461a      	mov	r2, r3
 8015074:	4b1d      	ldr	r3, [pc, #116]	; (80150ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8015076:	881b      	ldrh	r3, [r3, #0]
 8015078:	fb03 f302 	mul.w	r3, r3, r2
 801507c:	617b      	str	r3, [r7, #20]
            break;
 801507e:	e006      	b.n	801508e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 8015080:	4b1b      	ldr	r3, [pc, #108]	; (80150f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 8015082:	4a1c      	ldr	r2, [pc, #112]	; (80150f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 8015084:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8015088:	481b      	ldr	r0, [pc, #108]	; (80150f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 801508a:	f009 f995 	bl	801e3b8 <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	693a      	ldr	r2, [r7, #16]
 8015096:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 8015098:	797b      	ldrb	r3, [r7, #5]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d007      	beq.n	80150ae <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 801509e:	693a      	ldr	r2, [r7, #16]
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	4413      	add	r3, r2
 80150a4:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	693a      	ldr	r2, [r7, #16]
 80150aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80150ac:	e002      	b.n	80150b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	2200      	movs	r2, #0
 80150b2:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 80150b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d007      	beq.n	80150cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 80150bc:	693a      	ldr	r2, [r7, #16]
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	4413      	add	r3, r2
 80150c2:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	693a      	ldr	r2, [r7, #16]
 80150c8:	641a      	str	r2, [r3, #64]	; 0x40
 80150ca:	e002      	b.n	80150d2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2200      	movs	r2, #0
 80150d0:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 80150d2:	4a0a      	ldr	r2, [pc, #40]	; (80150fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 80150d4:	797b      	ldrb	r3, [r7, #5]
 80150d6:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 80150d8:	4a09      	ldr	r2, [pc, #36]	; (8015100 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 80150da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80150de:	7013      	strb	r3, [r2, #0]
    }
 80150e0:	bf00      	nop
 80150e2:	3718      	adds	r7, #24
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	20009ab0 	.word	0x20009ab0
 80150ec:	20009ab2 	.word	0x20009ab2
 80150f0:	0801f7f8 	.word	0x0801f7f8
 80150f4:	0802032c 	.word	0x0802032c
 80150f8:	0801f818 	.word	0x0801f818
 80150fc:	20009aba 	.word	0x20009aba
 8015100:	20009abb 	.word	0x20009abb

08015104 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
 8015110:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d106      	bne.n	8015126 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015118:	4b11      	ldr	r3, [pc, #68]	; (8015160 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801511a:	4a12      	ldr	r2, [pc, #72]	; (8015164 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801511c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8015120:	4811      	ldr	r0, [pc, #68]	; (8015168 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015122:	f009 f949 	bl	801e3b8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	68ba      	ldr	r2, [r7, #8]
 801512a:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	683a      	ldr	r2, [r7, #0]
 8015136:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2b00      	cmp	r3, #0
 801513c:	bf14      	ite	ne
 801513e:	2301      	movne	r3, #1
 8015140:	2300      	moveq	r3, #0
 8015142:	b2da      	uxtb	r2, r3
 8015144:	4b09      	ldr	r3, [pc, #36]	; (801516c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8015146:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	bf14      	ite	ne
 801514e:	2301      	movne	r3, #1
 8015150:	2300      	moveq	r3, #0
 8015152:	b2da      	uxtb	r2, r3
 8015154:	4b06      	ldr	r3, [pc, #24]	; (8015170 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8015156:	701a      	strb	r2, [r3, #0]
    }
 8015158:	bf00      	nop
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}
 8015160:	0801f864 	.word	0x0801f864
 8015164:	080202dc 	.word	0x080202dc
 8015168:	0801f818 	.word	0x0801f818
 801516c:	20009aba 	.word	0x20009aba
 8015170:	20009abb 	.word	0x20009abb

08015174 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	460b      	mov	r3, r1
 801517e:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015184:	2b00      	cmp	r3, #0
 8015186:	d004      	beq.n	8015192 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801518c:	887a      	ldrh	r2, [r7, #2]
 801518e:	4610      	mov	r0, r2
 8015190:	4798      	blx	r3
        }
    }
 8015192:	bf00      	nop
 8015194:	3708      	adds	r7, #8
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
	...

0801519c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d017      	beq.n	80151e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80151b4:	4b1a      	ldr	r3, [pc, #104]	; (8015220 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d12a      	bne.n	8015212 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80151bc:	4b19      	ldr	r3, [pc, #100]	; (8015224 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80151be:	881a      	ldrh	r2, [r3, #0]
 80151c0:	4b19      	ldr	r3, [pc, #100]	; (8015228 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80151c2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80151c4:	4b19      	ldr	r3, [pc, #100]	; (801522c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80151c6:	881a      	ldrh	r2, [r3, #0]
 80151c8:	4b19      	ldr	r3, [pc, #100]	; (8015230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80151ca:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80151cc:	4b16      	ldr	r3, [pc, #88]	; (8015228 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80151ce:	881a      	ldrh	r2, [r3, #0]
 80151d0:	4b16      	ldr	r3, [pc, #88]	; (801522c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80151d2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80151d4:	4b16      	ldr	r3, [pc, #88]	; (8015230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80151d6:	881a      	ldrh	r2, [r3, #0]
 80151d8:	4b12      	ldr	r3, [pc, #72]	; (8015224 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80151da:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80151dc:	4b10      	ldr	r3, [pc, #64]	; (8015220 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80151de:	2201      	movs	r2, #1
 80151e0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80151e2:	e016      	b.n	8015212 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80151e4:	4b0e      	ldr	r3, [pc, #56]	; (8015220 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d012      	beq.n	8015212 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80151ec:	4b0f      	ldr	r3, [pc, #60]	; (801522c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80151ee:	881a      	ldrh	r2, [r3, #0]
 80151f0:	4b0d      	ldr	r3, [pc, #52]	; (8015228 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80151f2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80151f4:	4b0b      	ldr	r3, [pc, #44]	; (8015224 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80151f6:	881a      	ldrh	r2, [r3, #0]
 80151f8:	4b0d      	ldr	r3, [pc, #52]	; (8015230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80151fa:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80151fc:	4b0c      	ldr	r3, [pc, #48]	; (8015230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80151fe:	881a      	ldrh	r2, [r3, #0]
 8015200:	4b0a      	ldr	r3, [pc, #40]	; (801522c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015202:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8015204:	4b08      	ldr	r3, [pc, #32]	; (8015228 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015206:	881a      	ldrh	r2, [r3, #0]
 8015208:	4b06      	ldr	r3, [pc, #24]	; (8015224 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801520a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801520c:	4b04      	ldr	r3, [pc, #16]	; (8015220 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801520e:	2200      	movs	r2, #0
 8015210:	701a      	strb	r2, [r3, #0]
    }
 8015212:	bf00      	nop
 8015214:	370c      	adds	r7, #12
 8015216:	46bd      	mov	sp, r7
 8015218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	20009ab4 	.word	0x20009ab4
 8015224:	20009ab0 	.word	0x20009ab0
 8015228:	20009ab6 	.word	0x20009ab6
 801522c:	20009ab2 	.word	0x20009ab2
 8015230:	20009ab8 	.word	0x20009ab8

08015234 <__NVIC_EnableIRQ>:
{
 8015234:	b480      	push	{r7}
 8015236:	b083      	sub	sp, #12
 8015238:	af00      	add	r7, sp, #0
 801523a:	4603      	mov	r3, r0
 801523c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801523e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015242:	2b00      	cmp	r3, #0
 8015244:	db0d      	blt.n	8015262 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801524a:	b2db      	uxtb	r3, r3
 801524c:	f003 021f 	and.w	r2, r3, #31
 8015250:	4907      	ldr	r1, [pc, #28]	; (8015270 <__NVIC_EnableIRQ+0x3c>)
 8015252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015256:	095b      	lsrs	r3, r3, #5
 8015258:	2001      	movs	r0, #1
 801525a:	fa00 f202 	lsl.w	r2, r0, r2
 801525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015262:	bf00      	nop
 8015264:	370c      	adds	r7, #12
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	e000e100 	.word	0xe000e100

08015274 <__NVIC_DisableIRQ>:
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
 801527a:	4603      	mov	r3, r0
 801527c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015282:	2b00      	cmp	r3, #0
 8015284:	db12      	blt.n	80152ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801528a:	b2db      	uxtb	r3, r3
 801528c:	f003 021f 	and.w	r2, r3, #31
 8015290:	4909      	ldr	r1, [pc, #36]	; (80152b8 <__NVIC_DisableIRQ+0x44>)
 8015292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015296:	095b      	lsrs	r3, r3, #5
 8015298:	2001      	movs	r0, #1
 801529a:	fa00 f202 	lsl.w	r2, r0, r2
 801529e:	3320      	adds	r3, #32
 80152a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80152a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80152a8:	f3bf 8f6f 	isb	sy
}
 80152ac:	bf00      	nop
 80152ae:	370c      	adds	r7, #12
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr
 80152b8:	e000e100 	.word	0xe000e100

080152bc <__NVIC_SetPriority>:
{
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	6039      	str	r1, [r7, #0]
 80152c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80152c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	db0c      	blt.n	80152ea <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	4a0e      	ldr	r2, [pc, #56]	; (8015310 <__NVIC_SetPriority+0x54>)
 80152d6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80152da:	4608      	mov	r0, r1
 80152dc:	011b      	lsls	r3, r3, #4
 80152de:	b2d9      	uxtb	r1, r3
 80152e0:	1813      	adds	r3, r2, r0
 80152e2:	460a      	mov	r2, r1
 80152e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80152e8:	e00c      	b.n	8015304 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	b2da      	uxtb	r2, r3
 80152ee:	4909      	ldr	r1, [pc, #36]	; (8015314 <__NVIC_SetPriority+0x58>)
 80152f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	f003 030f 	and.w	r3, r3, #15
 80152fa:	3b04      	subs	r3, #4
 80152fc:	0112      	lsls	r2, r2, #4
 80152fe:	b2d2      	uxtb	r2, r2
 8015300:	440b      	add	r3, r1
 8015302:	761a      	strb	r2, [r3, #24]
}
 8015304:	bf00      	nop
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr
 8015310:	e000e100 	.word	0xe000e100
 8015314:	e000ed00 	.word	0xe000ed00

08015318 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	4618      	mov	r0, r3
 8015324:	f004 fa2f 	bl	8019786 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015328:	bf00      	nop
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015338:	4b03      	ldr	r3, [pc, #12]	; (8015348 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 801533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801533c:	4618      	mov	r0, r3
 801533e:	370c      	adds	r7, #12
 8015340:	46bd      	mov	sp, r7
 8015342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015346:	4770      	bx	lr
 8015348:	40016884 	.word	0x40016884

0801534c <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 801534c:	b480      	push	{r7}
 801534e:	b083      	sub	sp, #12
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015356:	4a06      	ldr	r2, [pc, #24]	; (8015370 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801535c:	4b05      	ldr	r3, [pc, #20]	; (8015374 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 801535e:	2201      	movs	r2, #1
 8015360:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015362:	bf00      	nop
 8015364:	370c      	adds	r7, #12
 8015366:	46bd      	mov	sp, r7
 8015368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536c:	4770      	bx	lr
 801536e:	bf00      	nop
 8015370:	40016884 	.word	0x40016884
 8015374:	40016800 	.word	0x40016800

08015378 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 8015378:	b480      	push	{r7}
 801537a:	b085      	sub	sp, #20
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015380:	4b0d      	ldr	r3, [pc, #52]	; (80153b8 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8015382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015384:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015386:	4b0c      	ldr	r3, [pc, #48]	; (80153b8 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8015388:	68db      	ldr	r3, [r3, #12]
 801538a:	b29b      	uxth	r3, r3
 801538c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015390:	b29b      	uxth	r3, r3
 8015392:	3301      	adds	r3, #1
 8015394:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8015396:	89fa      	ldrh	r2, [r7, #14]
 8015398:	89bb      	ldrh	r3, [r7, #12]
 801539a:	429a      	cmp	r2, r3
 801539c:	d201      	bcs.n	80153a2 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	e003      	b.n	80153aa <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80153a2:	89fa      	ldrh	r2, [r7, #14]
 80153a4:	89bb      	ldrh	r3, [r7, #12]
 80153a6:	1ad3      	subs	r3, r2, r3
 80153a8:	b29b      	uxth	r3, r3
    }
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3714      	adds	r7, #20
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	40016800 	.word	0x40016800

080153bc <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80153c4:	2109      	movs	r1, #9
 80153c6:	205a      	movs	r0, #90	; 0x5a
 80153c8:	f7ff ff78 	bl	80152bc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80153cc:	2109      	movs	r1, #9
 80153ce:	2058      	movs	r0, #88	; 0x58
 80153d0:	f7ff ff74 	bl	80152bc <__NVIC_SetPriority>
}
 80153d4:	bf00      	nop
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80153e4:	4b12      	ldr	r3, [pc, #72]	; (8015430 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	3b01      	subs	r3, #1
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	4b0f      	ldr	r3, [pc, #60]	; (8015434 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 80153f6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80153f8:	4b0d      	ldr	r3, [pc, #52]	; (8015430 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 80153fa:	691b      	ldr	r3, [r3, #16]
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015402:	b29b      	uxth	r3, r3
 8015404:	3b01      	subs	r3, #1
 8015406:	b29a      	uxth	r2, r3
 8015408:	4b0b      	ldr	r3, [pc, #44]	; (8015438 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 801540a:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 801540c:	4b09      	ldr	r3, [pc, #36]	; (8015434 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 801540e:	881b      	ldrh	r3, [r3, #0]
 8015410:	4619      	mov	r1, r3
 8015412:	480a      	ldr	r0, [pc, #40]	; (801543c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015414:	f7f0 f888 	bl	8005528 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8015418:	4b08      	ldr	r3, [pc, #32]	; (801543c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801541e:	4b07      	ldr	r3, [pc, #28]	; (801543c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	f042 0203 	orr.w	r2, r2, #3
 8015426:	635a      	str	r2, [r3, #52]	; 0x34
}
 8015428:	bf00      	nop
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	40016800 	.word	0x40016800
 8015434:	200091ca 	.word	0x200091ca
 8015438:	200091cc 	.word	0x200091cc
 801543c:	20009098 	.word	0x20009098

08015440 <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8015448:	2058      	movs	r0, #88	; 0x58
 801544a:	f7ff ff13 	bl	8015274 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801544e:	205a      	movs	r0, #90	; 0x5a
 8015450:	f7ff ff10 	bl	8015274 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8015454:	2059      	movs	r0, #89	; 0x59
 8015456:	f7ff ff0d 	bl	8015274 <__NVIC_DisableIRQ>
}
 801545a:	bf00      	nop
 801545c:	3708      	adds	r7, #8
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b082      	sub	sp, #8
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 801546a:	2058      	movs	r0, #88	; 0x58
 801546c:	f7ff fee2 	bl	8015234 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015470:	205a      	movs	r0, #90	; 0x5a
 8015472:	f7ff fedf 	bl	8015234 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 8015476:	2059      	movs	r0, #89	; 0x59
 8015478:	f7ff fedc 	bl	8015234 <__NVIC_EnableIRQ>
}
 801547c:	bf00      	nop
 801547e:	3708      	adds	r7, #8
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6839      	ldr	r1, [r7, #0]
 8015492:	4618      	mov	r0, r3
 8015494:	f004 f97d 	bl	8019792 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8015498:	bf00      	nop
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b082      	sub	sp, #8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 80154a8:	4b1a      	ldr	r3, [pc, #104]	; (8015514 <HAL_LTDC_LineEventCallback+0x74>)
 80154aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ac:	4a1a      	ldr	r2, [pc, #104]	; (8015518 <HAL_LTDC_LineEventCallback+0x78>)
 80154ae:	8812      	ldrh	r2, [r2, #0]
 80154b0:	4293      	cmp	r3, r2
 80154b2:	bf0c      	ite	eq
 80154b4:	2301      	moveq	r3, #1
 80154b6:	2300      	movne	r3, #0
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d017      	beq.n	80154ee <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80154be:	4b17      	ldr	r3, [pc, #92]	; (801551c <HAL_LTDC_LineEventCallback+0x7c>)
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	4619      	mov	r1, r3
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f7f0 f82f 	bl	8005528 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 80154ca:	f7f9 fe27 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 80154ce:	4603      	mov	r3, r0
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7ff fd32 	bl	8014f3a <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 80154d6:	f7fa ff1b 	bl	8010310 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 80154da:	f7f9 fe1f 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 80154de:	4603      	mov	r3, r0
 80154e0:	4618      	mov	r0, r3
 80154e2:	f004 fd03 	bl	8019eec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 80154e6:	2000      	movs	r0, #0
 80154e8:	f7fe fd7b 	bl	8013fe2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 80154ec:	e00e      	b.n	801550c <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80154ee:	4b0a      	ldr	r3, [pc, #40]	; (8015518 <HAL_LTDC_LineEventCallback+0x78>)
 80154f0:	881b      	ldrh	r3, [r3, #0]
 80154f2:	4619      	mov	r1, r3
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	f7f0 f817 	bl	8005528 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 80154fa:	2000      	movs	r0, #0
 80154fc:	f7fe fd7c 	bl	8013ff8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8015500:	f7f9 fe0c 	bl	800f11c <_ZN8touchgfx3HAL11getInstanceEv>
 8015504:	4603      	mov	r3, r0
 8015506:	4618      	mov	r0, r3
 8015508:	f7ff fcf8 	bl	8014efc <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 801550c:	bf00      	nop
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	40016800 	.word	0x40016800
 8015518:	200091ca 	.word	0x200091ca
 801551c:	200091cc 	.word	0x200091cc

08015520 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b0a4      	sub	sp, #144	; 0x90
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8015528:	2300      	movs	r3, #0
 801552a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 801552e:	4b84      	ldr	r3, [pc, #528]	; (8015740 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015532:	4a83      	ldr	r2, [pc, #524]	; (8015740 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015534:	f043 0301 	orr.w	r3, r3, #1
 8015538:	6413      	str	r3, [r2, #64]	; 0x40
 801553a:	4b81      	ldr	r3, [pc, #516]	; (8015740 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 801553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801553e:	f003 0301 	and.w	r3, r3, #1
 8015542:	60bb      	str	r3, [r7, #8]
 8015544:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015546:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801554a:	2200      	movs	r2, #0
 801554c:	601a      	str	r2, [r3, #0]
 801554e:	605a      	str	r2, [r3, #4]
 8015550:	609a      	str	r2, [r3, #8]
 8015552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015558:	2200      	movs	r2, #0
 801555a:	601a      	str	r2, [r3, #0]
 801555c:	605a      	str	r2, [r3, #4]
 801555e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8015560:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015564:	2200      	movs	r2, #0
 8015566:	601a      	str	r2, [r3, #0]
 8015568:	605a      	str	r2, [r3, #4]
 801556a:	609a      	str	r2, [r3, #8]
 801556c:	60da      	str	r2, [r3, #12]
 801556e:	611a      	str	r2, [r3, #16]
 8015570:	615a      	str	r2, [r3, #20]
 8015572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8015574:	f107 030c 	add.w	r3, r7, #12
 8015578:	222c      	movs	r2, #44	; 0x2c
 801557a:	2100      	movs	r1, #0
 801557c:	4618      	mov	r0, r3
 801557e:	f008 ff96 	bl	801e4ae <memset>
  htim1.Instance = TIM1;
 8015582:	4b70      	ldr	r3, [pc, #448]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015584:	4a70      	ldr	r2, [pc, #448]	; (8015748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8015586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8015588:	4b6e      	ldr	r3, [pc, #440]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801558a:	2200      	movs	r2, #0
 801558c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801558e:	4b6d      	ldr	r3, [pc, #436]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015590:	2200      	movs	r2, #0
 8015592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8015594:	4b6b      	ldr	r3, [pc, #428]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015596:	2200      	movs	r2, #0
 8015598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801559a:	4b6a      	ldr	r3, [pc, #424]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801559c:	2200      	movs	r2, #0
 801559e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80155a0:	4b68      	ldr	r3, [pc, #416]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155a2:	2200      	movs	r2, #0
 80155a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80155a6:	4b67      	ldr	r3, [pc, #412]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155a8:	2200      	movs	r2, #0
 80155aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80155ac:	4865      	ldr	r0, [pc, #404]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155ae:	f7f3 fbe7 	bl	8008d80 <HAL_TIM_Base_Init>
 80155b2:	4603      	mov	r3, r0
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	bf14      	ite	ne
 80155b8:	2301      	movne	r3, #1
 80155ba:	2300      	moveq	r3, #0
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d001      	beq.n	80155c6 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 80155c2:	f001 fae9 	bl	8016b98 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80155c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80155ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80155cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80155d0:	4619      	mov	r1, r3
 80155d2:	485c      	ldr	r0, [pc, #368]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155d4:	f7f3 feb6 	bl	8009344 <HAL_TIM_ConfigClockSource>
 80155d8:	4603      	mov	r3, r0
 80155da:	2b00      	cmp	r3, #0
 80155dc:	bf14      	ite	ne
 80155de:	2301      	movne	r3, #1
 80155e0:	2300      	moveq	r3, #0
 80155e2:	b2db      	uxtb	r3, r3
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d001      	beq.n	80155ec <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 80155e8:	f001 fad6 	bl	8016b98 <Error_Handler>
  }

  htim1.Instance = TIM1;
 80155ec:	4b55      	ldr	r3, [pc, #340]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155ee:	4a56      	ldr	r2, [pc, #344]	; (8015748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 80155f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80155f2:	4b54      	ldr	r3, [pc, #336]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155f4:	2200      	movs	r2, #0
 80155f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80155f8:	4b52      	ldr	r3, [pc, #328]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155fa:	2200      	movs	r2, #0
 80155fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80155fe:	4b51      	ldr	r3, [pc, #324]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015600:	2200      	movs	r2, #0
 8015602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015604:	4b4f      	ldr	r3, [pc, #316]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015606:	2200      	movs	r2, #0
 8015608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801560a:	4b4e      	ldr	r3, [pc, #312]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801560c:	2200      	movs	r2, #0
 801560e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015610:	4b4c      	ldr	r3, [pc, #304]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015612:	2200      	movs	r2, #0
 8015614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8015616:	484b      	ldr	r0, [pc, #300]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015618:	f7f3 fc32 	bl	8008e80 <HAL_TIM_PWM_Init>
 801561c:	4603      	mov	r3, r0
 801561e:	2b00      	cmp	r3, #0
 8015620:	bf14      	ite	ne
 8015622:	2301      	movne	r3, #1
 8015624:	2300      	moveq	r3, #0
 8015626:	b2db      	uxtb	r3, r3
 8015628:	2b00      	cmp	r3, #0
 801562a:	d001      	beq.n	8015630 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 801562c:	f001 fab4 	bl	8016b98 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015630:	2300      	movs	r3, #0
 8015632:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8015634:	2300      	movs	r3, #0
 8015636:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015638:	2300      	movs	r3, #0
 801563a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801563c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015640:	4619      	mov	r1, r3
 8015642:	4840      	ldr	r0, [pc, #256]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015644:	f7f4 faf8 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 8015648:	4603      	mov	r3, r0
 801564a:	2b00      	cmp	r3, #0
 801564c:	bf14      	ite	ne
 801564e:	2301      	movne	r3, #1
 8015650:	2300      	moveq	r3, #0
 8015652:	b2db      	uxtb	r3, r3
 8015654:	2b00      	cmp	r3, #0
 8015656:	d001      	beq.n	801565c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 8015658:	f001 fa9e 	bl	8016b98 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801565c:	2360      	movs	r3, #96	; 0x60
 801565e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8015660:	2300      	movs	r3, #0
 8015662:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8015664:	2300      	movs	r3, #0
 8015666:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8015668:	2300      	movs	r3, #0
 801566a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801566c:	2300      	movs	r3, #0
 801566e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8015670:	2300      	movs	r3, #0
 8015672:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8015674:	2300      	movs	r3, #0
 8015676:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8015678:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801567c:	2200      	movs	r2, #0
 801567e:	4619      	mov	r1, r3
 8015680:	4830      	ldr	r0, [pc, #192]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015682:	f7f3 fd47 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 8015686:	4603      	mov	r3, r0
 8015688:	2b00      	cmp	r3, #0
 801568a:	bf14      	ite	ne
 801568c:	2301      	movne	r3, #1
 801568e:	2300      	moveq	r3, #0
 8015690:	b2db      	uxtb	r3, r3
 8015692:	2b00      	cmp	r3, #0
 8015694:	d001      	beq.n	801569a <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 8015696:	f001 fa7f 	bl	8016b98 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801569a:	2300      	movs	r3, #0
 801569c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801569e:	2300      	movs	r3, #0
 80156a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80156a2:	2300      	movs	r3, #0
 80156a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 80156a6:	2300      	movs	r3, #0
 80156a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80156aa:	2300      	movs	r3, #0
 80156ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80156ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80156b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80156b8:	2300      	movs	r3, #0
 80156ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80156bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80156c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80156c2:	2300      	movs	r3, #0
 80156c4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80156c6:	2300      	movs	r3, #0
 80156c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80156ca:	f107 030c 	add.w	r3, r7, #12
 80156ce:	4619      	mov	r1, r3
 80156d0:	481c      	ldr	r0, [pc, #112]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80156d2:	f7f4 fb0d 	bl	8009cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	bf14      	ite	ne
 80156dc:	2301      	movne	r3, #1
 80156de:	2300      	moveq	r3, #0
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d001      	beq.n	80156ea <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 80156e6:	f001 fa57 	bl	8016b98 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80156ea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80156ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80156f2:	4611      	mov	r1, r2
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7f0 fe57 	bl	80063a8 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80156fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80156fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8015702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015706:	2b00      	cmp	r3, #0
 8015708:	d104      	bne.n	8015714 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 801570a:	f7f0 fe25 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 801570e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8015712:	e005      	b.n	8015720 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8015714:	f7f0 fe20 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 8015718:	4603      	mov	r3, r0
 801571a:	005b      	lsls	r3, r3, #1
 801571c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8015720:	f7f0 fe0e 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8015724:	4602      	mov	r2, r0
 8015726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801572a:	fbb2 f2f3 	udiv	r2, r2, r3
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 8015732:	4804      	ldr	r0, [pc, #16]	; (8015744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015734:	f7f3 fb50 	bl	8008dd8 <HAL_TIM_Base_Start>
}
 8015738:	bf00      	nop
 801573a:	3790      	adds	r7, #144	; 0x90
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}
 8015740:	40023800 	.word	0x40023800
 8015744:	200091d0 	.word	0x200091d0
 8015748:	40010000 	.word	0x40010000

0801574c <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 801574c:	b480      	push	{r7}
 801574e:	b085      	sub	sp, #20
 8015750:	af00      	add	r7, sp, #0
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	607a      	str	r2, [r7, #4]
 8015758:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	1ad2      	subs	r2, r2, r3
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	085b      	lsrs	r3, r3, #1
 8015764:	441a      	add	r2, r3
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801576c:	4618      	mov	r0, r3
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr

08015778 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 8015778:	b480      	push	{r7}
 801577a:	b083      	sub	sp, #12
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 8015780:	4b06      	ldr	r3, [pc, #24]	; (801579c <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	68d2      	ldr	r2, [r2, #12]
 801578a:	fb02 f303 	mul.w	r3, r2, r3
}
 801578e:	4618      	mov	r0, r3
 8015790:	370c      	adds	r7, #12
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop
 801579c:	200091d0 	.word	0x200091d0

080157a0 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
 80157a8:	460b      	mov	r3, r1
 80157aa:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 80157ac:	78fb      	ldrb	r3, [r7, #3]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d00f      	beq.n	80157d2 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	3310      	adds	r3, #16
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	4798      	blx	r3
 80157be:	4602      	mov	r2, r0
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	689b      	ldr	r3, [r3, #8]
 80157c4:	1ad2      	subs	r2, r2, r3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	441a      	add	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80157d0:	e008      	b.n	80157e4 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	3310      	adds	r3, #16
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	4798      	blx	r3
 80157de:	4602      	mov	r2, r0
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	609a      	str	r2, [r3, #8]
}
 80157e4:	bf00      	nop
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 80157ec:	b590      	push	{r4, r7, lr}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
  BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 80157f4:	f7fe f81c 	bl	8013830 <LCD_GetXSize>
 80157f8:	4603      	mov	r3, r0
 80157fa:	b29c      	uxth	r4, r3
 80157fc:	f7fe f821 	bl	8013842 <LCD_GetYSize>
 8015800:	4603      	mov	r3, r0
 8015802:	b29b      	uxth	r3, r3
 8015804:	4619      	mov	r1, r3
 8015806:	4620      	mov	r0, r4
 8015808:	f7eb fb18 	bl	8000e3c <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 801580c:	bf00      	nop
 801580e:	370c      	adds	r7, #12
 8015810:	46bd      	mov	sp, r7
 8015812:	bd90      	pop	{r4, r7, pc}

08015814 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b090      	sub	sp, #64	; 0x40
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

	TS_StateTypeDef state = { 0 };
 8015820:	f107 0314 	add.w	r3, r7, #20
 8015824:	222c      	movs	r2, #44	; 0x2c
 8015826:	2100      	movs	r1, #0
 8015828:	4618      	mov	r0, r3
 801582a:	f008 fe40 	bl	801e4ae <memset>
    BSP_TS_GetState(&state);
 801582e:	f107 0314 	add.w	r3, r7, #20
 8015832:	4618      	mov	r0, r3
 8015834:	f7eb fb42 	bl	8000ebc <BSP_TS_GetState>
    if (state.touchDetected)
 8015838:	7d3b      	ldrb	r3, [r7, #20]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d009      	beq.n	8015852 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 801583e:	8afb      	ldrh	r3, [r7, #22]
 8015840:	461a      	mov	r2, r3
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 8015846:	8c3b      	ldrh	r3, [r7, #32]
 8015848:	461a      	mov	r2, r3
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	601a      	str	r2, [r3, #0]

        return true;
 801584e:	2301      	movs	r3, #1
 8015850:	e000      	b.n	8015854 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false; 
 8015852:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 8015854:	4618      	mov	r0, r3
 8015856:	3740      	adds	r7, #64	; 0x40
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8015862:	2300      	movs	r3, #0
 8015864:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8015866:	f000 f87b 	bl	8015960 <BSP_SD_IsDetected>
 801586a:	4603      	mov	r3, r0
 801586c:	2b01      	cmp	r3, #1
 801586e:	d001      	beq.n	8015874 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015870:	2302      	movs	r3, #2
 8015872:	e012      	b.n	801589a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8015874:	480b      	ldr	r0, [pc, #44]	; (80158a4 <BSP_SD_Init+0x48>)
 8015876:	f7f2 f855 	bl	8007924 <HAL_SD_Init>
 801587a:	4603      	mov	r3, r0
 801587c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801587e:	79fb      	ldrb	r3, [r7, #7]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d109      	bne.n	8015898 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8015884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015888:	4806      	ldr	r0, [pc, #24]	; (80158a4 <BSP_SD_Init+0x48>)
 801588a:	f7f2 fcd5 	bl	8008238 <HAL_SD_ConfigWideBusOperation>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d001      	beq.n	8015898 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015894:	2301      	movs	r3, #1
 8015896:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015898:	79fb      	ldrb	r3, [r7, #7]
}
 801589a:	4618      	mov	r0, r3
 801589c:	3708      	adds	r7, #8
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}
 80158a2:	bf00      	nop
 80158a4:	200094d8 	.word	0x200094d8

080158a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b086      	sub	sp, #24
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80158b4:	2300      	movs	r3, #0
 80158b6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	68ba      	ldr	r2, [r7, #8]
 80158bc:	68f9      	ldr	r1, [r7, #12]
 80158be:	4806      	ldr	r0, [pc, #24]	; (80158d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80158c0:	f7f2 f8c0 	bl	8007a44 <HAL_SD_ReadBlocks_DMA>
 80158c4:	4603      	mov	r3, r0
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d001      	beq.n	80158ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80158ca:	2301      	movs	r3, #1
 80158cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80158ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3718      	adds	r7, #24
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	200094d8 	.word	0x200094d8

080158dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b086      	sub	sp, #24
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	60f8      	str	r0, [r7, #12]
 80158e4:	60b9      	str	r1, [r7, #8]
 80158e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80158e8:	2300      	movs	r3, #0
 80158ea:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	68ba      	ldr	r2, [r7, #8]
 80158f0:	68f9      	ldr	r1, [r7, #12]
 80158f2:	4806      	ldr	r0, [pc, #24]	; (801590c <BSP_SD_WriteBlocks_DMA+0x30>)
 80158f4:	f7f2 f974 	bl	8007be0 <HAL_SD_WriteBlocks_DMA>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d001      	beq.n	8015902 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80158fe:	2301      	movs	r3, #1
 8015900:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8015902:	7dfb      	ldrb	r3, [r7, #23]
}
 8015904:	4618      	mov	r0, r3
 8015906:	3718      	adds	r7, #24
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}
 801590c:	200094d8 	.word	0x200094d8

08015910 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015914:	4805      	ldr	r0, [pc, #20]	; (801592c <BSP_SD_GetCardState+0x1c>)
 8015916:	f7f2 fd0b 	bl	8008330 <HAL_SD_GetCardState>
 801591a:	4603      	mov	r3, r0
 801591c:	2b04      	cmp	r3, #4
 801591e:	bf14      	ite	ne
 8015920:	2301      	movne	r3, #1
 8015922:	2300      	moveq	r3, #0
 8015924:	b2db      	uxtb	r3, r3
}
 8015926:	4618      	mov	r0, r3
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	200094d8 	.word	0x200094d8

08015930 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8015938:	6879      	ldr	r1, [r7, #4]
 801593a:	4803      	ldr	r0, [pc, #12]	; (8015948 <BSP_SD_GetCardInfo+0x18>)
 801593c:	f7f2 fc50 	bl	80081e0 <HAL_SD_GetCardInfo>
}
 8015940:	bf00      	nop
 8015942:	3708      	adds	r7, #8
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}
 8015948:	200094d8 	.word	0x200094d8

0801594c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015954:	f001 fb2c 	bl	8016fb0 <BSP_SD_ReadCpltCallback>
}
 8015958:	bf00      	nop
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015966:	2301      	movs	r3, #1
 8015968:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801596a:	f000 f81d 	bl	80159a8 <BSP_PlatformIsDetected>
 801596e:	4603      	mov	r3, r0
 8015970:	2b00      	cmp	r3, #0
 8015972:	d101      	bne.n	8015978 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8015974:	2300      	movs	r3, #0
 8015976:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8015978:	79fb      	ldrb	r3, [r7, #7]
 801597a:	b2db      	uxtb	r3, r3
}
 801597c:	4618      	mov	r0, r3
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8015984:	b580      	push	{r7, lr}
 8015986:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015988:	4904      	ldr	r1, [pc, #16]	; (801599c <MX_FATFS_Init+0x18>)
 801598a:	4805      	ldr	r0, [pc, #20]	; (80159a0 <MX_FATFS_Init+0x1c>)
 801598c:	f7fa fd7c 	bl	8010488 <FATFS_LinkDriver>
 8015990:	4603      	mov	r3, r0
 8015992:	461a      	mov	r2, r3
 8015994:	4b03      	ldr	r3, [pc, #12]	; (80159a4 <MX_FATFS_Init+0x20>)
 8015996:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8015998:	bf00      	nop
 801599a:	bd80      	pop	{r7, pc}
 801599c:	2000a058 	.word	0x2000a058
 80159a0:	080203c0 	.word	0x080203c0
 80159a4:	2000a05c 	.word	0x2000a05c

080159a8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b082      	sub	sp, #8
 80159ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80159ae:	2301      	movs	r3, #1
 80159b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80159b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80159b6:	4806      	ldr	r0, [pc, #24]	; (80159d0 <BSP_PlatformIsDetected+0x28>)
 80159b8:	f7ed f916 	bl	8002be8 <HAL_GPIO_ReadPin>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d001      	beq.n	80159c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80159c2:	2300      	movs	r3, #0
 80159c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80159c6:	79fb      	ldrb	r3, [r7, #7]
}  
 80159c8:	4618      	mov	r0, r3
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	40020800 	.word	0x40020800

080159d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80159d4:	b5b0      	push	{r4, r5, r7, lr}
 80159d6:	b086      	sub	sp, #24
 80159d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80159da:	f7eb fc8f 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80159de:	f000 f83f 	bl	8015a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80159e2:	f000 fee5 	bl	80167b0 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 80159e6:	f000 f90f 	bl	8015c08 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 80159ea:	f000 f969 	bl	8015cc0 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 80159ee:	f000 f98f 	bl	8015d10 <_ZL12MX_DCMI_Initv>
//  MX_ETH_Init();
  MX_I2C1_Init();
 80159f2:	f000 f9c7 	bl	8015d84 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 80159f6:	f000 fa13 	bl	8015e20 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 80159fa:	f000 fa5f 	bl	8015ebc <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 80159fe:	f000 fa8f 	bl	8015f20 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8015a02:	f000 fb53 	bl	80160ac <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 8015a06:	f000 fc03 	bl	8016210 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 8015a0a:	f000 fc21 	bl	8016250 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 8015a0e:	f000 fc55 	bl	80162bc <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8015a12:	f000 fc95 	bl	8016340 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8015a16:	f000 fd23 	bl	8016460 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8015a1a:	f000 fdb1 	bl	8016580 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8015a1e:	f000 fe11 	bl	8016644 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8015a22:	f000 fe5d 	bl	80166e0 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8015a26:	f000 fe8f 	bl	8016748 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8015a2a:	f7fd ff13 	bl	8013854 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8015a2e:	f7fd ff89 	bl	8013944 <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8015a32:	4b09      	ldr	r3, [pc, #36]	; (8015a58 <main+0x84>)
 8015a34:	1d3c      	adds	r4, r7, #4
 8015a36:	461d      	mov	r5, r3
 8015a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a3c:	682b      	ldr	r3, [r5, #0]
 8015a3e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8015a40:	1d3b      	adds	r3, r7, #4
 8015a42:	2100      	movs	r1, #0
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7fa fd7b 	bl	8010540 <osThreadCreate>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	4b03      	ldr	r3, [pc, #12]	; (8015a5c <main+0x88>)
 8015a4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8015a50:	f7fa fd53 	bl	80104fa <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8015a54:	e7fe      	b.n	8015a54 <main+0x80>
 8015a56:	bf00      	nop
 8015a58:	0801f8a8 	.word	0x0801f8a8
 8015a5c:	2000980c 	.word	0x2000980c

08015a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b0b4      	sub	sp, #208	; 0xd0
 8015a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8015a66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015a6a:	2230      	movs	r2, #48	; 0x30
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f008 fd1d 	bl	801e4ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015a74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015a78:	2200      	movs	r2, #0
 8015a7a:	601a      	str	r2, [r3, #0]
 8015a7c:	605a      	str	r2, [r3, #4]
 8015a7e:	609a      	str	r2, [r3, #8]
 8015a80:	60da      	str	r2, [r3, #12]
 8015a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015a84:	f107 0308 	add.w	r3, r7, #8
 8015a88:	2284      	movs	r2, #132	; 0x84
 8015a8a:	2100      	movs	r1, #0
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f008 fd0e 	bl	801e4ae <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8015a92:	f7ef ff1b 	bl	80058cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015a96:	4b59      	ldr	r3, [pc, #356]	; (8015bfc <SystemClock_Config+0x19c>)
 8015a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a9a:	4a58      	ldr	r2, [pc, #352]	; (8015bfc <SystemClock_Config+0x19c>)
 8015a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8015aa2:	4b56      	ldr	r3, [pc, #344]	; (8015bfc <SystemClock_Config+0x19c>)
 8015aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015aaa:	607b      	str	r3, [r7, #4]
 8015aac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015aae:	4b54      	ldr	r3, [pc, #336]	; (8015c00 <SystemClock_Config+0x1a0>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	4a53      	ldr	r2, [pc, #332]	; (8015c00 <SystemClock_Config+0x1a0>)
 8015ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015ab8:	6013      	str	r3, [r2, #0]
 8015aba:	4b51      	ldr	r3, [pc, #324]	; (8015c00 <SystemClock_Config+0x1a0>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8015ac2:	603b      	str	r3, [r7, #0]
 8015ac4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8015ac6:	2309      	movs	r3, #9
 8015ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8015acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015ada:	2302      	movs	r3, #2
 8015adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8015ae0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8015ae8:	2319      	movs	r3, #25
 8015aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8015aee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015af2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015af6:	2302      	movs	r3, #2
 8015af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8015afc:	2309      	movs	r3, #9
 8015afe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015b02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7f0 f810 	bl	8005b2c <HAL_RCC_OscConfig>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	bf14      	ite	ne
 8015b12:	2301      	movne	r3, #1
 8015b14:	2300      	moveq	r3, #0
 8015b16:	b2db      	uxtb	r3, r3
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d001      	beq.n	8015b20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8015b1c:	f001 f83c 	bl	8016b98 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8015b20:	f7ef fee4 	bl	80058ec <HAL_PWREx_EnableOverDrive>
 8015b24:	4603      	mov	r3, r0
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	bf14      	ite	ne
 8015b2a:	2301      	movne	r3, #1
 8015b2c:	2300      	moveq	r3, #0
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d001      	beq.n	8015b38 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8015b34:	f001 f830 	bl	8016b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015b38:	230f      	movs	r3, #15
 8015b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015b3e:	2302      	movs	r3, #2
 8015b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015b44:	2300      	movs	r3, #0
 8015b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8015b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8015b4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8015b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8015b5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015b5e:	2106      	movs	r1, #6
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7f0 fa53 	bl	800600c <HAL_RCC_ClockConfig>
 8015b66:	4603      	mov	r3, r0
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	bf14      	ite	ne
 8015b6c:	2301      	movne	r3, #1
 8015b6e:	2300      	moveq	r3, #0
 8015b70:	b2db      	uxtb	r3, r3
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8015b76:	f001 f80f 	bl	8016b98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8015b7a:	4b22      	ldr	r3, [pc, #136]	; (8015c04 <SystemClock_Config+0x1a4>)
 8015b7c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8015b7e:	2364      	movs	r3, #100	; 0x64
 8015b80:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8015b82:	2302      	movs	r3, #2
 8015b84:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8015b86:	2302      	movs	r3, #2
 8015b88:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8015b8a:	2302      	movs	r3, #2
 8015b8c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8015b8e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8015b92:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8015b94:	2305      	movs	r3, #5
 8015b96:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8015b98:	2302      	movs	r3, #2
 8015b9a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8015b9c:	2303      	movs	r3, #3
 8015b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8015ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015bac:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8015bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8015bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015bd6:	f107 0308 	add.w	r3, r7, #8
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f0 fc16 	bl	800640c <HAL_RCCEx_PeriphCLKConfig>
 8015be0:	4603      	mov	r3, r0
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	bf14      	ite	ne
 8015be6:	2301      	movne	r3, #1
 8015be8:	2300      	moveq	r3, #0
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d001      	beq.n	8015bf4 <SystemClock_Config+0x194>
  {
    Error_Handler();
 8015bf0:	f000 ffd2 	bl	8016b98 <Error_Handler>
  }
}
 8015bf4:	bf00      	nop
 8015bf6:	37d0      	adds	r7, #208	; 0xd0
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	40023800 	.word	0x40023800
 8015c00:	40007000 	.word	0x40007000
 8015c04:	01b14868 	.word	0x01b14868

08015c08 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8015c0e:	463b      	mov	r3, r7
 8015c10:	2200      	movs	r2, #0
 8015c12:	601a      	str	r2, [r3, #0]
 8015c14:	605a      	str	r2, [r3, #4]
 8015c16:	609a      	str	r2, [r3, #8]
 8015c18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8015c1a:	4b26      	ldr	r3, [pc, #152]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c1c:	4a26      	ldr	r2, [pc, #152]	; (8015cb8 <_ZL12MX_ADC3_Initv+0xb0>)
 8015c1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8015c20:	4b24      	ldr	r3, [pc, #144]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015c26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8015c28:	4b22      	ldr	r3, [pc, #136]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8015c2e:	4b21      	ldr	r3, [pc, #132]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8015c34:	4b1f      	ldr	r3, [pc, #124]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8015c3a:	4b1e      	ldr	r3, [pc, #120]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8015c42:	4b1c      	ldr	r3, [pc, #112]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c44:	2200      	movs	r2, #0
 8015c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8015c48:	4b1a      	ldr	r3, [pc, #104]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c4a:	4a1c      	ldr	r2, [pc, #112]	; (8015cbc <_ZL12MX_ADC3_Initv+0xb4>)
 8015c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8015c4e:	4b19      	ldr	r3, [pc, #100]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c50:	2200      	movs	r2, #0
 8015c52:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8015c54:	4b17      	ldr	r3, [pc, #92]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c56:	2201      	movs	r2, #1
 8015c58:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8015c5a:	4b16      	ldr	r3, [pc, #88]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8015c62:	4b14      	ldr	r3, [pc, #80]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c64:	2201      	movs	r2, #1
 8015c66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8015c68:	4812      	ldr	r0, [pc, #72]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c6a:	f7eb fb97 	bl	800139c <HAL_ADC_Init>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	bf14      	ite	ne
 8015c74:	2301      	movne	r3, #1
 8015c76:	2300      	moveq	r3, #0
 8015c78:	b2db      	uxtb	r3, r3
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d001      	beq.n	8015c82 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 8015c7e:	f000 ff8b 	bl	8016b98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8015c82:	2304      	movs	r3, #4
 8015c84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8015c86:	2301      	movs	r3, #1
 8015c88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8015c8e:	463b      	mov	r3, r7
 8015c90:	4619      	mov	r1, r3
 8015c92:	4808      	ldr	r0, [pc, #32]	; (8015cb4 <_ZL12MX_ADC3_Initv+0xac>)
 8015c94:	f7eb fbc6 	bl	8001424 <HAL_ADC_ConfigChannel>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	bf14      	ite	ne
 8015c9e:	2301      	movne	r3, #1
 8015ca0:	2300      	moveq	r3, #0
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d001      	beq.n	8015cac <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8015ca8:	f000 ff76 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8015cac:	bf00      	nop
 8015cae:	3710      	adds	r7, #16
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	20009210 	.word	0x20009210
 8015cb8:	40012200 	.word	0x40012200
 8015cbc:	0f000001 	.word	0x0f000001

08015cc0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8015cc4:	4b10      	ldr	r3, [pc, #64]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015cc6:	4a11      	ldr	r2, [pc, #68]	; (8015d0c <_ZL11MX_CRC_Initv+0x4c>)
 8015cc8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8015cca:	4b0f      	ldr	r3, [pc, #60]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015ccc:	2200      	movs	r2, #0
 8015cce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8015cd0:	4b0d      	ldr	r3, [pc, #52]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8015cd6:	4b0c      	ldr	r3, [pc, #48]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015cd8:	2200      	movs	r2, #0
 8015cda:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8015cdc:	4b0a      	ldr	r3, [pc, #40]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015cde:	2200      	movs	r2, #0
 8015ce0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8015ce2:	4b09      	ldr	r3, [pc, #36]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015ce4:	2201      	movs	r2, #1
 8015ce6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8015ce8:	4807      	ldr	r0, [pc, #28]	; (8015d08 <_ZL11MX_CRC_Initv+0x48>)
 8015cea:	f7eb fedb 	bl	8001aa4 <HAL_CRC_Init>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	bf14      	ite	ne
 8015cf4:	2301      	movne	r3, #1
 8015cf6:	2300      	moveq	r3, #0
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d001      	beq.n	8015d02 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8015cfe:	f000 ff4b 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8015d02:	bf00      	nop
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	bf00      	nop
 8015d08:	20009258 	.word	0x20009258
 8015d0c:	40023000 	.word	0x40023000

08015d10 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8015d14:	4b19      	ldr	r3, [pc, #100]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d16:	4a1a      	ldr	r2, [pc, #104]	; (8015d80 <_ZL12MX_DCMI_Initv+0x70>)
 8015d18:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8015d1a:	4b18      	ldr	r3, [pc, #96]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8015d20:	4b16      	ldr	r3, [pc, #88]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d22:	2200      	movs	r2, #0
 8015d24:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8015d26:	4b15      	ldr	r3, [pc, #84]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d28:	2200      	movs	r2, #0
 8015d2a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8015d2c:	4b13      	ldr	r3, [pc, #76]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d2e:	2200      	movs	r2, #0
 8015d30:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8015d32:	4b12      	ldr	r3, [pc, #72]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d34:	2200      	movs	r2, #0
 8015d36:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8015d38:	4b10      	ldr	r3, [pc, #64]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8015d3e:	4b0f      	ldr	r3, [pc, #60]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d40:	2200      	movs	r2, #0
 8015d42:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8015d44:	4b0d      	ldr	r3, [pc, #52]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d46:	2200      	movs	r2, #0
 8015d48:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8015d4a:	4b0c      	ldr	r3, [pc, #48]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8015d50:	4b0a      	ldr	r3, [pc, #40]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d52:	2200      	movs	r2, #0
 8015d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8015d56:	4b09      	ldr	r3, [pc, #36]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d58:	2200      	movs	r2, #0
 8015d5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8015d5c:	4807      	ldr	r0, [pc, #28]	; (8015d7c <_ZL12MX_DCMI_Initv+0x6c>)
 8015d5e:	f7eb ff8b 	bl	8001c78 <HAL_DCMI_Init>
 8015d62:	4603      	mov	r3, r0
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	bf14      	ite	ne
 8015d68:	2301      	movne	r3, #1
 8015d6a:	2300      	moveq	r3, #0
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d001      	beq.n	8015d76 <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 8015d72:	f000 ff11 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8015d76:	bf00      	nop
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	2000927c 	.word	0x2000927c
 8015d80:	50050000 	.word	0x50050000

08015d84 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8015d88:	4b22      	ldr	r3, [pc, #136]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015d8a:	4a23      	ldr	r2, [pc, #140]	; (8015e18 <_ZL12MX_I2C1_Initv+0x94>)
 8015d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8015d8e:	4b21      	ldr	r3, [pc, #132]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015d90:	4a22      	ldr	r2, [pc, #136]	; (8015e1c <_ZL12MX_I2C1_Initv+0x98>)
 8015d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8015d94:	4b1f      	ldr	r3, [pc, #124]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015d96:	2200      	movs	r2, #0
 8015d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015d9a:	4b1e      	ldr	r3, [pc, #120]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015da0:	4b1c      	ldr	r3, [pc, #112]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015da2:	2200      	movs	r2, #0
 8015da4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8015da6:	4b1b      	ldr	r3, [pc, #108]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015da8:	2200      	movs	r2, #0
 8015daa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015dac:	4b19      	ldr	r3, [pc, #100]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015dae:	2200      	movs	r2, #0
 8015db0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015db2:	4b18      	ldr	r3, [pc, #96]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015db4:	2200      	movs	r2, #0
 8015db6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015db8:	4b16      	ldr	r3, [pc, #88]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015dba:	2200      	movs	r2, #0
 8015dbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015dbe:	4815      	ldr	r0, [pc, #84]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015dc0:	f7ee fb9e 	bl	8004500 <HAL_I2C_Init>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	bf14      	ite	ne
 8015dca:	2301      	movne	r3, #1
 8015dcc:	2300      	moveq	r3, #0
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d001      	beq.n	8015dd8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8015dd4:	f000 fee0 	bl	8016b98 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015dd8:	2100      	movs	r1, #0
 8015dda:	480e      	ldr	r0, [pc, #56]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015ddc:	f7ef f8a8 	bl	8004f30 <HAL_I2CEx_ConfigAnalogFilter>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	bf14      	ite	ne
 8015de6:	2301      	movne	r3, #1
 8015de8:	2300      	moveq	r3, #0
 8015dea:	b2db      	uxtb	r3, r3
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d001      	beq.n	8015df4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8015df0:	f000 fed2 	bl	8016b98 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8015df4:	2100      	movs	r1, #0
 8015df6:	4807      	ldr	r0, [pc, #28]	; (8015e14 <_ZL12MX_I2C1_Initv+0x90>)
 8015df8:	f7ef f8e5 	bl	8004fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	bf14      	ite	ne
 8015e02:	2301      	movne	r3, #1
 8015e04:	2300      	moveq	r3, #0
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d001      	beq.n	8015e10 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8015e0c:	f000 fec4 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015e10:	bf00      	nop
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	200092cc 	.word	0x200092cc
 8015e18:	40005400 	.word	0x40005400
 8015e1c:	00c0eaff 	.word	0x00c0eaff

08015e20 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8015e24:	4b22      	ldr	r3, [pc, #136]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e26:	4a23      	ldr	r2, [pc, #140]	; (8015eb4 <_ZL12MX_I2C3_Initv+0x94>)
 8015e28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8015e2a:	4b21      	ldr	r3, [pc, #132]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e2c:	4a22      	ldr	r2, [pc, #136]	; (8015eb8 <_ZL12MX_I2C3_Initv+0x98>)
 8015e2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8015e30:	4b1f      	ldr	r3, [pc, #124]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e32:	2200      	movs	r2, #0
 8015e34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015e36:	4b1e      	ldr	r3, [pc, #120]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e38:	2201      	movs	r2, #1
 8015e3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015e3c:	4b1c      	ldr	r3, [pc, #112]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e3e:	2200      	movs	r2, #0
 8015e40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8015e42:	4b1b      	ldr	r3, [pc, #108]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e44:	2200      	movs	r2, #0
 8015e46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015e48:	4b19      	ldr	r3, [pc, #100]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015e4e:	4b18      	ldr	r3, [pc, #96]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e50:	2200      	movs	r2, #0
 8015e52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015e54:	4b16      	ldr	r3, [pc, #88]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e56:	2200      	movs	r2, #0
 8015e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8015e5a:	4815      	ldr	r0, [pc, #84]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e5c:	f7ee fb50 	bl	8004500 <HAL_I2C_Init>
 8015e60:	4603      	mov	r3, r0
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	bf14      	ite	ne
 8015e66:	2301      	movne	r3, #1
 8015e68:	2300      	moveq	r3, #0
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d001      	beq.n	8015e74 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8015e70:	f000 fe92 	bl	8016b98 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015e74:	2100      	movs	r1, #0
 8015e76:	480e      	ldr	r0, [pc, #56]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e78:	f7ef f85a 	bl	8004f30 <HAL_I2CEx_ConfigAnalogFilter>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	bf14      	ite	ne
 8015e82:	2301      	movne	r3, #1
 8015e84:	2300      	moveq	r3, #0
 8015e86:	b2db      	uxtb	r3, r3
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d001      	beq.n	8015e90 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8015e8c:	f000 fe84 	bl	8016b98 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8015e90:	2100      	movs	r1, #0
 8015e92:	4807      	ldr	r0, [pc, #28]	; (8015eb0 <_ZL12MX_I2C3_Initv+0x90>)
 8015e94:	f7ef f897 	bl	8004fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	bf14      	ite	ne
 8015e9e:	2301      	movne	r3, #1
 8015ea0:	2300      	moveq	r3, #0
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d001      	beq.n	8015eac <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8015ea8:	f000 fe76 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8015eac:	bf00      	nop
 8015eae:	bd80      	pop	{r7, pc}
 8015eb0:	20009318 	.word	0x20009318
 8015eb4:	40005c00 	.word	0x40005c00
 8015eb8:	00c0eaff 	.word	0x00c0eaff

08015ebc <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8015ec0:	4b15      	ldr	r3, [pc, #84]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ec2:	4a16      	ldr	r2, [pc, #88]	; (8015f1c <_ZL15MX_QUADSPI_Initv+0x60>)
 8015ec4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8015ec6:	4b14      	ldr	r3, [pc, #80]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ec8:	2201      	movs	r2, #1
 8015eca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8015ecc:	4b12      	ldr	r3, [pc, #72]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ece:	2204      	movs	r2, #4
 8015ed0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8015ed2:	4b11      	ldr	r3, [pc, #68]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ed4:	2210      	movs	r2, #16
 8015ed6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8015ed8:	4b0f      	ldr	r3, [pc, #60]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015eda:	2218      	movs	r2, #24
 8015edc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8015ede:	4b0e      	ldr	r3, [pc, #56]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ee0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8015ee4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8015ee6:	4b0c      	ldr	r3, [pc, #48]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ee8:	2200      	movs	r2, #0
 8015eea:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8015eec:	4b0a      	ldr	r3, [pc, #40]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015eee:	2200      	movs	r2, #0
 8015ef0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8015ef2:	4b09      	ldr	r3, [pc, #36]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8015ef8:	4807      	ldr	r0, [pc, #28]	; (8015f18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015efa:	f7ef fd47 	bl	800598c <HAL_QSPI_Init>
 8015efe:	4603      	mov	r3, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	bf14      	ite	ne
 8015f04:	2301      	movne	r3, #1
 8015f06:	2300      	moveq	r3, #0
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d001      	beq.n	8015f12 <_ZL15MX_QUADSPI_Initv+0x56>
  {
    Error_Handler();
 8015f0e:	f000 fe43 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8015f12:	bf00      	nop
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	20009364 	.word	0x20009364
 8015f1c:	a0001000 	.word	0xa0001000

08015f20 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b092      	sub	sp, #72	; 0x48
 8015f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8015f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	601a      	str	r2, [r3, #0]
 8015f2e:	605a      	str	r2, [r3, #4]
 8015f30:	609a      	str	r2, [r3, #8]
 8015f32:	60da      	str	r2, [r3, #12]
 8015f34:	611a      	str	r2, [r3, #16]
 8015f36:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8015f38:	2300      	movs	r3, #0
 8015f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8015f3c:	463b      	mov	r3, r7
 8015f3e:	222c      	movs	r2, #44	; 0x2c
 8015f40:	2100      	movs	r1, #0
 8015f42:	4618      	mov	r0, r3
 8015f44:	f008 fab3 	bl	801e4ae <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8015f48:	4b56      	ldr	r3, [pc, #344]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f4a:	4a57      	ldr	r2, [pc, #348]	; (80160a8 <_ZL11MX_RTC_Initv+0x188>)
 8015f4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8015f4e:	4b55      	ldr	r3, [pc, #340]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f50:	2200      	movs	r2, #0
 8015f52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8015f54:	4b53      	ldr	r3, [pc, #332]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f56:	227f      	movs	r2, #127	; 0x7f
 8015f58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8015f5a:	4b52      	ldr	r3, [pc, #328]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f5c:	22ff      	movs	r2, #255	; 0xff
 8015f5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8015f60:	4b50      	ldr	r3, [pc, #320]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f62:	2200      	movs	r2, #0
 8015f64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8015f66:	4b4f      	ldr	r3, [pc, #316]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f68:	2200      	movs	r2, #0
 8015f6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8015f6c:	4b4d      	ldr	r3, [pc, #308]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f6e:	2200      	movs	r2, #0
 8015f70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8015f72:	484c      	ldr	r0, [pc, #304]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015f74:	f7f0 ff6c 	bl	8006e50 <HAL_RTC_Init>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	bf14      	ite	ne
 8015f7e:	2301      	movne	r3, #1
 8015f80:	2300      	moveq	r3, #0
 8015f82:	b2db      	uxtb	r3, r3
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d001      	beq.n	8015f8c <_ZL11MX_RTC_Initv+0x6c>
  {
    Error_Handler();
 8015f88:	f000 fe06 	bl	8016b98 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8015f92:	2300      	movs	r3, #0
 8015f94:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8015fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015faa:	2201      	movs	r2, #1
 8015fac:	4619      	mov	r1, r3
 8015fae:	483d      	ldr	r0, [pc, #244]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015fb0:	f7f0 ffca 	bl	8006f48 <HAL_RTC_SetTime>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	bf14      	ite	ne
 8015fba:	2301      	movne	r3, #1
 8015fbc:	2300      	moveq	r3, #0
 8015fbe:	b2db      	uxtb	r3, r3
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d001      	beq.n	8015fc8 <_ZL11MX_RTC_Initv+0xa8>
  {
    Error_Handler();
 8015fc4:	f000 fde8 	bl	8016b98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8015fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	482e      	ldr	r0, [pc, #184]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8015fea:	f7f1 f86b 	bl	80070c4 <HAL_RTC_SetDate>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	bf14      	ite	ne
 8015ff4:	2301      	movne	r3, #1
 8015ff6:	2300      	moveq	r3, #0
 8015ff8:	b2db      	uxtb	r3, r3
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d001      	beq.n	8016002 <_ZL11MX_RTC_Initv+0xe2>
  {
    Error_Handler();
 8015ffe:	f000 fdcb 	bl	8016b98 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8016002:	2300      	movs	r3, #0
 8016004:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8016006:	2300      	movs	r3, #0
 8016008:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 801600a:	2300      	movs	r3, #0
 801600c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 801600e:	2300      	movs	r3, #0
 8016010:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8016012:	2300      	movs	r3, #0
 8016014:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8016016:	2300      	movs	r3, #0
 8016018:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801601a:	2300      	movs	r3, #0
 801601c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801601e:	2300      	movs	r3, #0
 8016020:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8016022:	2300      	movs	r3, #0
 8016024:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8016026:	2301      	movs	r3, #1
 8016028:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 801602c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8016032:	463b      	mov	r3, r7
 8016034:	2201      	movs	r2, #1
 8016036:	4619      	mov	r1, r3
 8016038:	481a      	ldr	r0, [pc, #104]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 801603a:	f7f1 f8eb 	bl	8007214 <HAL_RTC_SetAlarm>
 801603e:	4603      	mov	r3, r0
 8016040:	2b00      	cmp	r3, #0
 8016042:	bf14      	ite	ne
 8016044:	2301      	movne	r3, #1
 8016046:	2300      	moveq	r3, #0
 8016048:	b2db      	uxtb	r3, r3
 801604a:	2b00      	cmp	r3, #0
 801604c:	d001      	beq.n	8016052 <_ZL11MX_RTC_Initv+0x132>
  {
    Error_Handler();
 801604e:	f000 fda3 	bl	8016b98 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8016052:	2301      	movs	r3, #1
 8016054:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8016058:	f44f 7300 	mov.w	r3, #512	; 0x200
 801605c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801605e:	463b      	mov	r3, r7
 8016060:	2201      	movs	r2, #1
 8016062:	4619      	mov	r1, r3
 8016064:	480f      	ldr	r0, [pc, #60]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8016066:	f7f1 f8d5 	bl	8007214 <HAL_RTC_SetAlarm>
 801606a:	4603      	mov	r3, r0
 801606c:	2b00      	cmp	r3, #0
 801606e:	bf14      	ite	ne
 8016070:	2301      	movne	r3, #1
 8016072:	2300      	moveq	r3, #0
 8016074:	b2db      	uxtb	r3, r3
 8016076:	2b00      	cmp	r3, #0
 8016078:	d001      	beq.n	801607e <_ZL11MX_RTC_Initv+0x15e>
  {
    Error_Handler();
 801607a:	f000 fd8d 	bl	8016b98 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 801607e:	2202      	movs	r2, #2
 8016080:	2100      	movs	r1, #0
 8016082:	4808      	ldr	r0, [pc, #32]	; (80160a4 <_ZL11MX_RTC_Initv+0x184>)
 8016084:	f7f1 fa50 	bl	8007528 <HAL_RTCEx_SetTimeStamp>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	bf14      	ite	ne
 801608e:	2301      	movne	r3, #1
 8016090:	2300      	moveq	r3, #0
 8016092:	b2db      	uxtb	r3, r3
 8016094:	2b00      	cmp	r3, #0
 8016096:	d001      	beq.n	801609c <_ZL11MX_RTC_Initv+0x17c>
  {
    Error_Handler();
 8016098:	f000 fd7e 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801609c:	bf00      	nop
 801609e:	3748      	adds	r7, #72	; 0x48
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	200093b0 	.word	0x200093b0
 80160a8:	40002800 	.word	0x40002800

080160ac <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80160b0:	4b52      	ldr	r3, [pc, #328]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160b2:	4a53      	ldr	r2, [pc, #332]	; (8016200 <_ZL12MX_SAI2_Initv+0x154>)
 80160b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80160b6:	4b51      	ldr	r3, [pc, #324]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160b8:	2200      	movs	r2, #0
 80160ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80160bc:	4b4f      	ldr	r3, [pc, #316]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160be:	2200      	movs	r2, #0
 80160c0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80160c2:	4b4e      	ldr	r3, [pc, #312]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160c4:	2240      	movs	r2, #64	; 0x40
 80160c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80160c8:	4b4c      	ldr	r3, [pc, #304]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160ca:	2200      	movs	r2, #0
 80160cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80160ce:	4b4b      	ldr	r3, [pc, #300]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160d0:	2200      	movs	r2, #0
 80160d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80160d4:	4b49      	ldr	r3, [pc, #292]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160d6:	2200      	movs	r2, #0
 80160d8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80160da:	4b48      	ldr	r3, [pc, #288]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160dc:	2200      	movs	r2, #0
 80160de:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80160e0:	4b46      	ldr	r3, [pc, #280]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160e2:	2200      	movs	r2, #0
 80160e4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80160e6:	4b45      	ldr	r3, [pc, #276]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160e8:	2200      	movs	r2, #0
 80160ea:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80160ec:	4b43      	ldr	r3, [pc, #268]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160ee:	4a45      	ldr	r2, [pc, #276]	; (8016204 <_ZL12MX_SAI2_Initv+0x158>)
 80160f0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80160f2:	4b42      	ldr	r3, [pc, #264]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160f4:	2200      	movs	r2, #0
 80160f6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80160f8:	4b40      	ldr	r3, [pc, #256]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 80160fa:	2200      	movs	r2, #0
 80160fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80160fe:	4b3f      	ldr	r3, [pc, #252]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016100:	2200      	movs	r2, #0
 8016102:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8016104:	4b3d      	ldr	r3, [pc, #244]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016106:	2200      	movs	r2, #0
 8016108:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 801610a:	4b3c      	ldr	r3, [pc, #240]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 801610c:	2208      	movs	r2, #8
 801610e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8016110:	4b3a      	ldr	r3, [pc, #232]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016112:	2201      	movs	r2, #1
 8016114:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8016116:	4b39      	ldr	r3, [pc, #228]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016118:	2200      	movs	r2, #0
 801611a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801611c:	4b37      	ldr	r3, [pc, #220]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 801611e:	2200      	movs	r2, #0
 8016120:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8016122:	4b36      	ldr	r3, [pc, #216]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016124:	2200      	movs	r2, #0
 8016126:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8016128:	4b34      	ldr	r3, [pc, #208]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 801612a:	2200      	movs	r2, #0
 801612c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801612e:	4b33      	ldr	r3, [pc, #204]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016130:	2200      	movs	r2, #0
 8016132:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8016134:	4b31      	ldr	r3, [pc, #196]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016136:	2201      	movs	r2, #1
 8016138:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 801613a:	4b30      	ldr	r3, [pc, #192]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 801613c:	2200      	movs	r2, #0
 801613e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8016140:	482e      	ldr	r0, [pc, #184]	; (80161fc <_ZL12MX_SAI2_Initv+0x150>)
 8016142:	f7f1 fa47 	bl	80075d4 <HAL_SAI_Init>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	bf14      	ite	ne
 801614c:	2301      	movne	r3, #1
 801614e:	2300      	moveq	r3, #0
 8016150:	b2db      	uxtb	r3, r3
 8016152:	2b00      	cmp	r3, #0
 8016154:	d001      	beq.n	801615a <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 8016156:	f000 fd1f 	bl	8016b98 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 801615a:	4b2b      	ldr	r3, [pc, #172]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 801615c:	4a2b      	ldr	r2, [pc, #172]	; (801620c <_ZL12MX_SAI2_Initv+0x160>)
 801615e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8016160:	4b29      	ldr	r3, [pc, #164]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016162:	2200      	movs	r2, #0
 8016164:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8016166:	4b28      	ldr	r3, [pc, #160]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016168:	2203      	movs	r2, #3
 801616a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 801616c:	4b26      	ldr	r3, [pc, #152]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 801616e:	2240      	movs	r2, #64	; 0x40
 8016170:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8016172:	4b25      	ldr	r3, [pc, #148]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016174:	2200      	movs	r2, #0
 8016176:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8016178:	4b23      	ldr	r3, [pc, #140]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 801617a:	2200      	movs	r2, #0
 801617c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 801617e:	4b22      	ldr	r3, [pc, #136]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016180:	2201      	movs	r2, #1
 8016182:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8016184:	4b20      	ldr	r3, [pc, #128]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016186:	2200      	movs	r2, #0
 8016188:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 801618a:	4b1f      	ldr	r3, [pc, #124]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 801618c:	2200      	movs	r2, #0
 801618e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8016190:	4b1d      	ldr	r3, [pc, #116]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016192:	2200      	movs	r2, #0
 8016194:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8016196:	4b1c      	ldr	r3, [pc, #112]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 8016198:	2200      	movs	r2, #0
 801619a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 801619c:	4b1a      	ldr	r3, [pc, #104]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 801619e:	2200      	movs	r2, #0
 80161a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80161a2:	4b19      	ldr	r3, [pc, #100]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161a4:	2200      	movs	r2, #0
 80161a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 80161a8:	4b17      	ldr	r3, [pc, #92]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161aa:	2218      	movs	r2, #24
 80161ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80161ae:	4b16      	ldr	r3, [pc, #88]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161b0:	2201      	movs	r2, #1
 80161b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80161b4:	4b14      	ldr	r3, [pc, #80]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161b6:	2200      	movs	r2, #0
 80161b8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80161ba:	4b13      	ldr	r3, [pc, #76]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161bc:	2200      	movs	r2, #0
 80161be:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80161c0:	4b11      	ldr	r3, [pc, #68]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161c2:	2200      	movs	r2, #0
 80161c4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80161c6:	4b10      	ldr	r3, [pc, #64]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161c8:	2200      	movs	r2, #0
 80161ca:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80161cc:	4b0e      	ldr	r3, [pc, #56]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161ce:	2200      	movs	r2, #0
 80161d0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80161d2:	4b0d      	ldr	r3, [pc, #52]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161d4:	2201      	movs	r2, #1
 80161d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80161d8:	4b0b      	ldr	r3, [pc, #44]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161da:	2200      	movs	r2, #0
 80161dc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80161de:	480a      	ldr	r0, [pc, #40]	; (8016208 <_ZL12MX_SAI2_Initv+0x15c>)
 80161e0:	f7f1 f9f8 	bl	80075d4 <HAL_SAI_Init>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	bf14      	ite	ne
 80161ea:	2301      	movne	r3, #1
 80161ec:	2300      	moveq	r3, #0
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d001      	beq.n	80161f8 <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 80161f4:	f000 fcd0 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80161f8:	bf00      	nop
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	200093d0 	.word	0x200093d0
 8016200:	40015c04 	.word	0x40015c04
 8016204:	0002ee00 	.word	0x0002ee00
 8016208:	20009454 	.word	0x20009454
 801620c:	40015c24 	.word	0x40015c24

08016210 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8016210:	b480      	push	{r7}
 8016212:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8016214:	4b0c      	ldr	r3, [pc, #48]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016216:	4a0d      	ldr	r2, [pc, #52]	; (801624c <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8016218:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801621a:	4b0b      	ldr	r3, [pc, #44]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801621c:	2200      	movs	r2, #0
 801621e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8016220:	4b09      	ldr	r3, [pc, #36]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016222:	2200      	movs	r2, #0
 8016224:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8016226:	4b08      	ldr	r3, [pc, #32]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016228:	2200      	movs	r2, #0
 801622a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 801622c:	4b06      	ldr	r3, [pc, #24]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801622e:	2200      	movs	r2, #0
 8016230:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8016232:	4b05      	ldr	r3, [pc, #20]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016234:	2200      	movs	r2, #0
 8016236:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8016238:	4b03      	ldr	r3, [pc, #12]	; (8016248 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801623a:	2200      	movs	r2, #0
 801623c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 801623e:	bf00      	nop
 8016240:	46bd      	mov	sp, r7
 8016242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016246:	4770      	bx	lr
 8016248:	200094d8 	.word	0x200094d8
 801624c:	40012c00 	.word	0x40012c00

08016250 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8016254:	4b18      	ldr	r3, [pc, #96]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016256:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 801625a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 801625c:	4b16      	ldr	r3, [pc, #88]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 801625e:	2200      	movs	r2, #0
 8016260:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8016262:	4b15      	ldr	r3, [pc, #84]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016264:	2200      	movs	r2, #0
 8016266:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8016268:	4b13      	ldr	r3, [pc, #76]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 801626a:	2200      	movs	r2, #0
 801626c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 801626e:	4b12      	ldr	r3, [pc, #72]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016270:	2200      	movs	r2, #0
 8016272:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8016274:	4b10      	ldr	r3, [pc, #64]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016276:	2200      	movs	r2, #0
 8016278:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 801627a:	4b0f      	ldr	r3, [pc, #60]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 801627c:	2200      	movs	r2, #0
 801627e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8016280:	4b0d      	ldr	r3, [pc, #52]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016282:	2200      	movs	r2, #0
 8016284:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8016286:	4b0c      	ldr	r3, [pc, #48]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016288:	2200      	movs	r2, #0
 801628a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 801628c:	4b0a      	ldr	r3, [pc, #40]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 801628e:	2200      	movs	r2, #0
 8016290:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8016292:	4b09      	ldr	r3, [pc, #36]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016294:	2200      	movs	r2, #0
 8016296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8016298:	4807      	ldr	r0, [pc, #28]	; (80162b8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 801629a:	f7f2 fc83 	bl	8008ba4 <HAL_SPDIFRX_Init>
 801629e:	4603      	mov	r3, r0
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	bf14      	ite	ne
 80162a4:	2301      	movne	r3, #1
 80162a6:	2300      	moveq	r3, #0
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d001      	beq.n	80162b2 <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 80162ae:	f000 fc73 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80162b2:	bf00      	nop
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	2000955c 	.word	0x2000955c

080162bc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80162c0:	4b1d      	ldr	r3, [pc, #116]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162c2:	4a1e      	ldr	r2, [pc, #120]	; (801633c <_ZL12MX_SPI2_Initv+0x80>)
 80162c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80162c6:	4b1c      	ldr	r3, [pc, #112]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80162cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80162ce:	4b1a      	ldr	r3, [pc, #104]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162d0:	2200      	movs	r2, #0
 80162d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80162d4:	4b18      	ldr	r3, [pc, #96]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80162da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80162dc:	4b16      	ldr	r3, [pc, #88]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162de:	2200      	movs	r2, #0
 80162e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80162e2:	4b15      	ldr	r3, [pc, #84]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162e4:	2200      	movs	r2, #0
 80162e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80162e8:	4b13      	ldr	r3, [pc, #76]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80162ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80162f0:	4b11      	ldr	r3, [pc, #68]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162f2:	2200      	movs	r2, #0
 80162f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80162f6:	4b10      	ldr	r3, [pc, #64]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162f8:	2200      	movs	r2, #0
 80162fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80162fc:	4b0e      	ldr	r3, [pc, #56]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 80162fe:	2200      	movs	r2, #0
 8016300:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016302:	4b0d      	ldr	r3, [pc, #52]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 8016304:	2200      	movs	r2, #0
 8016306:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8016308:	4b0b      	ldr	r3, [pc, #44]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 801630a:	2207      	movs	r2, #7
 801630c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801630e:	4b0a      	ldr	r3, [pc, #40]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 8016310:	2200      	movs	r2, #0
 8016312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8016314:	4b08      	ldr	r3, [pc, #32]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 8016316:	2208      	movs	r2, #8
 8016318:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801631a:	4807      	ldr	r0, [pc, #28]	; (8016338 <_ZL12MX_SPI2_Initv+0x7c>)
 801631c:	f7f2 fc9e 	bl	8008c5c <HAL_SPI_Init>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	bf14      	ite	ne
 8016326:	2301      	movne	r3, #1
 8016328:	2300      	moveq	r3, #0
 801632a:	b2db      	uxtb	r3, r3
 801632c:	2b00      	cmp	r3, #0
 801632e:	d001      	beq.n	8016334 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8016330:	f000 fc32 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016334:	bf00      	nop
 8016336:	bd80      	pop	{r7, pc}
 8016338:	200095a8 	.word	0x200095a8
 801633c:	40003800 	.word	0x40003800

08016340 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b08e      	sub	sp, #56	; 0x38
 8016344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801634a:	2200      	movs	r2, #0
 801634c:	601a      	str	r2, [r3, #0]
 801634e:	605a      	str	r2, [r3, #4]
 8016350:	609a      	str	r2, [r3, #8]
 8016352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016354:	f107 031c 	add.w	r3, r7, #28
 8016358:	2200      	movs	r2, #0
 801635a:	601a      	str	r2, [r3, #0]
 801635c:	605a      	str	r2, [r3, #4]
 801635e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016360:	463b      	mov	r3, r7
 8016362:	2200      	movs	r2, #0
 8016364:	601a      	str	r2, [r3, #0]
 8016366:	605a      	str	r2, [r3, #4]
 8016368:	609a      	str	r2, [r3, #8]
 801636a:	60da      	str	r2, [r3, #12]
 801636c:	611a      	str	r2, [r3, #16]
 801636e:	615a      	str	r2, [r3, #20]
 8016370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8016372:	4b39      	ldr	r3, [pc, #228]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016374:	4a39      	ldr	r2, [pc, #228]	; (801645c <_ZL12MX_TIM3_Initv+0x11c>)
 8016376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8016378:	4b37      	ldr	r3, [pc, #220]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 801637a:	2200      	movs	r2, #0
 801637c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801637e:	4b36      	ldr	r3, [pc, #216]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016380:	2200      	movs	r2, #0
 8016382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8016384:	4b34      	ldr	r3, [pc, #208]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016386:	2200      	movs	r2, #0
 8016388:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801638a:	4b33      	ldr	r3, [pc, #204]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 801638c:	2200      	movs	r2, #0
 801638e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016390:	4b31      	ldr	r3, [pc, #196]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016392:	2200      	movs	r2, #0
 8016394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8016396:	4830      	ldr	r0, [pc, #192]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016398:	f7f2 fcf2 	bl	8008d80 <HAL_TIM_Base_Init>
 801639c:	4603      	mov	r3, r0
 801639e:	2b00      	cmp	r3, #0
 80163a0:	bf14      	ite	ne
 80163a2:	2301      	movne	r3, #1
 80163a4:	2300      	moveq	r3, #0
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d001      	beq.n	80163b0 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80163ac:	f000 fbf4 	bl	8016b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80163b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80163b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80163b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80163ba:	4619      	mov	r1, r3
 80163bc:	4826      	ldr	r0, [pc, #152]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 80163be:	f7f2 ffc1 	bl	8009344 <HAL_TIM_ConfigClockSource>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	bf14      	ite	ne
 80163c8:	2301      	movne	r3, #1
 80163ca:	2300      	moveq	r3, #0
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d001      	beq.n	80163d6 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80163d2:	f000 fbe1 	bl	8016b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80163d6:	4820      	ldr	r0, [pc, #128]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 80163d8:	f7f2 fd52 	bl	8008e80 <HAL_TIM_PWM_Init>
 80163dc:	4603      	mov	r3, r0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	bf14      	ite	ne
 80163e2:	2301      	movne	r3, #1
 80163e4:	2300      	moveq	r3, #0
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 80163ec:	f000 fbd4 	bl	8016b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80163f0:	2300      	movs	r3, #0
 80163f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80163f4:	2300      	movs	r3, #0
 80163f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80163f8:	f107 031c 	add.w	r3, r7, #28
 80163fc:	4619      	mov	r1, r3
 80163fe:	4816      	ldr	r0, [pc, #88]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016400:	f7f3 fc1a 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 8016404:	4603      	mov	r3, r0
 8016406:	2b00      	cmp	r3, #0
 8016408:	bf14      	ite	ne
 801640a:	2301      	movne	r3, #1
 801640c:	2300      	moveq	r3, #0
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b00      	cmp	r3, #0
 8016412:	d001      	beq.n	8016418 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8016414:	f000 fbc0 	bl	8016b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016418:	2360      	movs	r3, #96	; 0x60
 801641a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 801641c:	2300      	movs	r3, #0
 801641e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016420:	2300      	movs	r3, #0
 8016422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016424:	2300      	movs	r3, #0
 8016426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016428:	463b      	mov	r3, r7
 801642a:	2200      	movs	r2, #0
 801642c:	4619      	mov	r1, r3
 801642e:	480a      	ldr	r0, [pc, #40]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 8016430:	f7f2 fe70 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	bf14      	ite	ne
 801643a:	2301      	movne	r3, #1
 801643c:	2300      	moveq	r3, #0
 801643e:	b2db      	uxtb	r3, r3
 8016440:	2b00      	cmp	r3, #0
 8016442:	d001      	beq.n	8016448 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8016444:	f000 fba8 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8016448:	4803      	ldr	r0, [pc, #12]	; (8016458 <_ZL12MX_TIM3_Initv+0x118>)
 801644a:	f001 f9f7 	bl	801783c <HAL_TIM_MspPostInit>

}
 801644e:	bf00      	nop
 8016450:	3738      	adds	r7, #56	; 0x38
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	2000960c 	.word	0x2000960c
 801645c:	40000400 	.word	0x40000400

08016460 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b08e      	sub	sp, #56	; 0x38
 8016464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801646a:	2200      	movs	r2, #0
 801646c:	601a      	str	r2, [r3, #0]
 801646e:	605a      	str	r2, [r3, #4]
 8016470:	609a      	str	r2, [r3, #8]
 8016472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016474:	f107 031c 	add.w	r3, r7, #28
 8016478:	2200      	movs	r2, #0
 801647a:	601a      	str	r2, [r3, #0]
 801647c:	605a      	str	r2, [r3, #4]
 801647e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016480:	463b      	mov	r3, r7
 8016482:	2200      	movs	r2, #0
 8016484:	601a      	str	r2, [r3, #0]
 8016486:	605a      	str	r2, [r3, #4]
 8016488:	609a      	str	r2, [r3, #8]
 801648a:	60da      	str	r2, [r3, #12]
 801648c:	611a      	str	r2, [r3, #16]
 801648e:	615a      	str	r2, [r3, #20]
 8016490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8016492:	4b39      	ldr	r3, [pc, #228]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 8016494:	4a39      	ldr	r2, [pc, #228]	; (801657c <_ZL12MX_TIM5_Initv+0x11c>)
 8016496:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8016498:	4b37      	ldr	r3, [pc, #220]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 801649a:	2200      	movs	r2, #0
 801649c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801649e:	4b36      	ldr	r3, [pc, #216]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164a0:	2200      	movs	r2, #0
 80164a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80164a4:	4b34      	ldr	r3, [pc, #208]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164a6:	2200      	movs	r2, #0
 80164a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80164aa:	4b33      	ldr	r3, [pc, #204]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164ac:	2200      	movs	r2, #0
 80164ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80164b0:	4b31      	ldr	r3, [pc, #196]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164b2:	2200      	movs	r2, #0
 80164b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80164b6:	4830      	ldr	r0, [pc, #192]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164b8:	f7f2 fc62 	bl	8008d80 <HAL_TIM_Base_Init>
 80164bc:	4603      	mov	r3, r0
 80164be:	2b00      	cmp	r3, #0
 80164c0:	bf14      	ite	ne
 80164c2:	2301      	movne	r3, #1
 80164c4:	2300      	moveq	r3, #0
 80164c6:	b2db      	uxtb	r3, r3
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d001      	beq.n	80164d0 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 80164cc:	f000 fb64 	bl	8016b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80164d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80164d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80164d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164da:	4619      	mov	r1, r3
 80164dc:	4826      	ldr	r0, [pc, #152]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164de:	f7f2 ff31 	bl	8009344 <HAL_TIM_ConfigClockSource>
 80164e2:	4603      	mov	r3, r0
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	bf14      	ite	ne
 80164e8:	2301      	movne	r3, #1
 80164ea:	2300      	moveq	r3, #0
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d001      	beq.n	80164f6 <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 80164f2:	f000 fb51 	bl	8016b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80164f6:	4820      	ldr	r0, [pc, #128]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 80164f8:	f7f2 fcc2 	bl	8008e80 <HAL_TIM_PWM_Init>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2b00      	cmp	r3, #0
 8016500:	bf14      	ite	ne
 8016502:	2301      	movne	r3, #1
 8016504:	2300      	moveq	r3, #0
 8016506:	b2db      	uxtb	r3, r3
 8016508:	2b00      	cmp	r3, #0
 801650a:	d001      	beq.n	8016510 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 801650c:	f000 fb44 	bl	8016b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016510:	2300      	movs	r3, #0
 8016512:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016514:	2300      	movs	r3, #0
 8016516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8016518:	f107 031c 	add.w	r3, r7, #28
 801651c:	4619      	mov	r1, r3
 801651e:	4816      	ldr	r0, [pc, #88]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 8016520:	f7f3 fb8a 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 8016524:	4603      	mov	r3, r0
 8016526:	2b00      	cmp	r3, #0
 8016528:	bf14      	ite	ne
 801652a:	2301      	movne	r3, #1
 801652c:	2300      	moveq	r3, #0
 801652e:	b2db      	uxtb	r3, r3
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8016534:	f000 fb30 	bl	8016b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016538:	2360      	movs	r3, #96	; 0x60
 801653a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 801653c:	2300      	movs	r3, #0
 801653e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016540:	2300      	movs	r3, #0
 8016542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016544:	2300      	movs	r3, #0
 8016546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8016548:	463b      	mov	r3, r7
 801654a:	220c      	movs	r2, #12
 801654c:	4619      	mov	r1, r3
 801654e:	480a      	ldr	r0, [pc, #40]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 8016550:	f7f2 fde0 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	bf14      	ite	ne
 801655a:	2301      	movne	r3, #1
 801655c:	2300      	moveq	r3, #0
 801655e:	b2db      	uxtb	r3, r3
 8016560:	2b00      	cmp	r3, #0
 8016562:	d001      	beq.n	8016568 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8016564:	f000 fb18 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8016568:	4803      	ldr	r0, [pc, #12]	; (8016578 <_ZL12MX_TIM5_Initv+0x118>)
 801656a:	f001 f967 	bl	801783c <HAL_TIM_MspPostInit>

}
 801656e:	bf00      	nop
 8016570:	3738      	adds	r7, #56	; 0x38
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}
 8016576:	bf00      	nop
 8016578:	2000964c 	.word	0x2000964c
 801657c:	40000c00 	.word	0x40000c00

08016580 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b088      	sub	sp, #32
 8016584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016586:	f107 0310 	add.w	r3, r7, #16
 801658a:	2200      	movs	r2, #0
 801658c:	601a      	str	r2, [r3, #0]
 801658e:	605a      	str	r2, [r3, #4]
 8016590:	609a      	str	r2, [r3, #8]
 8016592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016594:	1d3b      	adds	r3, r7, #4
 8016596:	2200      	movs	r2, #0
 8016598:	601a      	str	r2, [r3, #0]
 801659a:	605a      	str	r2, [r3, #4]
 801659c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801659e:	4b27      	ldr	r3, [pc, #156]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165a0:	4a27      	ldr	r2, [pc, #156]	; (8016640 <_ZL12MX_TIM8_Initv+0xc0>)
 80165a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80165a4:	4b25      	ldr	r3, [pc, #148]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165a6:	2200      	movs	r2, #0
 80165a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80165aa:	4b24      	ldr	r3, [pc, #144]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165ac:	2200      	movs	r2, #0
 80165ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80165b0:	4b22      	ldr	r3, [pc, #136]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165b2:	2200      	movs	r2, #0
 80165b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80165b6:	4b21      	ldr	r3, [pc, #132]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165b8:	2200      	movs	r2, #0
 80165ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80165bc:	4b1f      	ldr	r3, [pc, #124]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165be:	2200      	movs	r2, #0
 80165c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80165c2:	4b1e      	ldr	r3, [pc, #120]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165c4:	2200      	movs	r2, #0
 80165c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80165c8:	481c      	ldr	r0, [pc, #112]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165ca:	f7f2 fbd9 	bl	8008d80 <HAL_TIM_Base_Init>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	bf14      	ite	ne
 80165d4:	2301      	movne	r3, #1
 80165d6:	2300      	moveq	r3, #0
 80165d8:	b2db      	uxtb	r3, r3
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d001      	beq.n	80165e2 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 80165de:	f000 fadb 	bl	8016b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80165e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80165e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80165e8:	f107 0310 	add.w	r3, r7, #16
 80165ec:	4619      	mov	r1, r3
 80165ee:	4813      	ldr	r0, [pc, #76]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 80165f0:	f7f2 fea8 	bl	8009344 <HAL_TIM_ConfigClockSource>
 80165f4:	4603      	mov	r3, r0
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	bf14      	ite	ne
 80165fa:	2301      	movne	r3, #1
 80165fc:	2300      	moveq	r3, #0
 80165fe:	b2db      	uxtb	r3, r3
 8016600:	2b00      	cmp	r3, #0
 8016602:	d001      	beq.n	8016608 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8016604:	f000 fac8 	bl	8016b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016608:	2300      	movs	r3, #0
 801660a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801660c:	2300      	movs	r3, #0
 801660e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016610:	2300      	movs	r3, #0
 8016612:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016614:	1d3b      	adds	r3, r7, #4
 8016616:	4619      	mov	r1, r3
 8016618:	4808      	ldr	r0, [pc, #32]	; (801663c <_ZL12MX_TIM8_Initv+0xbc>)
 801661a:	f7f3 fb0d 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 801661e:	4603      	mov	r3, r0
 8016620:	2b00      	cmp	r3, #0
 8016622:	bf14      	ite	ne
 8016624:	2301      	movne	r3, #1
 8016626:	2300      	moveq	r3, #0
 8016628:	b2db      	uxtb	r3, r3
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 801662e:	f000 fab3 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8016632:	bf00      	nop
 8016634:	3720      	adds	r7, #32
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	2000968c 	.word	0x2000968c
 8016640:	40010400 	.word	0x40010400

08016644 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b088      	sub	sp, #32
 8016648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801664a:	1d3b      	adds	r3, r7, #4
 801664c:	2200      	movs	r2, #0
 801664e:	601a      	str	r2, [r3, #0]
 8016650:	605a      	str	r2, [r3, #4]
 8016652:	609a      	str	r2, [r3, #8]
 8016654:	60da      	str	r2, [r3, #12]
 8016656:	611a      	str	r2, [r3, #16]
 8016658:	615a      	str	r2, [r3, #20]
 801665a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 801665c:	4b1e      	ldr	r3, [pc, #120]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 801665e:	4a1f      	ldr	r2, [pc, #124]	; (80166dc <_ZL13MX_TIM12_Initv+0x98>)
 8016660:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8016662:	4b1d      	ldr	r3, [pc, #116]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 8016664:	2200      	movs	r2, #0
 8016666:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016668:	4b1b      	ldr	r3, [pc, #108]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 801666a:	2200      	movs	r2, #0
 801666c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 801666e:	4b1a      	ldr	r3, [pc, #104]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 8016670:	2200      	movs	r2, #0
 8016672:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016674:	4b18      	ldr	r3, [pc, #96]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 8016676:	2200      	movs	r2, #0
 8016678:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801667a:	4b17      	ldr	r3, [pc, #92]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 801667c:	2200      	movs	r2, #0
 801667e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8016680:	4815      	ldr	r0, [pc, #84]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 8016682:	f7f2 fbfd 	bl	8008e80 <HAL_TIM_PWM_Init>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	bf14      	ite	ne
 801668c:	2301      	movne	r3, #1
 801668e:	2300      	moveq	r3, #0
 8016690:	b2db      	uxtb	r3, r3
 8016692:	2b00      	cmp	r3, #0
 8016694:	d001      	beq.n	801669a <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 8016696:	f000 fa7f 	bl	8016b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801669a:	2360      	movs	r3, #96	; 0x60
 801669c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 801669e:	2300      	movs	r3, #0
 80166a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80166a2:	2300      	movs	r3, #0
 80166a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80166a6:	2300      	movs	r3, #0
 80166a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80166aa:	1d3b      	adds	r3, r7, #4
 80166ac:	2200      	movs	r2, #0
 80166ae:	4619      	mov	r1, r3
 80166b0:	4809      	ldr	r0, [pc, #36]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 80166b2:	f7f2 fd2f 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 80166b6:	4603      	mov	r3, r0
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	bf14      	ite	ne
 80166bc:	2301      	movne	r3, #1
 80166be:	2300      	moveq	r3, #0
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d001      	beq.n	80166ca <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 80166c6:	f000 fa67 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80166ca:	4803      	ldr	r0, [pc, #12]	; (80166d8 <_ZL13MX_TIM12_Initv+0x94>)
 80166cc:	f001 f8b6 	bl	801783c <HAL_TIM_MspPostInit>

}
 80166d0:	bf00      	nop
 80166d2:	3720      	adds	r7, #32
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	200096cc 	.word	0x200096cc
 80166dc:	40001800 	.word	0x40001800

080166e0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80166e4:	4b16      	ldr	r3, [pc, #88]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166e6:	4a17      	ldr	r2, [pc, #92]	; (8016744 <_ZL19MX_USART1_UART_Initv+0x64>)
 80166e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80166ea:	4b15      	ldr	r3, [pc, #84]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80166f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80166f2:	4b13      	ldr	r3, [pc, #76]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166f4:	2200      	movs	r2, #0
 80166f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80166f8:	4b11      	ldr	r3, [pc, #68]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166fa:	2200      	movs	r2, #0
 80166fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80166fe:	4b10      	ldr	r3, [pc, #64]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 8016700:	2200      	movs	r2, #0
 8016702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8016704:	4b0e      	ldr	r3, [pc, #56]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 8016706:	220c      	movs	r2, #12
 8016708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801670a:	4b0d      	ldr	r3, [pc, #52]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 801670c:	2200      	movs	r2, #0
 801670e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8016710:	4b0b      	ldr	r3, [pc, #44]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 8016712:	2200      	movs	r2, #0
 8016714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8016716:	4b0a      	ldr	r3, [pc, #40]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 8016718:	2200      	movs	r2, #0
 801671a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801671c:	4b08      	ldr	r3, [pc, #32]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 801671e:	2200      	movs	r2, #0
 8016720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8016722:	4807      	ldr	r0, [pc, #28]	; (8016740 <_ZL19MX_USART1_UART_Initv+0x60>)
 8016724:	f7f3 fb80 	bl	8009e28 <HAL_UART_Init>
 8016728:	4603      	mov	r3, r0
 801672a:	2b00      	cmp	r3, #0
 801672c:	bf14      	ite	ne
 801672e:	2301      	movne	r3, #1
 8016730:	2300      	moveq	r3, #0
 8016732:	b2db      	uxtb	r3, r3
 8016734:	2b00      	cmp	r3, #0
 8016736:	d001      	beq.n	801673c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8016738:	f000 fa2e 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801673c:	bf00      	nop
 801673e:	bd80      	pop	{r7, pc}
 8016740:	2000970c 	.word	0x2000970c
 8016744:	40011000 	.word	0x40011000

08016748 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 801674c:	4b16      	ldr	r3, [pc, #88]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 801674e:	4a17      	ldr	r2, [pc, #92]	; (80167ac <_ZL19MX_USART6_UART_Initv+0x64>)
 8016750:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8016752:	4b15      	ldr	r3, [pc, #84]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8016754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8016758:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801675a:	4b13      	ldr	r3, [pc, #76]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 801675c:	2200      	movs	r2, #0
 801675e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8016760:	4b11      	ldr	r3, [pc, #68]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8016762:	2200      	movs	r2, #0
 8016764:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8016766:	4b10      	ldr	r3, [pc, #64]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8016768:	2200      	movs	r2, #0
 801676a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801676c:	4b0e      	ldr	r3, [pc, #56]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 801676e:	220c      	movs	r2, #12
 8016770:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8016772:	4b0d      	ldr	r3, [pc, #52]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8016774:	2200      	movs	r2, #0
 8016776:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8016778:	4b0b      	ldr	r3, [pc, #44]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 801677a:	2200      	movs	r2, #0
 801677c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801677e:	4b0a      	ldr	r3, [pc, #40]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8016780:	2200      	movs	r2, #0
 8016782:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8016784:	4b08      	ldr	r3, [pc, #32]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8016786:	2200      	movs	r2, #0
 8016788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801678a:	4807      	ldr	r0, [pc, #28]	; (80167a8 <_ZL19MX_USART6_UART_Initv+0x60>)
 801678c:	f7f3 fb4c 	bl	8009e28 <HAL_UART_Init>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	bf14      	ite	ne
 8016796:	2301      	movne	r3, #1
 8016798:	2300      	moveq	r3, #0
 801679a:	b2db      	uxtb	r3, r3
 801679c:	2b00      	cmp	r3, #0
 801679e:	d001      	beq.n	80167a4 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 80167a0:	f000 f9fa 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80167a4:	bf00      	nop
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	2000978c 	.word	0x2000978c
 80167ac:	40011400 	.word	0x40011400

080167b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b090      	sub	sp, #64	; 0x40
 80167b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80167b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80167ba:	2200      	movs	r2, #0
 80167bc:	601a      	str	r2, [r3, #0]
 80167be:	605a      	str	r2, [r3, #4]
 80167c0:	609a      	str	r2, [r3, #8]
 80167c2:	60da      	str	r2, [r3, #12]
 80167c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80167c6:	4baf      	ldr	r3, [pc, #700]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167ca:	4aae      	ldr	r2, [pc, #696]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167cc:	f043 0310 	orr.w	r3, r3, #16
 80167d0:	6313      	str	r3, [r2, #48]	; 0x30
 80167d2:	4bac      	ldr	r3, [pc, #688]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167d6:	f003 0310 	and.w	r3, r3, #16
 80167da:	62bb      	str	r3, [r7, #40]	; 0x28
 80167dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80167de:	4ba9      	ldr	r3, [pc, #676]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167e2:	4aa8      	ldr	r2, [pc, #672]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167e8:	6313      	str	r3, [r2, #48]	; 0x30
 80167ea:	4ba6      	ldr	r3, [pc, #664]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167f2:	627b      	str	r3, [r7, #36]	; 0x24
 80167f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80167f6:	4ba3      	ldr	r3, [pc, #652]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167fa:	4aa2      	ldr	r2, [pc, #648]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167fc:	f043 0302 	orr.w	r3, r3, #2
 8016800:	6313      	str	r3, [r2, #48]	; 0x30
 8016802:	4ba0      	ldr	r3, [pc, #640]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016806:	f003 0302 	and.w	r3, r3, #2
 801680a:	623b      	str	r3, [r7, #32]
 801680c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801680e:	4b9d      	ldr	r3, [pc, #628]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016812:	4a9c      	ldr	r2, [pc, #624]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016814:	f043 0308 	orr.w	r3, r3, #8
 8016818:	6313      	str	r3, [r2, #48]	; 0x30
 801681a:	4b9a      	ldr	r3, [pc, #616]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 801681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801681e:	f003 0308 	and.w	r3, r3, #8
 8016822:	61fb      	str	r3, [r7, #28]
 8016824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8016826:	4b97      	ldr	r3, [pc, #604]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801682a:	4a96      	ldr	r2, [pc, #600]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 801682c:	f043 0304 	orr.w	r3, r3, #4
 8016830:	6313      	str	r3, [r2, #48]	; 0x30
 8016832:	4b94      	ldr	r3, [pc, #592]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016836:	f003 0304 	and.w	r3, r3, #4
 801683a:	61bb      	str	r3, [r7, #24]
 801683c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801683e:	4b91      	ldr	r3, [pc, #580]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016842:	4a90      	ldr	r2, [pc, #576]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016844:	f043 0301 	orr.w	r3, r3, #1
 8016848:	6313      	str	r3, [r2, #48]	; 0x30
 801684a:	4b8e      	ldr	r3, [pc, #568]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 801684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801684e:	f003 0301 	and.w	r3, r3, #1
 8016852:	617b      	str	r3, [r7, #20]
 8016854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8016856:	4b8b      	ldr	r3, [pc, #556]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801685a:	4a8a      	ldr	r2, [pc, #552]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 801685c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016860:	6313      	str	r3, [r2, #48]	; 0x30
 8016862:	4b88      	ldr	r3, [pc, #544]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801686a:	613b      	str	r3, [r7, #16]
 801686c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801686e:	4b85      	ldr	r3, [pc, #532]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016872:	4a84      	ldr	r2, [pc, #528]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016878:	6313      	str	r3, [r2, #48]	; 0x30
 801687a:	4b82      	ldr	r3, [pc, #520]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 801687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016882:	60fb      	str	r3, [r7, #12]
 8016884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8016886:	4b7f      	ldr	r3, [pc, #508]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801688a:	4a7e      	ldr	r2, [pc, #504]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 801688c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016890:	6313      	str	r3, [r2, #48]	; 0x30
 8016892:	4b7c      	ldr	r3, [pc, #496]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801689a:	60bb      	str	r3, [r7, #8]
 801689c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801689e:	4b79      	ldr	r3, [pc, #484]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80168a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168a2:	4a78      	ldr	r2, [pc, #480]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80168a4:	f043 0320 	orr.w	r3, r3, #32
 80168a8:	6313      	str	r3, [r2, #48]	; 0x30
 80168aa:	4b76      	ldr	r3, [pc, #472]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80168ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168ae:	f003 0320 	and.w	r3, r3, #32
 80168b2:	607b      	str	r3, [r7, #4]
 80168b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80168b6:	4b73      	ldr	r3, [pc, #460]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80168b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168ba:	4a72      	ldr	r2, [pc, #456]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80168bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168c0:	6313      	str	r3, [r2, #48]	; 0x30
 80168c2:	4b70      	ldr	r3, [pc, #448]	; (8016a84 <_ZL12MX_GPIO_Initv+0x2d4>)
 80168c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168ca:	603b      	str	r3, [r7, #0]
 80168cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80168ce:	2201      	movs	r2, #1
 80168d0:	2120      	movs	r1, #32
 80168d2:	486d      	ldr	r0, [pc, #436]	; (8016a88 <_ZL12MX_GPIO_Initv+0x2d8>)
 80168d4:	f7ec f9a0 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80168d8:	2200      	movs	r2, #0
 80168da:	210c      	movs	r1, #12
 80168dc:	486b      	ldr	r0, [pc, #428]	; (8016a8c <_ZL12MX_GPIO_Initv+0x2dc>)
 80168de:	f7ec f99b 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80168e2:	2201      	movs	r2, #1
 80168e4:	2108      	movs	r1, #8
 80168e6:	486a      	ldr	r0, [pc, #424]	; (8016a90 <_ZL12MX_GPIO_Initv+0x2e0>)
 80168e8:	f7ec f996 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80168ec:	2201      	movs	r2, #1
 80168ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80168f2:	4866      	ldr	r0, [pc, #408]	; (8016a8c <_ZL12MX_GPIO_Initv+0x2dc>)
 80168f4:	f7ec f990 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80168f8:	2200      	movs	r2, #0
 80168fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80168fe:	4865      	ldr	r0, [pc, #404]	; (8016a94 <_ZL12MX_GPIO_Initv+0x2e4>)
 8016900:	f7ec f98a 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8016904:	2200      	movs	r2, #0
 8016906:	21c8      	movs	r1, #200	; 0xc8
 8016908:	4863      	ldr	r0, [pc, #396]	; (8016a98 <_ZL12MX_GPIO_Initv+0x2e8>)
 801690a:	f7ec f985 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 801690e:	2308      	movs	r3, #8
 8016910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016912:	2300      	movs	r3, #0
 8016914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016916:	2300      	movs	r3, #0
 8016918:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 801691a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801691e:	4619      	mov	r1, r3
 8016920:	485e      	ldr	r0, [pc, #376]	; (8016a9c <_ZL12MX_GPIO_Initv+0x2ec>)
 8016922:	f7eb fead 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8016926:	f643 4323 	movw	r3, #15395	; 0x3c23
 801692a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801692c:	2302      	movs	r3, #2
 801692e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016930:	2300      	movs	r3, #0
 8016932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016934:	2303      	movs	r3, #3
 8016936:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016938:	230a      	movs	r3, #10
 801693a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801693c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016940:	4619      	mov	r1, r3
 8016942:	4857      	ldr	r0, [pc, #348]	; (8016aa0 <_ZL12MX_GPIO_Initv+0x2f0>)
 8016944:	f7eb fe9c 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8016948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801694c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801694e:	2302      	movs	r3, #2
 8016950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016952:	2300      	movs	r3, #0
 8016954:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016956:	2300      	movs	r3, #0
 8016958:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801695a:	2301      	movs	r3, #1
 801695c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 801695e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016962:	4619      	mov	r1, r3
 8016964:	484f      	ldr	r0, [pc, #316]	; (8016aa4 <_ZL12MX_GPIO_Initv+0x2f4>)
 8016966:	f7eb fe8b 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 801696a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801696e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016970:	2300      	movs	r3, #0
 8016972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016974:	2300      	movs	r3, #0
 8016976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8016978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801697c:	4619      	mov	r1, r3
 801697e:	484a      	ldr	r0, [pc, #296]	; (8016aa8 <_ZL12MX_GPIO_Initv+0x2f8>)
 8016980:	f7eb fe7e 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8016984:	2340      	movs	r3, #64	; 0x40
 8016986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8016988:	4b48      	ldr	r3, [pc, #288]	; (8016aac <_ZL12MX_GPIO_Initv+0x2fc>)
 801698a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801698c:	2300      	movs	r3, #0
 801698e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8016990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016994:	4619      	mov	r1, r3
 8016996:	483c      	ldr	r0, [pc, #240]	; (8016a88 <_ZL12MX_GPIO_Initv+0x2d8>)
 8016998:	f7eb fe72 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 801699c:	2320      	movs	r3, #32
 801699e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80169a0:	2301      	movs	r3, #1
 80169a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169a4:	2300      	movs	r3, #0
 80169a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80169a8:	2300      	movs	r3, #0
 80169aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80169ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169b0:	4619      	mov	r1, r3
 80169b2:	4835      	ldr	r0, [pc, #212]	; (8016a88 <_ZL12MX_GPIO_Initv+0x2d8>)
 80169b4:	f7eb fe64 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80169b8:	f241 030c 	movw	r3, #4108	; 0x100c
 80169bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80169be:	2301      	movs	r3, #1
 80169c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169c2:	2300      	movs	r3, #0
 80169c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80169c6:	2300      	movs	r3, #0
 80169c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80169ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169ce:	4619      	mov	r1, r3
 80169d0:	482e      	ldr	r0, [pc, #184]	; (8016a8c <_ZL12MX_GPIO_Initv+0x2dc>)
 80169d2:	f7eb fe55 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80169d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80169da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80169dc:	2300      	movs	r3, #0
 80169de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169e0:	2300      	movs	r3, #0
 80169e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80169e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169e8:	4619      	mov	r1, r3
 80169ea:	4831      	ldr	r0, [pc, #196]	; (8016ab0 <_ZL12MX_GPIO_Initv+0x300>)
 80169ec:	f7eb fe48 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80169f0:	2308      	movs	r3, #8
 80169f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80169f4:	2301      	movs	r3, #1
 80169f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169f8:	2300      	movs	r3, #0
 80169fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80169fc:	2300      	movs	r3, #0
 80169fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8016a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a04:	4619      	mov	r1, r3
 8016a06:	4822      	ldr	r0, [pc, #136]	; (8016a90 <_ZL12MX_GPIO_Initv+0x2e0>)
 8016a08:	f7eb fe3a 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8016a0c:	2310      	movs	r3, #16
 8016a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016a10:	2300      	movs	r3, #0
 8016a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a14:	2300      	movs	r3, #0
 8016a16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8016a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	481a      	ldr	r0, [pc, #104]	; (8016a88 <_ZL12MX_GPIO_Initv+0x2d8>)
 8016a20:	f7eb fe2e 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8016a24:	f248 0304 	movw	r3, #32772	; 0x8004
 8016a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8016a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a36:	4619      	mov	r1, r3
 8016a38:	4816      	ldr	r0, [pc, #88]	; (8016a94 <_ZL12MX_GPIO_Initv+0x2e4>)
 8016a3a:	f7eb fe21 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8016a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016a44:	2301      	movs	r3, #1
 8016a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8016a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a54:	4619      	mov	r1, r3
 8016a56:	480f      	ldr	r0, [pc, #60]	; (8016a94 <_ZL12MX_GPIO_Initv+0x2e4>)
 8016a58:	f7eb fe12 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8016a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8016a62:	4b12      	ldr	r3, [pc, #72]	; (8016aac <_ZL12MX_GPIO_Initv+0x2fc>)
 8016a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a66:	2300      	movs	r3, #0
 8016a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8016a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a6e:	4619      	mov	r1, r3
 8016a70:	4806      	ldr	r0, [pc, #24]	; (8016a8c <_ZL12MX_GPIO_Initv+0x2dc>)
 8016a72:	f7eb fe05 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8016a76:	2310      	movs	r3, #16
 8016a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a7a:	2302      	movs	r3, #2
 8016a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	e018      	b.n	8016ab4 <_ZL12MX_GPIO_Initv+0x304>
 8016a82:	bf00      	nop
 8016a84:	40023800 	.word	0x40023800
 8016a88:	40020c00 	.word	0x40020c00
 8016a8c:	40022000 	.word	0x40022000
 8016a90:	40022800 	.word	0x40022800
 8016a94:	40021c00 	.word	0x40021c00
 8016a98:	40021800 	.word	0x40021800
 8016a9c:	40021000 	.word	0x40021000
 8016aa0:	40020400 	.word	0x40020400
 8016aa4:	40020000 	.word	0x40020000
 8016aa8:	40022400 	.word	0x40022400
 8016aac:	10120000 	.word	0x10120000
 8016ab0:	40020800 	.word	0x40020800
 8016ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ab6:	2303      	movs	r3, #3
 8016ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016aba:	230a      	movs	r3, #10
 8016abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8016abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ac2:	4619      	mov	r1, r3
 8016ac4:	4820      	ldr	r0, [pc, #128]	; (8016b48 <_ZL12MX_GPIO_Initv+0x398>)
 8016ac6:	f7eb fddb 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8016aca:	23c8      	movs	r3, #200	; 0xc8
 8016acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8016ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ade:	4619      	mov	r1, r3
 8016ae0:	481a      	ldr	r0, [pc, #104]	; (8016b4c <_ZL12MX_GPIO_Initv+0x39c>)
 8016ae2:	f7eb fdcd 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8016ae6:	2305      	movs	r3, #5
 8016ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016aea:	2302      	movs	r3, #2
 8016aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016aee:	2300      	movs	r3, #0
 8016af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016af2:	2303      	movs	r3, #3
 8016af4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016af6:	230a      	movs	r3, #10
 8016af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016afe:	4619      	mov	r1, r3
 8016b00:	4813      	ldr	r0, [pc, #76]	; (8016b50 <_ZL12MX_GPIO_Initv+0x3a0>)
 8016b02:	f7eb fdbd 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8016b06:	2304      	movs	r3, #4
 8016b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8016b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016b16:	4619      	mov	r1, r3
 8016b18:	480c      	ldr	r0, [pc, #48]	; (8016b4c <_ZL12MX_GPIO_Initv+0x39c>)
 8016b1a:	f7eb fdb1 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8016b1e:	2328      	movs	r3, #40	; 0x28
 8016b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016b22:	2302      	movs	r3, #2
 8016b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016b26:	2300      	movs	r3, #0
 8016b28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016b2a:	2303      	movs	r3, #3
 8016b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016b2e:	230a      	movs	r3, #10
 8016b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016b36:	4619      	mov	r1, r3
 8016b38:	4806      	ldr	r0, [pc, #24]	; (8016b54 <_ZL12MX_GPIO_Initv+0x3a4>)
 8016b3a:	f7eb fda1 	bl	8002680 <HAL_GPIO_Init>

}
 8016b3e:	bf00      	nop
 8016b40:	3740      	adds	r7, #64	; 0x40
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	40021c00 	.word	0x40021c00
 8016b4c:	40021800 	.word	0x40021800
 8016b50:	40020800 	.word	0x40020800
 8016b54:	40020000 	.word	0x40020000

08016b58 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b082      	sub	sp, #8
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8016b60:	f7fe ff10 	bl	8015984 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8016b64:	f001 f99e 	bl	8017ea4 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 8016b68:	f7fc fef2 	bl	8013950 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8016b6c:	2001      	movs	r0, #1
 8016b6e:	f7f9 fd0e 	bl	801058e <osDelay>
 8016b72:	e7fb      	b.n	8016b6c <_Z16StartDefaultTaskPKv+0x14>

08016b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	4a04      	ldr	r2, [pc, #16]	; (8016b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8016b82:	4293      	cmp	r3, r2
 8016b84:	d101      	bne.n	8016b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8016b86:	f7ea fbc7 	bl	8001318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8016b8a:	bf00      	nop
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	40001000 	.word	0x40001000

08016b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8016b98:	b480      	push	{r7}
 8016b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8016b9c:	bf00      	nop
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba4:	4770      	bx	lr

08016ba6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8016bae:	f7f9 fcb7 	bl	8010520 <osKernelSysTick>
 8016bb2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8016bb4:	e006      	b.n	8016bc4 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016bb6:	f7fe feab 	bl	8015910 <BSP_SD_GetCardState>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d101      	bne.n	8016bc4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e009      	b.n	8016bd8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8016bc4:	f7f9 fcac 	bl	8010520 <osKernelSysTick>
 8016bc8:	4602      	mov	r2, r0
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d8f0      	bhi.n	8016bb6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8016bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3710      	adds	r7, #16
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	4603      	mov	r3, r0
 8016be8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016bea:	4b0b      	ldr	r3, [pc, #44]	; (8016c18 <SD_CheckStatus+0x38>)
 8016bec:	2201      	movs	r2, #1
 8016bee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016bf0:	f7fe fe8e 	bl	8015910 <BSP_SD_GetCardState>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d107      	bne.n	8016c0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016bfa:	4b07      	ldr	r3, [pc, #28]	; (8016c18 <SD_CheckStatus+0x38>)
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	f023 0301 	bic.w	r3, r3, #1
 8016c04:	b2da      	uxtb	r2, r3
 8016c06:	4b04      	ldr	r3, [pc, #16]	; (8016c18 <SD_CheckStatus+0x38>)
 8016c08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8016c0a:	4b03      	ldr	r3, [pc, #12]	; (8016c18 <SD_CheckStatus+0x38>)
 8016c0c:	781b      	ldrb	r3, [r3, #0]
 8016c0e:	b2db      	uxtb	r3, r3
}
 8016c10:	4618      	mov	r0, r3
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	20000062 	.word	0x20000062

08016c1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b084      	sub	sp, #16
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	4603      	mov	r3, r0
 8016c24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8016c26:	4b1a      	ldr	r3, [pc, #104]	; (8016c90 <SD_initialize+0x74>)
 8016c28:	2201      	movs	r2, #1
 8016c2a:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8016c2c:	f7f9 fc6c 	bl	8010508 <osKernelRunning>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d025      	beq.n	8016c82 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8016c36:	f7fe fe11 	bl	801585c <BSP_SD_Init>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d107      	bne.n	8016c50 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8016c40:	79fb      	ldrb	r3, [r7, #7]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7ff ffcc 	bl	8016be0 <SD_CheckStatus>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	4b10      	ldr	r3, [pc, #64]	; (8016c90 <SD_initialize+0x74>)
 8016c4e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8016c50:	4b0f      	ldr	r3, [pc, #60]	; (8016c90 <SD_initialize+0x74>)
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	b2db      	uxtb	r3, r3
 8016c56:	2b01      	cmp	r3, #1
 8016c58:	d013      	beq.n	8016c82 <SD_initialize+0x66>
 8016c5a:	4b0e      	ldr	r3, [pc, #56]	; (8016c94 <SD_initialize+0x78>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d10f      	bne.n	8016c82 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8016c62:	4a0d      	ldr	r2, [pc, #52]	; (8016c98 <SD_initialize+0x7c>)
 8016c64:	f107 0308 	add.w	r3, r7, #8
 8016c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c6c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8016c70:	f107 0308 	add.w	r3, r7, #8
 8016c74:	2100      	movs	r1, #0
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7f9 fc9d 	bl	80105b6 <osMessageCreate>
 8016c7c:	4602      	mov	r2, r0
 8016c7e:	4b05      	ldr	r3, [pc, #20]	; (8016c94 <SD_initialize+0x78>)
 8016c80:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8016c82:	4b03      	ldr	r3, [pc, #12]	; (8016c90 <SD_initialize+0x74>)
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	b2db      	uxtb	r3, r3
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3710      	adds	r7, #16
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	20000062 	.word	0x20000062
 8016c94:	20009a10 	.word	0x20009a10
 8016c98:	0801f8bc 	.word	0x0801f8bc

08016c9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8016ca6:	79fb      	ldrb	r3, [r7, #7]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7ff ff99 	bl	8016be0 <SD_CheckStatus>
 8016cae:	4603      	mov	r3, r0
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3708      	adds	r7, #8
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b08e      	sub	sp, #56	; 0x38
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	61b9      	str	r1, [r7, #24]
 8016cc0:	617a      	str	r2, [r7, #20]
 8016cc2:	613b      	str	r3, [r7, #16]
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8016cc8:	2301      	movs	r3, #1
 8016cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016cce:	f247 5030 	movw	r0, #30000	; 0x7530
 8016cd2:	f7ff ff68 	bl	8016ba6 <SD_CheckStatusWithTimeout>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	da02      	bge.n	8016ce2 <SD_read+0x2a>
  {
    return res;
 8016cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ce0:	e06c      	b.n	8016dbc <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8016ce2:	69bb      	ldr	r3, [r7, #24]
 8016ce4:	f003 0303 	and.w	r3, r3, #3
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d11e      	bne.n	8016d2a <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8016cec:	693a      	ldr	r2, [r7, #16]
 8016cee:	6979      	ldr	r1, [r7, #20]
 8016cf0:	69b8      	ldr	r0, [r7, #24]
 8016cf2:	f7fe fdd9 	bl	80158a8 <BSP_SD_ReadBlocks_DMA>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8016cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d159      	bne.n	8016db8 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016d04:	4b2f      	ldr	r3, [pc, #188]	; (8016dc4 <SD_read+0x10c>)
 8016d06:	6819      	ldr	r1, [r3, #0]
 8016d08:	f107 0320 	add.w	r3, r7, #32
 8016d0c:	f247 5230 	movw	r2, #30000	; 0x7530
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7f9 fca3 	bl	801065c <osMessageGet>
      if (event.status == osEventMessage) {
 8016d16:	6a3b      	ldr	r3, [r7, #32]
 8016d18:	2b10      	cmp	r3, #16
 8016d1a:	d14d      	bne.n	8016db8 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	2b01      	cmp	r3, #1
 8016d20:	d14a      	bne.n	8016db8 <SD_read+0x100>
          res = RES_OK;
 8016d22:	2300      	movs	r3, #0
 8016d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016d28:	e046      	b.n	8016db8 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8016d2e:	e032      	b.n	8016d96 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	1c5a      	adds	r2, r3, #1
 8016d34:	617a      	str	r2, [r7, #20]
 8016d36:	2201      	movs	r2, #1
 8016d38:	4619      	mov	r1, r3
 8016d3a:	4823      	ldr	r0, [pc, #140]	; (8016dc8 <SD_read+0x110>)
 8016d3c:	f7fe fdb4 	bl	80158a8 <BSP_SD_ReadBlocks_DMA>
 8016d40:	4603      	mov	r3, r0
 8016d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8016d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d128      	bne.n	8016da0 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016d4e:	4b1d      	ldr	r3, [pc, #116]	; (8016dc4 <SD_read+0x10c>)
 8016d50:	6819      	ldr	r1, [r3, #0]
 8016d52:	463b      	mov	r3, r7
 8016d54:	f247 5230 	movw	r2, #30000	; 0x7530
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7f9 fc7f 	bl	801065c <osMessageGet>
 8016d5e:	f107 0320 	add.w	r3, r7, #32
 8016d62:	463a      	mov	r2, r7
 8016d64:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8016d6a:	6a3b      	ldr	r3, [r7, #32]
 8016d6c:	2b10      	cmp	r3, #16
 8016d6e:	d10f      	bne.n	8016d90 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8016d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d72:	2b01      	cmp	r3, #1
 8016d74:	d10c      	bne.n	8016d90 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	4a13      	ldr	r2, [pc, #76]	; (8016dc8 <SD_read+0x110>)
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	4611      	mov	r1, r2
 8016d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016d82:	461a      	mov	r2, r3
 8016d84:	f007 fb88 	bl	801e498 <memcpy>
            buff += BLOCKSIZE;
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8016d8e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8016d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d92:	3301      	adds	r3, #1
 8016d94:	633b      	str	r3, [r7, #48]	; 0x30
 8016d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d98:	693a      	ldr	r2, [r7, #16]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d8c8      	bhi.n	8016d30 <SD_read+0x78>
 8016d9e:	e000      	b.n	8016da2 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8016da0:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8016da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da4:	693a      	ldr	r2, [r7, #16]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d106      	bne.n	8016db8 <SD_read+0x100>
 8016daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d102      	bne.n	8016db8 <SD_read+0x100>
      res = RES_OK;
 8016db2:	2300      	movs	r3, #0
 8016db4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8016db8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3738      	adds	r7, #56	; 0x38
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	20009a10 	.word	0x20009a10
 8016dc8:	20009810 	.word	0x20009810

08016dcc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b090      	sub	sp, #64	; 0x40
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	61b9      	str	r1, [r7, #24]
 8016dd4:	617a      	str	r2, [r7, #20]
 8016dd6:	613b      	str	r3, [r7, #16]
 8016dd8:	4603      	mov	r3, r0
 8016dda:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8016ddc:	2301      	movs	r3, #1
 8016dde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016de2:	f247 5030 	movw	r0, #30000	; 0x7530
 8016de6:	f7ff fede 	bl	8016ba6 <SD_CheckStatusWithTimeout>
 8016dea:	4603      	mov	r3, r0
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	da02      	bge.n	8016df6 <SD_write+0x2a>
  {
    return res;
 8016df0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016df4:	e07c      	b.n	8016ef0 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8016df6:	69bb      	ldr	r3, [r7, #24]
 8016df8:	f003 0303 	and.w	r3, r3, #3
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d12e      	bne.n	8016e5e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8016e00:	693a      	ldr	r2, [r7, #16]
 8016e02:	6979      	ldr	r1, [r7, #20]
 8016e04:	69b8      	ldr	r0, [r7, #24]
 8016e06:	f7fe fd69 	bl	80158dc <BSP_SD_WriteBlocks_DMA>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d16d      	bne.n	8016eec <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016e10:	4b39      	ldr	r3, [pc, #228]	; (8016ef8 <SD_write+0x12c>)
 8016e12:	6819      	ldr	r1, [r3, #0]
 8016e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e18:	f247 5230 	movw	r2, #30000	; 0x7530
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f7f9 fc1d 	bl	801065c <osMessageGet>

      if (event.status == osEventMessage)
 8016e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e24:	2b10      	cmp	r3, #16
 8016e26:	d161      	bne.n	8016eec <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8016e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2a:	2b02      	cmp	r3, #2
 8016e2c:	d15e      	bne.n	8016eec <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8016e2e:	f7f9 fb77 	bl	8010520 <osKernelSysTick>
 8016e32:	4602      	mov	r2, r0
 8016e34:	f247 5330 	movw	r3, #30000	; 0x7530
 8016e38:	4413      	add	r3, r2
 8016e3a:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 8016e3c:	e008      	b.n	8016e50 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016e3e:	f7fe fd67 	bl	8015910 <BSP_SD_GetCardState>
 8016e42:	4603      	mov	r3, r0
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d103      	bne.n	8016e50 <SD_write+0x84>
            {
              res = RES_OK;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8016e4e:	e04d      	b.n	8016eec <SD_write+0x120>
          while(timer > osKernelSysTick())
 8016e50:	f7f9 fb66 	bl	8010520 <osKernelSysTick>
 8016e54:	4602      	mov	r2, r0
 8016e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e58:	4293      	cmp	r3, r2
 8016e5a:	d8f0      	bhi.n	8016e3e <SD_write+0x72>
 8016e5c:	e046      	b.n	8016eec <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8016e5e:	2300      	movs	r3, #0
 8016e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8016e62:	e032      	b.n	8016eca <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	1c5a      	adds	r2, r3, #1
 8016e68:	617a      	str	r2, [r7, #20]
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	4823      	ldr	r0, [pc, #140]	; (8016efc <SD_write+0x130>)
 8016e70:	f7fe fd34 	bl	80158dc <BSP_SD_WriteBlocks_DMA>
 8016e74:	4603      	mov	r3, r0
 8016e76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 8016e7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d128      	bne.n	8016ed4 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016e82:	4b1d      	ldr	r3, [pc, #116]	; (8016ef8 <SD_write+0x12c>)
 8016e84:	6819      	ldr	r1, [r3, #0]
 8016e86:	463b      	mov	r3, r7
 8016e88:	f247 5230 	movw	r2, #30000	; 0x7530
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f9 fbe5 	bl	801065c <osMessageGet>
 8016e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e96:	463a      	mov	r2, r7
 8016e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8016e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea0:	2b10      	cmp	r3, #16
 8016ea2:	d10f      	bne.n	8016ec4 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8016ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea6:	2b02      	cmp	r3, #2
 8016ea8:	d10c      	bne.n	8016ec4 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	4a13      	ldr	r2, [pc, #76]	; (8016efc <SD_write+0x130>)
 8016eae:	4618      	mov	r0, r3
 8016eb0:	4611      	mov	r1, r2
 8016eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	f007 faee 	bl	801e498 <memcpy>
            buff += BLOCKSIZE;
 8016ebc:	69bb      	ldr	r3, [r7, #24]
 8016ebe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8016ec2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8016ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ec6:	3301      	adds	r3, #1
 8016ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8016eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ecc:	693a      	ldr	r2, [r7, #16]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d8c8      	bhi.n	8016e64 <SD_write+0x98>
 8016ed2:	e000      	b.n	8016ed6 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8016ed4:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8016ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed8:	693a      	ldr	r2, [r7, #16]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d106      	bne.n	8016eec <SD_write+0x120>
 8016ede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d102      	bne.n	8016eec <SD_write+0x120>
      res = RES_OK;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8016eec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3740      	adds	r7, #64	; 0x40
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}
 8016ef8:	20009a10 	.word	0x20009a10
 8016efc:	20009810 	.word	0x20009810

08016f00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b08c      	sub	sp, #48	; 0x30
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	4603      	mov	r3, r0
 8016f08:	603a      	str	r2, [r7, #0]
 8016f0a:	71fb      	strb	r3, [r7, #7]
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016f10:	2301      	movs	r3, #1
 8016f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016f16:	4b25      	ldr	r3, [pc, #148]	; (8016fac <SD_ioctl+0xac>)
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	f003 0301 	and.w	r3, r3, #1
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d001      	beq.n	8016f28 <SD_ioctl+0x28>
 8016f24:	2303      	movs	r3, #3
 8016f26:	e03c      	b.n	8016fa2 <SD_ioctl+0xa2>

  switch (cmd)
 8016f28:	79bb      	ldrb	r3, [r7, #6]
 8016f2a:	2b03      	cmp	r3, #3
 8016f2c:	d834      	bhi.n	8016f98 <SD_ioctl+0x98>
 8016f2e:	a201      	add	r2, pc, #4	; (adr r2, 8016f34 <SD_ioctl+0x34>)
 8016f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f34:	08016f45 	.word	0x08016f45
 8016f38:	08016f4d 	.word	0x08016f4d
 8016f3c:	08016f65 	.word	0x08016f65
 8016f40:	08016f7f 	.word	0x08016f7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8016f44:	2300      	movs	r3, #0
 8016f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f4a:	e028      	b.n	8016f9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8016f4c:	f107 030c 	add.w	r3, r7, #12
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7fe fced 	bl	8015930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8016f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f62:	e01c      	b.n	8016f9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016f64:	f107 030c 	add.w	r3, r7, #12
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7fe fce1 	bl	8015930 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8016f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f70:	b29a      	uxth	r2, r3
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8016f76:	2300      	movs	r3, #0
 8016f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f7c:	e00f      	b.n	8016f9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016f7e:	f107 030c 	add.w	r3, r7, #12
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7fe fcd4 	bl	8015930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8016f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8a:	0a5a      	lsrs	r2, r3, #9
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016f90:	2300      	movs	r3, #0
 8016f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f96:	e002      	b.n	8016f9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8016f98:	2304      	movs	r3, #4
 8016f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8016f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3730      	adds	r7, #48	; 0x30
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	20000062 	.word	0x20000062

08016fb0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8016fb4:	4b04      	ldr	r3, [pc, #16]	; (8016fc8 <BSP_SD_ReadCpltCallback+0x18>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8016fbc:	2101      	movs	r1, #1
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f7f9 fb0c 	bl	80105dc <osMessagePut>
}
 8016fc4:	bf00      	nop
 8016fc6:	bd80      	pop	{r7, pc}
 8016fc8:	20009a10 	.word	0x20009a10

08016fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b082      	sub	sp, #8
 8016fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8016fd2:	4b11      	ldr	r3, [pc, #68]	; (8017018 <HAL_MspInit+0x4c>)
 8016fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fd6:	4a10      	ldr	r2, [pc, #64]	; (8017018 <HAL_MspInit+0x4c>)
 8016fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8016fde:	4b0e      	ldr	r3, [pc, #56]	; (8017018 <HAL_MspInit+0x4c>)
 8016fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016fe6:	607b      	str	r3, [r7, #4]
 8016fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016fea:	4b0b      	ldr	r3, [pc, #44]	; (8017018 <HAL_MspInit+0x4c>)
 8016fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fee:	4a0a      	ldr	r2, [pc, #40]	; (8017018 <HAL_MspInit+0x4c>)
 8016ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8016ff6:	4b08      	ldr	r3, [pc, #32]	; (8017018 <HAL_MspInit+0x4c>)
 8016ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ffe:	603b      	str	r3, [r7, #0]
 8017000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017002:	2200      	movs	r2, #0
 8017004:	210f      	movs	r1, #15
 8017006:	f06f 0001 	mvn.w	r0, #1
 801700a:	f7ea fd13 	bl	8001a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801700e:	bf00      	nop
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	40023800 	.word	0x40023800

0801701c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b08a      	sub	sp, #40	; 0x28
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017024:	f107 0314 	add.w	r3, r7, #20
 8017028:	2200      	movs	r2, #0
 801702a:	601a      	str	r2, [r3, #0]
 801702c:	605a      	str	r2, [r3, #4]
 801702e:	609a      	str	r2, [r3, #8]
 8017030:	60da      	str	r2, [r3, #12]
 8017032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	4a21      	ldr	r2, [pc, #132]	; (80170c0 <HAL_ADC_MspInit+0xa4>)
 801703a:	4293      	cmp	r3, r2
 801703c:	d13c      	bne.n	80170b8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 801703e:	4b21      	ldr	r3, [pc, #132]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 8017040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017042:	4a20      	ldr	r2, [pc, #128]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 8017044:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017048:	6453      	str	r3, [r2, #68]	; 0x44
 801704a:	4b1e      	ldr	r3, [pc, #120]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 801704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801704e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017052:	613b      	str	r3, [r7, #16]
 8017054:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8017056:	4b1b      	ldr	r3, [pc, #108]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 8017058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801705a:	4a1a      	ldr	r2, [pc, #104]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 801705c:	f043 0320 	orr.w	r3, r3, #32
 8017060:	6313      	str	r3, [r2, #48]	; 0x30
 8017062:	4b18      	ldr	r3, [pc, #96]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 8017064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017066:	f003 0320 	and.w	r3, r3, #32
 801706a:	60fb      	str	r3, [r7, #12]
 801706c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801706e:	4b15      	ldr	r3, [pc, #84]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 8017070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017072:	4a14      	ldr	r2, [pc, #80]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 8017074:	f043 0301 	orr.w	r3, r3, #1
 8017078:	6313      	str	r3, [r2, #48]	; 0x30
 801707a:	4b12      	ldr	r3, [pc, #72]	; (80170c4 <HAL_ADC_MspInit+0xa8>)
 801707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801707e:	f003 0301 	and.w	r3, r3, #1
 8017082:	60bb      	str	r3, [r7, #8]
 8017084:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8017086:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801708a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801708c:	2303      	movs	r3, #3
 801708e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017090:	2300      	movs	r3, #0
 8017092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017094:	f107 0314 	add.w	r3, r7, #20
 8017098:	4619      	mov	r1, r3
 801709a:	480b      	ldr	r0, [pc, #44]	; (80170c8 <HAL_ADC_MspInit+0xac>)
 801709c:	f7eb faf0 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80170a0:	2301      	movs	r3, #1
 80170a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80170a4:	2303      	movs	r3, #3
 80170a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170a8:	2300      	movs	r3, #0
 80170aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80170ac:	f107 0314 	add.w	r3, r7, #20
 80170b0:	4619      	mov	r1, r3
 80170b2:	4806      	ldr	r0, [pc, #24]	; (80170cc <HAL_ADC_MspInit+0xb0>)
 80170b4:	f7eb fae4 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80170b8:	bf00      	nop
 80170ba:	3728      	adds	r7, #40	; 0x28
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	40012200 	.word	0x40012200
 80170c4:	40023800 	.word	0x40023800
 80170c8:	40021400 	.word	0x40021400
 80170cc:	40020000 	.word	0x40020000

080170d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b085      	sub	sp, #20
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	4a0a      	ldr	r2, [pc, #40]	; (8017108 <HAL_CRC_MspInit+0x38>)
 80170de:	4293      	cmp	r3, r2
 80170e0:	d10b      	bne.n	80170fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80170e2:	4b0a      	ldr	r3, [pc, #40]	; (801710c <HAL_CRC_MspInit+0x3c>)
 80170e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170e6:	4a09      	ldr	r2, [pc, #36]	; (801710c <HAL_CRC_MspInit+0x3c>)
 80170e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80170ec:	6313      	str	r3, [r2, #48]	; 0x30
 80170ee:	4b07      	ldr	r3, [pc, #28]	; (801710c <HAL_CRC_MspInit+0x3c>)
 80170f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80170f6:	60fb      	str	r3, [r7, #12]
 80170f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80170fa:	bf00      	nop
 80170fc:	3714      	adds	r7, #20
 80170fe:	46bd      	mov	sp, r7
 8017100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	40023000 	.word	0x40023000
 801710c:	40023800 	.word	0x40023800

08017110 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b08e      	sub	sp, #56	; 0x38
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801711c:	2200      	movs	r2, #0
 801711e:	601a      	str	r2, [r3, #0]
 8017120:	605a      	str	r2, [r3, #4]
 8017122:	609a      	str	r2, [r3, #8]
 8017124:	60da      	str	r2, [r3, #12]
 8017126:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	4a50      	ldr	r2, [pc, #320]	; (8017270 <HAL_DCMI_MspInit+0x160>)
 801712e:	4293      	cmp	r3, r2
 8017130:	f040 809a 	bne.w	8017268 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8017134:	4b4f      	ldr	r3, [pc, #316]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017138:	4a4e      	ldr	r2, [pc, #312]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801713a:	f043 0301 	orr.w	r3, r3, #1
 801713e:	6353      	str	r3, [r2, #52]	; 0x34
 8017140:	4b4c      	ldr	r3, [pc, #304]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017144:	f003 0301 	and.w	r3, r3, #1
 8017148:	623b      	str	r3, [r7, #32]
 801714a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801714c:	4b49      	ldr	r3, [pc, #292]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801714e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017150:	4a48      	ldr	r2, [pc, #288]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017152:	f043 0310 	orr.w	r3, r3, #16
 8017156:	6313      	str	r3, [r2, #48]	; 0x30
 8017158:	4b46      	ldr	r3, [pc, #280]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801715c:	f003 0310 	and.w	r3, r3, #16
 8017160:	61fb      	str	r3, [r7, #28]
 8017162:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017164:	4b43      	ldr	r3, [pc, #268]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017168:	4a42      	ldr	r2, [pc, #264]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801716a:	f043 0308 	orr.w	r3, r3, #8
 801716e:	6313      	str	r3, [r2, #48]	; 0x30
 8017170:	4b40      	ldr	r3, [pc, #256]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017174:	f003 0308 	and.w	r3, r3, #8
 8017178:	61bb      	str	r3, [r7, #24]
 801717a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801717c:	4b3d      	ldr	r3, [pc, #244]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017180:	4a3c      	ldr	r2, [pc, #240]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017186:	6313      	str	r3, [r2, #48]	; 0x30
 8017188:	4b3a      	ldr	r3, [pc, #232]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017190:	617b      	str	r3, [r7, #20]
 8017192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017194:	4b37      	ldr	r3, [pc, #220]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 8017196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017198:	4a36      	ldr	r2, [pc, #216]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 801719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801719e:	6313      	str	r3, [r2, #48]	; 0x30
 80171a0:	4b34      	ldr	r3, [pc, #208]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 80171a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171a8:	613b      	str	r3, [r7, #16]
 80171aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80171ac:	4b31      	ldr	r3, [pc, #196]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 80171ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171b0:	4a30      	ldr	r2, [pc, #192]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 80171b2:	f043 0301 	orr.w	r3, r3, #1
 80171b6:	6313      	str	r3, [r2, #48]	; 0x30
 80171b8:	4b2e      	ldr	r3, [pc, #184]	; (8017274 <HAL_DCMI_MspInit+0x164>)
 80171ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171bc:	f003 0301 	and.w	r3, r3, #1
 80171c0:	60fb      	str	r3, [r7, #12]
 80171c2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80171c4:	2360      	movs	r3, #96	; 0x60
 80171c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171c8:	2302      	movs	r3, #2
 80171ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171cc:	2300      	movs	r3, #0
 80171ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171d0:	2300      	movs	r3, #0
 80171d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80171d4:	230d      	movs	r3, #13
 80171d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80171d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171dc:	4619      	mov	r1, r3
 80171de:	4826      	ldr	r0, [pc, #152]	; (8017278 <HAL_DCMI_MspInit+0x168>)
 80171e0:	f7eb fa4e 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80171e4:	2308      	movs	r3, #8
 80171e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171e8:	2302      	movs	r3, #2
 80171ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171ec:	2300      	movs	r3, #0
 80171ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171f0:	2300      	movs	r3, #0
 80171f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80171f4:	230d      	movs	r3, #13
 80171f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80171f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171fc:	4619      	mov	r1, r3
 80171fe:	481f      	ldr	r0, [pc, #124]	; (801727c <HAL_DCMI_MspInit+0x16c>)
 8017200:	f7eb fa3e 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8017204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801720a:	2302      	movs	r3, #2
 801720c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801720e:	2300      	movs	r3, #0
 8017210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017212:	2300      	movs	r3, #0
 8017214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017216:	230d      	movs	r3, #13
 8017218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 801721a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801721e:	4619      	mov	r1, r3
 8017220:	4817      	ldr	r0, [pc, #92]	; (8017280 <HAL_DCMI_MspInit+0x170>)
 8017222:	f7eb fa2d 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8017226:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 801722a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801722c:	2302      	movs	r3, #2
 801722e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017230:	2300      	movs	r3, #0
 8017232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017234:	2300      	movs	r3, #0
 8017236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017238:	230d      	movs	r3, #13
 801723a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801723c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017240:	4619      	mov	r1, r3
 8017242:	4810      	ldr	r0, [pc, #64]	; (8017284 <HAL_DCMI_MspInit+0x174>)
 8017244:	f7eb fa1c 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8017248:	2350      	movs	r3, #80	; 0x50
 801724a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801724c:	2302      	movs	r3, #2
 801724e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017250:	2300      	movs	r3, #0
 8017252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017254:	2300      	movs	r3, #0
 8017256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017258:	230d      	movs	r3, #13
 801725a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801725c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017260:	4619      	mov	r1, r3
 8017262:	4809      	ldr	r0, [pc, #36]	; (8017288 <HAL_DCMI_MspInit+0x178>)
 8017264:	f7eb fa0c 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8017268:	bf00      	nop
 801726a:	3738      	adds	r7, #56	; 0x38
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	50050000 	.word	0x50050000
 8017274:	40023800 	.word	0x40023800
 8017278:	40021000 	.word	0x40021000
 801727c:	40020c00 	.word	0x40020c00
 8017280:	40021800 	.word	0x40021800
 8017284:	40021c00 	.word	0x40021c00
 8017288:	40020000 	.word	0x40020000

0801728c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b08c      	sub	sp, #48	; 0x30
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017294:	f107 031c 	add.w	r3, r7, #28
 8017298:	2200      	movs	r2, #0
 801729a:	601a      	str	r2, [r3, #0]
 801729c:	605a      	str	r2, [r3, #4]
 801729e:	609a      	str	r2, [r3, #8]
 80172a0:	60da      	str	r2, [r3, #12]
 80172a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	4a2f      	ldr	r2, [pc, #188]	; (8017368 <HAL_I2C_MspInit+0xdc>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d129      	bne.n	8017302 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80172ae:	4b2f      	ldr	r3, [pc, #188]	; (801736c <HAL_I2C_MspInit+0xe0>)
 80172b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172b2:	4a2e      	ldr	r2, [pc, #184]	; (801736c <HAL_I2C_MspInit+0xe0>)
 80172b4:	f043 0302 	orr.w	r3, r3, #2
 80172b8:	6313      	str	r3, [r2, #48]	; 0x30
 80172ba:	4b2c      	ldr	r3, [pc, #176]	; (801736c <HAL_I2C_MspInit+0xe0>)
 80172bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172be:	f003 0302 	and.w	r3, r3, #2
 80172c2:	61bb      	str	r3, [r7, #24]
 80172c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80172c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80172ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80172cc:	2312      	movs	r3, #18
 80172ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80172d0:	2301      	movs	r3, #1
 80172d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80172d4:	2300      	movs	r3, #0
 80172d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80172d8:	2304      	movs	r3, #4
 80172da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80172dc:	f107 031c 	add.w	r3, r7, #28
 80172e0:	4619      	mov	r1, r3
 80172e2:	4823      	ldr	r0, [pc, #140]	; (8017370 <HAL_I2C_MspInit+0xe4>)
 80172e4:	f7eb f9cc 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80172e8:	4b20      	ldr	r3, [pc, #128]	; (801736c <HAL_I2C_MspInit+0xe0>)
 80172ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ec:	4a1f      	ldr	r2, [pc, #124]	; (801736c <HAL_I2C_MspInit+0xe0>)
 80172ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80172f2:	6413      	str	r3, [r2, #64]	; 0x40
 80172f4:	4b1d      	ldr	r3, [pc, #116]	; (801736c <HAL_I2C_MspInit+0xe0>)
 80172f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80172fc:	617b      	str	r3, [r7, #20]
 80172fe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8017300:	e02d      	b.n	801735e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	4a1b      	ldr	r2, [pc, #108]	; (8017374 <HAL_I2C_MspInit+0xe8>)
 8017308:	4293      	cmp	r3, r2
 801730a:	d128      	bne.n	801735e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801730c:	4b17      	ldr	r3, [pc, #92]	; (801736c <HAL_I2C_MspInit+0xe0>)
 801730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017310:	4a16      	ldr	r2, [pc, #88]	; (801736c <HAL_I2C_MspInit+0xe0>)
 8017312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017316:	6313      	str	r3, [r2, #48]	; 0x30
 8017318:	4b14      	ldr	r3, [pc, #80]	; (801736c <HAL_I2C_MspInit+0xe0>)
 801731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801731c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017320:	613b      	str	r3, [r7, #16]
 8017322:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8017324:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8017328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801732a:	2312      	movs	r3, #18
 801732c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801732e:	2301      	movs	r3, #1
 8017330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017332:	2303      	movs	r3, #3
 8017334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8017336:	2304      	movs	r3, #4
 8017338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801733a:	f107 031c 	add.w	r3, r7, #28
 801733e:	4619      	mov	r1, r3
 8017340:	480d      	ldr	r0, [pc, #52]	; (8017378 <HAL_I2C_MspInit+0xec>)
 8017342:	f7eb f99d 	bl	8002680 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8017346:	4b09      	ldr	r3, [pc, #36]	; (801736c <HAL_I2C_MspInit+0xe0>)
 8017348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801734a:	4a08      	ldr	r2, [pc, #32]	; (801736c <HAL_I2C_MspInit+0xe0>)
 801734c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017350:	6413      	str	r3, [r2, #64]	; 0x40
 8017352:	4b06      	ldr	r3, [pc, #24]	; (801736c <HAL_I2C_MspInit+0xe0>)
 8017354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801735a:	60fb      	str	r3, [r7, #12]
 801735c:	68fb      	ldr	r3, [r7, #12]
}
 801735e:	bf00      	nop
 8017360:	3730      	adds	r7, #48	; 0x30
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	40005400 	.word	0x40005400
 801736c:	40023800 	.word	0x40023800
 8017370:	40020400 	.word	0x40020400
 8017374:	40005c00 	.word	0x40005c00
 8017378:	40021c00 	.word	0x40021c00

0801737c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	4a11      	ldr	r2, [pc, #68]	; (80173d0 <HAL_I2C_MspDeInit+0x54>)
 801738a:	4293      	cmp	r3, r2
 801738c:	d10b      	bne.n	80173a6 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801738e:	4b11      	ldr	r3, [pc, #68]	; (80173d4 <HAL_I2C_MspDeInit+0x58>)
 8017390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017392:	4a10      	ldr	r2, [pc, #64]	; (80173d4 <HAL_I2C_MspDeInit+0x58>)
 8017394:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017398:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 801739a:	f44f 7140 	mov.w	r1, #768	; 0x300
 801739e:	480e      	ldr	r0, [pc, #56]	; (80173d8 <HAL_I2C_MspDeInit+0x5c>)
 80173a0:	f7eb fb18 	bl	80029d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80173a4:	e00f      	b.n	80173c6 <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	4a0c      	ldr	r2, [pc, #48]	; (80173dc <HAL_I2C_MspDeInit+0x60>)
 80173ac:	4293      	cmp	r3, r2
 80173ae:	d10a      	bne.n	80173c6 <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80173b0:	4b08      	ldr	r3, [pc, #32]	; (80173d4 <HAL_I2C_MspDeInit+0x58>)
 80173b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173b4:	4a07      	ldr	r2, [pc, #28]	; (80173d4 <HAL_I2C_MspDeInit+0x58>)
 80173b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80173ba:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80173bc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80173c0:	4807      	ldr	r0, [pc, #28]	; (80173e0 <HAL_I2C_MspDeInit+0x64>)
 80173c2:	f7eb fb07 	bl	80029d4 <HAL_GPIO_DeInit>
}
 80173c6:	bf00      	nop
 80173c8:	3708      	adds	r7, #8
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	40005400 	.word	0x40005400
 80173d4:	40023800 	.word	0x40023800
 80173d8:	40020400 	.word	0x40020400
 80173dc:	40005c00 	.word	0x40005c00
 80173e0:	40021c00 	.word	0x40021c00

080173e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b08c      	sub	sp, #48	; 0x30
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80173ec:	f107 031c 	add.w	r3, r7, #28
 80173f0:	2200      	movs	r2, #0
 80173f2:	601a      	str	r2, [r3, #0]
 80173f4:	605a      	str	r2, [r3, #4]
 80173f6:	609a      	str	r2, [r3, #8]
 80173f8:	60da      	str	r2, [r3, #12]
 80173fa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	4a3b      	ldr	r2, [pc, #236]	; (80174f0 <HAL_QSPI_MspInit+0x10c>)
 8017402:	4293      	cmp	r3, r2
 8017404:	d170      	bne.n	80174e8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8017406:	4b3b      	ldr	r3, [pc, #236]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801740a:	4a3a      	ldr	r2, [pc, #232]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 801740c:	f043 0302 	orr.w	r3, r3, #2
 8017410:	6393      	str	r3, [r2, #56]	; 0x38
 8017412:	4b38      	ldr	r3, [pc, #224]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017416:	f003 0302 	and.w	r3, r3, #2
 801741a:	61bb      	str	r3, [r7, #24]
 801741c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801741e:	4b35      	ldr	r3, [pc, #212]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017422:	4a34      	ldr	r2, [pc, #208]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017424:	f043 0310 	orr.w	r3, r3, #16
 8017428:	6313      	str	r3, [r2, #48]	; 0x30
 801742a:	4b32      	ldr	r3, [pc, #200]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 801742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801742e:	f003 0310 	and.w	r3, r3, #16
 8017432:	617b      	str	r3, [r7, #20]
 8017434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017436:	4b2f      	ldr	r3, [pc, #188]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801743a:	4a2e      	ldr	r2, [pc, #184]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 801743c:	f043 0302 	orr.w	r3, r3, #2
 8017440:	6313      	str	r3, [r2, #48]	; 0x30
 8017442:	4b2c      	ldr	r3, [pc, #176]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017446:	f003 0302 	and.w	r3, r3, #2
 801744a:	613b      	str	r3, [r7, #16]
 801744c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801744e:	4b29      	ldr	r3, [pc, #164]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017452:	4a28      	ldr	r2, [pc, #160]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 8017454:	f043 0308 	orr.w	r3, r3, #8
 8017458:	6313      	str	r3, [r2, #48]	; 0x30
 801745a:	4b26      	ldr	r3, [pc, #152]	; (80174f4 <HAL_QSPI_MspInit+0x110>)
 801745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801745e:	f003 0308 	and.w	r3, r3, #8
 8017462:	60fb      	str	r3, [r7, #12]
 8017464:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8017466:	2304      	movs	r3, #4
 8017468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801746a:	2302      	movs	r3, #2
 801746c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801746e:	2300      	movs	r3, #0
 8017470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017472:	2303      	movs	r3, #3
 8017474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8017476:	2309      	movs	r3, #9
 8017478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 801747a:	f107 031c 	add.w	r3, r7, #28
 801747e:	4619      	mov	r1, r3
 8017480:	481d      	ldr	r0, [pc, #116]	; (80174f8 <HAL_QSPI_MspInit+0x114>)
 8017482:	f7eb f8fd 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8017486:	2340      	movs	r3, #64	; 0x40
 8017488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801748a:	2302      	movs	r3, #2
 801748c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801748e:	2300      	movs	r3, #0
 8017490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017492:	2303      	movs	r3, #3
 8017494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8017496:	230a      	movs	r3, #10
 8017498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 801749a:	f107 031c 	add.w	r3, r7, #28
 801749e:	4619      	mov	r1, r3
 80174a0:	4816      	ldr	r0, [pc, #88]	; (80174fc <HAL_QSPI_MspInit+0x118>)
 80174a2:	f7eb f8ed 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80174a6:	2304      	movs	r3, #4
 80174a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80174aa:	2302      	movs	r3, #2
 80174ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174ae:	2300      	movs	r3, #0
 80174b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80174b2:	2303      	movs	r3, #3
 80174b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80174b6:	2309      	movs	r3, #9
 80174b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80174ba:	f107 031c 	add.w	r3, r7, #28
 80174be:	4619      	mov	r1, r3
 80174c0:	480e      	ldr	r0, [pc, #56]	; (80174fc <HAL_QSPI_MspInit+0x118>)
 80174c2:	f7eb f8dd 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80174c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80174ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80174cc:	2302      	movs	r3, #2
 80174ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174d0:	2300      	movs	r3, #0
 80174d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80174d4:	2303      	movs	r3, #3
 80174d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80174d8:	2309      	movs	r3, #9
 80174da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80174dc:	f107 031c 	add.w	r3, r7, #28
 80174e0:	4619      	mov	r1, r3
 80174e2:	4807      	ldr	r0, [pc, #28]	; (8017500 <HAL_QSPI_MspInit+0x11c>)
 80174e4:	f7eb f8cc 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80174e8:	bf00      	nop
 80174ea:	3730      	adds	r7, #48	; 0x30
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}
 80174f0:	a0001000 	.word	0xa0001000
 80174f4:	40023800 	.word	0x40023800
 80174f8:	40021000 	.word	0x40021000
 80174fc:	40020400 	.word	0x40020400
 8017500:	40020c00 	.word	0x40020c00

08017504 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8017504:	b480      	push	{r7}
 8017506:	b083      	sub	sp, #12
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	4a07      	ldr	r2, [pc, #28]	; (8017530 <HAL_RTC_MspInit+0x2c>)
 8017512:	4293      	cmp	r3, r2
 8017514:	d105      	bne.n	8017522 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8017516:	4b07      	ldr	r3, [pc, #28]	; (8017534 <HAL_RTC_MspInit+0x30>)
 8017518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801751a:	4a06      	ldr	r2, [pc, #24]	; (8017534 <HAL_RTC_MspInit+0x30>)
 801751c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017520:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8017522:	bf00      	nop
 8017524:	370c      	adds	r7, #12
 8017526:	46bd      	mov	sp, r7
 8017528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752c:	4770      	bx	lr
 801752e:	bf00      	nop
 8017530:	40002800 	.word	0x40002800
 8017534:	40023800 	.word	0x40023800

08017538 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b08a      	sub	sp, #40	; 0x28
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017540:	f107 0314 	add.w	r3, r7, #20
 8017544:	2200      	movs	r2, #0
 8017546:	601a      	str	r2, [r3, #0]
 8017548:	605a      	str	r2, [r3, #4]
 801754a:	609a      	str	r2, [r3, #8]
 801754c:	60da      	str	r2, [r3, #12]
 801754e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	4a25      	ldr	r2, [pc, #148]	; (80175ec <HAL_SD_MspInit+0xb4>)
 8017556:	4293      	cmp	r3, r2
 8017558:	d144      	bne.n	80175e4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801755a:	4b25      	ldr	r3, [pc, #148]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 801755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801755e:	4a24      	ldr	r2, [pc, #144]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017564:	6453      	str	r3, [r2, #68]	; 0x44
 8017566:	4b22      	ldr	r3, [pc, #136]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801756a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801756e:	613b      	str	r3, [r7, #16]
 8017570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017572:	4b1f      	ldr	r3, [pc, #124]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017576:	4a1e      	ldr	r2, [pc, #120]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017578:	f043 0304 	orr.w	r3, r3, #4
 801757c:	6313      	str	r3, [r2, #48]	; 0x30
 801757e:	4b1c      	ldr	r3, [pc, #112]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017582:	f003 0304 	and.w	r3, r3, #4
 8017586:	60fb      	str	r3, [r7, #12]
 8017588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801758a:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 801758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801758e:	4a18      	ldr	r2, [pc, #96]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017590:	f043 0308 	orr.w	r3, r3, #8
 8017594:	6313      	str	r3, [r2, #48]	; 0x30
 8017596:	4b16      	ldr	r3, [pc, #88]	; (80175f0 <HAL_SD_MspInit+0xb8>)
 8017598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801759a:	f003 0308 	and.w	r3, r3, #8
 801759e:	60bb      	str	r3, [r7, #8]
 80175a0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80175a2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80175a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80175a8:	2302      	movs	r3, #2
 80175aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175ac:	2300      	movs	r3, #0
 80175ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80175b0:	2303      	movs	r3, #3
 80175b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80175b4:	230c      	movs	r3, #12
 80175b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80175b8:	f107 0314 	add.w	r3, r7, #20
 80175bc:	4619      	mov	r1, r3
 80175be:	480d      	ldr	r0, [pc, #52]	; (80175f4 <HAL_SD_MspInit+0xbc>)
 80175c0:	f7eb f85e 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80175c4:	2304      	movs	r3, #4
 80175c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80175c8:	2302      	movs	r3, #2
 80175ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175cc:	2300      	movs	r3, #0
 80175ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80175d0:	2303      	movs	r3, #3
 80175d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80175d4:	230c      	movs	r3, #12
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80175d8:	f107 0314 	add.w	r3, r7, #20
 80175dc:	4619      	mov	r1, r3
 80175de:	4806      	ldr	r0, [pc, #24]	; (80175f8 <HAL_SD_MspInit+0xc0>)
 80175e0:	f7eb f84e 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80175e4:	bf00      	nop
 80175e6:	3728      	adds	r7, #40	; 0x28
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	40012c00 	.word	0x40012c00
 80175f0:	40023800 	.word	0x40023800
 80175f4:	40020800 	.word	0x40020800
 80175f8:	40020c00 	.word	0x40020c00

080175fc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b08a      	sub	sp, #40	; 0x28
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017604:	f107 0314 	add.w	r3, r7, #20
 8017608:	2200      	movs	r2, #0
 801760a:	601a      	str	r2, [r3, #0]
 801760c:	605a      	str	r2, [r3, #4]
 801760e:	609a      	str	r2, [r3, #8]
 8017610:	60da      	str	r2, [r3, #12]
 8017612:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 801761c:	d127      	bne.n	801766e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 801761e:	4b16      	ldr	r3, [pc, #88]	; (8017678 <HAL_SPDIFRX_MspInit+0x7c>)
 8017620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017622:	4a15      	ldr	r2, [pc, #84]	; (8017678 <HAL_SPDIFRX_MspInit+0x7c>)
 8017624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017628:	6413      	str	r3, [r2, #64]	; 0x40
 801762a:	4b13      	ldr	r3, [pc, #76]	; (8017678 <HAL_SPDIFRX_MspInit+0x7c>)
 801762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801762e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017632:	613b      	str	r3, [r7, #16]
 8017634:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017636:	4b10      	ldr	r3, [pc, #64]	; (8017678 <HAL_SPDIFRX_MspInit+0x7c>)
 8017638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801763a:	4a0f      	ldr	r2, [pc, #60]	; (8017678 <HAL_SPDIFRX_MspInit+0x7c>)
 801763c:	f043 0308 	orr.w	r3, r3, #8
 8017640:	6313      	str	r3, [r2, #48]	; 0x30
 8017642:	4b0d      	ldr	r3, [pc, #52]	; (8017678 <HAL_SPDIFRX_MspInit+0x7c>)
 8017644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017646:	f003 0308 	and.w	r3, r3, #8
 801764a:	60fb      	str	r3, [r7, #12]
 801764c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 801764e:	2380      	movs	r3, #128	; 0x80
 8017650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017652:	2302      	movs	r3, #2
 8017654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017656:	2300      	movs	r3, #0
 8017658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801765a:	2300      	movs	r3, #0
 801765c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 801765e:	2308      	movs	r3, #8
 8017660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8017662:	f107 0314 	add.w	r3, r7, #20
 8017666:	4619      	mov	r1, r3
 8017668:	4804      	ldr	r0, [pc, #16]	; (801767c <HAL_SPDIFRX_MspInit+0x80>)
 801766a:	f7eb f809 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 801766e:	bf00      	nop
 8017670:	3728      	adds	r7, #40	; 0x28
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	40023800 	.word	0x40023800
 801767c:	40020c00 	.word	0x40020c00

08017680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b08a      	sub	sp, #40	; 0x28
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017688:	f107 0314 	add.w	r3, r7, #20
 801768c:	2200      	movs	r2, #0
 801768e:	601a      	str	r2, [r3, #0]
 8017690:	605a      	str	r2, [r3, #4]
 8017692:	609a      	str	r2, [r3, #8]
 8017694:	60da      	str	r2, [r3, #12]
 8017696:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	4a25      	ldr	r2, [pc, #148]	; (8017734 <HAL_SPI_MspInit+0xb4>)
 801769e:	4293      	cmp	r3, r2
 80176a0:	d144      	bne.n	801772c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80176a2:	4b25      	ldr	r3, [pc, #148]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176a6:	4a24      	ldr	r2, [pc, #144]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176ac:	6413      	str	r3, [r2, #64]	; 0x40
 80176ae:	4b22      	ldr	r3, [pc, #136]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176b6:	613b      	str	r3, [r7, #16]
 80176b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80176ba:	4b1f      	ldr	r3, [pc, #124]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176be:	4a1e      	ldr	r2, [pc, #120]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80176c4:	6313      	str	r3, [r2, #48]	; 0x30
 80176c6:	4b1c      	ldr	r3, [pc, #112]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80176ce:	60fb      	str	r3, [r7, #12]
 80176d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80176d2:	4b19      	ldr	r3, [pc, #100]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d6:	4a18      	ldr	r2, [pc, #96]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176d8:	f043 0302 	orr.w	r3, r3, #2
 80176dc:	6313      	str	r3, [r2, #48]	; 0x30
 80176de:	4b16      	ldr	r3, [pc, #88]	; (8017738 <HAL_SPI_MspInit+0xb8>)
 80176e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176e2:	f003 0302 	and.w	r3, r3, #2
 80176e6:	60bb      	str	r3, [r7, #8]
 80176e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80176ea:	2302      	movs	r3, #2
 80176ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176ee:	2302      	movs	r3, #2
 80176f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176f2:	2300      	movs	r3, #0
 80176f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80176f6:	2300      	movs	r3, #0
 80176f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80176fa:	2305      	movs	r3, #5
 80176fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80176fe:	f107 0314 	add.w	r3, r7, #20
 8017702:	4619      	mov	r1, r3
 8017704:	480d      	ldr	r0, [pc, #52]	; (801773c <HAL_SPI_MspInit+0xbc>)
 8017706:	f7ea ffbb 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801770a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801770e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017710:	2302      	movs	r3, #2
 8017712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017714:	2300      	movs	r3, #0
 8017716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017718:	2300      	movs	r3, #0
 801771a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801771c:	2305      	movs	r3, #5
 801771e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017720:	f107 0314 	add.w	r3, r7, #20
 8017724:	4619      	mov	r1, r3
 8017726:	4806      	ldr	r0, [pc, #24]	; (8017740 <HAL_SPI_MspInit+0xc0>)
 8017728:	f7ea ffaa 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801772c:	bf00      	nop
 801772e:	3728      	adds	r7, #40	; 0x28
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	40003800 	.word	0x40003800
 8017738:	40023800 	.word	0x40023800
 801773c:	40022000 	.word	0x40022000
 8017740:	40020400 	.word	0x40020400

08017744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017744:	b480      	push	{r7}
 8017746:	b087      	sub	sp, #28
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	4a25      	ldr	r2, [pc, #148]	; (80177e8 <HAL_TIM_Base_MspInit+0xa4>)
 8017752:	4293      	cmp	r3, r2
 8017754:	d10c      	bne.n	8017770 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017756:	4b25      	ldr	r3, [pc, #148]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 8017758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801775a:	4a24      	ldr	r2, [pc, #144]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 801775c:	f043 0301 	orr.w	r3, r3, #1
 8017760:	6453      	str	r3, [r2, #68]	; 0x44
 8017762:	4b22      	ldr	r3, [pc, #136]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 8017764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017766:	f003 0301 	and.w	r3, r3, #1
 801776a:	617b      	str	r3, [r7, #20]
 801776c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801776e:	e034      	b.n	80177da <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	4a1e      	ldr	r2, [pc, #120]	; (80177f0 <HAL_TIM_Base_MspInit+0xac>)
 8017776:	4293      	cmp	r3, r2
 8017778:	d10c      	bne.n	8017794 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801777a:	4b1c      	ldr	r3, [pc, #112]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 801777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801777e:	4a1b      	ldr	r2, [pc, #108]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 8017780:	f043 0302 	orr.w	r3, r3, #2
 8017784:	6413      	str	r3, [r2, #64]	; 0x40
 8017786:	4b19      	ldr	r3, [pc, #100]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 8017788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801778a:	f003 0302 	and.w	r3, r3, #2
 801778e:	613b      	str	r3, [r7, #16]
 8017790:	693b      	ldr	r3, [r7, #16]
}
 8017792:	e022      	b.n	80177da <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	4a16      	ldr	r2, [pc, #88]	; (80177f4 <HAL_TIM_Base_MspInit+0xb0>)
 801779a:	4293      	cmp	r3, r2
 801779c:	d10c      	bne.n	80177b8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801779e:	4b13      	ldr	r3, [pc, #76]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 80177a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177a2:	4a12      	ldr	r2, [pc, #72]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 80177a4:	f043 0308 	orr.w	r3, r3, #8
 80177a8:	6413      	str	r3, [r2, #64]	; 0x40
 80177aa:	4b10      	ldr	r3, [pc, #64]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 80177ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177ae:	f003 0308 	and.w	r3, r3, #8
 80177b2:	60fb      	str	r3, [r7, #12]
 80177b4:	68fb      	ldr	r3, [r7, #12]
}
 80177b6:	e010      	b.n	80177da <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	4a0e      	ldr	r2, [pc, #56]	; (80177f8 <HAL_TIM_Base_MspInit+0xb4>)
 80177be:	4293      	cmp	r3, r2
 80177c0:	d10b      	bne.n	80177da <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80177c2:	4b0a      	ldr	r3, [pc, #40]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 80177c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177c6:	4a09      	ldr	r2, [pc, #36]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 80177c8:	f043 0302 	orr.w	r3, r3, #2
 80177cc:	6453      	str	r3, [r2, #68]	; 0x44
 80177ce:	4b07      	ldr	r3, [pc, #28]	; (80177ec <HAL_TIM_Base_MspInit+0xa8>)
 80177d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177d2:	f003 0302 	and.w	r3, r3, #2
 80177d6:	60bb      	str	r3, [r7, #8]
 80177d8:	68bb      	ldr	r3, [r7, #8]
}
 80177da:	bf00      	nop
 80177dc:	371c      	adds	r7, #28
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	40010000 	.word	0x40010000
 80177ec:	40023800 	.word	0x40023800
 80177f0:	40000400 	.word	0x40000400
 80177f4:	40000c00 	.word	0x40000c00
 80177f8:	40010400 	.word	0x40010400

080177fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80177fc:	b480      	push	{r7}
 80177fe:	b085      	sub	sp, #20
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	4a0a      	ldr	r2, [pc, #40]	; (8017834 <HAL_TIM_PWM_MspInit+0x38>)
 801780a:	4293      	cmp	r3, r2
 801780c:	d10b      	bne.n	8017826 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 801780e:	4b0a      	ldr	r3, [pc, #40]	; (8017838 <HAL_TIM_PWM_MspInit+0x3c>)
 8017810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017812:	4a09      	ldr	r2, [pc, #36]	; (8017838 <HAL_TIM_PWM_MspInit+0x3c>)
 8017814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017818:	6413      	str	r3, [r2, #64]	; 0x40
 801781a:	4b07      	ldr	r3, [pc, #28]	; (8017838 <HAL_TIM_PWM_MspInit+0x3c>)
 801781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017822:	60fb      	str	r3, [r7, #12]
 8017824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8017826:	bf00      	nop
 8017828:	3714      	adds	r7, #20
 801782a:	46bd      	mov	sp, r7
 801782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017830:	4770      	bx	lr
 8017832:	bf00      	nop
 8017834:	40001800 	.word	0x40001800
 8017838:	40023800 	.word	0x40023800

0801783c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b08c      	sub	sp, #48	; 0x30
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017844:	f107 031c 	add.w	r3, r7, #28
 8017848:	2200      	movs	r2, #0
 801784a:	601a      	str	r2, [r3, #0]
 801784c:	605a      	str	r2, [r3, #4]
 801784e:	609a      	str	r2, [r3, #8]
 8017850:	60da      	str	r2, [r3, #12]
 8017852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	4a44      	ldr	r2, [pc, #272]	; (801796c <HAL_TIM_MspPostInit+0x130>)
 801785a:	4293      	cmp	r3, r2
 801785c:	d11d      	bne.n	801789a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801785e:	4b44      	ldr	r3, [pc, #272]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 8017860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017862:	4a43      	ldr	r2, [pc, #268]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 8017864:	f043 0301 	orr.w	r3, r3, #1
 8017868:	6313      	str	r3, [r2, #48]	; 0x30
 801786a:	4b41      	ldr	r3, [pc, #260]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 801786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801786e:	f003 0301 	and.w	r3, r3, #1
 8017872:	61bb      	str	r3, [r7, #24]
 8017874:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8017876:	f44f 7380 	mov.w	r3, #256	; 0x100
 801787a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801787c:	2302      	movs	r3, #2
 801787e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017880:	2300      	movs	r3, #0
 8017882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017884:	2300      	movs	r3, #0
 8017886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8017888:	2301      	movs	r3, #1
 801788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 801788c:	f107 031c 	add.w	r3, r7, #28
 8017890:	4619      	mov	r1, r3
 8017892:	4838      	ldr	r0, [pc, #224]	; (8017974 <HAL_TIM_MspPostInit+0x138>)
 8017894:	f7ea fef4 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8017898:	e064      	b.n	8017964 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	4a36      	ldr	r2, [pc, #216]	; (8017978 <HAL_TIM_MspPostInit+0x13c>)
 80178a0:	4293      	cmp	r3, r2
 80178a2:	d11c      	bne.n	80178de <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80178a4:	4b32      	ldr	r3, [pc, #200]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 80178a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178a8:	4a31      	ldr	r2, [pc, #196]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 80178aa:	f043 0302 	orr.w	r3, r3, #2
 80178ae:	6313      	str	r3, [r2, #48]	; 0x30
 80178b0:	4b2f      	ldr	r3, [pc, #188]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 80178b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178b4:	f003 0302 	and.w	r3, r3, #2
 80178b8:	617b      	str	r3, [r7, #20]
 80178ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80178bc:	2310      	movs	r3, #16
 80178be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178c0:	2302      	movs	r3, #2
 80178c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178c4:	2300      	movs	r3, #0
 80178c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178c8:	2300      	movs	r3, #0
 80178ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80178cc:	2302      	movs	r3, #2
 80178ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80178d0:	f107 031c 	add.w	r3, r7, #28
 80178d4:	4619      	mov	r1, r3
 80178d6:	4829      	ldr	r0, [pc, #164]	; (801797c <HAL_TIM_MspPostInit+0x140>)
 80178d8:	f7ea fed2 	bl	8002680 <HAL_GPIO_Init>
}
 80178dc:	e042      	b.n	8017964 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	4a27      	ldr	r2, [pc, #156]	; (8017980 <HAL_TIM_MspPostInit+0x144>)
 80178e4:	4293      	cmp	r3, r2
 80178e6:	d11c      	bne.n	8017922 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80178e8:	4b21      	ldr	r3, [pc, #132]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 80178ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178ec:	4a20      	ldr	r2, [pc, #128]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 80178ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80178f2:	6313      	str	r3, [r2, #48]	; 0x30
 80178f4:	4b1e      	ldr	r3, [pc, #120]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 80178f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80178fc:	613b      	str	r3, [r7, #16]
 80178fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8017900:	2301      	movs	r3, #1
 8017902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017904:	2302      	movs	r3, #2
 8017906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017908:	2300      	movs	r3, #0
 801790a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801790c:	2300      	movs	r3, #0
 801790e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8017910:	2302      	movs	r3, #2
 8017912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8017914:	f107 031c 	add.w	r3, r7, #28
 8017918:	4619      	mov	r1, r3
 801791a:	481a      	ldr	r0, [pc, #104]	; (8017984 <HAL_TIM_MspPostInit+0x148>)
 801791c:	f7ea feb0 	bl	8002680 <HAL_GPIO_Init>
}
 8017920:	e020      	b.n	8017964 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4a18      	ldr	r2, [pc, #96]	; (8017988 <HAL_TIM_MspPostInit+0x14c>)
 8017928:	4293      	cmp	r3, r2
 801792a:	d11b      	bne.n	8017964 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801792c:	4b10      	ldr	r3, [pc, #64]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 801792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017930:	4a0f      	ldr	r2, [pc, #60]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 8017932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017936:	6313      	str	r3, [r2, #48]	; 0x30
 8017938:	4b0d      	ldr	r3, [pc, #52]	; (8017970 <HAL_TIM_MspPostInit+0x134>)
 801793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017940:	60fb      	str	r3, [r7, #12]
 8017942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8017944:	2340      	movs	r3, #64	; 0x40
 8017946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017948:	2302      	movs	r3, #2
 801794a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801794c:	2300      	movs	r3, #0
 801794e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017950:	2300      	movs	r3, #0
 8017952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8017954:	2309      	movs	r3, #9
 8017956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8017958:	f107 031c 	add.w	r3, r7, #28
 801795c:	4619      	mov	r1, r3
 801795e:	480b      	ldr	r0, [pc, #44]	; (801798c <HAL_TIM_MspPostInit+0x150>)
 8017960:	f7ea fe8e 	bl	8002680 <HAL_GPIO_Init>
}
 8017964:	bf00      	nop
 8017966:	3730      	adds	r7, #48	; 0x30
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}
 801796c:	40010000 	.word	0x40010000
 8017970:	40023800 	.word	0x40023800
 8017974:	40020000 	.word	0x40020000
 8017978:	40000400 	.word	0x40000400
 801797c:	40020400 	.word	0x40020400
 8017980:	40000c00 	.word	0x40000c00
 8017984:	40022000 	.word	0x40022000
 8017988:	40001800 	.word	0x40001800
 801798c:	40021c00 	.word	0x40021c00

08017990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b08c      	sub	sp, #48	; 0x30
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017998:	f107 031c 	add.w	r3, r7, #28
 801799c:	2200      	movs	r2, #0
 801799e:	601a      	str	r2, [r3, #0]
 80179a0:	605a      	str	r2, [r3, #4]
 80179a2:	609a      	str	r2, [r3, #8]
 80179a4:	60da      	str	r2, [r3, #12]
 80179a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	4a3c      	ldr	r2, [pc, #240]	; (8017aa0 <HAL_UART_MspInit+0x110>)
 80179ae:	4293      	cmp	r3, r2
 80179b0:	d145      	bne.n	8017a3e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80179b2:	4b3c      	ldr	r3, [pc, #240]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179b6:	4a3b      	ldr	r2, [pc, #236]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179b8:	f043 0310 	orr.w	r3, r3, #16
 80179bc:	6453      	str	r3, [r2, #68]	; 0x44
 80179be:	4b39      	ldr	r3, [pc, #228]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179c2:	f003 0310 	and.w	r3, r3, #16
 80179c6:	61bb      	str	r3, [r7, #24]
 80179c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80179ca:	4b36      	ldr	r3, [pc, #216]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179ce:	4a35      	ldr	r2, [pc, #212]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179d0:	f043 0302 	orr.w	r3, r3, #2
 80179d4:	6313      	str	r3, [r2, #48]	; 0x30
 80179d6:	4b33      	ldr	r3, [pc, #204]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179da:	f003 0302 	and.w	r3, r3, #2
 80179de:	617b      	str	r3, [r7, #20]
 80179e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80179e2:	4b30      	ldr	r3, [pc, #192]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179e6:	4a2f      	ldr	r2, [pc, #188]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179e8:	f043 0301 	orr.w	r3, r3, #1
 80179ec:	6313      	str	r3, [r2, #48]	; 0x30
 80179ee:	4b2d      	ldr	r3, [pc, #180]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 80179f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f2:	f003 0301 	and.w	r3, r3, #1
 80179f6:	613b      	str	r3, [r7, #16]
 80179f8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80179fa:	2380      	movs	r3, #128	; 0x80
 80179fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179fe:	2302      	movs	r3, #2
 8017a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a02:	2300      	movs	r3, #0
 8017a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a06:	2300      	movs	r3, #0
 8017a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017a0a:	2307      	movs	r3, #7
 8017a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8017a0e:	f107 031c 	add.w	r3, r7, #28
 8017a12:	4619      	mov	r1, r3
 8017a14:	4824      	ldr	r0, [pc, #144]	; (8017aa8 <HAL_UART_MspInit+0x118>)
 8017a16:	f7ea fe33 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8017a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a20:	2302      	movs	r3, #2
 8017a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a24:	2300      	movs	r3, #0
 8017a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017a2c:	2307      	movs	r3, #7
 8017a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8017a30:	f107 031c 	add.w	r3, r7, #28
 8017a34:	4619      	mov	r1, r3
 8017a36:	481d      	ldr	r0, [pc, #116]	; (8017aac <HAL_UART_MspInit+0x11c>)
 8017a38:	f7ea fe22 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8017a3c:	e02c      	b.n	8017a98 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	4a1b      	ldr	r2, [pc, #108]	; (8017ab0 <HAL_UART_MspInit+0x120>)
 8017a44:	4293      	cmp	r3, r2
 8017a46:	d127      	bne.n	8017a98 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8017a48:	4b16      	ldr	r3, [pc, #88]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 8017a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a4c:	4a15      	ldr	r2, [pc, #84]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 8017a4e:	f043 0320 	orr.w	r3, r3, #32
 8017a52:	6453      	str	r3, [r2, #68]	; 0x44
 8017a54:	4b13      	ldr	r3, [pc, #76]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 8017a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a58:	f003 0320 	and.w	r3, r3, #32
 8017a5c:	60fb      	str	r3, [r7, #12]
 8017a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017a60:	4b10      	ldr	r3, [pc, #64]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 8017a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a64:	4a0f      	ldr	r2, [pc, #60]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 8017a66:	f043 0304 	orr.w	r3, r3, #4
 8017a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8017a6c:	4b0d      	ldr	r3, [pc, #52]	; (8017aa4 <HAL_UART_MspInit+0x114>)
 8017a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a70:	f003 0304 	and.w	r3, r3, #4
 8017a74:	60bb      	str	r3, [r7, #8]
 8017a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8017a78:	23c0      	movs	r3, #192	; 0xc0
 8017a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a7c:	2302      	movs	r3, #2
 8017a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a80:	2300      	movs	r3, #0
 8017a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a84:	2303      	movs	r3, #3
 8017a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8017a88:	2308      	movs	r3, #8
 8017a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017a8c:	f107 031c 	add.w	r3, r7, #28
 8017a90:	4619      	mov	r1, r3
 8017a92:	4808      	ldr	r0, [pc, #32]	; (8017ab4 <HAL_UART_MspInit+0x124>)
 8017a94:	f7ea fdf4 	bl	8002680 <HAL_GPIO_Init>
}
 8017a98:	bf00      	nop
 8017a9a:	3730      	adds	r7, #48	; 0x30
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	40011000 	.word	0x40011000
 8017aa4:	40023800 	.word	0x40023800
 8017aa8:	40020400 	.word	0x40020400
 8017aac:	40020000 	.word	0x40020000
 8017ab0:	40011400 	.word	0x40011400
 8017ab4:	40020800 	.word	0x40020800

08017ab8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b08a      	sub	sp, #40	; 0x28
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	4a2b      	ldr	r2, [pc, #172]	; (8017b74 <HAL_SAI_MspInit+0xbc>)
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d124      	bne.n	8017b14 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8017aca:	4b2b      	ldr	r3, [pc, #172]	; (8017b78 <HAL_SAI_MspInit+0xc0>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d10b      	bne.n	8017aea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8017ad2:	4b2a      	ldr	r3, [pc, #168]	; (8017b7c <HAL_SAI_MspInit+0xc4>)
 8017ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ad6:	4a29      	ldr	r2, [pc, #164]	; (8017b7c <HAL_SAI_MspInit+0xc4>)
 8017ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017adc:	6453      	str	r3, [r2, #68]	; 0x44
 8017ade:	4b27      	ldr	r3, [pc, #156]	; (8017b7c <HAL_SAI_MspInit+0xc4>)
 8017ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017ae6:	613b      	str	r3, [r7, #16]
 8017ae8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8017aea:	4b23      	ldr	r3, [pc, #140]	; (8017b78 <HAL_SAI_MspInit+0xc0>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	3301      	adds	r3, #1
 8017af0:	4a21      	ldr	r2, [pc, #132]	; (8017b78 <HAL_SAI_MspInit+0xc0>)
 8017af2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8017af4:	23f0      	movs	r3, #240	; 0xf0
 8017af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017af8:	2302      	movs	r3, #2
 8017afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017afc:	2300      	movs	r3, #0
 8017afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b00:	2300      	movs	r3, #0
 8017b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8017b04:	230a      	movs	r3, #10
 8017b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8017b08:	f107 0314 	add.w	r3, r7, #20
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	481c      	ldr	r0, [pc, #112]	; (8017b80 <HAL_SAI_MspInit+0xc8>)
 8017b10:	f7ea fdb6 	bl	8002680 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	4a1a      	ldr	r2, [pc, #104]	; (8017b84 <HAL_SAI_MspInit+0xcc>)
 8017b1a:	4293      	cmp	r3, r2
 8017b1c:	d125      	bne.n	8017b6a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8017b1e:	4b16      	ldr	r3, [pc, #88]	; (8017b78 <HAL_SAI_MspInit+0xc0>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d10b      	bne.n	8017b3e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8017b26:	4b15      	ldr	r3, [pc, #84]	; (8017b7c <HAL_SAI_MspInit+0xc4>)
 8017b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b2a:	4a14      	ldr	r2, [pc, #80]	; (8017b7c <HAL_SAI_MspInit+0xc4>)
 8017b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017b30:	6453      	str	r3, [r2, #68]	; 0x44
 8017b32:	4b12      	ldr	r3, [pc, #72]	; (8017b7c <HAL_SAI_MspInit+0xc4>)
 8017b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017b3a:	60fb      	str	r3, [r7, #12]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8017b3e:	4b0e      	ldr	r3, [pc, #56]	; (8017b78 <HAL_SAI_MspInit+0xc0>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	3301      	adds	r3, #1
 8017b44:	4a0c      	ldr	r2, [pc, #48]	; (8017b78 <HAL_SAI_MspInit+0xc0>)
 8017b46:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8017b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b4e:	2302      	movs	r3, #2
 8017b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b52:	2300      	movs	r3, #0
 8017b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b56:	2300      	movs	r3, #0
 8017b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8017b5a:	230a      	movs	r3, #10
 8017b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8017b5e:	f107 0314 	add.w	r3, r7, #20
 8017b62:	4619      	mov	r1, r3
 8017b64:	4808      	ldr	r0, [pc, #32]	; (8017b88 <HAL_SAI_MspInit+0xd0>)
 8017b66:	f7ea fd8b 	bl	8002680 <HAL_GPIO_Init>

    }
}
 8017b6a:	bf00      	nop
 8017b6c:	3728      	adds	r7, #40	; 0x28
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
 8017b72:	bf00      	nop
 8017b74:	40015c04 	.word	0x40015c04
 8017b78:	20009a14 	.word	0x20009a14
 8017b7c:	40023800 	.word	0x40023800
 8017b80:	40022000 	.word	0x40022000
 8017b84:	40015c24 	.word	0x40015c24
 8017b88:	40021800 	.word	0x40021800

08017b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b08c      	sub	sp, #48	; 0x30
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017b94:	2300      	movs	r3, #0
 8017b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	6879      	ldr	r1, [r7, #4]
 8017ba0:	2036      	movs	r0, #54	; 0x36
 8017ba2:	f7e9 ff47 	bl	8001a34 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8017ba6:	2036      	movs	r0, #54	; 0x36
 8017ba8:	f7e9 ff60 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8017bac:	4b1f      	ldr	r3, [pc, #124]	; (8017c2c <HAL_InitTick+0xa0>)
 8017bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bb0:	4a1e      	ldr	r2, [pc, #120]	; (8017c2c <HAL_InitTick+0xa0>)
 8017bb2:	f043 0310 	orr.w	r3, r3, #16
 8017bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8017bb8:	4b1c      	ldr	r3, [pc, #112]	; (8017c2c <HAL_InitTick+0xa0>)
 8017bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bbc:	f003 0310 	and.w	r3, r3, #16
 8017bc0:	60fb      	str	r3, [r7, #12]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017bc4:	f107 0210 	add.w	r2, r7, #16
 8017bc8:	f107 0314 	add.w	r3, r7, #20
 8017bcc:	4611      	mov	r1, r2
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7ee fbea 	bl	80063a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017bd4:	f7ee fbc0 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	005b      	lsls	r3, r3, #1
 8017bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8017bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be0:	4a13      	ldr	r2, [pc, #76]	; (8017c30 <HAL_InitTick+0xa4>)
 8017be2:	fba2 2303 	umull	r2, r3, r2, r3
 8017be6:	0c9b      	lsrs	r3, r3, #18
 8017be8:	3b01      	subs	r3, #1
 8017bea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8017bec:	4b11      	ldr	r3, [pc, #68]	; (8017c34 <HAL_InitTick+0xa8>)
 8017bee:	4a12      	ldr	r2, [pc, #72]	; (8017c38 <HAL_InitTick+0xac>)
 8017bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8017bf2:	4b10      	ldr	r3, [pc, #64]	; (8017c34 <HAL_InitTick+0xa8>)
 8017bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017bf8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8017bfa:	4a0e      	ldr	r2, [pc, #56]	; (8017c34 <HAL_InitTick+0xa8>)
 8017bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8017c00:	4b0c      	ldr	r3, [pc, #48]	; (8017c34 <HAL_InitTick+0xa8>)
 8017c02:	2200      	movs	r2, #0
 8017c04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017c06:	4b0b      	ldr	r3, [pc, #44]	; (8017c34 <HAL_InitTick+0xa8>)
 8017c08:	2200      	movs	r2, #0
 8017c0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8017c0c:	4809      	ldr	r0, [pc, #36]	; (8017c34 <HAL_InitTick+0xa8>)
 8017c0e:	f7f1 f8b7 	bl	8008d80 <HAL_TIM_Base_Init>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d104      	bne.n	8017c22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8017c18:	4806      	ldr	r0, [pc, #24]	; (8017c34 <HAL_InitTick+0xa8>)
 8017c1a:	f7f1 f907 	bl	8008e2c <HAL_TIM_Base_Start_IT>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	e000      	b.n	8017c24 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8017c22:	2301      	movs	r3, #1
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3730      	adds	r7, #48	; 0x30
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	40023800 	.word	0x40023800
 8017c30:	431bde83 	.word	0x431bde83
 8017c34:	2000a060 	.word	0x2000a060
 8017c38:	40001000 	.word	0x40001000

08017c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8017c40:	bf00      	nop
 8017c42:	46bd      	mov	sp, r7
 8017c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c48:	4770      	bx	lr

08017c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017c4a:	b480      	push	{r7}
 8017c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017c4e:	e7fe      	b.n	8017c4e <HardFault_Handler+0x4>

08017c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017c50:	b480      	push	{r7}
 8017c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017c54:	e7fe      	b.n	8017c54 <MemManage_Handler+0x4>

08017c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017c56:	b480      	push	{r7}
 8017c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017c5a:	e7fe      	b.n	8017c5a <BusFault_Handler+0x4>

08017c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017c60:	e7fe      	b.n	8017c60 <UsageFault_Handler+0x4>

08017c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017c62:	b480      	push	{r7}
 8017c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017c66:	bf00      	nop
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6e:	4770      	bx	lr

08017c70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017c74:	4802      	ldr	r0, [pc, #8]	; (8017c80 <TIM6_DAC_IRQHandler+0x10>)
 8017c76:	f7f1 f92e 	bl	8008ed6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017c7a:	bf00      	nop
 8017c7c:	bd80      	pop	{r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	2000a060 	.word	0x2000a060

08017c84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8017c88:	4802      	ldr	r0, [pc, #8]	; (8017c94 <OTG_FS_IRQHandler+0x10>)
 8017c8a:	f7eb fa57 	bl	800313c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017c8e:	bf00      	nop
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	2000a478 	.word	0x2000a478

08017c98 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8017c9c:	4802      	ldr	r0, [pc, #8]	; (8017ca8 <LTDC_IRQHandler+0x10>)
 8017c9e:	f7ed fac7 	bl	8005230 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8017ca2:	bf00      	nop
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	20009098 	.word	0x20009098

08017cac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8017cb0:	4802      	ldr	r0, [pc, #8]	; (8017cbc <DMA2D_IRQHandler+0x10>)
 8017cb2:	f7ea faa6 	bl	8002202 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8017cb6:	bf00      	nop
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	20009140 	.word	0x20009140

08017cc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	af00      	add	r7, sp, #0
	return 1;
 8017cc4:	2301      	movs	r3, #1
}
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cce:	4770      	bx	lr

08017cd0 <_kill>:

int _kill(int pid, int sig)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017cda:	f006 fb91 	bl	801e400 <__errno>
 8017cde:	4602      	mov	r2, r0
 8017ce0:	2316      	movs	r3, #22
 8017ce2:	6013      	str	r3, [r2, #0]
	return -1;
 8017ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3708      	adds	r7, #8
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}

08017cf0 <_exit>:

void _exit (int status)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8017cfc:	6878      	ldr	r0, [r7, #4]
 8017cfe:	f7ff ffe7 	bl	8017cd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017d02:	e7fe      	b.n	8017d02 <_exit+0x12>

08017d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	60b9      	str	r1, [r7, #8]
 8017d0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017d10:	2300      	movs	r3, #0
 8017d12:	617b      	str	r3, [r7, #20]
 8017d14:	e00a      	b.n	8017d2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017d16:	f3af 8000 	nop.w
 8017d1a:	4601      	mov	r1, r0
 8017d1c:	68bb      	ldr	r3, [r7, #8]
 8017d1e:	1c5a      	adds	r2, r3, #1
 8017d20:	60ba      	str	r2, [r7, #8]
 8017d22:	b2ca      	uxtb	r2, r1
 8017d24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	617b      	str	r3, [r7, #20]
 8017d2c:	697a      	ldr	r2, [r7, #20]
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	dbf0      	blt.n	8017d16 <_read+0x12>
	}

return len;
 8017d34:	687b      	ldr	r3, [r7, #4]
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3718      	adds	r7, #24
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}

08017d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017d3e:	b580      	push	{r7, lr}
 8017d40:	b086      	sub	sp, #24
 8017d42:	af00      	add	r7, sp, #0
 8017d44:	60f8      	str	r0, [r7, #12]
 8017d46:	60b9      	str	r1, [r7, #8]
 8017d48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	617b      	str	r3, [r7, #20]
 8017d4e:	e009      	b.n	8017d64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	1c5a      	adds	r2, r3, #1
 8017d54:	60ba      	str	r2, [r7, #8]
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	3301      	adds	r3, #1
 8017d62:	617b      	str	r3, [r7, #20]
 8017d64:	697a      	ldr	r2, [r7, #20]
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	429a      	cmp	r2, r3
 8017d6a:	dbf1      	blt.n	8017d50 <_write+0x12>
	}
	return len;
 8017d6c:	687b      	ldr	r3, [r7, #4]
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	3718      	adds	r7, #24
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}

08017d76 <_close>:

int _close(int file)
{
 8017d76:	b480      	push	{r7}
 8017d78:	b083      	sub	sp, #12
 8017d7a:	af00      	add	r7, sp, #0
 8017d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8017d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017d82:	4618      	mov	r0, r3
 8017d84:	370c      	adds	r7, #12
 8017d86:	46bd      	mov	sp, r7
 8017d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8c:	4770      	bx	lr

08017d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017d8e:	b480      	push	{r7}
 8017d90:	b083      	sub	sp, #12
 8017d92:	af00      	add	r7, sp, #0
 8017d94:	6078      	str	r0, [r7, #4]
 8017d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8017da0:	2300      	movs	r3, #0
}
 8017da2:	4618      	mov	r0, r3
 8017da4:	370c      	adds	r7, #12
 8017da6:	46bd      	mov	sp, r7
 8017da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dac:	4770      	bx	lr

08017dae <_isatty>:

int _isatty(int file)
{
 8017dae:	b480      	push	{r7}
 8017db0:	b083      	sub	sp, #12
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6078      	str	r0, [r7, #4]
	return 1;
 8017db6:	2301      	movs	r3, #1
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	370c      	adds	r7, #12
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc2:	4770      	bx	lr

08017dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b085      	sub	sp, #20
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	607a      	str	r2, [r7, #4]
	return 0;
 8017dd0:	2300      	movs	r3, #0
}
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3714      	adds	r7, #20
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ddc:	4770      	bx	lr
	...

08017de0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b084      	sub	sp, #16
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017de8:	4b11      	ldr	r3, [pc, #68]	; (8017e30 <_sbrk+0x50>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d102      	bne.n	8017df6 <_sbrk+0x16>
		heap_end = &end;
 8017df0:	4b0f      	ldr	r3, [pc, #60]	; (8017e30 <_sbrk+0x50>)
 8017df2:	4a10      	ldr	r2, [pc, #64]	; (8017e34 <_sbrk+0x54>)
 8017df4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8017df6:	4b0e      	ldr	r3, [pc, #56]	; (8017e30 <_sbrk+0x50>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8017dfc:	4b0c      	ldr	r3, [pc, #48]	; (8017e30 <_sbrk+0x50>)
 8017dfe:	681a      	ldr	r2, [r3, #0]
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	4413      	add	r3, r2
 8017e04:	466a      	mov	r2, sp
 8017e06:	4293      	cmp	r3, r2
 8017e08:	d907      	bls.n	8017e1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8017e0a:	f006 faf9 	bl	801e400 <__errno>
 8017e0e:	4602      	mov	r2, r0
 8017e10:	230c      	movs	r3, #12
 8017e12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8017e14:	f04f 33ff 	mov.w	r3, #4294967295
 8017e18:	e006      	b.n	8017e28 <_sbrk+0x48>
	}

	heap_end += incr;
 8017e1a:	4b05      	ldr	r3, [pc, #20]	; (8017e30 <_sbrk+0x50>)
 8017e1c:	681a      	ldr	r2, [r3, #0]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4413      	add	r3, r2
 8017e22:	4a03      	ldr	r2, [pc, #12]	; (8017e30 <_sbrk+0x50>)
 8017e24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8017e26:	68fb      	ldr	r3, [r7, #12]
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3710      	adds	r7, #16
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}
 8017e30:	20009a18 	.word	0x20009a18
 8017e34:	2000a740 	.word	0x2000a740

08017e38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017e38:	b480      	push	{r7}
 8017e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017e3c:	4b15      	ldr	r3, [pc, #84]	; (8017e94 <SystemInit+0x5c>)
 8017e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e42:	4a14      	ldr	r2, [pc, #80]	; (8017e94 <SystemInit+0x5c>)
 8017e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8017e4c:	4b12      	ldr	r3, [pc, #72]	; (8017e98 <SystemInit+0x60>)
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	4a11      	ldr	r2, [pc, #68]	; (8017e98 <SystemInit+0x60>)
 8017e52:	f043 0301 	orr.w	r3, r3, #1
 8017e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8017e58:	4b0f      	ldr	r3, [pc, #60]	; (8017e98 <SystemInit+0x60>)
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8017e5e:	4b0e      	ldr	r3, [pc, #56]	; (8017e98 <SystemInit+0x60>)
 8017e60:	681a      	ldr	r2, [r3, #0]
 8017e62:	490d      	ldr	r1, [pc, #52]	; (8017e98 <SystemInit+0x60>)
 8017e64:	4b0d      	ldr	r3, [pc, #52]	; (8017e9c <SystemInit+0x64>)
 8017e66:	4013      	ands	r3, r2
 8017e68:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8017e6a:	4b0b      	ldr	r3, [pc, #44]	; (8017e98 <SystemInit+0x60>)
 8017e6c:	4a0c      	ldr	r2, [pc, #48]	; (8017ea0 <SystemInit+0x68>)
 8017e6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017e70:	4b09      	ldr	r3, [pc, #36]	; (8017e98 <SystemInit+0x60>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	4a08      	ldr	r2, [pc, #32]	; (8017e98 <SystemInit+0x60>)
 8017e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017e7c:	4b06      	ldr	r3, [pc, #24]	; (8017e98 <SystemInit+0x60>)
 8017e7e:	2200      	movs	r2, #0
 8017e80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017e82:	4b04      	ldr	r3, [pc, #16]	; (8017e94 <SystemInit+0x5c>)
 8017e84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017e88:	609a      	str	r2, [r3, #8]
#endif
}
 8017e8a:	bf00      	nop
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e92:	4770      	bx	lr
 8017e94:	e000ed00 	.word	0xe000ed00
 8017e98:	40023800 	.word	0x40023800
 8017e9c:	fef6ffff 	.word	0xfef6ffff
 8017ea0:	24003010 	.word	0x24003010

08017ea4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	490e      	ldr	r1, [pc, #56]	; (8017ee4 <MX_USB_HOST_Init+0x40>)
 8017eac:	480e      	ldr	r0, [pc, #56]	; (8017ee8 <MX_USB_HOST_Init+0x44>)
 8017eae:	f7f4 fd2b 	bl	800c908 <USBH_Init>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d001      	beq.n	8017ebc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017eb8:	f7fe fe6e 	bl	8016b98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017ebc:	490b      	ldr	r1, [pc, #44]	; (8017eec <MX_USB_HOST_Init+0x48>)
 8017ebe:	480a      	ldr	r0, [pc, #40]	; (8017ee8 <MX_USB_HOST_Init+0x44>)
 8017ec0:	f7f4 fdbd 	bl	800ca3e <USBH_RegisterClass>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d001      	beq.n	8017ece <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017eca:	f7fe fe65 	bl	8016b98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017ece:	4806      	ldr	r0, [pc, #24]	; (8017ee8 <MX_USB_HOST_Init+0x44>)
 8017ed0:	f7f4 fe42 	bl	800cb58 <USBH_Start>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d001      	beq.n	8017ede <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017eda:	f7fe fe5d 	bl	8016b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017ede:	bf00      	nop
 8017ee0:	bd80      	pop	{r7, pc}
 8017ee2:	bf00      	nop
 8017ee4:	08017ef1 	.word	0x08017ef1
 8017ee8:	2000a0a0 	.word	0x2000a0a0
 8017eec:	2000002c 	.word	0x2000002c

08017ef0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b083      	sub	sp, #12
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
 8017ef8:	460b      	mov	r3, r1
 8017efa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017efc:	78fb      	ldrb	r3, [r7, #3]
 8017efe:	3b01      	subs	r3, #1
 8017f00:	2b04      	cmp	r3, #4
 8017f02:	d819      	bhi.n	8017f38 <USBH_UserProcess+0x48>
 8017f04:	a201      	add	r2, pc, #4	; (adr r2, 8017f0c <USBH_UserProcess+0x1c>)
 8017f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f0a:	bf00      	nop
 8017f0c:	08017f39 	.word	0x08017f39
 8017f10:	08017f29 	.word	0x08017f29
 8017f14:	08017f39 	.word	0x08017f39
 8017f18:	08017f31 	.word	0x08017f31
 8017f1c:	08017f21 	.word	0x08017f21
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017f20:	4b09      	ldr	r3, [pc, #36]	; (8017f48 <USBH_UserProcess+0x58>)
 8017f22:	2203      	movs	r2, #3
 8017f24:	701a      	strb	r2, [r3, #0]
  break;
 8017f26:	e008      	b.n	8017f3a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017f28:	4b07      	ldr	r3, [pc, #28]	; (8017f48 <USBH_UserProcess+0x58>)
 8017f2a:	2202      	movs	r2, #2
 8017f2c:	701a      	strb	r2, [r3, #0]
  break;
 8017f2e:	e004      	b.n	8017f3a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017f30:	4b05      	ldr	r3, [pc, #20]	; (8017f48 <USBH_UserProcess+0x58>)
 8017f32:	2201      	movs	r2, #1
 8017f34:	701a      	strb	r2, [r3, #0]
  break;
 8017f36:	e000      	b.n	8017f3a <USBH_UserProcess+0x4a>

  default:
  break;
 8017f38:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017f3a:	bf00      	nop
 8017f3c:	370c      	adds	r7, #12
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop
 8017f48:	20009a1c 	.word	0x20009a1c

08017f4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b08a      	sub	sp, #40	; 0x28
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f54:	f107 0314 	add.w	r3, r7, #20
 8017f58:	2200      	movs	r2, #0
 8017f5a:	601a      	str	r2, [r3, #0]
 8017f5c:	605a      	str	r2, [r3, #4]
 8017f5e:	609a      	str	r2, [r3, #8]
 8017f60:	60da      	str	r2, [r3, #12]
 8017f62:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017f6c:	d13c      	bne.n	8017fe8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f6e:	4b20      	ldr	r3, [pc, #128]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f72:	4a1f      	ldr	r2, [pc, #124]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017f74:	f043 0301 	orr.w	r3, r3, #1
 8017f78:	6313      	str	r3, [r2, #48]	; 0x30
 8017f7a:	4b1d      	ldr	r3, [pc, #116]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f7e:	f003 0301 	and.w	r3, r3, #1
 8017f82:	613b      	str	r3, [r7, #16]
 8017f84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8017f86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8017f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f8c:	2302      	movs	r3, #2
 8017f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f90:	2300      	movs	r3, #0
 8017f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f94:	2303      	movs	r3, #3
 8017f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017f98:	230a      	movs	r3, #10
 8017f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f9c:	f107 0314 	add.w	r3, r7, #20
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	4814      	ldr	r0, [pc, #80]	; (8017ff4 <HAL_HCD_MspInit+0xa8>)
 8017fa4:	f7ea fb6c 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017fa8:	4b11      	ldr	r3, [pc, #68]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fac:	4a10      	ldr	r2, [pc, #64]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fb2:	6353      	str	r3, [r2, #52]	; 0x34
 8017fb4:	4b0e      	ldr	r3, [pc, #56]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fbc:	60fb      	str	r3, [r7, #12]
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	4b0b      	ldr	r3, [pc, #44]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fc4:	4a0a      	ldr	r2, [pc, #40]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017fca:	6453      	str	r3, [r2, #68]	; 0x44
 8017fcc:	4b08      	ldr	r3, [pc, #32]	; (8017ff0 <HAL_HCD_MspInit+0xa4>)
 8017fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017fd4:	60bb      	str	r3, [r7, #8]
 8017fd6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017fd8:	2200      	movs	r2, #0
 8017fda:	2105      	movs	r1, #5
 8017fdc:	2043      	movs	r0, #67	; 0x43
 8017fde:	f7e9 fd29 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017fe2:	2043      	movs	r0, #67	; 0x43
 8017fe4:	f7e9 fd42 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017fe8:	bf00      	nop
 8017fea:	3728      	adds	r7, #40	; 0x28
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}
 8017ff0:	40023800 	.word	0x40023800
 8017ff4:	40020000 	.word	0x40020000

08017ff8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b082      	sub	sp, #8
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018006:	4618      	mov	r0, r3
 8018008:	f7f5 f8f9 	bl	800d1fe <USBH_LL_IncTimer>
}
 801800c:	bf00      	nop
 801800e:	3708      	adds	r7, #8
 8018010:	46bd      	mov	sp, r7
 8018012:	bd80      	pop	{r7, pc}

08018014 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b082      	sub	sp, #8
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018022:	4618      	mov	r0, r3
 8018024:	f7f5 f93e 	bl	800d2a4 <USBH_LL_Connect>
}
 8018028:	bf00      	nop
 801802a:	3708      	adds	r7, #8
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}

08018030 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801803e:	4618      	mov	r0, r3
 8018040:	f7f5 f964 	bl	800d30c <USBH_LL_Disconnect>
}
 8018044:	bf00      	nop
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}

0801804c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	460b      	mov	r3, r1
 8018056:	70fb      	strb	r3, [r7, #3]
 8018058:	4613      	mov	r3, r2
 801805a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018062:	4618      	mov	r0, r3
 8018064:	f7f5 f9a2 	bl	800d3ac <USBH_LL_NotifyURBChange>
#endif
}
 8018068:	bf00      	nop
 801806a:	3708      	adds	r7, #8
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801807e:	4618      	mov	r0, r3
 8018080:	f7f5 f8e7 	bl	800d252 <USBH_LL_PortEnabled>
} 
 8018084:	bf00      	nop
 8018086:	3708      	adds	r7, #8
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b082      	sub	sp, #8
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801809a:	4618      	mov	r0, r3
 801809c:	f7f5 f8e7 	bl	800d26e <USBH_LL_PortDisabled>
} 
 80180a0:	bf00      	nop
 80180a2:	3708      	adds	r7, #8
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}

080180a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80180b6:	2b01      	cmp	r3, #1
 80180b8:	d12a      	bne.n	8018110 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80180ba:	4a18      	ldr	r2, [pc, #96]	; (801811c <USBH_LL_Init+0x74>)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	4a15      	ldr	r2, [pc, #84]	; (801811c <USBH_LL_Init+0x74>)
 80180c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80180ca:	4b14      	ldr	r3, [pc, #80]	; (801811c <USBH_LL_Init+0x74>)
 80180cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80180d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80180d2:	4b12      	ldr	r3, [pc, #72]	; (801811c <USBH_LL_Init+0x74>)
 80180d4:	2208      	movs	r2, #8
 80180d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80180d8:	4b10      	ldr	r3, [pc, #64]	; (801811c <USBH_LL_Init+0x74>)
 80180da:	2203      	movs	r2, #3
 80180dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80180de:	4b0f      	ldr	r3, [pc, #60]	; (801811c <USBH_LL_Init+0x74>)
 80180e0:	2200      	movs	r2, #0
 80180e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80180e4:	4b0d      	ldr	r3, [pc, #52]	; (801811c <USBH_LL_Init+0x74>)
 80180e6:	2202      	movs	r2, #2
 80180e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80180ea:	4b0c      	ldr	r3, [pc, #48]	; (801811c <USBH_LL_Init+0x74>)
 80180ec:	2200      	movs	r2, #0
 80180ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80180f0:	480a      	ldr	r0, [pc, #40]	; (801811c <USBH_LL_Init+0x74>)
 80180f2:	f7ea fdaa 	bl	8002c4a <HAL_HCD_Init>
 80180f6:	4603      	mov	r3, r0
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d001      	beq.n	8018100 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80180fc:	f7fe fd4c 	bl	8016b98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018100:	4806      	ldr	r0, [pc, #24]	; (801811c <USBH_LL_Init+0x74>)
 8018102:	f7eb f999 	bl	8003438 <HAL_HCD_GetCurrentFrame>
 8018106:	4603      	mov	r3, r0
 8018108:	4619      	mov	r1, r3
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f7f5 f868 	bl	800d1e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018110:	2300      	movs	r3, #0
}
 8018112:	4618      	mov	r0, r3
 8018114:	3708      	adds	r7, #8
 8018116:	46bd      	mov	sp, r7
 8018118:	bd80      	pop	{r7, pc}
 801811a:	bf00      	nop
 801811c:	2000a478 	.word	0x2000a478

08018120 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b084      	sub	sp, #16
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018128:	2300      	movs	r3, #0
 801812a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801812c:	2300      	movs	r3, #0
 801812e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018136:	4618      	mov	r0, r3
 8018138:	f7eb f906 	bl	8003348 <HAL_HCD_Start>
 801813c:	4603      	mov	r3, r0
 801813e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018140:	7bfb      	ldrb	r3, [r7, #15]
 8018142:	4618      	mov	r0, r3
 8018144:	f000 f95c 	bl	8018400 <USBH_Get_USB_Status>
 8018148:	4603      	mov	r3, r0
 801814a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801814c:	7bbb      	ldrb	r3, [r7, #14]
}
 801814e:	4618      	mov	r0, r3
 8018150:	3710      	adds	r7, #16
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}

08018156 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8018156:	b580      	push	{r7, lr}
 8018158:	b084      	sub	sp, #16
 801815a:	af00      	add	r7, sp, #0
 801815c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801815e:	2300      	movs	r3, #0
 8018160:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018162:	2300      	movs	r3, #0
 8018164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801816c:	4618      	mov	r0, r3
 801816e:	f7eb f90e 	bl	800338e <HAL_HCD_Stop>
 8018172:	4603      	mov	r3, r0
 8018174:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018176:	7bfb      	ldrb	r3, [r7, #15]
 8018178:	4618      	mov	r0, r3
 801817a:	f000 f941 	bl	8018400 <USBH_Get_USB_Status>
 801817e:	4603      	mov	r3, r0
 8018180:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8018182:	7bbb      	ldrb	r3, [r7, #14]
}
 8018184:	4618      	mov	r0, r3
 8018186:	3710      	adds	r7, #16
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}

0801818c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b084      	sub	sp, #16
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018194:	2301      	movs	r3, #1
 8018196:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801819e:	4618      	mov	r0, r3
 80181a0:	f7eb f958 	bl	8003454 <HAL_HCD_GetCurrentSpeed>
 80181a4:	4603      	mov	r3, r0
 80181a6:	2b01      	cmp	r3, #1
 80181a8:	d007      	beq.n	80181ba <USBH_LL_GetSpeed+0x2e>
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d302      	bcc.n	80181b4 <USBH_LL_GetSpeed+0x28>
 80181ae:	2b02      	cmp	r3, #2
 80181b0:	d006      	beq.n	80181c0 <USBH_LL_GetSpeed+0x34>
 80181b2:	e008      	b.n	80181c6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80181b4:	2300      	movs	r3, #0
 80181b6:	73fb      	strb	r3, [r7, #15]
    break;
 80181b8:	e008      	b.n	80181cc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80181ba:	2301      	movs	r3, #1
 80181bc:	73fb      	strb	r3, [r7, #15]
    break;
 80181be:	e005      	b.n	80181cc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80181c0:	2302      	movs	r3, #2
 80181c2:	73fb      	strb	r3, [r7, #15]
    break;
 80181c4:	e002      	b.n	80181cc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80181c6:	2301      	movs	r3, #1
 80181c8:	73fb      	strb	r3, [r7, #15]
    break;
 80181ca:	bf00      	nop
  }
  return  speed;
 80181cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3710      	adds	r7, #16
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}

080181d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80181d6:	b580      	push	{r7, lr}
 80181d8:	b084      	sub	sp, #16
 80181da:	af00      	add	r7, sp, #0
 80181dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181de:	2300      	movs	r3, #0
 80181e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80181e2:	2300      	movs	r3, #0
 80181e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7eb f8eb 	bl	80033c8 <HAL_HCD_ResetPort>
 80181f2:	4603      	mov	r3, r0
 80181f4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80181f6:	7bfb      	ldrb	r3, [r7, #15]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f000 f901 	bl	8018400 <USBH_Get_USB_Status>
 80181fe:	4603      	mov	r3, r0
 8018200:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018202:	7bbb      	ldrb	r3, [r7, #14]
}
 8018204:	4618      	mov	r0, r3
 8018206:	3710      	adds	r7, #16
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b082      	sub	sp, #8
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	460b      	mov	r3, r1
 8018216:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801821e:	78fa      	ldrb	r2, [r7, #3]
 8018220:	4611      	mov	r1, r2
 8018222:	4618      	mov	r0, r3
 8018224:	f7eb f8f3 	bl	800340e <HAL_HCD_HC_GetXferCount>
 8018228:	4603      	mov	r3, r0
}
 801822a:	4618      	mov	r0, r3
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018232:	b590      	push	{r4, r7, lr}
 8018234:	b089      	sub	sp, #36	; 0x24
 8018236:	af04      	add	r7, sp, #16
 8018238:	6078      	str	r0, [r7, #4]
 801823a:	4608      	mov	r0, r1
 801823c:	4611      	mov	r1, r2
 801823e:	461a      	mov	r2, r3
 8018240:	4603      	mov	r3, r0
 8018242:	70fb      	strb	r3, [r7, #3]
 8018244:	460b      	mov	r3, r1
 8018246:	70bb      	strb	r3, [r7, #2]
 8018248:	4613      	mov	r3, r2
 801824a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801824c:	2300      	movs	r3, #0
 801824e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018250:	2300      	movs	r3, #0
 8018252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801825a:	787c      	ldrb	r4, [r7, #1]
 801825c:	78ba      	ldrb	r2, [r7, #2]
 801825e:	78f9      	ldrb	r1, [r7, #3]
 8018260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018262:	9302      	str	r3, [sp, #8]
 8018264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018268:	9301      	str	r3, [sp, #4]
 801826a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801826e:	9300      	str	r3, [sp, #0]
 8018270:	4623      	mov	r3, r4
 8018272:	f7ea fd40 	bl	8002cf6 <HAL_HCD_HC_Init>
 8018276:	4603      	mov	r3, r0
 8018278:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801827a:	7bfb      	ldrb	r3, [r7, #15]
 801827c:	4618      	mov	r0, r3
 801827e:	f000 f8bf 	bl	8018400 <USBH_Get_USB_Status>
 8018282:	4603      	mov	r3, r0
 8018284:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018286:	7bbb      	ldrb	r3, [r7, #14]
}
 8018288:	4618      	mov	r0, r3
 801828a:	3714      	adds	r7, #20
 801828c:	46bd      	mov	sp, r7
 801828e:	bd90      	pop	{r4, r7, pc}

08018290 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b084      	sub	sp, #16
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
 8018298:	460b      	mov	r3, r1
 801829a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801829c:	2300      	movs	r3, #0
 801829e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182a0:	2300      	movs	r3, #0
 80182a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80182aa:	78fa      	ldrb	r2, [r7, #3]
 80182ac:	4611      	mov	r1, r2
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7ea fdb9 	bl	8002e26 <HAL_HCD_HC_Halt>
 80182b4:	4603      	mov	r3, r0
 80182b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80182b8:	7bfb      	ldrb	r3, [r7, #15]
 80182ba:	4618      	mov	r0, r3
 80182bc:	f000 f8a0 	bl	8018400 <USBH_Get_USB_Status>
 80182c0:	4603      	mov	r3, r0
 80182c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80182c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80182c6:	4618      	mov	r0, r3
 80182c8:	3710      	adds	r7, #16
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}

080182ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80182ce:	b590      	push	{r4, r7, lr}
 80182d0:	b089      	sub	sp, #36	; 0x24
 80182d2:	af04      	add	r7, sp, #16
 80182d4:	6078      	str	r0, [r7, #4]
 80182d6:	4608      	mov	r0, r1
 80182d8:	4611      	mov	r1, r2
 80182da:	461a      	mov	r2, r3
 80182dc:	4603      	mov	r3, r0
 80182de:	70fb      	strb	r3, [r7, #3]
 80182e0:	460b      	mov	r3, r1
 80182e2:	70bb      	strb	r3, [r7, #2]
 80182e4:	4613      	mov	r3, r2
 80182e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182e8:	2300      	movs	r3, #0
 80182ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182ec:	2300      	movs	r3, #0
 80182ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80182f6:	787c      	ldrb	r4, [r7, #1]
 80182f8:	78ba      	ldrb	r2, [r7, #2]
 80182fa:	78f9      	ldrb	r1, [r7, #3]
 80182fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018300:	9303      	str	r3, [sp, #12]
 8018302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018304:	9302      	str	r3, [sp, #8]
 8018306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018308:	9301      	str	r3, [sp, #4]
 801830a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801830e:	9300      	str	r3, [sp, #0]
 8018310:	4623      	mov	r3, r4
 8018312:	f7ea fdab 	bl	8002e6c <HAL_HCD_HC_SubmitRequest>
 8018316:	4603      	mov	r3, r0
 8018318:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801831a:	7bfb      	ldrb	r3, [r7, #15]
 801831c:	4618      	mov	r0, r3
 801831e:	f000 f86f 	bl	8018400 <USBH_Get_USB_Status>
 8018322:	4603      	mov	r3, r0
 8018324:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018326:	7bbb      	ldrb	r3, [r7, #14]
}
 8018328:	4618      	mov	r0, r3
 801832a:	3714      	adds	r7, #20
 801832c:	46bd      	mov	sp, r7
 801832e:	bd90      	pop	{r4, r7, pc}

08018330 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b082      	sub	sp, #8
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	460b      	mov	r3, r1
 801833a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018342:	78fa      	ldrb	r2, [r7, #3]
 8018344:	4611      	mov	r1, r2
 8018346:	4618      	mov	r0, r3
 8018348:	f7eb f84c 	bl	80033e4 <HAL_HCD_HC_GetURBState>
 801834c:	4603      	mov	r3, r0
}
 801834e:	4618      	mov	r0, r3
 8018350:	3708      	adds	r7, #8
 8018352:	46bd      	mov	sp, r7
 8018354:	bd80      	pop	{r7, pc}

08018356 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018356:	b580      	push	{r7, lr}
 8018358:	b082      	sub	sp, #8
 801835a:	af00      	add	r7, sp, #0
 801835c:	6078      	str	r0, [r7, #4]
 801835e:	460b      	mov	r3, r1
 8018360:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8018368:	2b01      	cmp	r3, #1
 801836a:	d103      	bne.n	8018374 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801836c:	78fb      	ldrb	r3, [r7, #3]
 801836e:	4618      	mov	r0, r3
 8018370:	f000 f872 	bl	8018458 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018374:	20c8      	movs	r0, #200	; 0xc8
 8018376:	f7e8 ffef 	bl	8001358 <HAL_Delay>
  return USBH_OK;
 801837a:	2300      	movs	r3, #0
}
 801837c:	4618      	mov	r0, r3
 801837e:	3708      	adds	r7, #8
 8018380:	46bd      	mov	sp, r7
 8018382:	bd80      	pop	{r7, pc}

08018384 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018384:	b480      	push	{r7}
 8018386:	b085      	sub	sp, #20
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
 801838c:	460b      	mov	r3, r1
 801838e:	70fb      	strb	r3, [r7, #3]
 8018390:	4613      	mov	r3, r2
 8018392:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801839a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801839c:	78fa      	ldrb	r2, [r7, #3]
 801839e:	68f9      	ldr	r1, [r7, #12]
 80183a0:	4613      	mov	r3, r2
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	4413      	add	r3, r2
 80183a6:	00db      	lsls	r3, r3, #3
 80183a8:	440b      	add	r3, r1
 80183aa:	333b      	adds	r3, #59	; 0x3b
 80183ac:	781b      	ldrb	r3, [r3, #0]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d00a      	beq.n	80183c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80183b2:	78fa      	ldrb	r2, [r7, #3]
 80183b4:	68f9      	ldr	r1, [r7, #12]
 80183b6:	4613      	mov	r3, r2
 80183b8:	009b      	lsls	r3, r3, #2
 80183ba:	4413      	add	r3, r2
 80183bc:	00db      	lsls	r3, r3, #3
 80183be:	440b      	add	r3, r1
 80183c0:	3350      	adds	r3, #80	; 0x50
 80183c2:	78ba      	ldrb	r2, [r7, #2]
 80183c4:	701a      	strb	r2, [r3, #0]
 80183c6:	e009      	b.n	80183dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80183c8:	78fa      	ldrb	r2, [r7, #3]
 80183ca:	68f9      	ldr	r1, [r7, #12]
 80183cc:	4613      	mov	r3, r2
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	4413      	add	r3, r2
 80183d2:	00db      	lsls	r3, r3, #3
 80183d4:	440b      	add	r3, r1
 80183d6:	3351      	adds	r3, #81	; 0x51
 80183d8:	78ba      	ldrb	r2, [r7, #2]
 80183da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80183dc:	2300      	movs	r3, #0
}
 80183de:	4618      	mov	r0, r3
 80183e0:	3714      	adds	r7, #20
 80183e2:	46bd      	mov	sp, r7
 80183e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e8:	4770      	bx	lr

080183ea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80183ea:	b580      	push	{r7, lr}
 80183ec:	b082      	sub	sp, #8
 80183ee:	af00      	add	r7, sp, #0
 80183f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f7e8 ffb0 	bl	8001358 <HAL_Delay>
}
 80183f8:	bf00      	nop
 80183fa:	3708      	adds	r7, #8
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018400:	b480      	push	{r7}
 8018402:	b085      	sub	sp, #20
 8018404:	af00      	add	r7, sp, #0
 8018406:	4603      	mov	r3, r0
 8018408:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801840a:	2300      	movs	r3, #0
 801840c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801840e:	79fb      	ldrb	r3, [r7, #7]
 8018410:	2b03      	cmp	r3, #3
 8018412:	d817      	bhi.n	8018444 <USBH_Get_USB_Status+0x44>
 8018414:	a201      	add	r2, pc, #4	; (adr r2, 801841c <USBH_Get_USB_Status+0x1c>)
 8018416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801841a:	bf00      	nop
 801841c:	0801842d 	.word	0x0801842d
 8018420:	08018433 	.word	0x08018433
 8018424:	08018439 	.word	0x08018439
 8018428:	0801843f 	.word	0x0801843f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801842c:	2300      	movs	r3, #0
 801842e:	73fb      	strb	r3, [r7, #15]
    break;
 8018430:	e00b      	b.n	801844a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018432:	2302      	movs	r3, #2
 8018434:	73fb      	strb	r3, [r7, #15]
    break;
 8018436:	e008      	b.n	801844a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018438:	2301      	movs	r3, #1
 801843a:	73fb      	strb	r3, [r7, #15]
    break;
 801843c:	e005      	b.n	801844a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801843e:	2302      	movs	r3, #2
 8018440:	73fb      	strb	r3, [r7, #15]
    break;
 8018442:	e002      	b.n	801844a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018444:	2302      	movs	r3, #2
 8018446:	73fb      	strb	r3, [r7, #15]
    break;
 8018448:	bf00      	nop
  }
  return usb_status;
 801844a:	7bfb      	ldrb	r3, [r7, #15]
}
 801844c:	4618      	mov	r0, r3
 801844e:	3714      	adds	r7, #20
 8018450:	46bd      	mov	sp, r7
 8018452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018456:	4770      	bx	lr

08018458 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8018458:	b580      	push	{r7, lr}
 801845a:	b084      	sub	sp, #16
 801845c:	af00      	add	r7, sp, #0
 801845e:	4603      	mov	r3, r0
 8018460:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8018462:	79fb      	ldrb	r3, [r7, #7]
 8018464:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018466:	79fb      	ldrb	r3, [r7, #7]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d102      	bne.n	8018472 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801846c:	2301      	movs	r3, #1
 801846e:	73fb      	strb	r3, [r7, #15]
 8018470:	e001      	b.n	8018476 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8018472:	2300      	movs	r3, #0
 8018474:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8018476:	7bfb      	ldrb	r3, [r7, #15]
 8018478:	461a      	mov	r2, r3
 801847a:	2120      	movs	r1, #32
 801847c:	4803      	ldr	r0, [pc, #12]	; (801848c <MX_DriverVbusFS+0x34>)
 801847e:	f7ea fbcb 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8018482:	bf00      	nop
 8018484:	3710      	adds	r7, #16
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}
 801848a:	bf00      	nop
 801848c:	40020c00 	.word	0x40020c00

08018490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8018490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80184c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8018496:	e003      	b.n	80184a0 <LoopCopyDataInit>

08018498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018498:	4b0c      	ldr	r3, [pc, #48]	; (80184cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801849a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801849c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801849e:	3104      	adds	r1, #4

080184a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80184a0:	480b      	ldr	r0, [pc, #44]	; (80184d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80184a2:	4b0c      	ldr	r3, [pc, #48]	; (80184d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80184a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80184a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80184a8:	d3f6      	bcc.n	8018498 <CopyDataInit>
  ldr  r2, =_sbss
 80184aa:	4a0b      	ldr	r2, [pc, #44]	; (80184d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80184ac:	e002      	b.n	80184b4 <LoopFillZerobss>

080184ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80184ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80184b0:	f842 3b04 	str.w	r3, [r2], #4

080184b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80184b4:	4b09      	ldr	r3, [pc, #36]	; (80184dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80184b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80184b8:	d3f9      	bcc.n	80184ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80184ba:	f7ff fcbd 	bl	8017e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80184be:	f005 ffb7 	bl	801e430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80184c2:	f7fd fa87 	bl	80159d4 <main>
  bx  lr    
 80184c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80184c8:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 80184cc:	08049c38 	.word	0x08049c38
  ldr  r0, =_sdata
 80184d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80184d4:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 80184d8:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 80184dc:	2000a740 	.word	0x2000a740

080184e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80184e0:	e7fe      	b.n	80184e0 <ADC_IRQHandler>

080184e2 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 80184e2:	b580      	push	{r7, lr}
 80184e4:	b082      	sub	sp, #8
 80184e6:	af00      	add	r7, sp, #0
 80184e8:	6078      	str	r0, [r7, #4]
 80184ea:	460b      	mov	r3, r1
 80184ec:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 80184ee:	887b      	ldrh	r3, [r7, #2]
 80184f0:	2b01      	cmp	r3, #1
 80184f2:	d007      	beq.n	8018504 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	d009      	beq.n	801850c <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d10b      	bne.n	8018514 <_ZN23ApplicationFontProvider7getFontEt+0x32>
    {
    case Typography::DEFAULT:
        return &(getFont_verdana_20_4bpp());
 80184fc:	f000 f898 	bl	8018630 <_Z23getFont_verdana_20_4bppv>
 8018500:	4603      	mov	r3, r0
 8018502:	e008      	b.n	8018516 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
 8018504:	f000 f8d2 	bl	80186ac <_Z23getFont_verdana_40_4bppv>
 8018508:	4603      	mov	r3, r0
 801850a:	e004      	b.n	8018516 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
 801850c:	f000 f852 	bl	80185b4 <_Z23getFont_verdana_10_4bppv>
 8018510:	4603      	mov	r3, r0
 8018512:	e000      	b.n	8018516 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    default:
        return 0;
 8018514:	2300      	movs	r3, #0
    }
}
 8018516:	4618      	mov	r0, r3
 8018518:	3708      	adds	r7, #8
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}
	...

08018520 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8018520:	b480      	push	{r7}
 8018522:	b083      	sub	sp, #12
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	4a04      	ldr	r2, [pc, #16]	; (801853c <_ZN8touchgfx4FontD1Ev+0x1c>)
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	601a      	str	r2, [r3, #0]
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	4618      	mov	r0, r3
 8018532:	370c      	adds	r7, #12
 8018534:	46bd      	mov	sp, r7
 8018536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853a:	4770      	bx	lr
 801853c:	08020fb8 	.word	0x08020fb8

08018540 <_ZN8touchgfx4FontD0Ev>:
 8018540:	b580      	push	{r7, lr}
 8018542:	b082      	sub	sp, #8
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7ff ffe9 	bl	8018520 <_ZN8touchgfx4FontD1Ev>
 801854e:	2110      	movs	r1, #16
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f005 ff14 	bl	801e37e <_ZdlPvj>
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	4618      	mov	r0, r3
 801855a:	3708      	adds	r7, #8
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}

08018560 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
 8018568:	4a05      	ldr	r2, [pc, #20]	; (8018580 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	601a      	str	r2, [r3, #0]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	4618      	mov	r0, r3
 8018572:	f7ff ffd5 	bl	8018520 <_ZN8touchgfx4FontD1Ev>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	4618      	mov	r0, r3
 801857a:	3708      	adds	r7, #8
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}
 8018580:	0802106c 	.word	0x0802106c

08018584 <_ZN8touchgfx9ConstFontD0Ev>:
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	f7ff ffe7 	bl	8018560 <_ZN8touchgfx9ConstFontD1Ev>
 8018592:	2118      	movs	r1, #24
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f005 fef2 	bl	801e37e <_ZdlPvj>
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	4618      	mov	r0, r3
 801859e:	3708      	adds	r7, #8
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}

080185a4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 80185a4:	b580      	push	{r7, lr}
 80185a6:	af00      	add	r7, sp, #0
 80185a8:	4801      	ldr	r0, [pc, #4]	; (80185b0 <__tcf_0+0xc>)
 80185aa:	f000 f8b5 	bl	8018718 <_ZN8touchgfx17InternalFlashFontD1Ev>
 80185ae:	bd80      	pop	{r7, pc}
 80185b0:	20009a20 	.word	0x20009a20

080185b4 <_Z23getFont_verdana_10_4bppv>:
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b088      	sub	sp, #32
 80185b8:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 80185ba:	4b13      	ldr	r3, [pc, #76]	; (8018608 <_Z23getFont_verdana_10_4bppv+0x54>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	f003 0301 	and.w	r3, r3, #1
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d11b      	bne.n	80185fe <_Z23getFont_verdana_10_4bppv+0x4a>
 80185c6:	2300      	movs	r3, #0
 80185c8:	9307      	str	r3, [sp, #28]
 80185ca:	2300      	movs	r3, #0
 80185cc:	9306      	str	r3, [sp, #24]
 80185ce:	4b0f      	ldr	r3, [pc, #60]	; (801860c <_Z23getFont_verdana_10_4bppv+0x58>)
 80185d0:	9305      	str	r3, [sp, #20]
 80185d2:	4b0f      	ldr	r3, [pc, #60]	; (8018610 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80185d4:	9304      	str	r3, [sp, #16]
 80185d6:	2300      	movs	r3, #0
 80185d8:	9303      	str	r3, [sp, #12]
 80185da:	2300      	movs	r3, #0
 80185dc:	9302      	str	r3, [sp, #8]
 80185de:	2304      	movs	r3, #4
 80185e0:	9301      	str	r3, [sp, #4]
 80185e2:	2300      	movs	r3, #0
 80185e4:	9300      	str	r3, [sp, #0]
 80185e6:	230a      	movs	r3, #10
 80185e8:	2200      	movs	r2, #0
 80185ea:	490a      	ldr	r1, [pc, #40]	; (8018614 <_Z23getFont_verdana_10_4bppv+0x60>)
 80185ec:	480a      	ldr	r0, [pc, #40]	; (8018618 <_Z23getFont_verdana_10_4bppv+0x64>)
 80185ee:	f003 fc39 	bl	801be64 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80185f2:	4b05      	ldr	r3, [pc, #20]	; (8018608 <_Z23getFont_verdana_10_4bppv+0x54>)
 80185f4:	2201      	movs	r2, #1
 80185f6:	601a      	str	r2, [r3, #0]
 80185f8:	4808      	ldr	r0, [pc, #32]	; (801861c <_Z23getFont_verdana_10_4bppv+0x68>)
 80185fa:	f005 fefb 	bl	801e3f4 <atexit>
    return verdana_10_4bpp;
 80185fe:	4b06      	ldr	r3, [pc, #24]	; (8018618 <_Z23getFont_verdana_10_4bppv+0x64>)
}
 8018600:	4618      	mov	r0, r3
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
 8018606:	bf00      	nop
 8018608:	20009a40 	.word	0x20009a40
 801860c:	080219b4 	.word	0x080219b4
 8018610:	080217b0 	.word	0x080217b0
 8018614:	080219c4 	.word	0x080219c4
 8018618:	20009a20 	.word	0x20009a20
 801861c:	080185a5 	.word	0x080185a5

08018620 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 8018620:	b580      	push	{r7, lr}
 8018622:	af00      	add	r7, sp, #0
 8018624:	4801      	ldr	r0, [pc, #4]	; (801862c <__tcf_1+0xc>)
 8018626:	f000 f877 	bl	8018718 <_ZN8touchgfx17InternalFlashFontD1Ev>
 801862a:	bd80      	pop	{r7, pc}
 801862c:	20009a44 	.word	0x20009a44

08018630 <_Z23getFont_verdana_20_4bppv>:
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b088      	sub	sp, #32
 8018634:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 8018636:	4b13      	ldr	r3, [pc, #76]	; (8018684 <_Z23getFont_verdana_20_4bppv+0x54>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	f003 0301 	and.w	r3, r3, #1
 801863e:	2b00      	cmp	r3, #0
 8018640:	d11b      	bne.n	801867a <_Z23getFont_verdana_20_4bppv+0x4a>
 8018642:	2300      	movs	r3, #0
 8018644:	9307      	str	r3, [sp, #28]
 8018646:	2300      	movs	r3, #0
 8018648:	9306      	str	r3, [sp, #24]
 801864a:	4b0f      	ldr	r3, [pc, #60]	; (8018688 <_Z23getFont_verdana_20_4bppv+0x58>)
 801864c:	9305      	str	r3, [sp, #20]
 801864e:	4b0f      	ldr	r3, [pc, #60]	; (801868c <_Z23getFont_verdana_20_4bppv+0x5c>)
 8018650:	9304      	str	r3, [sp, #16]
 8018652:	2300      	movs	r3, #0
 8018654:	9303      	str	r3, [sp, #12]
 8018656:	2300      	movs	r3, #0
 8018658:	9302      	str	r3, [sp, #8]
 801865a:	2304      	movs	r3, #4
 801865c:	9301      	str	r3, [sp, #4]
 801865e:	2300      	movs	r3, #0
 8018660:	9300      	str	r3, [sp, #0]
 8018662:	2314      	movs	r3, #20
 8018664:	2208      	movs	r2, #8
 8018666:	490a      	ldr	r1, [pc, #40]	; (8018690 <_Z23getFont_verdana_20_4bppv+0x60>)
 8018668:	480a      	ldr	r0, [pc, #40]	; (8018694 <_Z23getFont_verdana_20_4bppv+0x64>)
 801866a:	f003 fbfb 	bl	801be64 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801866e:	4b05      	ldr	r3, [pc, #20]	; (8018684 <_Z23getFont_verdana_20_4bppv+0x54>)
 8018670:	2201      	movs	r2, #1
 8018672:	601a      	str	r2, [r3, #0]
 8018674:	4808      	ldr	r0, [pc, #32]	; (8018698 <_Z23getFont_verdana_20_4bppv+0x68>)
 8018676:	f005 febd 	bl	801e3f4 <atexit>
    return verdana_20_4bpp;
 801867a:	4b06      	ldr	r3, [pc, #24]	; (8018694 <_Z23getFont_verdana_20_4bppv+0x64>)
}
 801867c:	4618      	mov	r0, r3
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	20009a64 	.word	0x20009a64
 8018688:	080219b8 	.word	0x080219b8
 801868c:	080217b4 	.word	0x080217b4
 8018690:	080219d4 	.word	0x080219d4
 8018694:	20009a44 	.word	0x20009a44
 8018698:	08018621 	.word	0x08018621

0801869c <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801869c:	b580      	push	{r7, lr}
 801869e:	af00      	add	r7, sp, #0
 80186a0:	4801      	ldr	r0, [pc, #4]	; (80186a8 <__tcf_2+0xc>)
 80186a2:	f000 f839 	bl	8018718 <_ZN8touchgfx17InternalFlashFontD1Ev>
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	20009a68 	.word	0x20009a68

080186ac <_Z23getFont_verdana_40_4bppv>:
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b088      	sub	sp, #32
 80186b0:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 80186b2:	4b13      	ldr	r3, [pc, #76]	; (8018700 <_Z23getFont_verdana_40_4bppv+0x54>)
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	f003 0301 	and.w	r3, r3, #1
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d11b      	bne.n	80186f6 <_Z23getFont_verdana_40_4bppv+0x4a>
 80186be:	2300      	movs	r3, #0
 80186c0:	9307      	str	r3, [sp, #28]
 80186c2:	2300      	movs	r3, #0
 80186c4:	9306      	str	r3, [sp, #24]
 80186c6:	4b0f      	ldr	r3, [pc, #60]	; (8018704 <_Z23getFont_verdana_40_4bppv+0x58>)
 80186c8:	9305      	str	r3, [sp, #20]
 80186ca:	4b0f      	ldr	r3, [pc, #60]	; (8018708 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80186cc:	9304      	str	r3, [sp, #16]
 80186ce:	2300      	movs	r3, #0
 80186d0:	9303      	str	r3, [sp, #12]
 80186d2:	2300      	movs	r3, #0
 80186d4:	9302      	str	r3, [sp, #8]
 80186d6:	2304      	movs	r3, #4
 80186d8:	9301      	str	r3, [sp, #4]
 80186da:	2300      	movs	r3, #0
 80186dc:	9300      	str	r3, [sp, #0]
 80186de:	2328      	movs	r3, #40	; 0x28
 80186e0:	2200      	movs	r2, #0
 80186e2:	490a      	ldr	r1, [pc, #40]	; (801870c <_Z23getFont_verdana_40_4bppv+0x60>)
 80186e4:	480a      	ldr	r0, [pc, #40]	; (8018710 <_Z23getFont_verdana_40_4bppv+0x64>)
 80186e6:	f003 fbbd 	bl	801be64 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80186ea:	4b05      	ldr	r3, [pc, #20]	; (8018700 <_Z23getFont_verdana_40_4bppv+0x54>)
 80186ec:	2201      	movs	r2, #1
 80186ee:	601a      	str	r2, [r3, #0]
 80186f0:	4808      	ldr	r0, [pc, #32]	; (8018714 <_Z23getFont_verdana_40_4bppv+0x68>)
 80186f2:	f005 fe7f 	bl	801e3f4 <atexit>
    return verdana_40_4bpp;
 80186f6:	4b06      	ldr	r3, [pc, #24]	; (8018710 <_Z23getFont_verdana_40_4bppv+0x64>)
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
 80186fe:	bf00      	nop
 8018700:	20009a88 	.word	0x20009a88
 8018704:	080219c0 	.word	0x080219c0
 8018708:	080219b0 	.word	0x080219b0
 801870c:	08021a44 	.word	0x08021a44
 8018710:	20009a68 	.word	0x20009a68
 8018714:	0801869d 	.word	0x0801869d

08018718 <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	4a05      	ldr	r2, [pc, #20]	; (8018738 <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	601a      	str	r2, [r3, #0]
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	4618      	mov	r0, r3
 801872a:	f7ff ff19 	bl	8018560 <_ZN8touchgfx9ConstFontD1Ev>
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	4618      	mov	r0, r3
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	08021100 	.word	0x08021100

0801873c <_ZN8touchgfx17InternalFlashFontD0Ev>:
 801873c:	b580      	push	{r7, lr}
 801873e:	b082      	sub	sp, #8
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	f7ff ffe7 	bl	8018718 <_ZN8touchgfx17InternalFlashFontD1Ev>
 801874a:	2120      	movs	r1, #32
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f005 fe16 	bl	801e37e <_ZdlPvj>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	4618      	mov	r0, r3
 8018756:	3708      	adds	r7, #8
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}

0801875c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 801875c:	b480      	push	{r7}
 801875e:	b083      	sub	sp, #12
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
 8018764:	6039      	str	r1, [r7, #0]
 8018766:	683b      	ldr	r3, [r7, #0]
 8018768:	4618      	mov	r0, r3
 801876a:	370c      	adds	r7, #12
 801876c:	46bd      	mov	sp, r7
 801876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018772:	4770      	bx	lr

08018774 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8018774:	b480      	push	{r7}
 8018776:	b083      	sub	sp, #12
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 801877c:	4a07      	ldr	r2, [pc, #28]	; (801879c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	601a      	str	r2, [r3, #0]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2200      	movs	r2, #0
 8018786:	605a      	str	r2, [r3, #4]
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	2200      	movs	r2, #0
 801878c:	721a      	strb	r2, [r3, #8]
    {
    }
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	4618      	mov	r0, r3
 8018792:	370c      	adds	r7, #12
 8018794:	46bd      	mov	sp, r7
 8018796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879a:	4770      	bx	lr
 801879c:	08020428 	.word	0x08020428

080187a0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 80187a0:	b480      	push	{r7}
 80187a2:	b083      	sub	sp, #12
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
    {
 80187a8:	4a04      	ldr	r2, [pc, #16]	; (80187bc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	601a      	str	r2, [r3, #0]
    }
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	4618      	mov	r0, r3
 80187b2:	370c      	adds	r7, #12
 80187b4:	46bd      	mov	sp, r7
 80187b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ba:	4770      	bx	lr
 80187bc:	08020428 	.word	0x08020428

080187c0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b082      	sub	sp, #8
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
    }
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f7ff ffe9 	bl	80187a0 <_ZN8touchgfx10TransitionD1Ev>
 80187ce:	210c      	movs	r1, #12
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f005 fdd4 	bl	801e37e <_ZdlPvj>
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	4618      	mov	r0, r3
 80187da:	3708      	adds	r7, #8
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}

080187e0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 80187e0:	b480      	push	{r7}
 80187e2:	b083      	sub	sp, #12
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	bf00      	nop
 80187ea:	370c      	adds	r7, #12
 80187ec:	46bd      	mov	sp, r7
 80187ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f2:	4770      	bx	lr

080187f4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 80187f4:	b480      	push	{r7}
 80187f6:	b083      	sub	sp, #12
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	bf00      	nop
 80187fe:	370c      	adds	r7, #12
 8018800:	46bd      	mov	sp, r7
 8018802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018806:	4770      	bx	lr

08018808 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8018808:	b480      	push	{r7}
 801880a:	b083      	sub	sp, #12
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	bf00      	nop
 8018812:	370c      	adds	r7, #12
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr

0801881c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801881c:	b480      	push	{r7}
 801881e:	b083      	sub	sp, #12
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
 8018824:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	683a      	ldr	r2, [r7, #0]
 801882a:	605a      	str	r2, [r3, #4]
    }
 801882c:	bf00      	nop
 801882e:	370c      	adds	r7, #12
 8018830:	46bd      	mov	sp, r7
 8018832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018836:	4770      	bx	lr

08018838 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	4618      	mov	r0, r3
 8018844:	f002 fb06 	bl	801ae54 <_ZN8touchgfx11ApplicationC1Ev>
 8018848:	4a09      	ldr	r2, [pc, #36]	; (8018870 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	601a      	str	r2, [r3, #0]
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	2200      	movs	r2, #0
 8018852:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2200      	movs	r2, #0
 801885a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	4a04      	ldr	r2, [pc, #16]	; (8018874 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8018862:	6013      	str	r3, [r2, #0]
    }
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	4618      	mov	r0, r3
 8018868:	3708      	adds	r7, #8
 801886a:	46bd      	mov	sp, r7
 801886c:	bd80      	pop	{r7, pc}
 801886e:	bf00      	nop
 8018870:	080200b8 	.word	0x080200b8
 8018874:	20009b18 	.word	0x20009b18

08018878 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b084      	sub	sp, #16
 801887c:	af00      	add	r7, sp, #0
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8018884:	f002 fac4 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 8018888:	4603      	mov	r3, r0
 801888a:	4618      	mov	r0, r3
 801888c:	f002 fac6 	bl	801ae1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d008      	beq.n	80188aa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	330c      	adds	r3, #12
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	4610      	mov	r0, r2
 80188a8:	4798      	blx	r3
    }
    if (*currentTrans)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d007      	beq.n	80188c2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681a      	ldr	r2, [r3, #0]
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	4610      	mov	r0, r2
 80188c0:	4798      	blx	r3
    }
    if (*currentScreen)
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d008      	beq.n	80188dc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	681a      	ldr	r2, [r3, #0]
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	3314      	adds	r3, #20
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	4610      	mov	r0, r2
 80188da:	4798      	blx	r3
    }
    if (*currentPresenter)
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d008      	beq.n	80188f6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	681a      	ldr	r2, [r3, #0]
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	3304      	adds	r3, #4
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	4610      	mov	r0, r2
 80188f4:	4798      	blx	r3
    }
    if (*currentScreen)
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d007      	beq.n	801890e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	681a      	ldr	r2, [r3, #0]
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	4610      	mov	r0, r2
 801890c:	4798      	blx	r3
    }
    if (*currentPresenter)
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d008      	beq.n	8018928 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8018916:	68bb      	ldr	r3, [r7, #8]
 8018918:	681a      	ldr	r2, [r3, #0]
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	3308      	adds	r3, #8
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	4610      	mov	r0, r2
 8018926:	4798      	blx	r3
    }
}
 8018928:	bf00      	nop
 801892a:	3710      	adds	r7, #16
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}

08018930 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	60f8      	str	r0, [r7, #12]
 8018938:	60b9      	str	r1, [r7, #8]
 801893a:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	330c      	adds	r3, #12
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	68f8      	ldr	r0, [r7, #12]
 8018946:	4798      	blx	r3
    newPresenter->activate();
 8018948:	68bb      	ldr	r3, [r7, #8]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	68b8      	ldr	r0, [r7, #8]
 8018950:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8018952:	6879      	ldr	r1, [r7, #4]
 8018954:	68f8      	ldr	r0, [r7, #12]
 8018956:	f003 fa63 	bl	801be20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	3310      	adds	r3, #16
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	4798      	blx	r3

    Application::getInstance()->draw();
 8018966:	f002 fa53 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 801896a:	4602      	mov	r2, r0
 801896c:	6813      	ldr	r3, [r2, #0]
 801896e:	3328      	adds	r3, #40	; 0x28
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	4610      	mov	r0, r2
 8018974:	4798      	blx	r3
}
 8018976:	bf00      	nop
 8018978:	3710      	adds	r7, #16
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}

0801897e <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 801897e:	b480      	push	{r7}
 8018980:	b083      	sub	sp, #12
 8018982:	af00      	add	r7, sp, #0
 8018984:	6078      	str	r0, [r7, #4]
 8018986:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	683a      	ldr	r2, [r7, #0]
 801898c:	601a      	str	r2, [r3, #0]
    }
 801898e:	bf00      	nop
 8018990:	370c      	adds	r7, #12
 8018992:	46bd      	mov	sp, r7
 8018994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018998:	4770      	bx	lr
	...

0801899c <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7ff fee4 	bl	8018774 <_ZN8touchgfx10TransitionC1Ev>
 80189ac:	4a03      	ldr	r2, [pc, #12]	; (80189bc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	601a      	str	r2, [r3, #0]
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	4618      	mov	r0, r3
 80189b6:	3708      	adds	r7, #8
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}
 80189bc:	08020408 	.word	0x08020408

080189c0 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b082      	sub	sp, #8
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
 80189c8:	4a05      	ldr	r2, [pc, #20]	; (80189e0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	601a      	str	r2, [r3, #0]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7ff fee5 	bl	80187a0 <_ZN8touchgfx10TransitionD1Ev>
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	4618      	mov	r0, r3
 80189da:	3708      	adds	r7, #8
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}
 80189e0:	08020408 	.word	0x08020408

080189e4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b082      	sub	sp, #8
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f7ff ffe7 	bl	80189c0 <_ZN8touchgfx12NoTransitionD1Ev>
 80189f2:	210c      	movs	r1, #12
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	f005 fcc2 	bl	801e37e <_ZdlPvj>
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	4618      	mov	r0, r3
 80189fe:	3708      	adds	r7, #8
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}

08018a04 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8018a04:	b480      	push	{r7}
 8018a06:	b083      	sub	sp, #12
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2201      	movs	r2, #1
 8018a10:	721a      	strb	r2, [r3, #8]
    }
 8018a12:	bf00      	nop
 8018a14:	370c      	adds	r7, #12
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr

08018a1e <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8018a1e:	b480      	push	{r7}
 8018a20:	b083      	sub	sp, #12
 8018a22:	af00      	add	r7, sp, #0
 8018a24:	6078      	str	r0, [r7, #4]
 8018a26:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	683a      	ldr	r2, [r7, #0]
 8018a2c:	605a      	str	r2, [r3, #4]
    }
 8018a2e:	bf00      	nop
 8018a30:	370c      	adds	r7, #12
 8018a32:	46bd      	mov	sp, r7
 8018a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a38:	4770      	bx	lr
	...

08018a3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b084      	sub	sp, #16
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	60f8      	str	r0, [r7, #12]
 8018a44:	60b9      	str	r1, [r7, #8]
 8018a46:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7ff fef4 	bl	8018838 <_ZN8touchgfx14MVPApplicationC1Ev>
 8018a50:	4a0c      	ldr	r2, [pc, #48]	; (8018a84 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	601a      	str	r2, [r3, #0]
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f000 f891 	bl	8018b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	687a      	ldr	r2, [r7, #4]
 8018a66:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	68ba      	ldr	r2, [r7, #8]
 8018a6e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 8018a72:	2000      	movs	r0, #0
 8018a74:	f000 fc08 	bl	8019288 <_ZN8touchgfx5Texts11setLanguageEt>
}
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	08020064 	.word	0x08020064

08018a88 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8018a88:	b480      	push	{r7}
 8018a8a:	b083      	sub	sp, #12
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	6039      	str	r1, [r7, #0]
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	4618      	mov	r0, r3
 8018a96:	370c      	adds	r7, #12
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9e:	4770      	bx	lr

08018aa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
 8018aa8:	6039      	str	r1, [r7, #0]
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	683a      	ldr	r2, [r7, #0]
 8018aae:	4611      	mov	r1, r2
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7ff ffe9 	bl	8018a88 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	685a      	ldr	r2, [r3, #4]
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	605a      	str	r2, [r3, #4]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	683a      	ldr	r2, [r7, #0]
 8018ac2:	3308      	adds	r3, #8
 8018ac4:	3208      	adds	r2, #8
 8018ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018aca:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	3708      	adds	r7, #8
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8018ad8:	b590      	push	{r4, r7, lr}
 8018ada:	b089      	sub	sp, #36	; 0x24
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8018ae6:	4b10      	ldr	r3, [pc, #64]	; (8018b28 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8018ae8:	61bb      	str	r3, [r7, #24]
 8018aea:	2300      	movs	r3, #0
 8018aec:	61fb      	str	r3, [r7, #28]
 8018aee:	f107 0008 	add.w	r0, r7, #8
 8018af2:	f107 0318 	add.w	r3, r7, #24
 8018af6:	cb0c      	ldmia	r3, {r2, r3}
 8018af8:	6879      	ldr	r1, [r7, #4]
 8018afa:	f000 f85f 	bl	8018bbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8018afe:	f107 0308 	add.w	r3, r7, #8
 8018b02:	4619      	mov	r1, r3
 8018b04:	4620      	mov	r0, r4
 8018b06:	f7ff ffcb 	bl	8018aa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8018b0a:	f107 0308 	add.w	r3, r7, #8
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7fb f916 	bl	8013d40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8018b20:	bf00      	nop
 8018b22:	3724      	adds	r7, #36	; 0x24
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd90      	pop	{r4, r7, pc}
 8018b28:	08018b2d 	.word	0x08018b2d

08018b2c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b084      	sub	sp, #16
 8018b30:	af02      	add	r7, sp, #8
 8018b32:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8018b40:	461a      	mov	r2, r3
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	4b04      	ldr	r3, [pc, #16]	; (8018b5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8018b4c:	4804      	ldr	r0, [pc, #16]	; (8018b60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8018b4e:	f000 f855 	bl	8018bfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8018b52:	bf00      	nop
 8018b54:	3708      	adds	r7, #8
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	20009b14 	.word	0x20009b14
 8018b60:	20009b10 	.word	0x20009b10

08018b64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8018b64:	b480      	push	{r7}
 8018b66:	b083      	sub	sp, #12
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	4a04      	ldr	r2, [pc, #16]	; (8018b80 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	601a      	str	r2, [r3, #0]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	4618      	mov	r0, r3
 8018b76:	370c      	adds	r7, #12
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7e:	4770      	bx	lr
 8018b80:	080200f4 	.word	0x080200f4

08018b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b082      	sub	sp, #8
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7ff ffe8 	bl	8018b64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8018b94:	4a08      	ldr	r2, [pc, #32]	; (8018bb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	601a      	str	r2, [r3, #0]
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	2200      	movs	r2, #0
 8018b9e:	605a      	str	r2, [r3, #4]
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	609a      	str	r2, [r3, #8]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2200      	movs	r2, #0
 8018baa:	60da      	str	r2, [r3, #12]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	3708      	adds	r7, #8
 8018bb2:	46bd      	mov	sp, r7
 8018bb4:	bd80      	pop	{r7, pc}
 8018bb6:	bf00      	nop
 8018bb8:	080200a0 	.word	0x080200a0

08018bbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b084      	sub	sp, #16
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	60f8      	str	r0, [r7, #12]
 8018bc4:	60b9      	str	r1, [r7, #8]
 8018bc6:	4639      	mov	r1, r7
 8018bc8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7ff ffc8 	bl	8018b64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8018bd4:	4a08      	ldr	r2, [pc, #32]	; (8018bf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	68ba      	ldr	r2, [r7, #8]
 8018bde:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	3308      	adds	r3, #8
 8018be4:	463a      	mov	r2, r7
 8018be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	3710      	adds	r7, #16
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}
 8018bf8:	080200a0 	.word	0x080200a0

08018bfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8018bfc:	b590      	push	{r4, r7, lr}
 8018bfe:	b089      	sub	sp, #36	; 0x24
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
 8018c08:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	689a      	ldr	r2, [r3, #8]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	689b      	ldr	r3, [r3, #8]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	3320      	adds	r3, #32
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	4610      	mov	r0, r2
 8018c1a:	4798      	blx	r3
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	2be7      	cmp	r3, #231	; 0xe7
 8018c20:	d805      	bhi.n	8018c2e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8018c22:	4b4d      	ldr	r3, [pc, #308]	; (8018d58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 8018c24:	4a4d      	ldr	r2, [pc, #308]	; (8018d5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018c26:	21c2      	movs	r1, #194	; 0xc2
 8018c28:	484d      	ldr	r0, [pc, #308]	; (8018d60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018c2a:	f005 fbc5 	bl	801e3b8 <__assert_func>
 8018c2e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	685a      	ldr	r2, [r3, #4]
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	685b      	ldr	r3, [r3, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	3320      	adds	r3, #32
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	4610      	mov	r0, r2
 8018c40:	4798      	blx	r3
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b0f      	cmp	r3, #15
 8018c46:	d805      	bhi.n	8018c54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8018c48:	4b46      	ldr	r3, [pc, #280]	; (8018d64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018c4a:	4a44      	ldr	r2, [pc, #272]	; (8018d5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018c4c:	21c3      	movs	r1, #195	; 0xc3
 8018c4e:	4844      	ldr	r0, [pc, #272]	; (8018d60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018c50:	f005 fbb2 	bl	801e3b8 <__assert_func>
 8018c54:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	68da      	ldr	r2, [r3, #12]
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	68db      	ldr	r3, [r3, #12]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	3320      	adds	r3, #32
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4610      	mov	r0, r2
 8018c66:	4798      	blx	r3
 8018c68:	4603      	mov	r3, r0
 8018c6a:	2b0b      	cmp	r3, #11
 8018c6c:	d805      	bhi.n	8018c7a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8018c6e:	4b3e      	ldr	r3, [pc, #248]	; (8018d68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8018c70:	4a3a      	ldr	r2, [pc, #232]	; (8018d5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018c72:	21c4      	movs	r1, #196	; 0xc4
 8018c74:	483a      	ldr	r0, [pc, #232]	; (8018d60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018c76:	f005 fb9f 	bl	801e3b8 <__assert_func>
 8018c7a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8018c7c:	683a      	ldr	r2, [r7, #0]
 8018c7e:	68b9      	ldr	r1, [r7, #8]
 8018c80:	68f8      	ldr	r0, [r7, #12]
 8018c82:	f7ff fdf9 	bl	8018878 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	68db      	ldr	r3, [r3, #12]
 8018c8a:	2100      	movs	r1, #0
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f000 f86d 	bl	8018d6c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8018c92:	4603      	mov	r3, r0
 8018c94:	4619      	mov	r1, r3
 8018c96:	200c      	movs	r0, #12
 8018c98:	f7ff fd60 	bl	801875c <_ZnwjPv>
 8018c9c:	4604      	mov	r4, r0
 8018c9e:	2c00      	cmp	r4, #0
 8018ca0:	d004      	beq.n	8018cac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 8018ca2:	4620      	mov	r0, r4
 8018ca4:	f7ff fe7a 	bl	801899c <_ZN8touchgfx12NoTransitionC1Ev>
 8018ca8:	4623      	mov	r3, r4
 8018caa:	e000      	b.n	8018cae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8018cac:	4623      	mov	r3, r4
 8018cae:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	689b      	ldr	r3, [r3, #8]
 8018cb4:	2100      	movs	r1, #0
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f000 f86b 	bl	8018d92 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	20e8      	movs	r0, #232	; 0xe8
 8018cc2:	f7ff fd4b 	bl	801875c <_ZnwjPv>
 8018cc6:	4604      	mov	r4, r0
 8018cc8:	2c00      	cmp	r4, #0
 8018cca:	d004      	beq.n	8018cd6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f000 fc9d 	bl	801960c <_ZN11Screen1ViewC1Ev>
 8018cd2:	4623      	mov	r3, r4
 8018cd4:	e000      	b.n	8018cd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 8018cd6:	4623      	mov	r3, r4
 8018cd8:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	2100      	movs	r1, #0
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f000 f869 	bl	8018db8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	4619      	mov	r1, r3
 8018cea:	2010      	movs	r0, #16
 8018cec:	f7ff fd36 	bl	801875c <_ZnwjPv>
 8018cf0:	4604      	mov	r4, r0
 8018cf2:	2c00      	cmp	r4, #0
 8018cf4:	d005      	beq.n	8018d02 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 8018cf6:	69b9      	ldr	r1, [r7, #24]
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f000 fc31 	bl	8019560 <_ZN16Screen1PresenterC1ER11Screen1View>
 8018cfe:	4623      	mov	r3, r4
 8018d00:	e000      	b.n	8018d04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 8018d02:	4623      	mov	r3, r4
 8018d04:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	69fa      	ldr	r2, [r7, #28]
 8018d0a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8018d0c:	68bb      	ldr	r3, [r7, #8]
 8018d0e:	697a      	ldr	r2, [r7, #20]
 8018d10:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	69ba      	ldr	r2, [r7, #24]
 8018d16:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d002      	beq.n	8018d24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	3304      	adds	r3, #4
 8018d22:	e000      	b.n	8018d26 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8018d24:	2300      	movs	r3, #0
 8018d26:	4619      	mov	r1, r3
 8018d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d2a:	f7ff fe28 	bl	801897e <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	3304      	adds	r3, #4
 8018d32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7ff fe72 	bl	8018a1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8018d3a:	69bb      	ldr	r3, [r7, #24]
 8018d3c:	6979      	ldr	r1, [r7, #20]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f000 f84d 	bl	8018dde <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8018d44:	69fa      	ldr	r2, [r7, #28]
 8018d46:	6979      	ldr	r1, [r7, #20]
 8018d48:	69b8      	ldr	r0, [r7, #24]
 8018d4a:	f7ff fdf1 	bl	8018930 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8018d4e:	697b      	ldr	r3, [r7, #20]
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3724      	adds	r7, #36	; 0x24
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd90      	pop	{r4, r7, pc}
 8018d58:	0801f8c4 	.word	0x0801f8c4
 8018d5c:	08020440 	.word	0x08020440
 8018d60:	0801f954 	.word	0x0801f954
 8018d64:	0801f9a4 	.word	0x0801f9a4
 8018d68:	0801fa48 	.word	0x0801fa48

08018d6c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b082      	sub	sp, #8
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	460b      	mov	r3, r1
 8018d76:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	3324      	adds	r3, #36	; 0x24
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	887a      	ldrh	r2, [r7, #2]
 8018d82:	4611      	mov	r1, r2
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	4798      	blx	r3
 8018d88:	4603      	mov	r3, r0
    }
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	3708      	adds	r7, #8
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}

08018d92 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8018d92:	b580      	push	{r7, lr}
 8018d94:	b082      	sub	sp, #8
 8018d96:	af00      	add	r7, sp, #0
 8018d98:	6078      	str	r0, [r7, #4]
 8018d9a:	460b      	mov	r3, r1
 8018d9c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	3324      	adds	r3, #36	; 0x24
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	887a      	ldrh	r2, [r7, #2]
 8018da8:	4611      	mov	r1, r2
 8018daa:	6878      	ldr	r0, [r7, #4]
 8018dac:	4798      	blx	r3
 8018dae:	4603      	mov	r3, r0
    }
 8018db0:	4618      	mov	r0, r3
 8018db2:	3708      	adds	r7, #8
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}

08018db8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	3324      	adds	r3, #36	; 0x24
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	887a      	ldrh	r2, [r7, #2]
 8018dce:	4611      	mov	r1, r2
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	4798      	blx	r3
 8018dd4:	4603      	mov	r3, r0
    }
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	3708      	adds	r7, #8
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}

08018dde <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8018dde:	b480      	push	{r7}
 8018de0:	b083      	sub	sp, #12
 8018de2:	af00      	add	r7, sp, #0
 8018de4:	6078      	str	r0, [r7, #4]
 8018de6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	683a      	ldr	r2, [r7, #0]
 8018dec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8018dee:	bf00      	nop
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df8:	4770      	bx	lr
	...

08018dfc <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b082      	sub	sp, #8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	4a06      	ldr	r2, [pc, #24]	; (8018e20 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	601a      	str	r2, [r3, #0]
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	3304      	adds	r3, #4
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7f5 fcbc 	bl	800e78c <_ZN8touchgfx9ContainerD1Ev>
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	4618      	mov	r0, r3
 8018e18:	3708      	adds	r7, #8
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	bf00      	nop
 8018e20:	080210cc 	.word	0x080210cc

08018e24 <_ZN8touchgfx6ScreenD0Ev>:
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b082      	sub	sp, #8
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
 8018e2c:	6878      	ldr	r0, [r7, #4]
 8018e2e:	f7ff ffe5 	bl	8018dfc <_ZN8touchgfx6ScreenD1Ev>
 8018e32:	213c      	movs	r1, #60	; 0x3c
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f005 faa2 	bl	801e37e <_ZdlPvj>
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3708      	adds	r7, #8
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8018e44:	b480      	push	{r7}
 8018e46:	b083      	sub	sp, #12
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	bf00      	nop
 8018e4e:	370c      	adds	r7, #12
 8018e50:	46bd      	mov	sp, r7
 8018e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e56:	4770      	bx	lr

08018e58 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8018e58:	b480      	push	{r7}
 8018e5a:	b083      	sub	sp, #12
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
 8018e60:	bf00      	nop
 8018e62:	370c      	adds	r7, #12
 8018e64:	46bd      	mov	sp, r7
 8018e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6a:	4770      	bx	lr

08018e6c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8018e6c:	b480      	push	{r7}
 8018e6e:	b083      	sub	sp, #12
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
 8018e74:	bf00      	nop
 8018e76:	370c      	adds	r7, #12
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7e:	4770      	bx	lr

08018e80 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8018e80:	b480      	push	{r7}
 8018e82:	b083      	sub	sp, #12
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
    {
    }
 8018e88:	bf00      	nop
 8018e8a:	370c      	adds	r7, #12
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e92:	4770      	bx	lr

08018e94 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8018e94:	b480      	push	{r7}
 8018e96:	b083      	sub	sp, #12
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
 8018e9c:	460b      	mov	r3, r1
 8018e9e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8018ea0:	bf00      	nop
 8018ea2:	370c      	adds	r7, #12
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eaa:	4770      	bx	lr

08018eac <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b082      	sub	sp, #8
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	3304      	adds	r3, #4
 8018eba:	6839      	ldr	r1, [r7, #0]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7f5 fcb5 	bl	800e82c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8018ec2:	bf00      	nop
 8018ec4:	3708      	adds	r7, #8
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}

08018eca <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
    void setLabelText(TypedText t)
 8018eca:	b580      	push	{r7, lr}
 8018ecc:	b082      	sub	sp, #8
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	6078      	str	r0, [r7, #4]
 8018ed2:	8039      	strh	r1, [r7, #0]
        typedText = t;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	883a      	ldrh	r2, [r7, #0]
 8018ed8:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f000 f834 	bl	8018f48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8018ee0:	bf00      	nop
 8018ee2:	3708      	adds	r7, #8
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
    void setLabelColor(colortype col, bool performInvalidate = false)
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b084      	sub	sp, #16
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	4613      	mov	r3, r2
 8018ef4:	71fb      	strb	r3, [r7, #7]
        color = col;
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	68ba      	ldr	r2, [r7, #8]
 8018efa:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 8018efc:	79fb      	ldrb	r3, [r7, #7]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d006      	beq.n	8018f10 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
            invalidate();
 8018f02:	68fa      	ldr	r2, [r7, #12]
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	3314      	adds	r3, #20
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	4610      	mov	r0, r2
 8018f0e:	4798      	blx	r3
    }
 8018f10:	bf00      	nop
 8018f12:	3710      	adds	r7, #16
 8018f14:	46bd      	mov	sp, r7
 8018f16:	bd80      	pop	{r7, pc}

08018f18 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b084      	sub	sp, #16
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	60f8      	str	r0, [r7, #12]
 8018f20:	60b9      	str	r1, [r7, #8]
 8018f22:	4613      	mov	r3, r2
 8018f24:	71fb      	strb	r3, [r7, #7]
        colorPressed = col;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	68ba      	ldr	r2, [r7, #8]
 8018f2a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 8018f2c:	79fb      	ldrb	r3, [r7, #7]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d006      	beq.n	8018f40 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
            invalidate();
 8018f32:	68fa      	ldr	r2, [r7, #12]
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	3314      	adds	r3, #20
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	4610      	mov	r0, r2
 8018f3e:	4798      	blx	r3
    }
 8018f40:	bf00      	nop
 8018f42:	3710      	adds	r7, #16
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd80      	pop	{r7, pc}

08018f48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
    void updateTextPosition()
 8018f48:	b590      	push	{r4, r7, lr}
 8018f4a:	b085      	sub	sp, #20
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
        const Font* f = typedText.getFont();
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	3334      	adds	r3, #52	; 0x34
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7f6 fa63 	bl	800f420 <_ZNK8touchgfx9TypedText7getFontEv>
 8018f5a:	60f8      	str	r0, [r7, #12]
        const Unicode::UnicodeChar* s = typedText.getText();
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	3334      	adds	r3, #52	; 0x34
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7f6 fa47 	bl	800f3f4 <_ZNK8touchgfx9TypedText7getTextEv>
 8018f66:	60b8      	str	r0, [r7, #8]
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	3328      	adds	r3, #40	; 0x28
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	68b9      	ldr	r1, [r7, #8]
 8018f72:	68f8      	ldr	r0, [r7, #12]
 8018f74:	4798      	blx	r3
 8018f76:	4603      	mov	r3, r0
 8018f78:	b2dc      	uxtb	r4, r3
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	333c      	adds	r3, #60	; 0x3c
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	68b9      	ldr	r1, [r7, #8]
 8018f84:	68f8      	ldr	r0, [r7, #12]
 8018f86:	4798      	blx	r3
 8018f88:	4603      	mov	r3, r0
 8018f8a:	b2db      	uxtb	r3, r3
 8018f8c:	fb14 f303 	smulbb	r3, r4, r3
 8018f90:	b2dc      	uxtb	r4, r3
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	3324      	adds	r3, #36	; 0x24
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	68b9      	ldr	r1, [r7, #8]
 8018f9c:	68f8      	ldr	r0, [r7, #12]
 8018f9e:	4798      	blx	r3
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	4423      	add	r3, r4
 8018fa4:	b2da      	uxtb	r2, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 8018fac:	bf00      	nop
 8018fae:	3714      	adds	r7, #20
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd90      	pop	{r4, r7, pc}

08018fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	4a05      	ldr	r2, [pc, #20]	; (8018fd4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	601a      	str	r2, [r3, #0]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7ff ff19 	bl	8018dfc <_ZN8touchgfx6ScreenD1Ev>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3708      	adds	r7, #8
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	08020580 	.word	0x08020580

08018fd8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b082      	sub	sp, #8
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f7ff ffe7 	bl	8018fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8018fe6:	2140      	movs	r1, #64	; 0x40
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f005 f9c8 	bl	801e37e <_ZdlPvj>
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	3708      	adds	r7, #8
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	bd80      	pop	{r7, pc}

08018ff8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b082      	sub	sp, #8
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
 8019000:	4a0d      	ldr	r2, [pc, #52]	; (8019038 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	601a      	str	r2, [r3, #0]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	33a4      	adds	r3, #164	; 0xa4
 801900a:	4618      	mov	r0, r3
 801900c:	f7f6 fd10 	bl	800fa30 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	3370      	adds	r3, #112	; 0x70
 8019014:	4618      	mov	r0, r3
 8019016:	f7f6 f8f1 	bl	800f1fc <_ZN8touchgfx6ButtonD1Ev>
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	3340      	adds	r3, #64	; 0x40
 801901e:	4618      	mov	r0, r3
 8019020:	f7f6 f944 	bl	800f2ac <_ZN8touchgfx10TiledImageD1Ev>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	4618      	mov	r0, r3
 8019028:	f7ff ffc4 	bl	8018fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	4618      	mov	r0, r3
 8019030:	3708      	adds	r7, #8
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}
 8019036:	bf00      	nop
 8019038:	0802054c 	.word	0x0802054c

0801903c <_ZN15Screen1ViewBaseD0Ev>:
 801903c:	b580      	push	{r7, lr}
 801903e:	b082      	sub	sp, #8
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f7ff ffd7 	bl	8018ff8 <_ZN15Screen1ViewBaseD1Ev>
 801904a:	21e8      	movs	r1, #232	; 0xe8
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f005 f996 	bl	801e37e <_ZdlPvj>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	4618      	mov	r0, r3
 8019056:	3708      	adds	r7, #8
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase()
 801905c:	b590      	push	{r4, r7, lr}
 801905e:	b08d      	sub	sp, #52	; 0x34
 8019060:	af02      	add	r7, sp, #8
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	4618      	mov	r0, r3
 8019068:	f000 f8ca 	bl	8019200 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 801906c:	4a5e      	ldr	r2, [pc, #376]	; (80191e8 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	601a      	str	r2, [r3, #0]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8019078:	f107 030c 	add.w	r3, r7, #12
 801907c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019080:	4618      	mov	r0, r3
 8019082:	f7f5 fea4 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 8019086:	f107 030c 	add.w	r3, r7, #12
 801908a:	4619      	mov	r1, r3
 801908c:	4620      	mov	r0, r4
 801908e:	f7f6 f8f3 	bl	800f278 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	3370      	adds	r3, #112	; 0x70
 8019096:	4618      	mov	r0, r3
 8019098:	f7f6 f88c 	bl	800f1b4 <_ZN8touchgfx6ButtonC1Ev>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	33a4      	adds	r3, #164	; 0xa4
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7f6 fb97 	bl	800f7d4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
{
    tiledImage1.setBitmap(Bitmap(BITMAP_BLUE_TEXTURES_CARBON_FIBRE_ID));
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80190ac:	f107 0310 	add.w	r3, r7, #16
 80190b0:	2102      	movs	r1, #2
 80190b2:	4618      	mov	r0, r3
 80190b4:	f7f5 fe8b 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 80190b8:	f107 0310 	add.w	r3, r7, #16
 80190bc:	4619      	mov	r1, r3
 80190be:	4620      	mov	r0, r4
 80190c0:	f7f6 fda7 	bl	800fc12 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80190ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80190ce:	9300      	str	r3, [sp, #0]
 80190d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80190d4:	2200      	movs	r2, #0
 80190d6:	2100      	movs	r1, #0
 80190d8:	f7f5 fa44 	bl	800e564 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	3340      	adds	r3, #64	; 0x40
 80190e0:	2200      	movs	r2, #0
 80190e2:	2100      	movs	r1, #0
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7f6 fdae 	bl	800fc46 <_ZN8touchgfx10TiledImage9setOffsetEss>

    button1.setXY(155, 191);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	3370      	adds	r3, #112	; 0x70
 80190ee:	22bf      	movs	r2, #191	; 0xbf
 80190f0:	219b      	movs	r1, #155	; 0x9b
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7f5 fa9b 	bl	800e62e <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80190fe:	f107 0314 	add.w	r3, r7, #20
 8019102:	2100      	movs	r1, #0
 8019104:	4618      	mov	r0, r3
 8019106:	f7f5 fe62 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 801910a:	f107 0318 	add.w	r3, r7, #24
 801910e:	2101      	movs	r1, #1
 8019110:	4618      	mov	r0, r3
 8019112:	f7f5 fe5c 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 8019116:	f107 0218 	add.w	r2, r7, #24
 801911a:	f107 0314 	add.w	r3, r7, #20
 801911e:	4619      	mov	r1, r3
 8019120:	4620      	mov	r0, r4
 8019122:	f7f6 fae5 	bl	800f6f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    buttonWithLabel1.setXY(155, 17);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	33a4      	adds	r3, #164	; 0xa4
 801912a:	2211      	movs	r2, #17
 801912c:	219b      	movs	r1, #155	; 0x9b
 801912e:	4618      	mov	r0, r3
 8019130:	f7f5 fa7d 	bl	800e62e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801913a:	f107 031c 	add.w	r3, r7, #28
 801913e:	2103      	movs	r1, #3
 8019140:	4618      	mov	r0, r3
 8019142:	f7f5 fe44 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 8019146:	f107 0320 	add.w	r3, r7, #32
 801914a:	2104      	movs	r1, #4
 801914c:	4618      	mov	r0, r3
 801914e:	f7f5 fe3e 	bl	800edce <_ZN8touchgfx6BitmapC1Et>
 8019152:	f107 0220 	add.w	r2, r7, #32
 8019156:	f107 031c 	add.w	r3, r7, #28
 801915a:	4619      	mov	r1, r3
 801915c:	4620      	mov	r0, r4
 801915e:	f7f6 fac7 	bl	800f6f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(TypedText(T_SINGLEUSEID1));
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8019168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801916c:	2100      	movs	r1, #0
 801916e:	4618      	mov	r0, r3
 8019170:	f7f6 f91c 	bl	800f3ac <_ZN8touchgfx9TypedTextC1Et>
 8019174:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8019176:	4620      	mov	r0, r4
 8019178:	f7ff fea7 	bl	8018eca <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8019182:	22ff      	movs	r2, #255	; 0xff
 8019184:	21ff      	movs	r1, #255	; 0xff
 8019186:	20ff      	movs	r0, #255	; 0xff
 8019188:	f002 ff28 	bl	801bfdc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801918c:	4603      	mov	r3, r0
 801918e:	2200      	movs	r2, #0
 8019190:	4619      	mov	r1, r3
 8019192:	4620      	mov	r0, r4
 8019194:	f7ff fea8 	bl	8018ee8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801919e:	2200      	movs	r2, #0
 80191a0:	2100      	movs	r1, #0
 80191a2:	20ff      	movs	r0, #255	; 0xff
 80191a4:	f002 ff1a 	bl	801bfdc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80191a8:	4603      	mov	r3, r0
 80191aa:	2200      	movs	r2, #0
 80191ac:	4619      	mov	r1, r3
 80191ae:	4620      	mov	r0, r4
 80191b0:	f7ff feb2 	bl	8018f18 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>

    add(tiledImage1);
 80191b4:	687a      	ldr	r2, [r7, #4]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	3340      	adds	r3, #64	; 0x40
 80191ba:	4619      	mov	r1, r3
 80191bc:	4610      	mov	r0, r2
 80191be:	f7ff fe75 	bl	8018eac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80191c2:	687a      	ldr	r2, [r7, #4]
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	3370      	adds	r3, #112	; 0x70
 80191c8:	4619      	mov	r1, r3
 80191ca:	4610      	mov	r0, r2
 80191cc:	f7ff fe6e 	bl	8018eac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80191d0:	687a      	ldr	r2, [r7, #4]
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	33a4      	adds	r3, #164	; 0xa4
 80191d6:	4619      	mov	r1, r3
 80191d8:	4610      	mov	r0, r2
 80191da:	f7ff fe67 	bl	8018eac <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	4618      	mov	r0, r3
 80191e2:	372c      	adds	r7, #44	; 0x2c
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd90      	pop	{r4, r7, pc}
 80191e8:	0802054c 	.word	0x0802054c

080191ec <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80191ec:	b480      	push	{r7}
 80191ee:	b083      	sub	sp, #12
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]

}
 80191f4:	bf00      	nop
 80191f6:	370c      	adds	r7, #12
 80191f8:	46bd      	mov	sp, r7
 80191fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fe:	4770      	bx	lr

08019200 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 8019200:	b580      	push	{r7, lr}
 8019202:	b082      	sub	sp, #8
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	4618      	mov	r0, r3
 801920c:	f002 fc8a 	bl	801bb24 <_ZN8touchgfx6ScreenC1Ev>
 8019210:	4a05      	ldr	r2, [pc, #20]	; (8019228 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	601a      	str	r2, [r3, #0]
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	2200      	movs	r2, #0
 801921a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	4618      	mov	r0, r3
 8019220:	3708      	adds	r7, #8
 8019222:	46bd      	mov	sp, r7
 8019224:	bd80      	pop	{r7, pc}
 8019226:	bf00      	nop
 8019228:	08020580 	.word	0x08020580

0801922c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801922c:	b480      	push	{r7}
 801922e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8019230:	4b02      	ldr	r3, [pc, #8]	; (801923c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8019232:	4618      	mov	r0, r3
 8019234:	46bd      	mov	sp, r7
 8019236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923a:	4770      	bx	lr
 801923c:	080205ac 	.word	0x080205ac

08019240 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 8019240:	b480      	push	{r7}
 8019242:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8019244:	2305      	movs	r3, #5
}
 8019246:	4618      	mov	r0, r3
 8019248:	46bd      	mov	sp, r7
 801924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924e:	4770      	bx	lr

08019250 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8019250:	b480      	push	{r7}
 8019252:	b085      	sub	sp, #20
 8019254:	af00      	add	r7, sp, #0
 8019256:	60f8      	str	r0, [r7, #12]
 8019258:	60b9      	str	r1, [r7, #8]
 801925a:	4613      	mov	r3, r2
 801925c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801925e:	4a07      	ldr	r2, [pc, #28]	; (801927c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	6013      	str	r3, [r2, #0]
        fonts = f;
 8019264:	4a06      	ldr	r2, [pc, #24]	; (8019280 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801926a:	4a06      	ldr	r2, [pc, #24]	; (8019284 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801926c:	88fb      	ldrh	r3, [r7, #6]
 801926e:	8013      	strh	r3, [r2, #0]
    }
 8019270:	bf00      	nop
 8019272:	3714      	adds	r7, #20
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr
 801927c:	20009b1c 	.word	0x20009b1c
 8019280:	20009b24 	.word	0x20009b24
 8019284:	20009b20 	.word	0x20009b20

08019288 <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8019288:	b5b0      	push	{r4, r5, r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
 801928e:	4603      	mov	r3, r0
 8019290:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 8019292:	4a0d      	ldr	r2, [pc, #52]	; (80192c8 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 8019294:	88fb      	ldrh	r3, [r7, #6]
 8019296:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 8019298:	4a0c      	ldr	r2, [pc, #48]	; (80192cc <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 801929a:	4b0d      	ldr	r3, [pc, #52]	; (80192d0 <_ZN8touchgfx5Texts11setLanguageEt+0x48>)
 801929c:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801929e:	4b0a      	ldr	r3, [pc, #40]	; (80192c8 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 80192a0:	881b      	ldrh	r3, [r3, #0]
 80192a2:	4618      	mov	r0, r3
 80192a4:	f000 f838 	bl	8019318 <_ZN17TypedTextDatabase11getInstanceEt>
 80192a8:	4604      	mov	r4, r0
 80192aa:	f000 f84b 	bl	8019344 <_ZN17TypedTextDatabase8getFontsEv>
 80192ae:	4605      	mov	r5, r0
 80192b0:	f000 f840 	bl	8019334 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80192b4:	4603      	mov	r3, r0
 80192b6:	461a      	mov	r2, r3
 80192b8:	4629      	mov	r1, r5
 80192ba:	4620      	mov	r0, r4
 80192bc:	f7ff ffc8 	bl	8019250 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 80192c0:	bf00      	nop
 80192c2:	3708      	adds	r7, #8
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bdb0      	pop	{r4, r5, r7, pc}
 80192c8:	20009a9c 	.word	0x20009a9c
 80192cc:	08049c0c 	.word	0x08049c0c
 80192d0:	20009aa0 	.word	0x20009aa0

080192d4 <_Z41__static_initialization_and_destruction_0ii>:
 80192d4:	b480      	push	{r7}
 80192d6:	b083      	sub	sp, #12
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
 80192dc:	6039      	str	r1, [r7, #0]
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2b01      	cmp	r3, #1
 80192e2:	d107      	bne.n	80192f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192ea:	4293      	cmp	r3, r2
 80192ec:	d102      	bne.n	80192f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 80192ee:	4a04      	ldr	r2, [pc, #16]	; (8019300 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80192f0:	4b04      	ldr	r3, [pc, #16]	; (8019304 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80192f2:	601a      	str	r2, [r3, #0]
}
 80192f4:	bf00      	nop
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr
 8019300:	08049c0c 	.word	0x08049c0c
 8019304:	20009aa0 	.word	0x20009aa0

08019308 <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 8019308:	b580      	push	{r7, lr}
 801930a:	af00      	add	r7, sp, #0
 801930c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019310:	2001      	movs	r0, #1
 8019312:	f7ff ffdf 	bl	80192d4 <_Z41__static_initialization_and_destruction_0ii>
 8019316:	bd80      	pop	{r7, pc}

08019318 <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 8019318:	b480      	push	{r7}
 801931a:	b083      	sub	sp, #12
 801931c:	af00      	add	r7, sp, #0
 801931e:	4603      	mov	r3, r0
 8019320:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 8019322:	4b03      	ldr	r3, [pc, #12]	; (8019330 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 8019324:	4618      	mov	r0, r3
 8019326:	370c      	adds	r7, #12
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr
 8019330:	08049c10 	.word	0x08049c10

08019334 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8019334:	b480      	push	{r7}
 8019336:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8019338:	2301      	movs	r3, #1
}
 801933a:	4618      	mov	r0, r3
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr

08019344 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 8019344:	b480      	push	{r7}
 8019346:	af00      	add	r7, sp, #0
    return _fonts;
 8019348:	4b02      	ldr	r3, [pc, #8]	; (8019354 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801934a:	4618      	mov	r0, r3
 801934c:	46bd      	mov	sp, r7
 801934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019352:	4770      	bx	lr
 8019354:	20009aa4 	.word	0x20009aa4

08019358 <_Z41__static_initialization_and_destruction_0ii>:
}
 8019358:	b580      	push	{r7, lr}
 801935a:	b082      	sub	sp, #8
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2b01      	cmp	r3, #1
 8019366:	d113      	bne.n	8019390 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801936e:	4293      	cmp	r3, r2
 8019370:	d10e      	bne.n	8019390 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8019372:	f7ff f95d 	bl	8018630 <_Z23getFont_verdana_20_4bppv>
 8019376:	4602      	mov	r2, r0
};
 8019378:	4b07      	ldr	r3, [pc, #28]	; (8019398 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801937a:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 801937c:	f7ff f996 	bl	80186ac <_Z23getFont_verdana_40_4bppv>
 8019380:	4602      	mov	r2, r0
};
 8019382:	4b05      	ldr	r3, [pc, #20]	; (8019398 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8019384:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 8019386:	f7ff f915 	bl	80185b4 <_Z23getFont_verdana_10_4bppv>
 801938a:	4602      	mov	r2, r0
};
 801938c:	4b02      	ldr	r3, [pc, #8]	; (8019398 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801938e:	609a      	str	r2, [r3, #8]
}
 8019390:	bf00      	nop
 8019392:	3708      	adds	r7, #8
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	20009aa4 	.word	0x20009aa4

0801939c <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 801939c:	b580      	push	{r7, lr}
 801939e:	af00      	add	r7, sp, #0
 80193a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80193a4:	2001      	movs	r0, #1
 80193a6:	f7ff ffd7 	bl	8019358 <_Z41__static_initialization_and_destruction_0ii>
 80193aa:	bd80      	pop	{r7, pc}

080193ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b084      	sub	sp, #16
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	68b9      	ldr	r1, [r7, #8]
 80193be:	4618      	mov	r0, r3
 80193c0:	f7ff fb3c 	bl	8018a3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80193c4:	4a03      	ldr	r2, [pc, #12]	; (80193d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	601a      	str	r2, [r3, #0]
{
}
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	4618      	mov	r0, r3
 80193ce:	3710      	adds	r7, #16
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}
 80193d4:	08020028 	.word	0x08020028

080193d8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80193d8:	b480      	push	{r7}
 80193da:	b083      	sub	sp, #12
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2200      	movs	r2, #0
 80193e4:	601a      	str	r2, [r3, #0]
{
}
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	4618      	mov	r0, r3
 80193ea:	370c      	adds	r7, #12
 80193ec:	46bd      	mov	sp, r7
 80193ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f2:	4770      	bx	lr

080193f4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80193f4:	b480      	push	{r7}
 80193f6:	b083      	sub	sp, #12
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
}
 80193fc:	bf00      	nop
 80193fe:	370c      	adds	r7, #12
 8019400:	46bd      	mov	sp, r7
 8019402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019406:	4770      	bx	lr

08019408 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8019408:	b480      	push	{r7}
 801940a:	b083      	sub	sp, #12
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
    {
    }
 8019410:	bf00      	nop
 8019412:	370c      	adds	r7, #12
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr

0801941c <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801941c:	b480      	push	{r7}
 801941e:	b083      	sub	sp, #12
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
    {
    }
 8019424:	bf00      	nop
 8019426:	370c      	adds	r7, #12
 8019428:	46bd      	mov	sp, r7
 801942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942e:	4770      	bx	lr

08019430 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8019430:	b480      	push	{r7}
 8019432:	b083      	sub	sp, #12
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
    {
 8019438:	4a04      	ldr	r2, [pc, #16]	; (801944c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	601a      	str	r2, [r3, #0]
    }
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	4618      	mov	r0, r3
 8019442:	370c      	adds	r7, #12
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr
 801944c:	08020650 	.word	0x08020650

08019450 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8019450:	b580      	push	{r7, lr}
 8019452:	b082      	sub	sp, #8
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
    }
 8019458:	6878      	ldr	r0, [r7, #4]
 801945a:	f7ff ffe9 	bl	8019430 <_ZN8touchgfx9PresenterD1Ev>
 801945e:	2104      	movs	r1, #4
 8019460:	6878      	ldr	r0, [r7, #4]
 8019462:	f004 ff8c 	bl	801e37e <_ZdlPvj>
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	4618      	mov	r0, r3
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}

08019470 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8019470:	b480      	push	{r7}
 8019472:	b083      	sub	sp, #12
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
    {
 8019478:	4a04      	ldr	r2, [pc, #16]	; (801948c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	601a      	str	r2, [r3, #0]
    }
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	4618      	mov	r0, r3
 8019482:	370c      	adds	r7, #12
 8019484:	46bd      	mov	sp, r7
 8019486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948a:	4770      	bx	lr
 801948c:	08020650 	.word	0x08020650

08019490 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8019490:	b480      	push	{r7}
 8019492:	b083      	sub	sp, #12
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
 8019498:	4a06      	ldr	r2, [pc, #24]	; (80194b4 <_ZN13ModelListenerC1Ev+0x24>)
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	601a      	str	r2, [r3, #0]
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2200      	movs	r2, #0
 80194a2:	605a      	str	r2, [r3, #4]
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	4618      	mov	r0, r3
 80194a8:	370c      	adds	r7, #12
 80194aa:	46bd      	mov	sp, r7
 80194ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b0:	4770      	bx	lr
 80194b2:	bf00      	nop
 80194b4:	08020640 	.word	0x08020640

080194b8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80194b8:	b480      	push	{r7}
 80194ba:	b083      	sub	sp, #12
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
 80194c0:	4a04      	ldr	r2, [pc, #16]	; (80194d4 <_ZN13ModelListenerD1Ev+0x1c>)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	601a      	str	r2, [r3, #0]
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	4618      	mov	r0, r3
 80194ca:	370c      	adds	r7, #12
 80194cc:	46bd      	mov	sp, r7
 80194ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d2:	4770      	bx	lr
 80194d4:	08020640 	.word	0x08020640

080194d8 <_ZN13ModelListenerD0Ev>:
 80194d8:	b580      	push	{r7, lr}
 80194da:	b082      	sub	sp, #8
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f7ff ffe9 	bl	80194b8 <_ZN13ModelListenerD1Ev>
 80194e6:	2108      	movs	r1, #8
 80194e8:	6878      	ldr	r0, [r7, #4]
 80194ea:	f004 ff48 	bl	801e37e <_ZdlPvj>
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	4618      	mov	r0, r3
 80194f2:	3708      	adds	r7, #8
 80194f4:	46bd      	mov	sp, r7
 80194f6:	bd80      	pop	{r7, pc}

080194f8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b082      	sub	sp, #8
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	4a09      	ldr	r2, [pc, #36]	; (8019528 <_ZN16Screen1PresenterD1Ev+0x30>)
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	601a      	str	r2, [r3, #0]
 8019506:	4a09      	ldr	r2, [pc, #36]	; (801952c <_ZN16Screen1PresenterD1Ev+0x34>)
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	605a      	str	r2, [r3, #4]
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	3304      	adds	r3, #4
 8019510:	4618      	mov	r0, r3
 8019512:	f7ff ffd1 	bl	80194b8 <_ZN13ModelListenerD1Ev>
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	4618      	mov	r0, r3
 801951a:	f7ff ff89 	bl	8019430 <_ZN8touchgfx9PresenterD1Ev>
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	4618      	mov	r0, r3
 8019522:	3708      	adds	r7, #8
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}
 8019528:	08020618 	.word	0x08020618
 801952c:	08020630 	.word	0x08020630

08019530 <_ZThn4_N16Screen1PresenterD1Ev>:
 8019530:	f1a0 0004 	sub.w	r0, r0, #4
 8019534:	e7e0      	b.n	80194f8 <_ZN16Screen1PresenterD1Ev>
 8019536:	bf00      	nop

08019538 <_ZN16Screen1PresenterD0Ev>:
 8019538:	b580      	push	{r7, lr}
 801953a:	b082      	sub	sp, #8
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f7ff ffd9 	bl	80194f8 <_ZN16Screen1PresenterD1Ev>
 8019546:	2110      	movs	r1, #16
 8019548:	6878      	ldr	r0, [r7, #4]
 801954a:	f004 ff18 	bl	801e37e <_ZdlPvj>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	4618      	mov	r0, r3
 8019552:	3708      	adds	r7, #8
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}

08019558 <_ZThn4_N16Screen1PresenterD0Ev>:
 8019558:	f1a0 0004 	sub.w	r0, r0, #4
 801955c:	e7ec      	b.n	8019538 <_ZN16Screen1PresenterD0Ev>
	...

08019560 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8019560:	b580      	push	{r7, lr}
 8019562:	b082      	sub	sp, #8
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	6039      	str	r1, [r7, #0]
    : view(v)
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	4618      	mov	r0, r3
 801956e:	f7ff ff7f 	bl	8019470 <_ZN8touchgfx9PresenterC1Ev>
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	3304      	adds	r3, #4
 8019576:	4618      	mov	r0, r3
 8019578:	f7ff ff8a 	bl	8019490 <_ZN13ModelListenerC1Ev>
 801957c:	4a06      	ldr	r2, [pc, #24]	; (8019598 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	601a      	str	r2, [r3, #0]
 8019582:	4a06      	ldr	r2, [pc, #24]	; (801959c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	605a      	str	r2, [r3, #4]
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	683a      	ldr	r2, [r7, #0]
 801958c:	60da      	str	r2, [r3, #12]
{
}
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	4618      	mov	r0, r3
 8019592:	3708      	adds	r7, #8
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}
 8019598:	08020618 	.word	0x08020618
 801959c:	08020630 	.word	0x08020630

080195a0 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80195a0:	b480      	push	{r7}
 80195a2:	b083      	sub	sp, #12
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]

}
 80195a8:	bf00      	nop
 80195aa:	370c      	adds	r7, #12
 80195ac:	46bd      	mov	sp, r7
 80195ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b2:	4770      	bx	lr

080195b4 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80195b4:	b480      	push	{r7}
 80195b6:	b083      	sub	sp, #12
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]

}
 80195bc:	bf00      	nop
 80195be:	370c      	adds	r7, #12
 80195c0:	46bd      	mov	sp, r7
 80195c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c6:	4770      	bx	lr

080195c8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b082      	sub	sp, #8
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
 80195d0:	4a05      	ldr	r2, [pc, #20]	; (80195e8 <_ZN11Screen1ViewD1Ev+0x20>)
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	601a      	str	r2, [r3, #0]
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	4618      	mov	r0, r3
 80195da:	f7ff fd0d 	bl	8018ff8 <_ZN15Screen1ViewBaseD1Ev>
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	4618      	mov	r0, r3
 80195e2:	3708      	adds	r7, #8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	08020668 	.word	0x08020668

080195ec <_ZN11Screen1ViewD0Ev>:
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
 80195f4:	6878      	ldr	r0, [r7, #4]
 80195f6:	f7ff ffe7 	bl	80195c8 <_ZN11Screen1ViewD1Ev>
 80195fa:	21e8      	movs	r1, #232	; 0xe8
 80195fc:	6878      	ldr	r0, [r7, #4]
 80195fe:	f004 febe 	bl	801e37e <_ZdlPvj>
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	4618      	mov	r0, r3
 8019606:	3708      	adds	r7, #8
 8019608:	46bd      	mov	sp, r7
 801960a:	bd80      	pop	{r7, pc}

0801960c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 801960c:	b580      	push	{r7, lr}
 801960e:	b082      	sub	sp, #8
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	4618      	mov	r0, r3
 8019618:	f7ff fd20 	bl	801905c <_ZN15Screen1ViewBaseC1Ev>
 801961c:	4a03      	ldr	r2, [pc, #12]	; (801962c <_ZN11Screen1ViewC1Ev+0x20>)
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	601a      	str	r2, [r3, #0]
{

}
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	4618      	mov	r0, r3
 8019626:	3708      	adds	r7, #8
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	08020668 	.word	0x08020668

08019630 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	4618      	mov	r0, r3
 801963c:	f7ff fdd6 	bl	80191ec <_ZN15Screen1ViewBase11setupScreenEv>
}
 8019640:	bf00      	nop
 8019642:	3708      	adds	r7, #8
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}

08019648 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	4618      	mov	r0, r3
 8019654:	f7ff fc0a 	bl	8018e6c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8019658:	bf00      	nop
 801965a:	3708      	adds	r7, #8
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}

08019660 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019660:	8880      	ldrh	r0, [r0, #4]
 8019662:	4770      	bx	lr

08019664 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019664:	2300      	movs	r3, #0
 8019666:	8083      	strh	r3, [r0, #4]
 8019668:	4770      	bx	lr
	...

0801966c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801966e:	6803      	ldr	r3, [r0, #0]
 8019670:	460e      	mov	r6, r1
 8019672:	2100      	movs	r1, #0
 8019674:	4604      	mov	r4, r0
 8019676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019678:	4798      	blx	r3
 801967a:	4605      	mov	r5, r0
 801967c:	6823      	ldr	r3, [r4, #0]
 801967e:	4620      	mov	r0, r4
 8019680:	1b75      	subs	r5, r6, r5
 8019682:	6a1b      	ldr	r3, [r3, #32]
 8019684:	b2ad      	uxth	r5, r5
 8019686:	4798      	blx	r3
 8019688:	88a3      	ldrh	r3, [r4, #4]
 801968a:	fbb5 f0f0 	udiv	r0, r5, r0
 801968e:	4298      	cmp	r0, r3
 8019690:	b285      	uxth	r5, r0
 8019692:	db05      	blt.n	80196a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 8019694:	4b0e      	ldr	r3, [pc, #56]	; (80196d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8019696:	211e      	movs	r1, #30
 8019698:	4a0e      	ldr	r2, [pc, #56]	; (80196d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801969a:	480f      	ldr	r0, [pc, #60]	; (80196d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801969c:	f004 fe8c 	bl	801e3b8 <__assert_func>
 80196a0:	6823      	ldr	r3, [r4, #0]
 80196a2:	2100      	movs	r1, #0
 80196a4:	4620      	mov	r0, r4
 80196a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a8:	4798      	blx	r3
 80196aa:	4607      	mov	r7, r0
 80196ac:	6823      	ldr	r3, [r4, #0]
 80196ae:	4620      	mov	r0, r4
 80196b0:	1bf6      	subs	r6, r6, r7
 80196b2:	6a1b      	ldr	r3, [r3, #32]
 80196b4:	b2b6      	uxth	r6, r6
 80196b6:	4798      	blx	r3
 80196b8:	fbb6 f3f0 	udiv	r3, r6, r0
 80196bc:	fb03 6610 	mls	r6, r3, r0, r6
 80196c0:	b11e      	cbz	r6, 80196ca <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 80196c2:	4b06      	ldr	r3, [pc, #24]	; (80196dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 80196c4:	211f      	movs	r1, #31
 80196c6:	4a03      	ldr	r2, [pc, #12]	; (80196d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80196c8:	e7e7      	b.n	801969a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 80196ca:	4628      	mov	r0, r5
 80196cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ce:	bf00      	nop
 80196d0:	08020694 	.word	0x08020694
 80196d4:	08020802 	.word	0x08020802
 80196d8:	080206a9 	.word	0x080206a9
 80196dc:	080206d7 	.word	0x080206d7

080196e0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80196e0:	b538      	push	{r3, r4, r5, lr}
 80196e2:	6803      	ldr	r3, [r0, #0]
 80196e4:	460d      	mov	r5, r1
 80196e6:	4604      	mov	r4, r0
 80196e8:	6a1b      	ldr	r3, [r3, #32]
 80196ea:	4798      	blx	r3
 80196ec:	4285      	cmp	r5, r0
 80196ee:	d905      	bls.n	80196fc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80196f0:	4b0c      	ldr	r3, [pc, #48]	; (8019724 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80196f2:	212f      	movs	r1, #47	; 0x2f
 80196f4:	4a0c      	ldr	r2, [pc, #48]	; (8019728 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80196f6:	480d      	ldr	r0, [pc, #52]	; (801972c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80196f8:	f004 fe5e 	bl	801e3b8 <__assert_func>
 80196fc:	6823      	ldr	r3, [r4, #0]
 80196fe:	4620      	mov	r0, r4
 8019700:	88a5      	ldrh	r5, [r4, #4]
 8019702:	69db      	ldr	r3, [r3, #28]
 8019704:	4798      	blx	r3
 8019706:	4285      	cmp	r5, r0
 8019708:	db03      	blt.n	8019712 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801970a:	4b09      	ldr	r3, [pc, #36]	; (8019730 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801970c:	2130      	movs	r1, #48	; 0x30
 801970e:	4a06      	ldr	r2, [pc, #24]	; (8019728 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8019710:	e7f1      	b.n	80196f6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8019712:	6823      	ldr	r3, [r4, #0]
 8019714:	4620      	mov	r0, r4
 8019716:	88a1      	ldrh	r1, [r4, #4]
 8019718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801971a:	4798      	blx	r3
 801971c:	88a3      	ldrh	r3, [r4, #4]
 801971e:	3301      	adds	r3, #1
 8019720:	80a3      	strh	r3, [r4, #4]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	08020751 	.word	0x08020751
 8019728:	08020845 	.word	0x08020845
 801972c:	080206a9 	.word	0x080206a9
 8019730:	08020768 	.word	0x08020768

08019734 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019734:	b570      	push	{r4, r5, r6, lr}
 8019736:	6803      	ldr	r3, [r0, #0]
 8019738:	4616      	mov	r6, r2
 801973a:	4604      	mov	r4, r0
 801973c:	460d      	mov	r5, r1
 801973e:	6a1b      	ldr	r3, [r3, #32]
 8019740:	4798      	blx	r3
 8019742:	4286      	cmp	r6, r0
 8019744:	d905      	bls.n	8019752 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8019746:	4b06      	ldr	r3, [pc, #24]	; (8019760 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8019748:	2139      	movs	r1, #57	; 0x39
 801974a:	4a06      	ldr	r2, [pc, #24]	; (8019764 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801974c:	4806      	ldr	r0, [pc, #24]	; (8019768 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801974e:	f004 fe33 	bl	801e3b8 <__assert_func>
 8019752:	6823      	ldr	r3, [r4, #0]
 8019754:	4629      	mov	r1, r5
 8019756:	4620      	mov	r0, r4
 8019758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801975a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801975e:	4718      	bx	r3
 8019760:	08020751 	.word	0x08020751
 8019764:	080207b8 	.word	0x080207b8
 8019768:	080206a9 	.word	0x080206a9

0801976c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801976c:	4770      	bx	lr
	...

08019770 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019770:	4a02      	ldr	r2, [pc, #8]	; (801977c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019772:	6002      	str	r2, [r0, #0]
 8019774:	2200      	movs	r2, #0
 8019776:	8082      	strh	r2, [r0, #4]
 8019778:	4770      	bx	lr
 801977a:	bf00      	nop
 801977c:	0802078c 	.word	0x0802078c

08019780 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8019780:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019784:	4770      	bx	lr

08019786 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019786:	2301      	movs	r3, #1
 8019788:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801978c:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8019790:	4770      	bx	lr

08019792 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019792:	2301      	movs	r3, #1
 8019794:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8019798:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801979c:	4770      	bx	lr

0801979e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801979e:	6843      	ldr	r3, [r0, #4]
 80197a0:	2201      	movs	r2, #1
 80197a2:	725a      	strb	r2, [r3, #9]
 80197a4:	6840      	ldr	r0, [r0, #4]
 80197a6:	6803      	ldr	r3, [r0, #0]
 80197a8:	691b      	ldr	r3, [r3, #16]
 80197aa:	4718      	bx	r3

080197ac <_ZN8touchgfx3HAL8flushDMAEv>:
 80197ac:	6840      	ldr	r0, [r0, #4]
 80197ae:	6803      	ldr	r3, [r0, #0]
 80197b0:	689b      	ldr	r3, [r3, #8]
 80197b2:	4718      	bx	r3

080197b4 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 80197b4:	4770      	bx	lr

080197b6 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 80197b6:	4608      	mov	r0, r1
 80197b8:	4770      	bx	lr

080197ba <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 80197ba:	4770      	bx	lr

080197bc <_ZN8touchgfx3HAL10beginFrameEv>:
 80197bc:	4b04      	ldr	r3, [pc, #16]	; (80197d0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80197be:	781b      	ldrb	r3, [r3, #0]
 80197c0:	b123      	cbz	r3, 80197cc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80197c2:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 80197c6:	f080 0001 	eor.w	r0, r0, #1
 80197ca:	4770      	bx	lr
 80197cc:	2001      	movs	r0, #1
 80197ce:	4770      	bx	lr
 80197d0:	20009aba 	.word	0x20009aba

080197d4 <_ZN8touchgfx3HAL8endFrameEv>:
 80197d4:	b510      	push	{r4, lr}
 80197d6:	4604      	mov	r4, r0
 80197d8:	6840      	ldr	r0, [r0, #4]
 80197da:	6803      	ldr	r3, [r0, #0]
 80197dc:	689b      	ldr	r3, [r3, #8]
 80197de:	4798      	blx	r3
 80197e0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80197e4:	b113      	cbz	r3, 80197ec <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80197e6:	2301      	movs	r3, #1
 80197e8:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 80197ec:	bd10      	pop	{r4, pc}

080197ee <_ZN8touchgfx3HAL9taskEntryEv>:
 80197ee:	b508      	push	{r3, lr}
 80197f0:	6803      	ldr	r3, [r0, #0]
 80197f2:	4604      	mov	r4, r0
 80197f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197f6:	4798      	blx	r3
 80197f8:	6823      	ldr	r3, [r4, #0]
 80197fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80197fc:	4620      	mov	r0, r4
 80197fe:	4798      	blx	r3
 8019800:	f7f6 fdac 	bl	801035c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019804:	6823      	ldr	r3, [r4, #0]
 8019806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019808:	e7f8      	b.n	80197fc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801980c <_ZN8touchgfx3HAL4tickEv>:
 801980c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801980e:	6803      	ldr	r3, [r0, #0]
 8019810:	4604      	mov	r4, r0
 8019812:	4d5d      	ldr	r5, [pc, #372]	; (8019988 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019818:	4798      	blx	r3
 801981a:	2800      	cmp	r0, #0
 801981c:	f000 8092 	beq.w	8019944 <_ZN8touchgfx3HAL4tickEv+0x138>
 8019820:	2001      	movs	r0, #1
 8019822:	2600      	movs	r6, #0
 8019824:	f7fa fbdd 	bl	8013fe2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019828:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801982c:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 8019830:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8019834:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 8019838:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801983c:	b133      	cbz	r3, 801984c <_ZN8touchgfx3HAL4tickEv+0x40>
 801983e:	6823      	ldr	r3, [r4, #0]
 8019840:	4620      	mov	r0, r4
 8019842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019846:	4798      	blx	r3
 8019848:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801984c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019850:	2601      	movs	r6, #1
 8019852:	6862      	ldr	r2, [r4, #4]
 8019854:	f083 0301 	eor.w	r3, r3, #1
 8019858:	702e      	strb	r6, [r5, #0]
 801985a:	7253      	strb	r3, [r2, #9]
 801985c:	f001 fad8 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 8019860:	6803      	ldr	r3, [r0, #0]
 8019862:	4631      	mov	r1, r6
 8019864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019866:	4798      	blx	r3
 8019868:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801986c:	b90b      	cbnz	r3, 8019872 <_ZN8touchgfx3HAL4tickEv+0x66>
 801986e:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 8019872:	f001 facd 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 8019876:	6803      	ldr	r3, [r0, #0]
 8019878:	695b      	ldr	r3, [r3, #20]
 801987a:	4798      	blx	r3
 801987c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801987e:	6803      	ldr	r3, [r0, #0]
 8019880:	691b      	ldr	r3, [r3, #16]
 8019882:	4798      	blx	r3
 8019884:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8019888:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801988c:	3b01      	subs	r3, #1
 801988e:	b2db      	uxtb	r3, r3
 8019890:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8019894:	b10a      	cbz	r2, 801989a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8019896:	2b00      	cmp	r3, #0
 8019898:	d1eb      	bne.n	8019872 <_ZN8touchgfx3HAL4tickEv+0x66>
 801989a:	4a3c      	ldr	r2, [pc, #240]	; (801998c <_ZN8touchgfx3HAL4tickEv+0x180>)
 801989c:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 80198a0:	7813      	ldrb	r3, [r2, #0]
 80198a2:	3301      	adds	r3, #1
 80198a4:	b25b      	sxtb	r3, r3
 80198a6:	4299      	cmp	r1, r3
 80198a8:	7013      	strb	r3, [r2, #0]
 80198aa:	dc10      	bgt.n	80198ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 80198ac:	2300      	movs	r3, #0
 80198ae:	68e0      	ldr	r0, [r4, #12]
 80198b0:	a902      	add	r1, sp, #8
 80198b2:	7013      	strb	r3, [r2, #0]
 80198b4:	aa03      	add	r2, sp, #12
 80198b6:	6803      	ldr	r3, [r0, #0]
 80198b8:	68db      	ldr	r3, [r3, #12]
 80198ba:	4798      	blx	r3
 80198bc:	6823      	ldr	r3, [r4, #0]
 80198be:	2800      	cmp	r0, #0
 80198c0:	d04c      	beq.n	801995c <_ZN8touchgfx3HAL4tickEv+0x150>
 80198c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80198c6:	4620      	mov	r0, r4
 80198c8:	9a03      	ldr	r2, [sp, #12]
 80198ca:	9902      	ldr	r1, [sp, #8]
 80198cc:	4798      	blx	r3
 80198ce:	2300      	movs	r3, #0
 80198d0:	6960      	ldr	r0, [r4, #20]
 80198d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80198d6:	b130      	cbz	r0, 80198e6 <_ZN8touchgfx3HAL4tickEv+0xda>
 80198d8:	6803      	ldr	r3, [r0, #0]
 80198da:	f10d 0107 	add.w	r1, sp, #7
 80198de:	68db      	ldr	r3, [r3, #12]
 80198e0:	4798      	blx	r3
 80198e2:	2800      	cmp	r0, #0
 80198e4:	d149      	bne.n	801997a <_ZN8touchgfx3HAL4tickEv+0x16e>
 80198e6:	f104 0018 	add.w	r0, r4, #24
 80198ea:	f004 fc9b 	bl	801e224 <_ZN8touchgfx8Gestures4tickEv>
 80198ee:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80198f2:	b30b      	cbz	r3, 8019938 <_ZN8touchgfx3HAL4tickEv+0x12c>
 80198f4:	6920      	ldr	r0, [r4, #16]
 80198f6:	6803      	ldr	r3, [r0, #0]
 80198f8:	691b      	ldr	r3, [r3, #16]
 80198fa:	4798      	blx	r3
 80198fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80198fe:	4606      	mov	r6, r0
 8019900:	b903      	cbnz	r3, 8019904 <_ZN8touchgfx3HAL4tickEv+0xf8>
 8019902:	6620      	str	r0, [r4, #96]	; 0x60
 8019904:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8019906:	4a22      	ldr	r2, [pc, #136]	; (8019990 <_ZN8touchgfx3HAL4tickEv+0x184>)
 8019908:	1af3      	subs	r3, r6, r3
 801990a:	4293      	cmp	r3, r2
 801990c:	d914      	bls.n	8019938 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801990e:	6920      	ldr	r0, [r4, #16]
 8019910:	6803      	ldr	r3, [r0, #0]
 8019912:	699b      	ldr	r3, [r3, #24]
 8019914:	4798      	blx	r3
 8019916:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8019918:	2264      	movs	r2, #100	; 0x64
 801991a:	1af3      	subs	r3, r6, r3
 801991c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019920:	fbb0 f0f3 	udiv	r0, r0, r3
 8019924:	2800      	cmp	r0, #0
 8019926:	dc1e      	bgt.n	8019966 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8019928:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801992c:	6920      	ldr	r0, [r4, #16]
 801992e:	2100      	movs	r1, #0
 8019930:	6803      	ldr	r3, [r0, #0]
 8019932:	69db      	ldr	r3, [r3, #28]
 8019934:	4798      	blx	r3
 8019936:	6626      	str	r6, [r4, #96]	; 0x60
 8019938:	f001 fa6a 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 801993c:	6803      	ldr	r3, [r0, #0]
 801993e:	2100      	movs	r1, #0
 8019940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019942:	4798      	blx	r3
 8019944:	6823      	ldr	r3, [r4, #0]
 8019946:	4620      	mov	r0, r4
 8019948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801994c:	4798      	blx	r3
 801994e:	2001      	movs	r0, #1
 8019950:	f7fa fb52 	bl	8013ff8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019954:	2300      	movs	r3, #0
 8019956:	702b      	strb	r3, [r5, #0]
 8019958:	b004      	add	sp, #16
 801995a:	bd70      	pop	{r4, r5, r6, pc}
 801995c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019960:	4620      	mov	r0, r4
 8019962:	4798      	blx	r3
 8019964:	e7b3      	b.n	80198ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019966:	2863      	cmp	r0, #99	; 0x63
 8019968:	bfcb      	itete	gt
 801996a:	2300      	movgt	r3, #0
 801996c:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019970:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 8019974:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 8019978:	e7d8      	b.n	801992c <_ZN8touchgfx3HAL4tickEv+0x120>
 801997a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801997c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019980:	6803      	ldr	r3, [r0, #0]
 8019982:	68db      	ldr	r3, [r3, #12]
 8019984:	4798      	blx	r3
 8019986:	e7ae      	b.n	80198e6 <_ZN8touchgfx3HAL4tickEv+0xda>
 8019988:	20009ac0 	.word	0x20009ac0
 801998c:	20009ac1 	.word	0x20009ac1
 8019990:	05f5e100 	.word	0x05f5e100

08019994 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019994:	f7f6 bc82 	b.w	801029c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019998 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019998:	6481      	str	r1, [r0, #72]	; 0x48
 801999a:	3018      	adds	r0, #24
 801999c:	f004 bc40 	b.w	801e220 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080199a0 <_ZN8touchgfx3HAL5touchEll>:
 80199a0:	b530      	push	{r4, r5, lr}
 80199a2:	b085      	sub	sp, #20
 80199a4:	4604      	mov	r4, r0
 80199a6:	a802      	add	r0, sp, #8
 80199a8:	9102      	str	r1, [sp, #8]
 80199aa:	9203      	str	r2, [sp, #12]
 80199ac:	f001 f860 	bl	801aa70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80199b0:	a903      	add	r1, sp, #12
 80199b2:	a802      	add	r0, sp, #8
 80199b4:	f001 f8aa 	bl	801ab0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80199b8:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 80199bc:	9d02      	ldr	r5, [sp, #8]
 80199be:	f104 0018 	add.w	r0, r4, #24
 80199c2:	9b03      	ldr	r3, [sp, #12]
 80199c4:	b179      	cbz	r1, 80199e6 <_ZN8touchgfx3HAL5touchEll+0x46>
 80199c6:	b29b      	uxth	r3, r3
 80199c8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80199cc:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	b2ab      	uxth	r3, r5
 80199d4:	f004 fc34 	bl	801e240 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80199d8:	b118      	cbz	r0, 80199e2 <_ZN8touchgfx3HAL5touchEll+0x42>
 80199da:	9b02      	ldr	r3, [sp, #8]
 80199dc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80199de:	9b03      	ldr	r3, [sp, #12]
 80199e0:	6523      	str	r3, [r4, #80]	; 0x50
 80199e2:	b005      	add	sp, #20
 80199e4:	bd30      	pop	{r4, r5, pc}
 80199e6:	b29b      	uxth	r3, r3
 80199e8:	b2aa      	uxth	r2, r5
 80199ea:	f004 fc6d 	bl	801e2c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80199ee:	2301      	movs	r3, #1
 80199f0:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 80199f4:	e7f1      	b.n	80199da <_ZN8touchgfx3HAL5touchEll+0x3a>

080199f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80199f6:	b530      	push	{r4, r5, lr}
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d04e      	beq.n	8019a9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80199fc:	ea81 0002 	eor.w	r0, r1, r2
 8019a00:	07c0      	lsls	r0, r0, #31
 8019a02:	d508      	bpl.n	8019a16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8019a04:	3a01      	subs	r2, #1
 8019a06:	440b      	add	r3, r1
 8019a08:	4299      	cmp	r1, r3
 8019a0a:	d046      	beq.n	8019a9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8019a0c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019a10:	f801 0b01 	strb.w	r0, [r1], #1
 8019a14:	e7f8      	b.n	8019a08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8019a16:	07d5      	lsls	r5, r2, #31
 8019a18:	bf42      	ittt	mi
 8019a1a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8019a1e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8019a22:	f801 0b01 	strbmi.w	r0, [r1], #1
 8019a26:	2b01      	cmp	r3, #1
 8019a28:	d915      	bls.n	8019a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019a2a:	ea81 0002 	eor.w	r0, r1, r2
 8019a2e:	0784      	lsls	r4, r0, #30
 8019a30:	d01f      	beq.n	8019a72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 8019a32:	1e95      	subs	r5, r2, #2
 8019a34:	460c      	mov	r4, r1
 8019a36:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8019a3a:	f824 0b02 	strh.w	r0, [r4], #2
 8019a3e:	1b18      	subs	r0, r3, r4
 8019a40:	4408      	add	r0, r1
 8019a42:	2801      	cmp	r0, #1
 8019a44:	d8f7      	bhi.n	8019a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 8019a46:	1e98      	subs	r0, r3, #2
 8019a48:	f003 0301 	and.w	r3, r3, #1
 8019a4c:	f020 0001 	bic.w	r0, r0, #1
 8019a50:	3002      	adds	r0, #2
 8019a52:	4401      	add	r1, r0
 8019a54:	4402      	add	r2, r0
 8019a56:	3a01      	subs	r2, #1
 8019a58:	440b      	add	r3, r1
 8019a5a:	4299      	cmp	r1, r3
 8019a5c:	d01d      	beq.n	8019a9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8019a5e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019a62:	f801 0b01 	strb.w	r0, [r1], #1
 8019a66:	e7f8      	b.n	8019a5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 8019a68:	f855 4f04 	ldr.w	r4, [r5, #4]!
 8019a6c:	f840 4b04 	str.w	r4, [r0], #4
 8019a70:	e008      	b.n	8019a84 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8019a72:	0790      	lsls	r0, r2, #30
 8019a74:	d004      	beq.n	8019a80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 8019a76:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019a7a:	3b02      	subs	r3, #2
 8019a7c:	f821 0b02 	strh.w	r0, [r1], #2
 8019a80:	1f15      	subs	r5, r2, #4
 8019a82:	4608      	mov	r0, r1
 8019a84:	1a1c      	subs	r4, r3, r0
 8019a86:	440c      	add	r4, r1
 8019a88:	2c03      	cmp	r4, #3
 8019a8a:	d8ed      	bhi.n	8019a68 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 8019a8c:	f023 0003 	bic.w	r0, r3, #3
 8019a90:	f003 0303 	and.w	r3, r3, #3
 8019a94:	4402      	add	r2, r0
 8019a96:	4401      	add	r1, r0
 8019a98:	e7dd      	b.n	8019a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019a9a:	2001      	movs	r0, #1
 8019a9c:	bd30      	pop	{r4, r5, pc}

08019a9e <_ZN8touchgfx3HAL7noTouchEv>:
 8019a9e:	b510      	push	{r4, lr}
 8019aa0:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	b153      	cbz	r3, 8019abe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019aa8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8019aac:	2101      	movs	r1, #1
 8019aae:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8019ab2:	3018      	adds	r0, #24
 8019ab4:	f004 fc08 	bl	801e2c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019ab8:	2300      	movs	r3, #0
 8019aba:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8019abe:	bd10      	pop	{r4, pc}

08019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019ac0:	4b07      	ldr	r3, [pc, #28]	; (8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019ac2:	b510      	push	{r4, lr}
 8019ac4:	781b      	ldrb	r3, [r3, #0]
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	b12b      	cbz	r3, 8019ad6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 8019aca:	6803      	ldr	r3, [r0, #0]
 8019acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ace:	4798      	blx	r3
 8019ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019ad2:	4283      	cmp	r3, r0
 8019ad4:	d001      	beq.n	8019ada <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019ad6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8019ad8:	bd10      	pop	{r4, pc}
 8019ada:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019adc:	bd10      	pop	{r4, pc}
 8019ade:	bf00      	nop
 8019ae0:	20009aba 	.word	0x20009aba

08019ae4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019ae4:	4b0a      	ldr	r3, [pc, #40]	; (8019b10 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 8019ae6:	b510      	push	{r4, lr}
 8019ae8:	781b      	ldrb	r3, [r3, #0]
 8019aea:	4604      	mov	r4, r0
 8019aec:	b12b      	cbz	r3, 8019afa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 8019aee:	f7f6 fbc7 	bl	8010280 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019af2:	4620      	mov	r0, r4
 8019af4:	f7ff ffe4 	bl	8019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019af8:	bd10      	pop	{r4, pc}
 8019afa:	6840      	ldr	r0, [r0, #4]
 8019afc:	f000 fb3e 	bl	801a17c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019b00:	2800      	cmp	r0, #0
 8019b02:	d0f4      	beq.n	8019aee <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 8019b04:	6862      	ldr	r2, [r4, #4]
 8019b06:	7a53      	ldrb	r3, [r2, #9]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d0fc      	beq.n	8019b06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019b0c:	e7ef      	b.n	8019aee <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 8019b0e:	bf00      	nop
 8019b10:	20009aba 	.word	0x20009aba

08019b14 <_ZN8touchgfx3HAL10initializeEv>:
 8019b14:	b510      	push	{r4, lr}
 8019b16:	4604      	mov	r4, r0
 8019b18:	f7f6 fb8e 	bl	8010238 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019b1c:	6860      	ldr	r0, [r4, #4]
 8019b1e:	6803      	ldr	r3, [r0, #0]
 8019b20:	68db      	ldr	r3, [r3, #12]
 8019b22:	4798      	blx	r3
 8019b24:	68e0      	ldr	r0, [r4, #12]
 8019b26:	6803      	ldr	r3, [r0, #0]
 8019b28:	689b      	ldr	r3, [r3, #8]
 8019b2a:	4798      	blx	r3
 8019b2c:	6823      	ldr	r3, [r4, #0]
 8019b2e:	4620      	mov	r0, r4
 8019b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b36:	4718      	bx	r3

08019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b3a:	461d      	mov	r5, r3
 8019b3c:	4b0b      	ldr	r3, [pc, #44]	; (8019b6c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019b3e:	4617      	mov	r7, r2
 8019b40:	460e      	mov	r6, r1
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	6898      	ldr	r0, [r3, #8]
 8019b46:	6803      	ldr	r3, [r0, #0]
 8019b48:	6a1b      	ldr	r3, [r3, #32]
 8019b4a:	4798      	blx	r3
 8019b4c:	4b08      	ldr	r3, [pc, #32]	; (8019b70 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 8019b4e:	2810      	cmp	r0, #16
 8019b50:	bf15      	itete	ne
 8019b52:	881c      	ldrhne	r4, [r3, #0]
 8019b54:	8818      	ldrheq	r0, [r3, #0]
 8019b56:	fb07 6204 	mlane	r2, r7, r4, r6
 8019b5a:	fb07 6200 	mlaeq	r2, r7, r0, r6
 8019b5e:	bf16      	itet	ne
 8019b60:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 8019b64:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 8019b68:	18a8      	addne	r0, r5, r2
 8019b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b6c:	20009abc 	.word	0x20009abc
 8019b70:	20009ab6 	.word	0x20009ab6

08019b74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8019b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b78:	b088      	sub	sp, #32
 8019b7a:	4698      	mov	r8, r3
 8019b7c:	4617      	mov	r7, r2
 8019b7e:	2200      	movs	r2, #0
 8019b80:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019b84:	4604      	mov	r4, r0
 8019b86:	9206      	str	r2, [sp, #24]
 8019b88:	2bff      	cmp	r3, #255	; 0xff
 8019b8a:	f88d 301c 	strb.w	r3, [sp, #28]
 8019b8e:	4b1d      	ldr	r3, [pc, #116]	; (8019c04 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 8019b90:	bf0c      	ite	eq
 8019b92:	2201      	moveq	r2, #1
 8019b94:	2204      	movne	r2, #4
 8019b96:	881b      	ldrh	r3, [r3, #0]
 8019b98:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019b9c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019ba0:	9201      	str	r2, [sp, #4]
 8019ba2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019ba6:	9102      	str	r1, [sp, #8]
 8019ba8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019bac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019bb0:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019bb4:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019bb8:	f7ff ff82 	bl	8019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019bbc:	4642      	mov	r2, r8
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	4639      	mov	r1, r7
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	f7ff ffb8 	bl	8019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019bc8:	9003      	str	r0, [sp, #12]
 8019bca:	b106      	cbz	r6, 8019bce <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 8019bcc:	b935      	cbnz	r5, 8019bdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 8019bce:	4b0e      	ldr	r3, [pc, #56]	; (8019c08 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 8019bd0:	f240 1143 	movw	r1, #323	; 0x143
 8019bd4:	4a0d      	ldr	r2, [pc, #52]	; (8019c0c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 8019bd6:	480e      	ldr	r0, [pc, #56]	; (8019c10 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 8019bd8:	f004 fbee 	bl	801e3b8 <__assert_func>
 8019bdc:	6823      	ldr	r3, [r4, #0]
 8019bde:	4620      	mov	r0, r4
 8019be0:	9d01      	ldr	r5, [sp, #4]
 8019be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019be4:	4798      	blx	r3
 8019be6:	4228      	tst	r0, r5
 8019be8:	d104      	bne.n	8019bf4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 8019bea:	4b0a      	ldr	r3, [pc, #40]	; (8019c14 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 8019bec:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8019bf0:	4a06      	ldr	r2, [pc, #24]	; (8019c0c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 8019bf2:	e7f0      	b.n	8019bd6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 8019bf4:	6860      	ldr	r0, [r4, #4]
 8019bf6:	a901      	add	r1, sp, #4
 8019bf8:	6803      	ldr	r3, [r0, #0]
 8019bfa:	685b      	ldr	r3, [r3, #4]
 8019bfc:	4798      	blx	r3
 8019bfe:	b008      	add	sp, #32
 8019c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c04:	20009ab6 	.word	0x20009ab6
 8019c08:	080208f1 	.word	0x080208f1
 8019c0c:	08020b9f 	.word	0x08020b9f
 8019c10:	08020929 	.word	0x08020929
 8019c14:	0802094f 	.word	0x0802094f

08019c18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1c:	4698      	mov	r8, r3
 8019c1e:	b088      	sub	sp, #32
 8019c20:	2300      	movs	r3, #0
 8019c22:	4617      	mov	r7, r2
 8019c24:	4604      	mov	r4, r0
 8019c26:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019c2a:	9306      	str	r3, [sp, #24]
 8019c2c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019c30:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019c34:	9301      	str	r3, [sp, #4]
 8019c36:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019c3a:	9102      	str	r1, [sp, #8]
 8019c3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019c40:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019c44:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019c48:	f88d 301c 	strb.w	r3, [sp, #28]
 8019c4c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019c50:	f7ff ff36 	bl	8019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019c54:	4642      	mov	r2, r8
 8019c56:	4603      	mov	r3, r0
 8019c58:	4639      	mov	r1, r7
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	f7ff ff6c 	bl	8019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019c60:	4b11      	ldr	r3, [pc, #68]	; (8019ca8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 8019c62:	9003      	str	r0, [sp, #12]
 8019c64:	881b      	ldrh	r3, [r3, #0]
 8019c66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c6a:	b106      	cbz	r6, 8019c6e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 8019c6c:	b935      	cbnz	r5, 8019c7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 8019c6e:	4b0f      	ldr	r3, [pc, #60]	; (8019cac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 8019c70:	f240 1153 	movw	r1, #339	; 0x153
 8019c74:	4a0e      	ldr	r2, [pc, #56]	; (8019cb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 8019c76:	480f      	ldr	r0, [pc, #60]	; (8019cb4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 8019c78:	f004 fb9e 	bl	801e3b8 <__assert_func>
 8019c7c:	6823      	ldr	r3, [r4, #0]
 8019c7e:	4620      	mov	r0, r4
 8019c80:	9d01      	ldr	r5, [sp, #4]
 8019c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c84:	4798      	blx	r3
 8019c86:	4228      	tst	r0, r5
 8019c88:	d104      	bne.n	8019c94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 8019c8a:	4b0b      	ldr	r3, [pc, #44]	; (8019cb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 8019c8c:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8019c90:	4a07      	ldr	r2, [pc, #28]	; (8019cb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 8019c92:	e7f0      	b.n	8019c76 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 8019c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019c96:	a901      	add	r1, sp, #4
 8019c98:	6860      	ldr	r0, [r4, #4]
 8019c9a:	9306      	str	r3, [sp, #24]
 8019c9c:	6803      	ldr	r3, [r0, #0]
 8019c9e:	685b      	ldr	r3, [r3, #4]
 8019ca0:	4798      	blx	r3
 8019ca2:	b008      	add	sp, #32
 8019ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ca8:	20009ab6 	.word	0x20009ab6
 8019cac:	080208f1 	.word	0x080208f1
 8019cb0:	08020a3c 	.word	0x08020a3c
 8019cb4:	08020929 	.word	0x08020929
 8019cb8:	0802094f 	.word	0x0802094f

08019cbc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8019cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cc0:	b088      	sub	sp, #32
 8019cc2:	4698      	mov	r8, r3
 8019cc4:	4617      	mov	r7, r2
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019ccc:	4604      	mov	r4, r0
 8019cce:	9206      	str	r2, [sp, #24]
 8019cd0:	2bff      	cmp	r3, #255	; 0xff
 8019cd2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019cd6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019cda:	bf0c      	ite	eq
 8019cdc:	2220      	moveq	r2, #32
 8019cde:	2240      	movne	r2, #64	; 0x40
 8019ce0:	9102      	str	r1, [sp, #8]
 8019ce2:	9201      	str	r2, [sp, #4]
 8019ce4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019ce8:	f88d 301c 	strb.w	r3, [sp, #28]
 8019cec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019cf0:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019cf4:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019cf8:	f7ff fee2 	bl	8019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019cfc:	4642      	mov	r2, r8
 8019cfe:	4603      	mov	r3, r0
 8019d00:	4639      	mov	r1, r7
 8019d02:	4620      	mov	r0, r4
 8019d04:	f7ff ff18 	bl	8019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019d08:	4b10      	ldr	r3, [pc, #64]	; (8019d4c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 8019d0a:	9003      	str	r0, [sp, #12]
 8019d0c:	881b      	ldrh	r3, [r3, #0]
 8019d0e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d12:	b106      	cbz	r6, 8019d16 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 8019d14:	b935      	cbnz	r5, 8019d24 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 8019d16:	4b0e      	ldr	r3, [pc, #56]	; (8019d50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 8019d18:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8019d1c:	4a0d      	ldr	r2, [pc, #52]	; (8019d54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 8019d1e:	480e      	ldr	r0, [pc, #56]	; (8019d58 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 8019d20:	f004 fb4a 	bl	801e3b8 <__assert_func>
 8019d24:	6823      	ldr	r3, [r4, #0]
 8019d26:	4620      	mov	r0, r4
 8019d28:	9d01      	ldr	r5, [sp, #4]
 8019d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d2c:	4798      	blx	r3
 8019d2e:	4228      	tst	r0, r5
 8019d30:	d104      	bne.n	8019d3c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 8019d32:	4b0a      	ldr	r3, [pc, #40]	; (8019d5c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 8019d34:	f240 1167 	movw	r1, #359	; 0x167
 8019d38:	4a06      	ldr	r2, [pc, #24]	; (8019d54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 8019d3a:	e7f0      	b.n	8019d1e <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 8019d3c:	6860      	ldr	r0, [r4, #4]
 8019d3e:	a901      	add	r1, sp, #4
 8019d40:	6803      	ldr	r3, [r0, #0]
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	4798      	blx	r3
 8019d46:	b008      	add	sp, #32
 8019d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d4c:	20009ab6 	.word	0x20009ab6
 8019d50:	080208f1 	.word	0x080208f1
 8019d54:	08020ae0 	.word	0x08020ae0
 8019d58:	08020929 	.word	0x08020929
 8019d5c:	0802094f 	.word	0x0802094f

08019d60 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8019d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d64:	b089      	sub	sp, #36	; 0x24
 8019d66:	4699      	mov	r9, r3
 8019d68:	4604      	mov	r4, r0
 8019d6a:	2500      	movs	r5, #0
 8019d6c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8019d70:	4690      	mov	r8, r2
 8019d72:	460f      	mov	r7, r1
 8019d74:	9506      	str	r5, [sp, #24]
 8019d76:	2eff      	cmp	r6, #255	; 0xff
 8019d78:	9502      	str	r5, [sp, #8]
 8019d7a:	bf0c      	ite	eq
 8019d7c:	2302      	moveq	r3, #2
 8019d7e:	2308      	movne	r3, #8
 8019d80:	9301      	str	r3, [sp, #4]
 8019d82:	f7ff fe9d 	bl	8019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019d86:	464a      	mov	r2, r9
 8019d88:	4603      	mov	r3, r0
 8019d8a:	4641      	mov	r1, r8
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	f7ff fed3 	bl	8019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019d92:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019d96:	f8ad 5014 	strh.w	r5, [sp, #20]
 8019d9a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8019d9e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019da2:	9d01      	ldr	r5, [sp, #4]
 8019da4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019da8:	4b0e      	ldr	r3, [pc, #56]	; (8019de4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 8019daa:	9003      	str	r0, [sp, #12]
 8019dac:	4620      	mov	r0, r4
 8019dae:	881b      	ldrh	r3, [r3, #0]
 8019db0:	9706      	str	r7, [sp, #24]
 8019db2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019db6:	6823      	ldr	r3, [r4, #0]
 8019db8:	f88d 601c 	strb.w	r6, [sp, #28]
 8019dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019dbe:	4798      	blx	r3
 8019dc0:	4228      	tst	r0, r5
 8019dc2:	d106      	bne.n	8019dd2 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 8019dc4:	4b08      	ldr	r3, [pc, #32]	; (8019de8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 8019dc6:	f240 1179 	movw	r1, #377	; 0x179
 8019dca:	4a08      	ldr	r2, [pc, #32]	; (8019dec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 8019dcc:	4808      	ldr	r0, [pc, #32]	; (8019df0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 8019dce:	f004 faf3 	bl	801e3b8 <__assert_func>
 8019dd2:	6860      	ldr	r0, [r4, #4]
 8019dd4:	a901      	add	r1, sp, #4
 8019dd6:	6803      	ldr	r3, [r0, #0]
 8019dd8:	685b      	ldr	r3, [r3, #4]
 8019dda:	4798      	blx	r3
 8019ddc:	b009      	add	sp, #36	; 0x24
 8019dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019de2:	bf00      	nop
 8019de4:	20009ab6 	.word	0x20009ab6
 8019de8:	0802094f 	.word	0x0802094f
 8019dec:	08020c16 	.word	0x08020c16
 8019df0:	08020929 	.word	0x08020929

08019df4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019df4:	4b1d      	ldr	r3, [pc, #116]	; (8019e6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 8019df6:	b570      	push	{r4, r5, r6, lr}
 8019df8:	b08a      	sub	sp, #40	; 0x28
 8019dfa:	781b      	ldrb	r3, [r3, #0]
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019e02:	b933      	cbnz	r3, 8019e12 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 8019e04:	4b1a      	ldr	r3, [pc, #104]	; (8019e70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 8019e06:	f240 1185 	movw	r1, #389	; 0x185
 8019e0a:	4a1a      	ldr	r2, [pc, #104]	; (8019e74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8019e0c:	481a      	ldr	r0, [pc, #104]	; (8019e78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 8019e0e:	f004 fad3 	bl	801e3b8 <__assert_func>
 8019e12:	2300      	movs	r3, #0
 8019e14:	f8bd 5000 	ldrh.w	r5, [sp]
 8019e18:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8019e1c:	9308      	str	r3, [sp, #32]
 8019e1e:	2301      	movs	r3, #1
 8019e20:	9303      	str	r3, [sp, #12]
 8019e22:	6803      	ldr	r3, [r0, #0]
 8019e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e26:	4798      	blx	r3
 8019e28:	4632      	mov	r2, r6
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	4629      	mov	r1, r5
 8019e2e:	4620      	mov	r0, r4
 8019e30:	f7ff fe82 	bl	8019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e36:	9004      	str	r0, [sp, #16]
 8019e38:	a903      	add	r1, sp, #12
 8019e3a:	9305      	str	r3, [sp, #20]
 8019e3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019e40:	6860      	ldr	r0, [r4, #4]
 8019e42:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019e46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019e4a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019e4e:	4b0b      	ldr	r3, [pc, #44]	; (8019e7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 8019e50:	881b      	ldrh	r3, [r3, #0]
 8019e52:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019e56:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019e5a:	23ff      	movs	r3, #255	; 0xff
 8019e5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019e60:	6803      	ldr	r3, [r0, #0]
 8019e62:	685b      	ldr	r3, [r3, #4]
 8019e64:	4798      	blx	r3
 8019e66:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019e68:	b00a      	add	sp, #40	; 0x28
 8019e6a:	bd70      	pop	{r4, r5, r6, pc}
 8019e6c:	20009abb 	.word	0x20009abb
 8019e70:	08020883 	.word	0x08020883
 8019e74:	08020b59 	.word	0x08020b59
 8019e78:	08020929 	.word	0x08020929
 8019e7c:	20009ab6 	.word	0x20009ab6

08019e80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e82:	461d      	mov	r5, r3
 8019e84:	b08b      	sub	sp, #44	; 0x2c
 8019e86:	2300      	movs	r3, #0
 8019e88:	4604      	mov	r4, r0
 8019e8a:	9308      	str	r3, [sp, #32]
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	9303      	str	r3, [sp, #12]
 8019e90:	6803      	ldr	r3, [r0, #0]
 8019e92:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019e96:	f8bd 6000 	ldrh.w	r6, [sp]
 8019e9a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ea0:	4798      	blx	r3
 8019ea2:	463a      	mov	r2, r7
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	4631      	mov	r1, r6
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f7ff fe45 	bl	8019b38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019eae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019eb2:	9004      	str	r0, [sp, #16]
 8019eb4:	a903      	add	r1, sp, #12
 8019eb6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019eba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019ebe:	6860      	ldr	r0, [r4, #4]
 8019ec0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ec4:	4b08      	ldr	r3, [pc, #32]	; (8019ee8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 8019ec6:	9505      	str	r5, [sp, #20]
 8019ec8:	881b      	ldrh	r3, [r3, #0]
 8019eca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ed0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019ed4:	23ff      	movs	r3, #255	; 0xff
 8019ed6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019eda:	6803      	ldr	r3, [r0, #0]
 8019edc:	685b      	ldr	r3, [r3, #4]
 8019ede:	4798      	blx	r3
 8019ee0:	4628      	mov	r0, r5
 8019ee2:	b00b      	add	sp, #44	; 0x2c
 8019ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	20009ab6 	.word	0x20009ab6

08019eec <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019eec:	b570      	push	{r4, r5, r6, lr}
 8019eee:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 8019ef2:	4604      	mov	r4, r0
 8019ef4:	b19b      	cbz	r3, 8019f1e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019ef6:	2002      	movs	r0, #2
 8019ef8:	f7fa f889 	bl	801400e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019efc:	2300      	movs	r3, #0
 8019efe:	4620      	mov	r0, r4
 8019f00:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8019f04:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019f08:	6823      	ldr	r3, [r4, #0]
 8019f0a:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8019f0e:	f7ff fdd7 	bl	8019ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019f12:	4601      	mov	r1, r0
 8019f14:	4620      	mov	r0, r4
 8019f16:	462b      	mov	r3, r5
 8019f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f1c:	4718      	bx	r3
 8019f1e:	bd70      	pop	{r4, r5, r6, pc}

08019f20 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8019f20:	b570      	push	{r4, r5, r6, lr}
 8019f22:	4605      	mov	r5, r0
 8019f24:	460c      	mov	r4, r1
 8019f26:	2003      	movs	r0, #3
 8019f28:	b149      	cbz	r1, 8019f3e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8019f2a:	f7fa f85a 	bl	8013fe2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019f2e:	6928      	ldr	r0, [r5, #16]
 8019f30:	b168      	cbz	r0, 8019f4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019f32:	6803      	ldr	r3, [r0, #0]
 8019f34:	2101      	movs	r1, #1
 8019f36:	695b      	ldr	r3, [r3, #20]
 8019f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f3c:	4718      	bx	r3
 8019f3e:	f7fa f85b 	bl	8013ff8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019f42:	6928      	ldr	r0, [r5, #16]
 8019f44:	b118      	cbz	r0, 8019f4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019f46:	6803      	ldr	r3, [r0, #0]
 8019f48:	4621      	mov	r1, r4
 8019f4a:	695b      	ldr	r3, [r3, #20]
 8019f4c:	e7f4      	b.n	8019f38 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8019f4e:	bd70      	pop	{r4, r5, r6, pc}

08019f50 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019f50:	4770      	bx	lr

08019f52 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019f52:	68c2      	ldr	r2, [r0, #12]
 8019f54:	6900      	ldr	r0, [r0, #16]
 8019f56:	1a13      	subs	r3, r2, r0
 8019f58:	4258      	negs	r0, r3
 8019f5a:	4158      	adcs	r0, r3
 8019f5c:	4770      	bx	lr

08019f5e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019f5e:	68c2      	ldr	r2, [r0, #12]
 8019f60:	6903      	ldr	r3, [r0, #16]
 8019f62:	1a9b      	subs	r3, r3, r2
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	bfdc      	itt	le
 8019f68:	6882      	ldrle	r2, [r0, #8]
 8019f6a:	189b      	addle	r3, r3, r2
 8019f6c:	2b01      	cmp	r3, #1
 8019f6e:	bfcc      	ite	gt
 8019f70:	2000      	movgt	r0, #0
 8019f72:	2001      	movle	r0, #1
 8019f74:	4770      	bx	lr

08019f76 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019f76:	6902      	ldr	r2, [r0, #16]
 8019f78:	6843      	ldr	r3, [r0, #4]
 8019f7a:	201c      	movs	r0, #28
 8019f7c:	fb00 3002 	mla	r0, r0, r2, r3
 8019f80:	4770      	bx	lr

08019f82 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019f82:	6803      	ldr	r3, [r0, #0]
 8019f84:	691b      	ldr	r3, [r3, #16]
 8019f86:	4718      	bx	r3

08019f88 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019f88:	4770      	bx	lr

08019f8a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019f8a:	4770      	bx	lr

08019f8c <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	b570      	push	{r4, r5, r6, lr}
 8019f90:	7203      	strb	r3, [r0, #8]
 8019f92:	4604      	mov	r4, r0
 8019f94:	6840      	ldr	r0, [r0, #4]
 8019f96:	6803      	ldr	r3, [r0, #0]
 8019f98:	699b      	ldr	r3, [r3, #24]
 8019f9a:	4798      	blx	r3
 8019f9c:	6803      	ldr	r3, [r0, #0]
 8019f9e:	4605      	mov	r5, r0
 8019fa0:	2b08      	cmp	r3, #8
 8019fa2:	d01e      	beq.n	8019fe2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019fa4:	d80b      	bhi.n	8019fbe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019fa6:	2b02      	cmp	r3, #2
 8019fa8:	d027      	beq.n	8019ffa <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019faa:	2b04      	cmp	r3, #4
 8019fac:	d011      	beq.n	8019fd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019fae:	2b01      	cmp	r3, #1
 8019fb0:	d028      	beq.n	801a004 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019fb2:	4b17      	ldr	r3, [pc, #92]	; (801a010 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019fb4:	218d      	movs	r1, #141	; 0x8d
 8019fb6:	4a17      	ldr	r2, [pc, #92]	; (801a014 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019fb8:	4817      	ldr	r0, [pc, #92]	; (801a018 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019fba:	f004 f9fd 	bl	801e3b8 <__assert_func>
 8019fbe:	2b40      	cmp	r3, #64	; 0x40
 8019fc0:	d020      	beq.n	801a004 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019fc2:	d801      	bhi.n	8019fc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019fc4:	2b20      	cmp	r3, #32
 8019fc6:	e7f3      	b.n	8019fb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019fc8:	2b80      	cmp	r3, #128	; 0x80
 8019fca:	d01b      	beq.n	801a004 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019fd0:	e7ee      	b.n	8019fb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019fd2:	6823      	ldr	r3, [r4, #0]
 8019fd4:	7e01      	ldrb	r1, [r0, #24]
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fda:	4798      	blx	r3
 8019fdc:	6823      	ldr	r3, [r4, #0]
 8019fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fe0:	e006      	b.n	8019ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019fe2:	6823      	ldr	r3, [r4, #0]
 8019fe4:	7e01      	ldrb	r1, [r0, #24]
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fea:	4798      	blx	r3
 8019fec:	6823      	ldr	r3, [r4, #0]
 8019fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ff0:	4629      	mov	r1, r5
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ff8:	4718      	bx	r3
 8019ffa:	6823      	ldr	r3, [r4, #0]
 8019ffc:	4620      	mov	r0, r4
 8019ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a000:	4798      	blx	r3
 801a002:	e7f3      	b.n	8019fec <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801a004:	6823      	ldr	r3, [r4, #0]
 801a006:	4620      	mov	r0, r4
 801a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a00a:	4798      	blx	r3
 801a00c:	e7e6      	b.n	8019fdc <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801a00e:	bf00      	nop
 801a010:	08020c81 	.word	0x08020c81
 801a014:	08020d8c 	.word	0x08020d8c
 801a018:	08020ca6 	.word	0x08020ca6

0801a01c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a01c:	b570      	push	{r4, r5, r6, lr}
 801a01e:	4604      	mov	r4, r0
 801a020:	460e      	mov	r6, r1
 801a022:	6860      	ldr	r0, [r4, #4]
 801a024:	6803      	ldr	r3, [r0, #0]
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	4798      	blx	r3
 801a02a:	2800      	cmp	r0, #0
 801a02c:	d1f9      	bne.n	801a022 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a02e:	4d0b      	ldr	r5, [pc, #44]	; (801a05c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801a030:	6828      	ldr	r0, [r5, #0]
 801a032:	6803      	ldr	r3, [r0, #0]
 801a034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a036:	4798      	blx	r3
 801a038:	f7f6 f93e 	bl	80102b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a03c:	6860      	ldr	r0, [r4, #4]
 801a03e:	4631      	mov	r1, r6
 801a040:	6803      	ldr	r3, [r0, #0]
 801a042:	689b      	ldr	r3, [r3, #8]
 801a044:	4798      	blx	r3
 801a046:	6823      	ldr	r3, [r4, #0]
 801a048:	4620      	mov	r0, r4
 801a04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a04c:	4798      	blx	r3
 801a04e:	6828      	ldr	r0, [r5, #0]
 801a050:	6803      	ldr	r3, [r0, #0]
 801a052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a058:	4718      	bx	r3
 801a05a:	bf00      	nop
 801a05c:	20009abc 	.word	0x20009abc

0801a060 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a060:	b508      	push	{r3, lr}
 801a062:	f7f6 f90d 	bl	8010280 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a06a:	f7f6 b917 	b.w	801029c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a06e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a06e:	b570      	push	{r4, r5, r6, lr}
 801a070:	4604      	mov	r4, r0
 801a072:	6840      	ldr	r0, [r0, #4]
 801a074:	6803      	ldr	r3, [r0, #0]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4798      	blx	r3
 801a07a:	4605      	mov	r5, r0
 801a07c:	b908      	cbnz	r0, 801a082 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801a07e:	7a23      	ldrb	r3, [r4, #8]
 801a080:	b973      	cbnz	r3, 801a0a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801a082:	6860      	ldr	r0, [r4, #4]
 801a084:	6803      	ldr	r3, [r0, #0]
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	4798      	blx	r3
 801a08a:	b928      	cbnz	r0, 801a098 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801a08c:	6823      	ldr	r3, [r4, #0]
 801a08e:	4620      	mov	r0, r4
 801a090:	6a1b      	ldr	r3, [r3, #32]
 801a092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a096:	4718      	bx	r3
 801a098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a09c:	f7f6 b918 	b.w	80102d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801a0a0:	6860      	ldr	r0, [r4, #4]
 801a0a2:	6803      	ldr	r3, [r0, #0]
 801a0a4:	695b      	ldr	r3, [r3, #20]
 801a0a6:	4798      	blx	r3
 801a0a8:	7225      	strb	r5, [r4, #8]
 801a0aa:	e7ea      	b.n	801a082 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801a0ac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a0ac:	b510      	push	{r4, lr}
 801a0ae:	68c3      	ldr	r3, [r0, #12]
 801a0b0:	6902      	ldr	r2, [r0, #16]
 801a0b2:	1ad2      	subs	r2, r2, r3
 801a0b4:	2a00      	cmp	r2, #0
 801a0b6:	bfdc      	itt	le
 801a0b8:	6884      	ldrle	r4, [r0, #8]
 801a0ba:	1912      	addle	r2, r2, r4
 801a0bc:	2a01      	cmp	r2, #1
 801a0be:	dd17      	ble.n	801a0f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801a0c0:	6842      	ldr	r2, [r0, #4]
 801a0c2:	241c      	movs	r4, #28
 801a0c4:	fb04 2303 	mla	r3, r4, r3, r2
 801a0c8:	f101 0218 	add.w	r2, r1, #24
 801a0cc:	f851 4b04 	ldr.w	r4, [r1], #4
 801a0d0:	4291      	cmp	r1, r2
 801a0d2:	f843 4b04 	str.w	r4, [r3], #4
 801a0d6:	d1f9      	bne.n	801a0cc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801a0d8:	780a      	ldrb	r2, [r1, #0]
 801a0da:	701a      	strb	r2, [r3, #0]
 801a0dc:	68c3      	ldr	r3, [r0, #12]
 801a0de:	6882      	ldr	r2, [r0, #8]
 801a0e0:	f3bf 8f5b 	dmb	ish
 801a0e4:	3301      	adds	r3, #1
 801a0e6:	4293      	cmp	r3, r2
 801a0e8:	bfa8      	it	ge
 801a0ea:	1a9b      	subge	r3, r3, r2
 801a0ec:	60c3      	str	r3, [r0, #12]
 801a0ee:	bd10      	pop	{r4, pc}
 801a0f0:	4b02      	ldr	r3, [pc, #8]	; (801a0fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801a0f2:	213b      	movs	r1, #59	; 0x3b
 801a0f4:	4a02      	ldr	r2, [pc, #8]	; (801a100 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801a0f6:	4803      	ldr	r0, [pc, #12]	; (801a104 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801a0f8:	f004 f95e 	bl	801e3b8 <__assert_func>
 801a0fc:	08020ccc 	.word	0x08020ccc
 801a100:	08020dbc 	.word	0x08020dbc
 801a104:	08020ca6 	.word	0x08020ca6

0801a108 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a108:	b510      	push	{r4, lr}
 801a10a:	6803      	ldr	r3, [r0, #0]
 801a10c:	4604      	mov	r4, r0
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	4798      	blx	r3
 801a112:	b128      	cbz	r0, 801a120 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801a114:	4b07      	ldr	r3, [pc, #28]	; (801a134 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801a116:	2141      	movs	r1, #65	; 0x41
 801a118:	4a07      	ldr	r2, [pc, #28]	; (801a138 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801a11a:	4808      	ldr	r0, [pc, #32]	; (801a13c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801a11c:	f004 f94c 	bl	801e3b8 <__assert_func>
 801a120:	6923      	ldr	r3, [r4, #16]
 801a122:	68a2      	ldr	r2, [r4, #8]
 801a124:	f3bf 8f5b 	dmb	ish
 801a128:	3301      	adds	r3, #1
 801a12a:	4293      	cmp	r3, r2
 801a12c:	bfa8      	it	ge
 801a12e:	1a9b      	subge	r3, r3, r2
 801a130:	6123      	str	r3, [r4, #16]
 801a132:	bd10      	pop	{r4, pc}
 801a134:	08020cef 	.word	0x08020cef
 801a138:	08020e0a 	.word	0x08020e0a
 801a13c:	08020ca6 	.word	0x08020ca6

0801a140 <_ZN8touchgfx13DMA_Interface5startEv>:
 801a140:	b510      	push	{r4, lr}
 801a142:	4604      	mov	r4, r0
 801a144:	6840      	ldr	r0, [r0, #4]
 801a146:	6803      	ldr	r3, [r0, #0]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	4798      	blx	r3
 801a14c:	b948      	cbnz	r0, 801a162 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a14e:	7a63      	ldrb	r3, [r4, #9]
 801a150:	b13b      	cbz	r3, 801a162 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a152:	7a23      	ldrb	r3, [r4, #8]
 801a154:	b92b      	cbnz	r3, 801a162 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a156:	6823      	ldr	r3, [r4, #0]
 801a158:	4620      	mov	r0, r4
 801a15a:	6a1b      	ldr	r3, [r3, #32]
 801a15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a160:	4718      	bx	r3
 801a162:	bd10      	pop	{r4, pc}

0801a164 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a164:	b510      	push	{r4, lr}
 801a166:	6082      	str	r2, [r0, #8]
 801a168:	2200      	movs	r2, #0
 801a16a:	4c03      	ldr	r4, [pc, #12]	; (801a178 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a16c:	6041      	str	r1, [r0, #4]
 801a16e:	6004      	str	r4, [r0, #0]
 801a170:	60c2      	str	r2, [r0, #12]
 801a172:	6102      	str	r2, [r0, #16]
 801a174:	bd10      	pop	{r4, pc}
 801a176:	bf00      	nop
 801a178:	08020d70 	.word	0x08020d70

0801a17c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a17c:	6840      	ldr	r0, [r0, #4]
 801a17e:	6803      	ldr	r3, [r0, #0]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	4718      	bx	r3

0801a184 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a184:	b538      	push	{r3, r4, r5, lr}
 801a186:	4604      	mov	r4, r0
 801a188:	2500      	movs	r5, #0
 801a18a:	9804      	ldr	r0, [sp, #16]
 801a18c:	7223      	strb	r3, [r4, #8]
 801a18e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a192:	8025      	strh	r5, [r4, #0]
 801a194:	60e5      	str	r5, [r4, #12]
 801a196:	82e5      	strh	r5, [r4, #22]
 801a198:	8325      	strh	r5, [r4, #24]
 801a19a:	8365      	strh	r5, [r4, #26]
 801a19c:	83a5      	strh	r5, [r4, #28]
 801a19e:	83e5      	strh	r5, [r4, #30]
 801a1a0:	8425      	strh	r5, [r4, #32]
 801a1a2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801a1a6:	6061      	str	r1, [r4, #4]
 801a1a8:	7263      	strb	r3, [r4, #9]
 801a1aa:	6120      	str	r0, [r4, #16]
 801a1ac:	82a2      	strh	r2, [r4, #20]
 801a1ae:	6803      	ldr	r3, [r0, #0]
 801a1b0:	695b      	ldr	r3, [r3, #20]
 801a1b2:	4798      	blx	r3
 801a1b4:	4605      	mov	r5, r0
 801a1b6:	b330      	cbz	r0, 801a206 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801a1b8:	6920      	ldr	r0, [r4, #16]
 801a1ba:	4629      	mov	r1, r5
 801a1bc:	6803      	ldr	r3, [r0, #0]
 801a1be:	68db      	ldr	r3, [r3, #12]
 801a1c0:	4798      	blx	r3
 801a1c2:	60e0      	str	r0, [r4, #12]
 801a1c4:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	7a81      	ldrb	r1, [r0, #10]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	bfb4      	ite	lt
 801a1d0:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801a1d4:	2300      	movge	r3, #0
 801a1d6:	430b      	orrs	r3, r1
 801a1d8:	8423      	strh	r3, [r4, #32]
 801a1da:	7a63      	ldrb	r3, [r4, #9]
 801a1dc:	2b04      	cmp	r3, #4
 801a1de:	d112      	bne.n	801a206 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801a1e0:	6920      	ldr	r0, [r4, #16]
 801a1e2:	4629      	mov	r1, r5
 801a1e4:	6803      	ldr	r3, [r0, #0]
 801a1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1e8:	4798      	blx	r3
 801a1ea:	68e2      	ldr	r2, [r4, #12]
 801a1ec:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801a1f0:	7a91      	ldrb	r1, [r2, #10]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	bfb4      	ite	lt
 801a1f6:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801a1fa:	2300      	movge	r3, #0
 801a1fc:	430b      	orrs	r3, r1
 801a1fe:	4418      	add	r0, r3
 801a200:	8c23      	ldrh	r3, [r4, #32]
 801a202:	4418      	add	r0, r3
 801a204:	8420      	strh	r0, [r4, #32]
 801a206:	4620      	mov	r0, r4
 801a208:	bd38      	pop	{r3, r4, r5, pc}

0801a20a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a20a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a20e:	2600      	movs	r6, #0
 801a210:	4682      	mov	sl, r0
 801a212:	460f      	mov	r7, r1
 801a214:	4693      	mov	fp, r2
 801a216:	46b1      	mov	r9, r6
 801a218:	46b0      	mov	r8, r6
 801a21a:	9301      	str	r3, [sp, #4]
 801a21c:	455e      	cmp	r6, fp
 801a21e:	da26      	bge.n	801a26e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801a220:	9901      	ldr	r1, [sp, #4]
 801a222:	4650      	mov	r0, sl
 801a224:	f001 fe86 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a228:	4605      	mov	r5, r0
 801a22a:	b300      	cbz	r0, 801a26e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801a22c:	280a      	cmp	r0, #10
 801a22e:	d01e      	beq.n	801a26e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801a230:	683b      	ldr	r3, [r7, #0]
 801a232:	4601      	mov	r1, r0
 801a234:	4638      	mov	r0, r7
 801a236:	68db      	ldr	r3, [r3, #12]
 801a238:	4798      	blx	r3
 801a23a:	4602      	mov	r2, r0
 801a23c:	b1a0      	cbz	r0, 801a268 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801a23e:	7a83      	ldrb	r3, [r0, #10]
 801a240:	4649      	mov	r1, r9
 801a242:	8885      	ldrh	r5, [r0, #4]
 801a244:	9300      	str	r3, [sp, #0]
 801a246:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a24a:	4638      	mov	r0, r7
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	683b      	ldr	r3, [r7, #0]
 801a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a252:	bfb4      	ite	lt
 801a254:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801a258:	2400      	movge	r4, #0
 801a25a:	4798      	blx	r3
 801a25c:	9b00      	ldr	r3, [sp, #0]
 801a25e:	431c      	orrs	r4, r3
 801a260:	4404      	add	r4, r0
 801a262:	44a0      	add	r8, r4
 801a264:	fa1f f888 	uxth.w	r8, r8
 801a268:	3601      	adds	r6, #1
 801a26a:	46a9      	mov	r9, r5
 801a26c:	e7d6      	b.n	801a21c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801a26e:	4640      	mov	r0, r8
 801a270:	b003      	add	sp, #12
 801a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a276 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a276:	2a02      	cmp	r2, #2
 801a278:	b530      	push	{r4, r5, lr}
 801a27a:	d011      	beq.n	801a2a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a27c:	2a03      	cmp	r2, #3
 801a27e:	d01c      	beq.n	801a2ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a280:	2a01      	cmp	r2, #1
 801a282:	d128      	bne.n	801a2d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801a284:	888b      	ldrh	r3, [r1, #4]
 801a286:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a28a:	8801      	ldrh	r1, [r0, #0]
 801a28c:	1a9b      	subs	r3, r3, r2
 801a28e:	8844      	ldrh	r4, [r0, #2]
 801a290:	1a5b      	subs	r3, r3, r1
 801a292:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a296:	8004      	strh	r4, [r0, #0]
 801a298:	8043      	strh	r3, [r0, #2]
 801a29a:	8081      	strh	r1, [r0, #4]
 801a29c:	80c2      	strh	r2, [r0, #6]
 801a29e:	bd30      	pop	{r4, r5, pc}
 801a2a0:	88cb      	ldrh	r3, [r1, #6]
 801a2a2:	88c2      	ldrh	r2, [r0, #6]
 801a2a4:	1a9b      	subs	r3, r3, r2
 801a2a6:	8842      	ldrh	r2, [r0, #2]
 801a2a8:	1a9b      	subs	r3, r3, r2
 801a2aa:	888a      	ldrh	r2, [r1, #4]
 801a2ac:	8881      	ldrh	r1, [r0, #4]
 801a2ae:	8043      	strh	r3, [r0, #2]
 801a2b0:	1a52      	subs	r2, r2, r1
 801a2b2:	8801      	ldrh	r1, [r0, #0]
 801a2b4:	1a52      	subs	r2, r2, r1
 801a2b6:	8002      	strh	r2, [r0, #0]
 801a2b8:	bd30      	pop	{r4, r5, pc}
 801a2ba:	88cb      	ldrh	r3, [r1, #6]
 801a2bc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a2c0:	8841      	ldrh	r1, [r0, #2]
 801a2c2:	1a9b      	subs	r3, r3, r2
 801a2c4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a2c8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a2cc:	1a5b      	subs	r3, r3, r1
 801a2ce:	8045      	strh	r5, [r0, #2]
 801a2d0:	8082      	strh	r2, [r0, #4]
 801a2d2:	8003      	strh	r3, [r0, #0]
 801a2d4:	80c4      	strh	r4, [r0, #6]
 801a2d6:	bd30      	pop	{r4, r5, pc}

0801a2d8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 801a2d8:	b570      	push	{r4, r5, r6, lr}
 801a2da:	b086      	sub	sp, #24
 801a2dc:	ad02      	add	r5, sp, #8
 801a2de:	e885 0006 	stmia.w	r5, {r1, r2}
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	ab0c      	add	r3, sp, #48	; 0x30
 801a2e6:	9305      	str	r3, [sp, #20]
 801a2e8:	4b0a      	ldr	r3, [pc, #40]	; (801a314 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 801a2ea:	685c      	ldr	r4, [r3, #4]
 801a2ec:	f014 0f01 	tst.w	r4, #1
 801a2f0:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a2f4:	bf1c      	itt	ne
 801a2f6:	681b      	ldrne	r3, [r3, #0]
 801a2f8:	5901      	ldrne	r1, [r0, r4]
 801a2fa:	4420      	add	r0, r4
 801a2fc:	bf0c      	ite	eq
 801a2fe:	681e      	ldreq	r6, [r3, #0]
 801a300:	58ce      	ldrne	r6, [r1, r3]
 801a302:	4629      	mov	r1, r5
 801a304:	9b05      	ldr	r3, [sp, #20]
 801a306:	9301      	str	r3, [sp, #4]
 801a308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a30a:	9300      	str	r3, [sp, #0]
 801a30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a30e:	47b0      	blx	r6
 801a310:	b006      	add	sp, #24
 801a312:	bd70      	pop	{r4, r5, r6, pc}
 801a314:	20000070 	.word	0x20000070

0801a318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a31c:	b097      	sub	sp, #92	; 0x5c
 801a31e:	9112      	str	r1, [sp, #72]	; 0x48
 801a320:	9313      	str	r3, [sp, #76]	; 0x4c
 801a322:	9921      	ldr	r1, [sp, #132]	; 0x84
 801a324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a326:	8809      	ldrh	r1, [r1, #0]
 801a328:	889b      	ldrh	r3, [r3, #4]
 801a32a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801a32c:	440b      	add	r3, r1
 801a32e:	920f      	str	r2, [sp, #60]	; 0x3c
 801a330:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 801a334:	b21b      	sxth	r3, r3
 801a336:	900e      	str	r0, [sp, #56]	; 0x38
 801a338:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 801a33c:	930d      	str	r3, [sp, #52]	; 0x34
 801a33e:	683b      	ldr	r3, [r7, #0]
 801a340:	7a59      	ldrb	r1, [r3, #9]
 801a342:	7a1b      	ldrb	r3, [r3, #8]
 801a344:	9111      	str	r1, [sp, #68]	; 0x44
 801a346:	9310      	str	r3, [sp, #64]	; 0x40
 801a348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a34a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a34e:	2a00      	cmp	r2, #0
 801a350:	d04b      	beq.n	801a3ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 801a352:	7c3b      	ldrb	r3, [r7, #16]
 801a354:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a356:	2b04      	cmp	r3, #4
 801a358:	bf0c      	ite	eq
 801a35a:	2302      	moveq	r3, #2
 801a35c:	2301      	movne	r3, #1
 801a35e:	4413      	add	r3, r2
 801a360:	2500      	movs	r5, #0
 801a362:	930c      	str	r3, [sp, #48]	; 0x30
 801a364:	46a9      	mov	r9, r5
 801a366:	462c      	mov	r4, r5
 801a368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a36a:	4599      	cmp	r9, r3
 801a36c:	da6a      	bge.n	801a444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801a36e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a370:	4599      	cmp	r9, r3
 801a372:	db3c      	blt.n	801a3ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a374:	6838      	ldr	r0, [r7, #0]
 801a376:	6803      	ldr	r3, [r0, #0]
 801a378:	695b      	ldr	r3, [r3, #20]
 801a37a:	4798      	blx	r3
 801a37c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a380:	4680      	mov	r8, r0
 801a382:	4298      	cmp	r0, r3
 801a384:	d045      	beq.n	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a386:	f242 030b 	movw	r3, #8203	; 0x200b
 801a38a:	4298      	cmp	r0, r3
 801a38c:	d041      	beq.n	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a38e:	2800      	cmp	r0, #0
 801a390:	d057      	beq.n	801a442 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a392:	280a      	cmp	r0, #10
 801a394:	d055      	beq.n	801a442 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a396:	6838      	ldr	r0, [r7, #0]
 801a398:	aa15      	add	r2, sp, #84	; 0x54
 801a39a:	4641      	mov	r1, r8
 801a39c:	6803      	ldr	r3, [r0, #0]
 801a39e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 801a3a2:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 801a3a6:	47d8      	blx	fp
 801a3a8:	4683      	mov	fp, r0
 801a3aa:	b328      	cbz	r0, 801a3f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 801a3ac:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801a3b0:	f1ba 0f00 	cmp.w	sl, #0
 801a3b4:	d031      	beq.n	801a41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 801a3b6:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 801a3ba:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801a3be:	2a00      	cmp	r2, #0
 801a3c0:	bfb4      	ite	lt
 801a3c2:	f44f 7580 	movlt.w	r5, #256	; 0x100
 801a3c6:	2500      	movge	r5, #0
 801a3c8:	f1ba 0f01 	cmp.w	sl, #1
 801a3cc:	ea45 0503 	orr.w	r5, r5, r3
 801a3d0:	d125      	bne.n	801a41e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 801a3d2:	1b76      	subs	r6, r6, r5
 801a3d4:	2c00      	cmp	r4, #0
 801a3d6:	d147      	bne.n	801a468 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a3d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a3da:	19ab      	adds	r3, r5, r6
 801a3dc:	4413      	add	r3, r2
 801a3de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a3e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a3e4:	4293      	cmp	r3, r2
 801a3e6:	da4a      	bge.n	801a47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801a3e8:	e02b      	b.n	801a442 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a3ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a3ec:	e7b8      	b.n	801a360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801a3ee:	4651      	mov	r1, sl
 801a3f0:	9824      	ldr	r0, [sp, #144]	; 0x90
 801a3f2:	f001 fd9f 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a3f6:	e7c1      	b.n	801a37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 801a3f8:	6838      	ldr	r0, [r7, #0]
 801a3fa:	6803      	ldr	r3, [r0, #0]
 801a3fc:	691b      	ldr	r3, [r3, #16]
 801a3fe:	4798      	blx	r3
 801a400:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a404:	4298      	cmp	r0, r3
 801a406:	d004      	beq.n	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a408:	f242 030b 	movw	r3, #8203	; 0x200b
 801a40c:	4298      	cmp	r0, r3
 801a40e:	bf18      	it	ne
 801a410:	2500      	movne	r5, #0
 801a412:	f109 0901 	add.w	r9, r9, #1
 801a416:	4644      	mov	r4, r8
 801a418:	e7a6      	b.n	801a368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801a41a:	442e      	add	r6, r5
 801a41c:	e7cb      	b.n	801a3b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 801a41e:	2c00      	cmp	r4, #0
 801a420:	f000 80a6 	beq.w	801a570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801a424:	f1ba 0f00 	cmp.w	sl, #0
 801a428:	d11e      	bne.n	801a468 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a42a:	6838      	ldr	r0, [r7, #0]
 801a42c:	465a      	mov	r2, fp
 801a42e:	4621      	mov	r1, r4
 801a430:	6803      	ldr	r3, [r0, #0]
 801a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a434:	4798      	blx	r3
 801a436:	4406      	add	r6, r0
 801a438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a43a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a43c:	1af3      	subs	r3, r6, r3
 801a43e:	4293      	cmp	r3, r2
 801a440:	dd1d      	ble.n	801a47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801a442:	4644      	mov	r4, r8
 801a444:	2c00      	cmp	r4, #0
 801a446:	f000 8091 	beq.w	801a56c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801a44a:	2c0a      	cmp	r4, #10
 801a44c:	f000 8087 	beq.w	801a55e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 801a450:	f109 0901 	add.w	r9, r9, #1
 801a454:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a456:	4599      	cmp	r9, r3
 801a458:	f280 8082 	bge.w	801a560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801a45c:	4651      	mov	r1, sl
 801a45e:	9824      	ldr	r0, [sp, #144]	; 0x90
 801a460:	f001 fd68 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a464:	4604      	mov	r4, r0
 801a466:	e7ed      	b.n	801a444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801a468:	6838      	ldr	r0, [r7, #0]
 801a46a:	465a      	mov	r2, fp
 801a46c:	4621      	mov	r1, r4
 801a46e:	6803      	ldr	r3, [r0, #0]
 801a470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a472:	4798      	blx	r3
 801a474:	f1ba 0f01 	cmp.w	sl, #1
 801a478:	eba6 0600 	sub.w	r6, r6, r0
 801a47c:	d0ac      	beq.n	801a3d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 801a47e:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801a482:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 801a486:	f013 0f08 	tst.w	r3, #8
 801a48a:	f89b 1006 	ldrb.w	r1, [fp, #6]
 801a48e:	4432      	add	r2, r6
 801a490:	9821      	ldr	r0, [sp, #132]	; 0x84
 801a492:	bf14      	ite	ne
 801a494:	f44f 7380 	movne.w	r3, #256	; 0x100
 801a498:	2300      	moveq	r3, #0
 801a49a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a49e:	430b      	orrs	r3, r1
 801a4a0:	4413      	add	r3, r2
 801a4a2:	42a3      	cmp	r3, r4
 801a4a4:	dbb5      	blt.n	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a4a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	dab2      	bge.n	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a4ac:	6838      	ldr	r0, [r7, #0]
 801a4ae:	42b4      	cmp	r4, r6
 801a4b0:	6803      	ldr	r3, [r0, #0]
 801a4b2:	bfcc      	ite	gt
 801a4b4:	1ba4      	subgt	r4, r4, r6
 801a4b6:	2400      	movle	r4, #0
 801a4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4ba:	bfc8      	it	gt
 801a4bc:	b2a4      	uxthgt	r4, r4
 801a4be:	4798      	blx	r3
 801a4c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a4c2:	4a2e      	ldr	r2, [pc, #184]	; (801a57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 801a4c4:	4418      	add	r0, r3
 801a4c6:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801a4ca:	f89b e008 	ldrb.w	lr, [fp, #8]
 801a4ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a4d2:	bf14      	ite	ne
 801a4d4:	4611      	movne	r1, r2
 801a4d6:	2100      	moveq	r1, #0
 801a4d8:	f013 0f20 	tst.w	r3, #32
 801a4dc:	ea41 010e 	orr.w	r1, r1, lr
 801a4e0:	bf14      	ite	ne
 801a4e2:	f44f 7280 	movne.w	r2, #256	; 0x100
 801a4e6:	2200      	moveq	r2, #0
 801a4e8:	430a      	orrs	r2, r1
 801a4ea:	9921      	ldr	r1, [sp, #132]	; 0x84
 801a4ec:	1a80      	subs	r0, r0, r2
 801a4ee:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a4f2:	b280      	uxth	r0, r0
 801a4f4:	b202      	sxth	r2, r0
 801a4f6:	428a      	cmp	r2, r1
 801a4f8:	da2f      	bge.n	801a55a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 801a4fa:	f013 0f10 	tst.w	r3, #16
 801a4fe:	f89b e007 	ldrb.w	lr, [fp, #7]
 801a502:	bf14      	ite	ne
 801a504:	f44f 7380 	movne.w	r3, #256	; 0x100
 801a508:	2300      	moveq	r3, #0
 801a50a:	ea43 030e 	orr.w	r3, r3, lr
 801a50e:	441a      	add	r2, r3
 801a510:	4291      	cmp	r1, r2
 801a512:	f73f af7e 	bgt.w	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a516:	1a08      	subs	r0, r1, r0
 801a518:	460a      	mov	r2, r1
 801a51a:	b280      	uxth	r0, r0
 801a51c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a51e:	6819      	ldr	r1, [r3, #0]
 801a520:	79bb      	ldrb	r3, [r7, #6]
 801a522:	930a      	str	r3, [sp, #40]	; 0x28
 801a524:	7bbb      	ldrb	r3, [r7, #14]
 801a526:	9309      	str	r3, [sp, #36]	; 0x24
 801a528:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801a52c:	9308      	str	r3, [sp, #32]
 801a52e:	68bb      	ldr	r3, [r7, #8]
 801a530:	9402      	str	r4, [sp, #8]
 801a532:	4434      	add	r4, r6
 801a534:	9307      	str	r3, [sp, #28]
 801a536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a538:	b224      	sxth	r4, r4
 801a53a:	9003      	str	r0, [sp, #12]
 801a53c:	9306      	str	r3, [sp, #24]
 801a53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a540:	f8cd b014 	str.w	fp, [sp, #20]
 801a544:	9304      	str	r3, [sp, #16]
 801a546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a548:	9201      	str	r2, [sp, #4]
 801a54a:	9400      	str	r4, [sp, #0]
 801a54c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a54e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a550:	681a      	ldr	r2, [r3, #0]
 801a552:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a554:	685b      	ldr	r3, [r3, #4]
 801a556:	47a0      	blx	r4
 801a558:	e75b      	b.n	801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a55a:	2000      	movs	r0, #0
 801a55c:	e7de      	b.n	801a51c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 801a55e:	240a      	movs	r4, #10
 801a560:	fab4 f084 	clz	r0, r4
 801a564:	0940      	lsrs	r0, r0, #5
 801a566:	b017      	add	sp, #92	; 0x5c
 801a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a56c:	2400      	movs	r4, #0
 801a56e:	e7f7      	b.n	801a560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801a570:	f1ba 0f00 	cmp.w	sl, #0
 801a574:	f43f af60 	beq.w	801a438 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 801a578:	e781      	b.n	801a47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801a57a:	bf00      	nop
 801a57c:	fffffe00 	.word	0xfffffe00

0801a580 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a580:	b530      	push	{r4, r5, lr}
 801a582:	8ac4      	ldrh	r4, [r0, #22]
 801a584:	8b45      	ldrh	r5, [r0, #26]
 801a586:	8343      	strh	r3, [r0, #26]
 801a588:	442c      	add	r4, r5
 801a58a:	1ae4      	subs	r4, r4, r3
 801a58c:	8b83      	ldrh	r3, [r0, #28]
 801a58e:	82c4      	strh	r4, [r0, #22]
 801a590:	8b04      	ldrh	r4, [r0, #24]
 801a592:	4422      	add	r2, r4
 801a594:	440c      	add	r4, r1
 801a596:	1a59      	subs	r1, r3, r1
 801a598:	83c2      	strh	r2, [r0, #30]
 801a59a:	8304      	strh	r4, [r0, #24]
 801a59c:	8381      	strh	r1, [r0, #28]
 801a59e:	bd30      	pop	{r4, r5, pc}

0801a5a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5a4:	f890 b009 	ldrb.w	fp, [r0, #9]
 801a5a8:	b085      	sub	sp, #20
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	460f      	mov	r7, r1
 801a5ae:	f1ab 0303 	sub.w	r3, fp, #3
 801a5b2:	b331      	cbz	r1, 801a602 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 801a5b4:	2b01      	cmp	r3, #1
 801a5b6:	d922      	bls.n	801a5fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801a5b8:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a5bc:	f1d2 0a00 	rsbs	sl, r2, #0
 801a5c0:	eb4a 0a02 	adc.w	sl, sl, r2
 801a5c4:	f1ab 0302 	sub.w	r3, fp, #2
 801a5c8:	2500      	movs	r5, #0
 801a5ca:	f1d3 0b00 	rsbs	fp, r3, #0
 801a5ce:	9501      	str	r5, [sp, #4]
 801a5d0:	eb4b 0b03 	adc.w	fp, fp, r3
 801a5d4:	2600      	movs	r6, #0
 801a5d6:	82e6      	strh	r6, [r4, #22]
 801a5d8:	8326      	strh	r6, [r4, #24]
 801a5da:	7a21      	ldrb	r1, [r4, #8]
 801a5dc:	6860      	ldr	r0, [r4, #4]
 801a5de:	f8b4 9000 	ldrh.w	r9, [r4]
 801a5e2:	f001 fca7 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a5e6:	4601      	mov	r1, r0
 801a5e8:	8020      	strh	r0, [r4, #0]
 801a5ea:	b9c8      	cbnz	r0, 801a620 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 801a5ec:	8ba2      	ldrh	r2, [r4, #28]
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	b005      	add	sp, #20
 801a5f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5fa:	f7ff bfc1 	b.w	801a580 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a5fe:	468a      	mov	sl, r1
 801a600:	e7e0      	b.n	801a5c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801a602:	2b01      	cmp	r3, #1
 801a604:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a608:	468a      	mov	sl, r1
 801a60a:	bf8c      	ite	hi
 801a60c:	2300      	movhi	r3, #0
 801a60e:	2301      	movls	r3, #1
 801a610:	f1bb 0f01 	cmp.w	fp, #1
 801a614:	468b      	mov	fp, r1
 801a616:	9301      	str	r3, [sp, #4]
 801a618:	bf8c      	ite	hi
 801a61a:	2500      	movhi	r5, #0
 801a61c:	2501      	movls	r5, #1
 801a61e:	e7d9      	b.n	801a5d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 801a620:	8b63      	ldrh	r3, [r4, #26]
 801a622:	280a      	cmp	r0, #10
 801a624:	f103 0301 	add.w	r3, r3, #1
 801a628:	8363      	strh	r3, [r4, #26]
 801a62a:	d0df      	beq.n	801a5ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801a62c:	6920      	ldr	r0, [r4, #16]
 801a62e:	6803      	ldr	r3, [r0, #0]
 801a630:	68db      	ldr	r3, [r3, #12]
 801a632:	4798      	blx	r3
 801a634:	4602      	mov	r2, r0
 801a636:	2800      	cmp	r0, #0
 801a638:	d0cf      	beq.n	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a63a:	8883      	ldrh	r3, [r0, #4]
 801a63c:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801a640:	2b20      	cmp	r3, #32
 801a642:	8023      	strh	r3, [r4, #0]
 801a644:	d103      	bne.n	801a64e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801a646:	f1b9 0f20 	cmp.w	r9, #32
 801a64a:	bf18      	it	ne
 801a64c:	4646      	movne	r6, r8
 801a64e:	7a93      	ldrb	r3, [r2, #10]
 801a650:	4649      	mov	r1, r9
 801a652:	6920      	ldr	r0, [r4, #16]
 801a654:	9302      	str	r3, [sp, #8]
 801a656:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	bfb4      	ite	lt
 801a65e:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801a662:	2300      	movge	r3, #0
 801a664:	9303      	str	r3, [sp, #12]
 801a666:	6803      	ldr	r3, [r0, #0]
 801a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a66a:	4798      	blx	r3
 801a66c:	9b03      	ldr	r3, [sp, #12]
 801a66e:	9a02      	ldr	r2, [sp, #8]
 801a670:	8aa1      	ldrh	r1, [r4, #20]
 801a672:	431a      	orrs	r2, r3
 801a674:	8b23      	ldrh	r3, [r4, #24]
 801a676:	4402      	add	r2, r0
 801a678:	8ba0      	ldrh	r0, [r4, #28]
 801a67a:	4402      	add	r2, r0
 801a67c:	b292      	uxth	r2, r2
 801a67e:	83a2      	strh	r2, [r4, #28]
 801a680:	4413      	add	r3, r2
 801a682:	b327      	cbz	r7, 801a6ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801a684:	f1ba 0f00 	cmp.w	sl, #0
 801a688:	d105      	bne.n	801a696 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 801a68a:	f1bb 0f00 	cmp.w	fp, #0
 801a68e:	d00f      	beq.n	801a6b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801a690:	8820      	ldrh	r0, [r4, #0]
 801a692:	2820      	cmp	r0, #32
 801a694:	d10c      	bne.n	801a6b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801a696:	8c20      	ldrh	r0, [r4, #32]
 801a698:	4418      	add	r0, r3
 801a69a:	4281      	cmp	r1, r0
 801a69c:	da02      	bge.n	801a6a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 801a69e:	8ae0      	ldrh	r0, [r4, #22]
 801a6a0:	2800      	cmp	r0, #0
 801a6a2:	d13a      	bne.n	801a71a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	4611      	mov	r1, r2
 801a6a8:	4620      	mov	r0, r4
 801a6aa:	f7ff ff69 	bl	801a580 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a6ae:	e794      	b.n	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a6b0:	428b      	cmp	r3, r1
 801a6b2:	dd92      	ble.n	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a6b4:	8ae3      	ldrh	r3, [r4, #22]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d08f      	beq.n	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	8c22      	ldrh	r2, [r4, #32]
 801a6be:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801a6c2:	8be3      	ldrh	r3, [r4, #30]
 801a6c4:	4413      	add	r3, r2
 801a6c6:	83e3      	strh	r3, [r4, #30]
 801a6c8:	b005      	add	sp, #20
 801a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ce:	428b      	cmp	r3, r1
 801a6d0:	dd17      	ble.n	801a702 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801a6d2:	9b01      	ldr	r3, [sp, #4]
 801a6d4:	b113      	cbz	r3, 801a6dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	4642      	mov	r2, r8
 801a6da:	e789      	b.n	801a5f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801a6dc:	2d00      	cmp	r5, #0
 801a6de:	f43f af7c 	beq.w	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a6e2:	8823      	ldrh	r3, [r4, #0]
 801a6e4:	2b20      	cmp	r3, #32
 801a6e6:	f43f af78 	beq.w	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a6ea:	f1b9 0f20 	cmp.w	r9, #32
 801a6ee:	d103      	bne.n	801a6f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	4632      	mov	r2, r6
 801a6f4:	4641      	mov	r1, r8
 801a6f6:	e77c      	b.n	801a5f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801a6f8:	8ae3      	ldrh	r3, [r4, #22]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	f43f af6d 	beq.w	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a700:	e7e2      	b.n	801a6c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 801a702:	8823      	ldrh	r3, [r4, #0]
 801a704:	2b20      	cmp	r3, #32
 801a706:	f43f af68 	beq.w	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a70a:	f1b9 0f20 	cmp.w	r9, #32
 801a70e:	f47f af64 	bne.w	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a712:	2301      	movs	r3, #1
 801a714:	4632      	mov	r2, r6
 801a716:	4641      	mov	r1, r8
 801a718:	e7c6      	b.n	801a6a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 801a71a:	428b      	cmp	r3, r1
 801a71c:	f77f af5d 	ble.w	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801a720:	e7cb      	b.n	801a6ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>
	...

0801a724 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a728:	b0ab      	sub	sp, #172	; 0xac
 801a72a:	4689      	mov	r9, r1
 801a72c:	461c      	mov	r4, r3
 801a72e:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 801a732:	9009      	str	r0, [sp, #36]	; 0x24
 801a734:	f1ba 0f00 	cmp.w	sl, #0
 801a738:	f000 80ac 	beq.w	801a894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	f000 80a8 	beq.w	801a894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801a744:	7ba3      	ldrb	r3, [r4, #14]
 801a746:	2b00      	cmp	r3, #0
 801a748:	f000 80a4 	beq.w	801a894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801a74c:	6810      	ldr	r0, [r2, #0]
 801a74e:	ab0b      	add	r3, sp, #44	; 0x2c
 801a750:	6851      	ldr	r1, [r2, #4]
 801a752:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 801a756:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801a75a:	c303      	stmia	r3!, {r0, r1}
 801a75c:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801a760:	2300      	movs	r3, #0
 801a762:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801a766:	a80b      	add	r0, sp, #44	; 0x2c
 801a768:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 801a76c:	a90d      	add	r1, sp, #52	; 0x34
 801a76e:	79a2      	ldrb	r2, [r4, #6]
 801a770:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a774:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a778:	f7ff fd7d 	bl	801a276 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a77c:	a90d      	add	r1, sp, #52	; 0x34
 801a77e:	79a2      	ldrb	r2, [r4, #6]
 801a780:	4608      	mov	r0, r1
 801a782:	f7ff fd78 	bl	801a276 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a786:	4640      	mov	r0, r8
 801a788:	f001 fc1a 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801a78c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801a78e:	4651      	mov	r1, sl
 801a790:	4640      	mov	r0, r8
 801a792:	f001 fc1e 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a796:	a815      	add	r0, sp, #84	; 0x54
 801a798:	f001 fc12 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801a79c:	7927      	ldrb	r7, [r4, #4]
 801a79e:	b127      	cbz	r7, 801a7aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 801a7a0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801a7a2:	4651      	mov	r1, sl
 801a7a4:	a815      	add	r0, sp, #84	; 0x54
 801a7a6:	f001 fc14 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a7aa:	6820      	ldr	r0, [r4, #0]
 801a7ac:	89a5      	ldrh	r5, [r4, #12]
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7b2:	4798      	blx	r3
 801a7b4:	4405      	add	r5, r0
 801a7b6:	a81b      	add	r0, sp, #108	; 0x6c
 801a7b8:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a7bc:	f001 fc00 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801a7c0:	7c23      	ldrb	r3, [r4, #16]
 801a7c2:	fb96 f6f5 	sdiv	r6, r6, r5
 801a7c6:	b123      	cbz	r3, 801a7d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 801a7c8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801a7ca:	4651      	mov	r1, sl
 801a7cc:	a81b      	add	r0, sp, #108	; 0x6c
 801a7ce:	f001 fc00 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801a7d2:	7c21      	ldrb	r1, [r4, #16]
 801a7d4:	a821      	add	r0, sp, #132	; 0x84
 801a7d6:	7963      	ldrb	r3, [r4, #5]
 801a7d8:	9101      	str	r1, [sp, #4]
 801a7da:	6821      	ldr	r1, [r4, #0]
 801a7dc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a7e0:	9100      	str	r1, [sp, #0]
 801a7e2:	a91b      	add	r1, sp, #108	; 0x6c
 801a7e4:	f7ff fcce 	bl	801a184 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a7e8:	7c23      	ldrb	r3, [r4, #16]
 801a7ea:	bb03      	cbnz	r3, 801a82e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 801a7ec:	fa1f fa85 	uxth.w	sl, r5
 801a7f0:	2e00      	cmp	r6, #0
 801a7f2:	dd52      	ble.n	801a89a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801a7f4:	7961      	ldrb	r1, [r4, #5]
 801a7f6:	4640      	mov	r0, r8
 801a7f8:	f001 fb9c 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a7fc:	4683      	mov	fp, r0
 801a7fe:	b11f      	cbz	r7, 801a808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 801a800:	7961      	ldrb	r1, [r4, #5]
 801a802:	a815      	add	r0, sp, #84	; 0x54
 801a804:	f001 fb96 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a808:	f1bb 0f00 	cmp.w	fp, #0
 801a80c:	d042      	beq.n	801a894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801a80e:	f1bb 0f0a 	cmp.w	fp, #10
 801a812:	d1ed      	bne.n	801a7f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801a814:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a818:	3e01      	subs	r6, #1
 801a81a:	4453      	add	r3, sl
 801a81c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a820:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a824:	eba3 030a 	sub.w	r3, r3, sl
 801a828:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a82c:	e7e0      	b.n	801a7f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801a82e:	006b      	lsls	r3, r5, #1
 801a830:	fa1f fa85 	uxth.w	sl, r5
 801a834:	9308      	str	r3, [sp, #32]
 801a836:	2e00      	cmp	r6, #0
 801a838:	dd2f      	ble.n	801a89a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801a83a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801a83e:	a821      	add	r0, sp, #132	; 0x84
 801a840:	9b08      	ldr	r3, [sp, #32]
 801a842:	428b      	cmp	r3, r1
 801a844:	bfd4      	ite	le
 801a846:	2100      	movle	r1, #0
 801a848:	2101      	movgt	r1, #1
 801a84a:	f7ff fea9 	bl	801a5a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a84e:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 801a852:	f1bb 0f00 	cmp.w	fp, #0
 801a856:	d00d      	beq.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 801a858:	7961      	ldrb	r1, [r4, #5]
 801a85a:	4640      	mov	r0, r8
 801a85c:	f001 fb6a 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a860:	b11f      	cbz	r7, 801a86a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 801a862:	7961      	ldrb	r1, [r4, #5]
 801a864:	a815      	add	r0, sp, #84	; 0x54
 801a866:	f001 fb65 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a86a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a86e:	fa1f fb83 	uxth.w	fp, r3
 801a872:	e7ee      	b.n	801a852 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801a874:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a878:	3e01      	subs	r6, #1
 801a87a:	4453      	add	r3, sl
 801a87c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a880:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a884:	eba3 030a 	sub.w	r3, r3, sl
 801a888:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a88c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801a890:	2b00      	cmp	r3, #0
 801a892:	d1d0      	bne.n	801a836 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 801a894:	b02b      	add	sp, #172	; 0xac
 801a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a89a:	4b40      	ldr	r3, [pc, #256]	; (801a99c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801a89c:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801a8a0:	f04f 0a02 	mov.w	sl, #2
 801a8a4:	6818      	ldr	r0, [r3, #0]
 801a8a6:	6803      	ldr	r3, [r0, #0]
 801a8a8:	6a1b      	ldr	r3, [r3, #32]
 801a8aa:	4798      	blx	r3
 801a8ac:	4606      	mov	r6, r0
 801a8ae:	7c23      	ldrb	r3, [r4, #16]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d067      	beq.n	801a984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a8b4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801a8b8:	a821      	add	r0, sp, #132	; 0x84
 801a8ba:	458b      	cmp	fp, r1
 801a8bc:	bfd4      	ite	le
 801a8be:	2100      	movle	r1, #0
 801a8c0:	2101      	movgt	r1, #1
 801a8c2:	f7ff fe6d 	bl	801a5a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a8c6:	2f00      	cmp	r7, #0
 801a8c8:	d055      	beq.n	801a976 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a8ca:	7c23      	ldrb	r3, [r4, #16]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d05b      	beq.n	801a988 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801a8d0:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801a8d4:	7922      	ldrb	r2, [r4, #4]
 801a8d6:	2a01      	cmp	r2, #1
 801a8d8:	d145      	bne.n	801a966 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a8da:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801a8de:	1ac0      	subs	r0, r0, r3
 801a8e0:	fb90 f0fa 	sdiv	r0, r0, sl
 801a8e4:	b200      	sxth	r0, r0
 801a8e6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801a8ea:	4418      	add	r0, r3
 801a8ec:	7c23      	ldrb	r3, [r4, #16]
 801a8ee:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d043      	beq.n	801a97e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801a8f6:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801a8fa:	9205      	str	r2, [sp, #20]
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 801a902:	9203      	str	r2, [sp, #12]
 801a904:	aa0b      	add	r2, sp, #44	; 0x2c
 801a906:	9106      	str	r1, [sp, #24]
 801a908:	4631      	mov	r1, r6
 801a90a:	9201      	str	r2, [sp, #4]
 801a90c:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801a910:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a914:	9200      	str	r2, [sp, #0]
 801a916:	464a      	mov	r2, r9
 801a918:	f8cd 8010 	str.w	r8, [sp, #16]
 801a91c:	9402      	str	r4, [sp, #8]
 801a91e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a920:	f7ff fcfa 	bl	801a318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a924:	b9c8      	cbnz	r0, 801a95a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801a926:	b2aa      	uxth	r2, r5
 801a928:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a92c:	4611      	mov	r1, r2
 801a92e:	4413      	add	r3, r2
 801a930:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a934:	b21b      	sxth	r3, r3
 801a936:	1a52      	subs	r2, r2, r1
 801a938:	7c21      	ldrb	r1, [r4, #16]
 801a93a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a93e:	b212      	sxth	r2, r2
 801a940:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801a944:	b109      	cbz	r1, 801a94a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801a946:	4295      	cmp	r5, r2
 801a948:	dc07      	bgt.n	801a95a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801a94a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801a94e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801a952:	440a      	add	r2, r1
 801a954:	b212      	sxth	r2, r2
 801a956:	4293      	cmp	r3, r2
 801a958:	dda9      	ble.n	801a8ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801a95a:	4b10      	ldr	r3, [pc, #64]	; (801a99c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801a95c:	6818      	ldr	r0, [r3, #0]
 801a95e:	6803      	ldr	r3, [r0, #0]
 801a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a962:	4798      	blx	r3
 801a964:	e796      	b.n	801a894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801a966:	2a02      	cmp	r2, #2
 801a968:	d107      	bne.n	801a97a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a96a:	7be2      	ldrb	r2, [r4, #15]
 801a96c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801a970:	1a80      	subs	r0, r0, r2
 801a972:	1ac0      	subs	r0, r0, r3
 801a974:	e7b6      	b.n	801a8e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 801a976:	7be0      	ldrb	r0, [r4, #15]
 801a978:	e7b5      	b.n	801a8e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801a97a:	2000      	movs	r0, #0
 801a97c:	e7b3      	b.n	801a8e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801a97e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a982:	e7ba      	b.n	801a8fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801a984:	2f00      	cmp	r7, #0
 801a986:	d0f6      	beq.n	801a976 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a988:	2300      	movs	r3, #0
 801a98a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a98e:	6821      	ldr	r1, [r4, #0]
 801a990:	a815      	add	r0, sp, #84	; 0x54
 801a992:	f7ff fc3a 	bl	801a20a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a996:	b203      	sxth	r3, r0
 801a998:	e79c      	b.n	801a8d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 801a99a:	bf00      	nop
 801a99c:	20009abc 	.word	0x20009abc

0801a9a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a9a0:	2b02      	cmp	r3, #2
 801a9a2:	d00e      	beq.n	801a9c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a9a4:	2b03      	cmp	r3, #3
 801a9a6:	d012      	beq.n	801a9ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801a9a8:	2b01      	cmp	r3, #1
 801a9aa:	d003      	beq.n	801a9b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a9ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a9b0:	1850      	adds	r0, r2, r1
 801a9b2:	4770      	bx	lr
 801a9b4:	8803      	ldrh	r3, [r0, #0]
 801a9b6:	8880      	ldrh	r0, [r0, #4]
 801a9b8:	4418      	add	r0, r3
 801a9ba:	b200      	sxth	r0, r0
 801a9bc:	1a80      	subs	r0, r0, r2
 801a9be:	3801      	subs	r0, #1
 801a9c0:	4770      	bx	lr
 801a9c2:	8803      	ldrh	r3, [r0, #0]
 801a9c4:	8880      	ldrh	r0, [r0, #4]
 801a9c6:	4418      	add	r0, r3
 801a9c8:	b200      	sxth	r0, r0
 801a9ca:	1a40      	subs	r0, r0, r1
 801a9cc:	e7f7      	b.n	801a9be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a9ce:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a9d2:	4410      	add	r0, r2
 801a9d4:	4770      	bx	lr

0801a9d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a9d6:	2b02      	cmp	r3, #2
 801a9d8:	d008      	beq.n	801a9ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a9da:	2b03      	cmp	r3, #3
 801a9dc:	d00d      	beq.n	801a9fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a9de:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801a9e2:	2b01      	cmp	r3, #1
 801a9e4:	bf14      	ite	ne
 801a9e6:	1880      	addne	r0, r0, r2
 801a9e8:	1840      	addeq	r0, r0, r1
 801a9ea:	4770      	bx	lr
 801a9ec:	8843      	ldrh	r3, [r0, #2]
 801a9ee:	88c0      	ldrh	r0, [r0, #6]
 801a9f0:	4418      	add	r0, r3
 801a9f2:	b200      	sxth	r0, r0
 801a9f4:	1a80      	subs	r0, r0, r2
 801a9f6:	3801      	subs	r0, #1
 801a9f8:	4770      	bx	lr
 801a9fa:	8843      	ldrh	r3, [r0, #2]
 801a9fc:	88c0      	ldrh	r0, [r0, #6]
 801a9fe:	4418      	add	r0, r3
 801aa00:	b200      	sxth	r0, r0
 801aa02:	1a40      	subs	r0, r0, r1
 801aa04:	e7f7      	b.n	801a9f6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801aa06 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801aa06:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa08:	f8dd c014 	ldr.w	ip, [sp, #20]
 801aa0c:	1e05      	subs	r5, r0, #0
 801aa0e:	f04f 0601 	mov.w	r6, #1
 801aa12:	9c06      	ldr	r4, [sp, #24]
 801aa14:	bfba      	itte	lt
 801aa16:	f04f 37ff 	movlt.w	r7, #4294967295
 801aa1a:	426d      	neglt	r5, r5
 801aa1c:	2701      	movge	r7, #1
 801aa1e:	f1bc 0f00 	cmp.w	ip, #0
 801aa22:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801aa26:	bfbc      	itt	lt
 801aa28:	f1cc 0c00 	rsblt	ip, ip, #0
 801aa2c:	427f      	neglt	r7, r7
 801aa2e:	2c00      	cmp	r4, #0
 801aa30:	fa4c f001 	asr.w	r0, ip, r1
 801aa34:	fa06 f101 	lsl.w	r1, r6, r1
 801aa38:	bfbc      	itt	lt
 801aa3a:	4264      	neglt	r4, r4
 801aa3c:	427f      	neglt	r7, r7
 801aa3e:	3901      	subs	r1, #1
 801aa40:	ea01 010c 	and.w	r1, r1, ip
 801aa44:	434d      	muls	r5, r1
 801aa46:	f8de 1000 	ldr.w	r1, [lr]
 801aa4a:	fb03 1300 	mla	r3, r3, r0, r1
 801aa4e:	fb95 f1f4 	sdiv	r1, r5, r4
 801aa52:	fb04 5511 	mls	r5, r4, r1, r5
 801aa56:	441d      	add	r5, r3
 801aa58:	fb95 f3f4 	sdiv	r3, r5, r4
 801aa5c:	4419      	add	r1, r3
 801aa5e:	fb04 5413 	mls	r4, r4, r3, r5
 801aa62:	fb02 1000 	mla	r0, r2, r0, r1
 801aa66:	f8ce 4000 	str.w	r4, [lr]
 801aa6a:	4378      	muls	r0, r7
 801aa6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801aa70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801aa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa74:	4c24      	ldr	r4, [pc, #144]	; (801ab08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801aa76:	b086      	sub	sp, #24
 801aa78:	4605      	mov	r5, r0
 801aa7a:	6807      	ldr	r7, [r0, #0]
 801aa7c:	69a3      	ldr	r3, [r4, #24]
 801aa7e:	b92b      	cbnz	r3, 801aa8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801aa80:	6840      	ldr	r0, [r0, #4]
 801aa82:	602f      	str	r7, [r5, #0]
 801aa84:	6068      	str	r0, [r5, #4]
 801aa86:	b006      	add	sp, #24
 801aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa8c:	f04f 0802 	mov.w	r8, #2
 801aa90:	68a2      	ldr	r2, [r4, #8]
 801aa92:	ae06      	add	r6, sp, #24
 801aa94:	6820      	ldr	r0, [r4, #0]
 801aa96:	fb93 f1f8 	sdiv	r1, r3, r8
 801aa9a:	440a      	add	r2, r1
 801aa9c:	69e1      	ldr	r1, [r4, #28]
 801aa9e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801aaa2:	9301      	str	r3, [sp, #4]
 801aaa4:	9700      	str	r7, [sp, #0]
 801aaa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801aaa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801aaaa:	9602      	str	r6, [sp, #8]
 801aaac:	f7ff ffab 	bl	801aa06 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aab0:	69a3      	ldr	r3, [r4, #24]
 801aab2:	4607      	mov	r7, r0
 801aab4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801aab6:	9301      	str	r3, [sp, #4]
 801aab8:	686b      	ldr	r3, [r5, #4]
 801aaba:	6a21      	ldr	r1, [r4, #32]
 801aabc:	9300      	str	r3, [sp, #0]
 801aabe:	9602      	str	r6, [sp, #8]
 801aac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aac2:	6860      	ldr	r0, [r4, #4]
 801aac4:	f7ff ff9f 	bl	801aa06 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aac8:	69a2      	ldr	r2, [r4, #24]
 801aaca:	6963      	ldr	r3, [r4, #20]
 801aacc:	4407      	add	r7, r0
 801aace:	9201      	str	r2, [sp, #4]
 801aad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aad2:	9602      	str	r6, [sp, #8]
 801aad4:	68e0      	ldr	r0, [r4, #12]
 801aad6:	fb92 f8f8 	sdiv	r8, r2, r8
 801aada:	4443      	add	r3, r8
 801aadc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801aade:	9305      	str	r3, [sp, #20]
 801aae0:	682b      	ldr	r3, [r5, #0]
 801aae2:	9300      	str	r3, [sp, #0]
 801aae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801aae6:	f7ff ff8e 	bl	801aa06 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aaea:	69a3      	ldr	r3, [r4, #24]
 801aaec:	4680      	mov	r8, r0
 801aaee:	9602      	str	r6, [sp, #8]
 801aaf0:	9301      	str	r3, [sp, #4]
 801aaf2:	686b      	ldr	r3, [r5, #4]
 801aaf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801aaf6:	9300      	str	r3, [sp, #0]
 801aaf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aafa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801aafc:	6920      	ldr	r0, [r4, #16]
 801aafe:	f7ff ff82 	bl	801aa06 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ab02:	4440      	add	r0, r8
 801ab04:	e7bd      	b.n	801aa82 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801ab06:	bf00      	nop
 801ab08:	20009ac4 	.word	0x20009ac4

0801ab0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ab0c:	4b07      	ldr	r3, [pc, #28]	; (801ab2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ab0e:	b510      	push	{r4, lr}
 801ab10:	781b      	ldrb	r3, [r3, #0]
 801ab12:	2b01      	cmp	r3, #1
 801ab14:	d108      	bne.n	801ab28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ab16:	4b06      	ldr	r3, [pc, #24]	; (801ab30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ab18:	880c      	ldrh	r4, [r1, #0]
 801ab1a:	881b      	ldrh	r3, [r3, #0]
 801ab1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ab20:	3b01      	subs	r3, #1
 801ab22:	1b1b      	subs	r3, r3, r4
 801ab24:	8003      	strh	r3, [r0, #0]
 801ab26:	800a      	strh	r2, [r1, #0]
 801ab28:	bd10      	pop	{r4, pc}
 801ab2a:	bf00      	nop
 801ab2c:	20009ab4 	.word	0x20009ab4
 801ab30:	20009ab8 	.word	0x20009ab8

0801ab34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ab34:	4b07      	ldr	r3, [pc, #28]	; (801ab54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ab36:	b510      	push	{r4, lr}
 801ab38:	781b      	ldrb	r3, [r3, #0]
 801ab3a:	2b01      	cmp	r3, #1
 801ab3c:	d108      	bne.n	801ab50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ab3e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ab42:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ab46:	8003      	strh	r3, [r0, #0]
 801ab48:	8893      	ldrh	r3, [r2, #4]
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	1b1b      	subs	r3, r3, r4
 801ab4e:	800b      	strh	r3, [r1, #0]
 801ab50:	bd10      	pop	{r4, pc}
 801ab52:	bf00      	nop
 801ab54:	20009ab4 	.word	0x20009ab4

0801ab58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ab58:	4b0a      	ldr	r3, [pc, #40]	; (801ab84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801ab5a:	b513      	push	{r0, r1, r4, lr}
 801ab5c:	f9b3 4000 	ldrsh.w	r4, [r3]
 801ab60:	4b09      	ldr	r3, [pc, #36]	; (801ab88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801ab62:	f8ad 4004 	strh.w	r4, [sp, #4]
 801ab66:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ab70:	466a      	mov	r2, sp
 801ab72:	f8ad 3000 	strh.w	r3, [sp]
 801ab76:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ab7a:	f7ff ffdb 	bl	801ab34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ab7e:	b002      	add	sp, #8
 801ab80:	bd10      	pop	{r4, pc}
 801ab82:	bf00      	nop
 801ab84:	20009ab0 	.word	0x20009ab0
 801ab88:	20009ab2 	.word	0x20009ab2

0801ab8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ab8c:	4b0a      	ldr	r3, [pc, #40]	; (801abb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ab8e:	460a      	mov	r2, r1
 801ab90:	b510      	push	{r4, lr}
 801ab92:	781b      	ldrb	r3, [r3, #0]
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d10d      	bne.n	801abb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ab98:	8881      	ldrh	r1, [r0, #4]
 801ab9a:	8803      	ldrh	r3, [r0, #0]
 801ab9c:	440b      	add	r3, r1
 801ab9e:	4601      	mov	r1, r0
 801aba0:	3b01      	subs	r3, #1
 801aba2:	f821 3b02 	strh.w	r3, [r1], #2
 801aba6:	f7ff ffc5 	bl	801ab34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801abaa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801abae:	88c2      	ldrh	r2, [r0, #6]
 801abb0:	80c3      	strh	r3, [r0, #6]
 801abb2:	8082      	strh	r2, [r0, #4]
 801abb4:	bd10      	pop	{r4, pc}
 801abb6:	bf00      	nop
 801abb8:	20009ab4 	.word	0x20009ab4

0801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801abbc:	4b0a      	ldr	r3, [pc, #40]	; (801abe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801abbe:	b507      	push	{r0, r1, r2, lr}
 801abc0:	f9b3 1000 	ldrsh.w	r1, [r3]
 801abc4:	4b09      	ldr	r3, [pc, #36]	; (801abec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801abc6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801abca:	4669      	mov	r1, sp
 801abcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abd0:	2300      	movs	r3, #0
 801abd2:	f8ad 2006 	strh.w	r2, [sp, #6]
 801abd6:	f8ad 3000 	strh.w	r3, [sp]
 801abda:	f8ad 3002 	strh.w	r3, [sp, #2]
 801abde:	f7ff ffd5 	bl	801ab8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abe2:	b003      	add	sp, #12
 801abe4:	f85d fb04 	ldr.w	pc, [sp], #4
 801abe8:	20009ab0 	.word	0x20009ab0
 801abec:	20009ab2 	.word	0x20009ab2

0801abf0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801abf0:	4b03      	ldr	r3, [pc, #12]	; (801ac00 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801abf2:	6818      	ldr	r0, [r3, #0]
 801abf4:	b110      	cbz	r0, 801abfc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801abf6:	6803      	ldr	r3, [r0, #0]
 801abf8:	699b      	ldr	r3, [r3, #24]
 801abfa:	4718      	bx	r3
 801abfc:	4770      	bx	lr
 801abfe:	bf00      	nop
 801ac00:	20009b10 	.word	0x20009b10

0801ac04 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801ac04:	4770      	bx	lr
	...

0801ac08 <_ZN8touchgfx11Application4drawEv>:
 801ac08:	4b0b      	ldr	r3, [pc, #44]	; (801ac38 <_ZN8touchgfx11Application4drawEv+0x30>)
 801ac0a:	b507      	push	{r0, r1, r2, lr}
 801ac0c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ac10:	4b0a      	ldr	r3, [pc, #40]	; (801ac3c <_ZN8touchgfx11Application4drawEv+0x34>)
 801ac12:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ac16:	4669      	mov	r1, sp
 801ac18:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	f8ad 3000 	strh.w	r3, [sp]
 801ac22:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ac26:	6803      	ldr	r3, [r0, #0]
 801ac28:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ac2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac2e:	4798      	blx	r3
 801ac30:	b003      	add	sp, #12
 801ac32:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac36:	bf00      	nop
 801ac38:	20009ab0 	.word	0x20009ab0
 801ac3c:	20009ab2 	.word	0x20009ab2

0801ac40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ac40:	4b03      	ldr	r3, [pc, #12]	; (801ac50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ac42:	6818      	ldr	r0, [r3, #0]
 801ac44:	b110      	cbz	r0, 801ac4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ac46:	6803      	ldr	r3, [r0, #0]
 801ac48:	69db      	ldr	r3, [r3, #28]
 801ac4a:	4718      	bx	r3
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	20009b10 	.word	0x20009b10

0801ac54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ac54:	4b03      	ldr	r3, [pc, #12]	; (801ac64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ac56:	6818      	ldr	r0, [r3, #0]
 801ac58:	b110      	cbz	r0, 801ac60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ac5a:	6803      	ldr	r3, [r0, #0]
 801ac5c:	6a1b      	ldr	r3, [r3, #32]
 801ac5e:	4718      	bx	r3
 801ac60:	4770      	bx	lr
 801ac62:	bf00      	nop
 801ac64:	20009b10 	.word	0x20009b10

0801ac68 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ac68:	4b03      	ldr	r3, [pc, #12]	; (801ac78 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ac6a:	6818      	ldr	r0, [r3, #0]
 801ac6c:	b110      	cbz	r0, 801ac74 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ac6e:	6803      	ldr	r3, [r0, #0]
 801ac70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac72:	4718      	bx	r3
 801ac74:	4770      	bx	lr
 801ac76:	bf00      	nop
 801ac78:	20009b10 	.word	0x20009b10

0801ac7c <_ZN8touchgfx11Application15handleTickEventEv>:
 801ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac80:	4d3d      	ldr	r5, [pc, #244]	; (801ad78 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801ac82:	4604      	mov	r4, r0
 801ac84:	6828      	ldr	r0, [r5, #0]
 801ac86:	2800      	cmp	r0, #0
 801ac88:	d047      	beq.n	801ad1a <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801ac8a:	7a03      	ldrb	r3, [r0, #8]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d144      	bne.n	801ad1a <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801ac90:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801ac94:	6803      	ldr	r3, [r0, #0]
 801ac96:	689b      	ldr	r3, [r3, #8]
 801ac98:	e03c      	b.n	801ad14 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801ac9a:	3b01      	subs	r3, #1
 801ac9c:	f04f 0c00 	mov.w	ip, #0
 801aca0:	1c5a      	adds	r2, r3, #1
 801aca2:	d031      	beq.n	801ad08 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801aca4:	18e2      	adds	r2, r4, r3
 801aca6:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801acaa:	bb59      	cbnz	r1, 801ad04 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801acac:	b298      	uxth	r0, r3
 801acae:	1d25      	adds	r5, r4, #4
 801acb0:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801acb4:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801acb8:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801acbc:	428a      	cmp	r2, r1
 801acbe:	dd14      	ble.n	801acea <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801acc0:	682e      	ldr	r6, [r5, #0]
 801acc2:	45b0      	cmp	r8, r6
 801acc4:	d106      	bne.n	801acd4 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801acc6:	46ae      	mov	lr, r5
 801acc8:	460e      	mov	r6, r1
 801acca:	2e1e      	cmp	r6, #30
 801accc:	dd05      	ble.n	801acda <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801acce:	3a01      	subs	r2, #1
 801acd0:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801acd4:	3101      	adds	r1, #1
 801acd6:	3504      	adds	r5, #4
 801acd8:	e7ee      	b.n	801acb8 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801acda:	3601      	adds	r6, #1
 801acdc:	f8de 7004 	ldr.w	r7, [lr, #4]
 801ace0:	42b2      	cmp	r2, r6
 801ace2:	f84e 7b04 	str.w	r7, [lr], #4
 801ace6:	dcf0      	bgt.n	801acca <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801ace8:	e7f1      	b.n	801acce <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801acea:	4290      	cmp	r0, r2
 801acec:	da07      	bge.n	801acfe <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801acee:	1821      	adds	r1, r4, r0
 801acf0:	3001      	adds	r0, #1
 801acf2:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801acf6:	b280      	uxth	r0, r0
 801acf8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801acfc:	e7f5      	b.n	801acea <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801acfe:	4422      	add	r2, r4
 801ad00:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801ad04:	3b01      	subs	r3, #1
 801ad06:	e7cb      	b.n	801aca0 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801ad08:	4b1c      	ldr	r3, [pc, #112]	; (801ad7c <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801ad0a:	6818      	ldr	r0, [r3, #0]
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	d031      	beq.n	801ad74 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801ad10:	6803      	ldr	r3, [r0, #0]
 801ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad18:	4718      	bx	r3
 801ad1a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801ad1e:	b913      	cbnz	r3, 801ad26 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801ad20:	b108      	cbz	r0, 801ad26 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801ad22:	7a03      	ldrb	r3, [r0, #8]
 801ad24:	b9a3      	cbnz	r3, 801ad50 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801ad26:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801ad2a:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801ad2e:	2600      	movs	r6, #0
 801ad30:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801ad34:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801ad38:	429e      	cmp	r6, r3
 801ad3a:	daae      	bge.n	801ac9a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801ad3c:	f817 3b01 	ldrb.w	r3, [r7], #1
 801ad40:	b123      	cbz	r3, 801ad4c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801ad42:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801ad46:	6803      	ldr	r3, [r0, #0]
 801ad48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad4a:	4798      	blx	r3
 801ad4c:	3601      	adds	r6, #1
 801ad4e:	e7f1      	b.n	801ad34 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801ad50:	4b0a      	ldr	r3, [pc, #40]	; (801ad7c <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801ad52:	6818      	ldr	r0, [r3, #0]
 801ad54:	b110      	cbz	r0, 801ad5c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801ad56:	6803      	ldr	r3, [r0, #0]
 801ad58:	691b      	ldr	r3, [r3, #16]
 801ad5a:	4798      	blx	r3
 801ad5c:	6828      	ldr	r0, [r5, #0]
 801ad5e:	6803      	ldr	r3, [r0, #0]
 801ad60:	68db      	ldr	r3, [r3, #12]
 801ad62:	4798      	blx	r3
 801ad64:	6823      	ldr	r3, [r4, #0]
 801ad66:	4620      	mov	r0, r4
 801ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad6a:	4798      	blx	r3
 801ad6c:	2301      	movs	r3, #1
 801ad6e:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801ad72:	e7d8      	b.n	801ad26 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801ad74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad78:	20009b14 	.word	0x20009b14
 801ad7c:	20009b10 	.word	0x20009b10

0801ad80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ad80:	b570      	push	{r4, r5, r6, lr}
 801ad82:	4606      	mov	r6, r0
 801ad84:	460c      	mov	r4, r1
 801ad86:	b929      	cbnz	r1, 801ad94 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ad88:	4b0c      	ldr	r3, [pc, #48]	; (801adbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ad8a:	2161      	movs	r1, #97	; 0x61
 801ad8c:	4a0c      	ldr	r2, [pc, #48]	; (801adc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ad8e:	480d      	ldr	r0, [pc, #52]	; (801adc4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ad90:	f003 fb12 	bl	801e3b8 <__assert_func>
 801ad94:	2300      	movs	r3, #0
 801ad96:	4d0c      	ldr	r5, [pc, #48]	; (801adc8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ad98:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ad9c:	6828      	ldr	r0, [r5, #0]
 801ad9e:	b110      	cbz	r0, 801ada6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ada0:	6803      	ldr	r3, [r0, #0]
 801ada2:	695b      	ldr	r3, [r3, #20]
 801ada4:	4798      	blx	r3
 801ada6:	602c      	str	r4, [r5, #0]
 801ada8:	4620      	mov	r0, r4
 801adaa:	6823      	ldr	r3, [r4, #0]
 801adac:	68db      	ldr	r3, [r3, #12]
 801adae:	4798      	blx	r3
 801adb0:	6833      	ldr	r3, [r6, #0]
 801adb2:	4630      	mov	r0, r6
 801adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adba:	4718      	bx	r3
 801adbc:	08020e3a 	.word	0x08020e3a
 801adc0:	08020f04 	.word	0x08020f04
 801adc4:	08020e44 	.word	0x08020e44
 801adc8:	20009b10 	.word	0x20009b10

0801adcc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801adcc:	b570      	push	{r4, r5, r6, lr}
 801adce:	f9b1 4000 	ldrsh.w	r4, [r1]
 801add2:	f9b0 5000 	ldrsh.w	r5, [r0]
 801add6:	42ac      	cmp	r4, r5
 801add8:	db18      	blt.n	801ae0c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801adda:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801adde:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ade2:	429a      	cmp	r2, r3
 801ade4:	db12      	blt.n	801ae0c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ade6:	8886      	ldrh	r6, [r0, #4]
 801ade8:	4435      	add	r5, r6
 801adea:	888e      	ldrh	r6, [r1, #4]
 801adec:	4434      	add	r4, r6
 801adee:	b22d      	sxth	r5, r5
 801adf0:	b224      	sxth	r4, r4
 801adf2:	42a5      	cmp	r5, r4
 801adf4:	db0a      	blt.n	801ae0c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801adf6:	88c0      	ldrh	r0, [r0, #6]
 801adf8:	4418      	add	r0, r3
 801adfa:	88cb      	ldrh	r3, [r1, #6]
 801adfc:	441a      	add	r2, r3
 801adfe:	b200      	sxth	r0, r0
 801ae00:	b212      	sxth	r2, r2
 801ae02:	4290      	cmp	r0, r2
 801ae04:	bfb4      	ite	lt
 801ae06:	2000      	movlt	r0, #0
 801ae08:	2001      	movge	r0, #1
 801ae0a:	bd70      	pop	{r4, r5, r6, pc}
 801ae0c:	2000      	movs	r0, #0
 801ae0e:	bd70      	pop	{r4, r5, r6, pc}

0801ae10 <_ZN8touchgfx11Application11getInstanceEv>:
 801ae10:	4b01      	ldr	r3, [pc, #4]	; (801ae18 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801ae12:	6818      	ldr	r0, [r3, #0]
 801ae14:	4770      	bx	lr
 801ae16:	bf00      	nop
 801ae18:	20009b18 	.word	0x20009b18

0801ae1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801ae22:	30a8      	adds	r0, #168	; 0xa8
 801ae24:	f820 3c24 	strh.w	r3, [r0, #-36]
 801ae28:	f802 3b01 	strb.w	r3, [r2], #1
 801ae2c:	4282      	cmp	r2, r0
 801ae2e:	d1fb      	bne.n	801ae28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801ae30:	4770      	bx	lr

0801ae32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ae32:	4603      	mov	r3, r0
 801ae34:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ae38:	2200      	movs	r2, #0
 801ae3a:	801a      	strh	r2, [r3, #0]
 801ae3c:	3308      	adds	r3, #8
 801ae3e:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ae42:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ae46:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ae4a:	428b      	cmp	r3, r1
 801ae4c:	d1f5      	bne.n	801ae3a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ae4e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ae52:	4770      	bx	lr

0801ae54 <_ZN8touchgfx11ApplicationC1Ev>:
 801ae54:	b570      	push	{r4, r5, r6, lr}
 801ae56:	4b16      	ldr	r3, [pc, #88]	; (801aeb0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801ae58:	2500      	movs	r5, #0
 801ae5a:	4604      	mov	r4, r0
 801ae5c:	30a8      	adds	r0, #168	; 0xa8
 801ae5e:	f840 3ca8 	str.w	r3, [r0, #-168]
 801ae62:	f820 5c24 	strh.w	r5, [r0, #-36]
 801ae66:	f7ff ffe4 	bl	801ae32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ae6a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ae6e:	f7ff ffe0 	bl	801ae32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ae72:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801ae76:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801ae7a:	490e      	ldr	r1, [pc, #56]	; (801aeb4 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801ae7c:	480e      	ldr	r0, [pc, #56]	; (801aeb8 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801ae7e:	f003 f999 	bl	801e1b4 <CRC_Lock>
 801ae82:	4e0e      	ldr	r6, [pc, #56]	; (801aebc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801ae84:	4b0e      	ldr	r3, [pc, #56]	; (801aec0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ae86:	b158      	cbz	r0, 801aea0 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801ae88:	801d      	strh	r5, [r3, #0]
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	4a0d      	ldr	r2, [pc, #52]	; (801aec4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ae8e:	4620      	mov	r0, r4
 801ae90:	6013      	str	r3, [r2, #0]
 801ae92:	4a0d      	ldr	r2, [pc, #52]	; (801aec8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ae94:	6033      	str	r3, [r6, #0]
 801ae96:	6013      	str	r3, [r2, #0]
 801ae98:	f7ff ffc0 	bl	801ae1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	bd70      	pop	{r4, r5, r6, pc}
 801aea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aea4:	2002      	movs	r0, #2
 801aea6:	801a      	strh	r2, [r3, #0]
 801aea8:	6030      	str	r0, [r6, #0]
 801aeaa:	f000 fe77 	bl	801bb9c <_ZN8touchgfx6Screen4drawEv>
 801aeae:	e7ec      	b.n	801ae8a <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801aeb0:	08020ed0 	.word	0x08020ed0
 801aeb4:	b5e8b5cd 	.word	0xb5e8b5cd
 801aeb8:	f407a5c2 	.word	0xf407a5c2
 801aebc:	20009b10 	.word	0x20009b10
 801aec0:	20000078 	.word	0x20000078
 801aec4:	20009b18 	.word	0x20009b18
 801aec8:	20009b14 	.word	0x20009b14

0801aecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801aecc:	2300      	movs	r3, #0
 801aece:	8003      	strh	r3, [r0, #0]
 801aed0:	8043      	strh	r3, [r0, #2]
 801aed2:	8083      	strh	r3, [r0, #4]
 801aed4:	80c3      	strh	r3, [r0, #6]
 801aed6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801aeda:	429a      	cmp	r2, r3
 801aedc:	b530      	push	{r4, r5, lr}
 801aede:	da12      	bge.n	801af06 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801aee0:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801aee4:	3b01      	subs	r3, #1
 801aee6:	6825      	ldr	r5, [r4, #0]
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	6005      	str	r5, [r0, #0]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	6865      	ldr	r5, [r4, #4]
 801aef0:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801aef4:	6045      	str	r5, [r0, #4]
 801aef6:	da06      	bge.n	801af06 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801aef8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801aefc:	681d      	ldr	r5, [r3, #0]
 801aefe:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801af02:	685d      	ldr	r5, [r3, #4]
 801af04:	6065      	str	r5, [r4, #4]
 801af06:	bd30      	pop	{r4, r5, pc}

0801af08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801af08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af0a:	e88d 0006 	stmia.w	sp, {r1, r2}
 801af0e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801af12:	4604      	mov	r4, r0
 801af14:	466b      	mov	r3, sp
 801af16:	2a07      	cmp	r2, #7
 801af18:	dd06      	ble.n	801af28 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801af1a:	4b09      	ldr	r3, [pc, #36]	; (801af40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801af1c:	f240 11f9 	movw	r1, #505	; 0x1f9
 801af20:	4a08      	ldr	r2, [pc, #32]	; (801af44 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801af22:	4809      	ldr	r0, [pc, #36]	; (801af48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801af24:	f003 fa48 	bl	801e3b8 <__assert_func>
 801af28:	1c51      	adds	r1, r2, #1
 801af2a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801af2e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801af32:	cb03      	ldmia	r3!, {r0, r1}
 801af34:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801af38:	6069      	str	r1, [r5, #4]
 801af3a:	b003      	add	sp, #12
 801af3c:	bd30      	pop	{r4, r5, pc}
 801af3e:	bf00      	nop
 801af40:	08020e6e 	.word	0x08020e6e
 801af44:	08020f48 	.word	0x08020f48
 801af48:	08020e9d 	.word	0x08020e9d

0801af4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801af4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af50:	b089      	sub	sp, #36	; 0x24
 801af52:	4606      	mov	r6, r0
 801af54:	4668      	mov	r0, sp
 801af56:	466c      	mov	r4, sp
 801af58:	e88d 0006 	stmia.w	sp, {r1, r2}
 801af5c:	f7f3 fabe 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 801af60:	bbb0      	cbnz	r0, 801afd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801af62:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801af66:	b1fd      	cbz	r5, 801afa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801af68:	3d01      	subs	r5, #1
 801af6a:	af04      	add	r7, sp, #16
 801af6c:	f04f 090a 	mov.w	r9, #10
 801af70:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801af74:	ab02      	add	r3, sp, #8
 801af76:	fa1f f885 	uxth.w	r8, r5
 801af7a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801af7e:	6851      	ldr	r1, [r2, #4]
 801af80:	c303      	stmia	r3!, {r0, r1}
 801af82:	4621      	mov	r1, r4
 801af84:	a802      	add	r0, sp, #8
 801af86:	f7ff ff21 	bl	801adcc <_ZNK8touchgfx4Rect8includesERKS0_>
 801af8a:	bb08      	cbnz	r0, 801afd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801af8c:	a902      	add	r1, sp, #8
 801af8e:	4620      	mov	r0, r4
 801af90:	f7ff ff1c 	bl	801adcc <_ZNK8touchgfx4Rect8includesERKS0_>
 801af94:	b1f8      	cbz	r0, 801afd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801af96:	4642      	mov	r2, r8
 801af98:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801af9c:	a806      	add	r0, sp, #24
 801af9e:	f7ff ff95 	bl	801aecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801afa2:	f115 35ff 	adds.w	r5, r5, #4294967295
 801afa6:	d2e3      	bcs.n	801af70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801afa8:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801afac:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801afb0:	2b08      	cmp	r3, #8
 801afb2:	d108      	bne.n	801afc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801afb4:	4629      	mov	r1, r5
 801afb6:	a806      	add	r0, sp, #24
 801afb8:	2207      	movs	r2, #7
 801afba:	f7ff ff87 	bl	801aecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801afbe:	a906      	add	r1, sp, #24
 801afc0:	4620      	mov	r0, r4
 801afc2:	f7f3 f9ff 	bl	800e3c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801afc6:	4628      	mov	r0, r5
 801afc8:	e894 0006 	ldmia.w	r4, {r1, r2}
 801afcc:	f7ff ff9c 	bl	801af08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801afd0:	b009      	add	sp, #36	; 0x24
 801afd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afd6:	4621      	mov	r1, r4
 801afd8:	a802      	add	r0, sp, #8
 801afda:	f7f3 f930 	bl	800e23e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801afde:	b150      	cbz	r0, 801aff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801afe0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801afe4:	a806      	add	r0, sp, #24
 801afe6:	4642      	mov	r2, r8
 801afe8:	f7ff ff70 	bl	801aecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801afec:	a902      	add	r1, sp, #8
 801afee:	4620      	mov	r0, r4
 801aff0:	f7f3 f9e8 	bl	800e3c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aff4:	e7d5      	b.n	801afa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801aff6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801affa:	e887 0003 	stmia.w	r7, {r0, r1}
 801affe:	a902      	add	r1, sp, #8
 801b000:	4638      	mov	r0, r7
 801b002:	f7f3 f9df 	bl	800e3c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b006:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b00a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b00e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b012:	fb13 f302 	smulbb	r3, r3, r2
 801b016:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b01a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b01e:	fb11 f102 	smulbb	r1, r1, r2
 801b022:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b026:	fb09 f303 	mul.w	r3, r9, r3
 801b02a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801b02e:	220b      	movs	r2, #11
 801b030:	434a      	muls	r2, r1
 801b032:	4293      	cmp	r3, r2
 801b034:	dab5      	bge.n	801afa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b036:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b03a:	a806      	add	r0, sp, #24
 801b03c:	4642      	mov	r2, r8
 801b03e:	f7ff ff45 	bl	801aecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b042:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b046:	e884 0003 	stmia.w	r4, {r0, r1}
 801b04a:	e7aa      	b.n	801afa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801b04c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b04c:	4b1b      	ldr	r3, [pc, #108]	; (801b0bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801b04e:	b530      	push	{r4, r5, lr}
 801b050:	460c      	mov	r4, r1
 801b052:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b056:	4b1a      	ldr	r3, [pc, #104]	; (801b0c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801b058:	b085      	sub	sp, #20
 801b05a:	4605      	mov	r5, r0
 801b05c:	6820      	ldr	r0, [r4, #0]
 801b05e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b062:	2300      	movs	r3, #0
 801b064:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b068:	f8ad 3000 	strh.w	r3, [sp]
 801b06c:	6861      	ldr	r1, [r4, #4]
 801b06e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b072:	ab02      	add	r3, sp, #8
 801b074:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b078:	c303      	stmia	r3!, {r0, r1}
 801b07a:	4669      	mov	r1, sp
 801b07c:	a802      	add	r0, sp, #8
 801b07e:	f7f3 f925 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801b082:	ab02      	add	r3, sp, #8
 801b084:	cb03      	ldmia	r3!, {r0, r1}
 801b086:	4b0f      	ldr	r3, [pc, #60]	; (801b0c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b088:	6020      	str	r0, [r4, #0]
 801b08a:	6818      	ldr	r0, [r3, #0]
 801b08c:	6061      	str	r1, [r4, #4]
 801b08e:	b138      	cbz	r0, 801b0a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801b090:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801b094:	b133      	cbz	r3, 801b0a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801b096:	6821      	ldr	r1, [r4, #0]
 801b098:	4628      	mov	r0, r5
 801b09a:	6862      	ldr	r2, [r4, #4]
 801b09c:	f7ff ff56 	bl	801af4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b0a0:	b005      	add	sp, #20
 801b0a2:	bd30      	pop	{r4, r5, pc}
 801b0a4:	6803      	ldr	r3, [r0, #0]
 801b0a6:	4621      	mov	r1, r4
 801b0a8:	689b      	ldr	r3, [r3, #8]
 801b0aa:	4798      	blx	r3
 801b0ac:	4b06      	ldr	r3, [pc, #24]	; (801b0c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b0ae:	4621      	mov	r1, r4
 801b0b0:	6818      	ldr	r0, [r3, #0]
 801b0b2:	6803      	ldr	r3, [r0, #0]
 801b0b4:	695b      	ldr	r3, [r3, #20]
 801b0b6:	4798      	blx	r3
 801b0b8:	e7f2      	b.n	801b0a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801b0ba:	bf00      	nop
 801b0bc:	20009ab0 	.word	0x20009ab0
 801b0c0:	20009ab2 	.word	0x20009ab2
 801b0c4:	20009b10 	.word	0x20009b10
 801b0c8:	20009abc 	.word	0x20009abc

0801b0cc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0d0:	4604      	mov	r4, r0
 801b0d2:	b096      	sub	sp, #88	; 0x58
 801b0d4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801b0d8:	b129      	cbz	r1, 801b0e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b0da:	2300      	movs	r3, #0
 801b0dc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b0e0:	b016      	add	sp, #88	; 0x58
 801b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0e6:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d0f8      	beq.n	801b0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b0ee:	4f6e      	ldr	r7, [pc, #440]	; (801b2a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801b0f0:	a805      	add	r0, sp, #20
 801b0f2:	f7ff fe9e 	bl	801ae32 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b0f6:	883d      	ldrh	r5, [r7, #0]
 801b0f8:	462e      	mov	r6, r5
 801b0fa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b0fe:	429e      	cmp	r6, r3
 801b100:	db10      	blt.n	801b124 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801b102:	462e      	mov	r6, r5
 801b104:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b108:	429e      	cmp	r6, r3
 801b10a:	da17      	bge.n	801b13c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b10c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b110:	3601      	adds	r6, #1
 801b112:	4620      	mov	r0, r4
 801b114:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b118:	b2b6      	uxth	r6, r6
 801b11a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b11e:	f7ff ff15 	bl	801af4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b122:	e7ef      	b.n	801b104 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801b124:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b128:	3601      	adds	r6, #1
 801b12a:	a805      	add	r0, sp, #20
 801b12c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b130:	b2b6      	uxth	r6, r6
 801b132:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b136:	f7ff fee7 	bl	801af08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b13a:	e7de      	b.n	801b0fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801b13c:	4e5b      	ldr	r6, [pc, #364]	; (801b2ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801b13e:	6833      	ldr	r3, [r6, #0]
 801b140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b144:	2b01      	cmp	r3, #1
 801b146:	f040 8094 	bne.w	801b272 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801b14a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b14e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b152:	f04f 0900 	mov.w	r9, #0
 801b156:	33aa      	adds	r3, #170	; 0xaa
 801b158:	42a8      	cmp	r0, r5
 801b15a:	f103 0308 	add.w	r3, r3, #8
 801b15e:	dd0a      	ble.n	801b176 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801b160:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b164:	3501      	adds	r5, #1
 801b166:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b16a:	440a      	add	r2, r1
 801b16c:	b212      	sxth	r2, r2
 801b16e:	4591      	cmp	r9, r2
 801b170:	bfb8      	it	lt
 801b172:	4691      	movlt	r9, r2
 801b174:	e7f0      	b.n	801b158 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801b176:	4b4e      	ldr	r3, [pc, #312]	; (801b2b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801b178:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801b2b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801b17c:	881d      	ldrh	r5, [r3, #0]
 801b17e:	2300      	movs	r3, #0
 801b180:	08ed      	lsrs	r5, r5, #3
 801b182:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b186:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b18a:	2d01      	cmp	r5, #1
 801b18c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b190:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b194:	bfb8      	it	lt
 801b196:	2501      	movlt	r5, #1
 801b198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b19c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b1a0:	6830      	ldr	r0, [r6, #0]
 801b1a2:	4413      	add	r3, r2
 801b1a4:	b21b      	sxth	r3, r3
 801b1a6:	4599      	cmp	r9, r3
 801b1a8:	6803      	ldr	r3, [r0, #0]
 801b1aa:	dd45      	ble.n	801b238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801b1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b1b0:	4798      	blx	r3
 801b1b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b1b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b1ba:	4413      	add	r3, r2
 801b1bc:	b21b      	sxth	r3, r3
 801b1be:	18ea      	adds	r2, r5, r3
 801b1c0:	4290      	cmp	r0, r2
 801b1c2:	da6d      	bge.n	801b2a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801b1c4:	4581      	cmp	r9, r0
 801b1c6:	dd6b      	ble.n	801b2a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801b1c8:	4298      	cmp	r0, r3
 801b1ca:	da01      	bge.n	801b1d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	dc69      	bgt.n	801b2a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801b1d0:	6830      	ldr	r0, [r6, #0]
 801b1d2:	2101      	movs	r1, #1
 801b1d4:	6803      	ldr	r3, [r0, #0]
 801b1d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1d8:	4798      	blx	r3
 801b1da:	e7dd      	b.n	801b198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801b1dc:	4548      	cmp	r0, r9
 801b1de:	bfa8      	it	ge
 801b1e0:	4648      	movge	r0, r9
 801b1e2:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b1e6:	2100      	movs	r1, #0
 801b1e8:	1ac0      	subs	r0, r0, r3
 801b1ea:	f8b7 a000 	ldrh.w	sl, [r7]
 801b1ee:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b1f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b1f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 801b1fa:	f8ad 000a 	strh.w	r0, [sp, #10]
 801b1fe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b202:	459a      	cmp	sl, r3
 801b204:	dac8      	bge.n	801b198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801b206:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b20a:	ab03      	add	r3, sp, #12
 801b20c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b210:	6851      	ldr	r1, [r2, #4]
 801b212:	c303      	stmia	r3!, {r0, r1}
 801b214:	a803      	add	r0, sp, #12
 801b216:	a901      	add	r1, sp, #4
 801b218:	f7f3 f858 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801b21c:	a803      	add	r0, sp, #12
 801b21e:	f7f3 f95d 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 801b222:	b920      	cbnz	r0, 801b22e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801b224:	6823      	ldr	r3, [r4, #0]
 801b226:	a903      	add	r1, sp, #12
 801b228:	4620      	mov	r0, r4
 801b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b22c:	4798      	blx	r3
 801b22e:	f10a 0a01 	add.w	sl, sl, #1
 801b232:	fa1f fa8a 	uxth.w	sl, sl
 801b236:	e7e2      	b.n	801b1fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801b238:	69db      	ldr	r3, [r3, #28]
 801b23a:	4798      	blx	r3
 801b23c:	4b1d      	ldr	r3, [pc, #116]	; (801b2b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801b23e:	781b      	ldrb	r3, [r3, #0]
 801b240:	2b00      	cmp	r3, #0
 801b242:	f43f af4d 	beq.w	801b0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b246:	2300      	movs	r3, #0
 801b248:	883d      	ldrh	r5, [r7, #0]
 801b24a:	34ea      	adds	r4, #234	; 0xea
 801b24c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b250:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801b254:	429d      	cmp	r5, r3
 801b256:	f6bf af43 	bge.w	801b0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b25a:	ab16      	add	r3, sp, #88	; 0x58
 801b25c:	4620      	mov	r0, r4
 801b25e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b262:	3501      	adds	r5, #1
 801b264:	3b44      	subs	r3, #68	; 0x44
 801b266:	b2ad      	uxth	r5, r5
 801b268:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b26c:	f7ff fe4c 	bl	801af08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b270:	e7ee      	b.n	801b250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801b272:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b276:	429d      	cmp	r5, r3
 801b278:	dae0      	bge.n	801b23c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b27a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b27e:	ab03      	add	r3, sp, #12
 801b280:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b284:	6851      	ldr	r1, [r2, #4]
 801b286:	c303      	stmia	r3!, {r0, r1}
 801b288:	a803      	add	r0, sp, #12
 801b28a:	f7f3 f927 	bl	800e4dc <_ZNK8touchgfx4Rect7isEmptyEv>
 801b28e:	b920      	cbnz	r0, 801b29a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801b290:	6823      	ldr	r3, [r4, #0]
 801b292:	a903      	add	r1, sp, #12
 801b294:	4620      	mov	r0, r4
 801b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b298:	4798      	blx	r3
 801b29a:	3501      	adds	r5, #1
 801b29c:	b2ad      	uxth	r5, r5
 801b29e:	e7e8      	b.n	801b272 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801b2a0:	4298      	cmp	r0, r3
 801b2a2:	da9b      	bge.n	801b1dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801b2a4:	4648      	mov	r0, r9
 801b2a6:	e79c      	b.n	801b1e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801b2a8:	20000078 	.word	0x20000078
 801b2ac:	20009abc 	.word	0x20009abc
 801b2b0:	20009ab2 	.word	0x20009ab2
 801b2b4:	20009aba 	.word	0x20009aba
 801b2b8:	20009ab0 	.word	0x20009ab0

0801b2bc <_ZNK8touchgfx4Font8getGlyphEt>:
 801b2bc:	b513      	push	{r0, r1, r4, lr}
 801b2be:	2200      	movs	r2, #0
 801b2c0:	ab02      	add	r3, sp, #8
 801b2c2:	9201      	str	r2, [sp, #4]
 801b2c4:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801b2c8:	6802      	ldr	r2, [r0, #0]
 801b2ca:	6894      	ldr	r4, [r2, #8]
 801b2cc:	aa01      	add	r2, sp, #4
 801b2ce:	47a0      	blx	r4
 801b2d0:	b002      	add	sp, #8
 801b2d2:	bd10      	pop	{r4, pc}

0801b2d4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801b2d4:	8940      	ldrh	r0, [r0, #10]
 801b2d6:	4770      	bx	lr

0801b2d8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801b2d8:	8980      	ldrh	r0, [r0, #12]
 801b2da:	4770      	bx	lr

0801b2dc <_ZNK8touchgfx4Font13getFontHeightEv>:
 801b2dc:	8880      	ldrh	r0, [r0, #4]
 801b2de:	4770      	bx	lr

0801b2e0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801b2e0:	7983      	ldrb	r3, [r0, #6]
 801b2e2:	8880      	ldrh	r0, [r0, #4]
 801b2e4:	4418      	add	r0, r3
 801b2e6:	b280      	uxth	r0, r0
 801b2e8:	4770      	bx	lr

0801b2ea <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801b2ea:	79c0      	ldrb	r0, [r0, #7]
 801b2ec:	4770      	bx	lr

0801b2ee <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801b2ee:	2000      	movs	r0, #0
 801b2f0:	4770      	bx	lr

0801b2f2 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b2f2:	b508      	push	{r3, lr}
 801b2f4:	6803      	ldr	r3, [r0, #0]
 801b2f6:	68db      	ldr	r3, [r3, #12]
 801b2f8:	4798      	blx	r3
 801b2fa:	b140      	cbz	r0, 801b30e <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801b2fc:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801b300:	7a83      	ldrb	r3, [r0, #10]
 801b302:	2a00      	cmp	r2, #0
 801b304:	bfb4      	ite	lt
 801b306:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801b30a:	2000      	movge	r0, #0
 801b30c:	4318      	orrs	r0, r3
 801b30e:	bd08      	pop	{r3, pc}

0801b310 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801b310:	b40e      	push	{r1, r2, r3}
 801b312:	b533      	push	{r0, r1, r4, r5, lr}
 801b314:	ab05      	add	r3, sp, #20
 801b316:	f853 2b04 	ldr.w	r2, [r3], #4
 801b31a:	9301      	str	r3, [sp, #4]
 801b31c:	4b0a      	ldr	r3, [pc, #40]	; (801b348 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801b31e:	685c      	ldr	r4, [r3, #4]
 801b320:	f014 0f01 	tst.w	r4, #1
 801b324:	ea4f 0464 	mov.w	r4, r4, asr #1
 801b328:	bf1c      	itt	ne
 801b32a:	681b      	ldrne	r3, [r3, #0]
 801b32c:	5901      	ldrne	r1, [r0, r4]
 801b32e:	4420      	add	r0, r4
 801b330:	bf0c      	ite	eq
 801b332:	681d      	ldreq	r5, [r3, #0]
 801b334:	58cd      	ldrne	r5, [r1, r3]
 801b336:	2100      	movs	r1, #0
 801b338:	9b01      	ldr	r3, [sp, #4]
 801b33a:	47a8      	blx	r5
 801b33c:	b002      	add	sp, #8
 801b33e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b342:	b003      	add	sp, #12
 801b344:	4770      	bx	lr
 801b346:	bf00      	nop
 801b348:	20000068 	.word	0x20000068

0801b34c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801b34c:	b40c      	push	{r2, r3}
 801b34e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b350:	ab06      	add	r3, sp, #24
 801b352:	f853 2b04 	ldr.w	r2, [r3], #4
 801b356:	9301      	str	r3, [sp, #4]
 801b358:	4b09      	ldr	r3, [pc, #36]	; (801b380 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801b35a:	685c      	ldr	r4, [r3, #4]
 801b35c:	f014 0f01 	tst.w	r4, #1
 801b360:	ea4f 0464 	mov.w	r4, r4, asr #1
 801b364:	bf1c      	itt	ne
 801b366:	681b      	ldrne	r3, [r3, #0]
 801b368:	5905      	ldrne	r5, [r0, r4]
 801b36a:	4420      	add	r0, r4
 801b36c:	bf0c      	ite	eq
 801b36e:	681d      	ldreq	r5, [r3, #0]
 801b370:	58ed      	ldrne	r5, [r5, r3]
 801b372:	9b01      	ldr	r3, [sp, #4]
 801b374:	47a8      	blx	r5
 801b376:	b003      	add	sp, #12
 801b378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b37c:	b002      	add	sp, #8
 801b37e:	4770      	bx	lr
 801b380:	20000068 	.word	0x20000068

0801b384 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b384:	b40e      	push	{r1, r2, r3}
 801b386:	b510      	push	{r4, lr}
 801b388:	b089      	sub	sp, #36	; 0x24
 801b38a:	ab0b      	add	r3, sp, #44	; 0x2c
 801b38c:	a802      	add	r0, sp, #8
 801b38e:	f853 4b04 	ldr.w	r4, [r3], #4
 801b392:	9301      	str	r3, [sp, #4]
 801b394:	f000 fe14 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801b398:	4621      	mov	r1, r4
 801b39a:	9a01      	ldr	r2, [sp, #4]
 801b39c:	a802      	add	r0, sp, #8
 801b39e:	2401      	movs	r4, #1
 801b3a0:	f000 fe17 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801b3a4:	a802      	add	r0, sp, #8
 801b3a6:	f000 fdbb 	bl	801bf20 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3aa:	b138      	cbz	r0, 801b3bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801b3ac:	280a      	cmp	r0, #10
 801b3ae:	a802      	add	r0, sp, #8
 801b3b0:	bf04      	itt	eq
 801b3b2:	3401      	addeq	r4, #1
 801b3b4:	b224      	sxtheq	r4, r4
 801b3b6:	f000 fdb3 	bl	801bf20 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3ba:	e7f6      	b.n	801b3aa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801b3bc:	b2a0      	uxth	r0, r4
 801b3be:	b009      	add	sp, #36	; 0x24
 801b3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3c4:	b003      	add	sp, #12
 801b3c6:	4770      	bx	lr

0801b3c8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b3c8:	b40e      	push	{r1, r2, r3}
 801b3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3cc:	b088      	sub	sp, #32
 801b3ce:	4604      	mov	r4, r0
 801b3d0:	2600      	movs	r6, #0
 801b3d2:	ab0d      	add	r3, sp, #52	; 0x34
 801b3d4:	a802      	add	r0, sp, #8
 801b3d6:	f853 5b04 	ldr.w	r5, [r3], #4
 801b3da:	9301      	str	r3, [sp, #4]
 801b3dc:	f000 fdf0 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801b3e0:	4629      	mov	r1, r5
 801b3e2:	9a01      	ldr	r2, [sp, #4]
 801b3e4:	a802      	add	r0, sp, #8
 801b3e6:	4d1f      	ldr	r5, [pc, #124]	; (801b464 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801b3e8:	f000 fdf3 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801b3ec:	2100      	movs	r1, #0
 801b3ee:	a802      	add	r0, sp, #8
 801b3f0:	f000 fda0 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b3f4:	b378      	cbz	r0, 801b456 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801b3f6:	280a      	cmp	r0, #10
 801b3f8:	d028      	beq.n	801b44c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	4601      	mov	r1, r0
 801b3fe:	4620      	mov	r0, r4
 801b400:	68db      	ldr	r3, [r3, #12]
 801b402:	4798      	blx	r3
 801b404:	b310      	cbz	r0, 801b44c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801b406:	7b41      	ldrb	r1, [r0, #13]
 801b408:	f890 e008 	ldrb.w	lr, [r0, #8]
 801b40c:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b410:	88a3      	ldrh	r3, [r4, #4]
 801b412:	79c0      	ldrb	r0, [r0, #7]
 801b414:	bf14      	ite	ne
 801b416:	462f      	movne	r7, r5
 801b418:	2700      	moveq	r7, #0
 801b41a:	f011 0f20 	tst.w	r1, #32
 801b41e:	ea47 070e 	orr.w	r7, r7, lr
 801b422:	bf14      	ite	ne
 801b424:	f44f 7280 	movne.w	r2, #256	; 0x100
 801b428:	2200      	moveq	r2, #0
 801b42a:	f011 0f10 	tst.w	r1, #16
 801b42e:	ea42 0207 	orr.w	r2, r2, r7
 801b432:	eba3 0302 	sub.w	r3, r3, r2
 801b436:	bf14      	ite	ne
 801b438:	f44f 7280 	movne.w	r2, #256	; 0x100
 801b43c:	2200      	moveq	r2, #0
 801b43e:	4302      	orrs	r2, r0
 801b440:	fa12 f383 	uxtah	r3, r2, r3
 801b444:	b29b      	uxth	r3, r3
 801b446:	42b3      	cmp	r3, r6
 801b448:	bfc8      	it	gt
 801b44a:	b21e      	sxthgt	r6, r3
 801b44c:	2100      	movs	r1, #0
 801b44e:	a802      	add	r0, sp, #8
 801b450:	f000 fd70 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b454:	e7ce      	b.n	801b3f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801b456:	b2b0      	uxth	r0, r6
 801b458:	b008      	add	sp, #32
 801b45a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b45e:	b003      	add	sp, #12
 801b460:	4770      	bx	lr
 801b462:	bf00      	nop
 801b464:	fffffe00 	.word	0xfffffe00

0801b468 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b468:	b40e      	push	{r1, r2, r3}
 801b46a:	b530      	push	{r4, r5, lr}
 801b46c:	b088      	sub	sp, #32
 801b46e:	4605      	mov	r5, r0
 801b470:	ab0b      	add	r3, sp, #44	; 0x2c
 801b472:	a802      	add	r0, sp, #8
 801b474:	f853 4b04 	ldr.w	r4, [r3], #4
 801b478:	9301      	str	r3, [sp, #4]
 801b47a:	f000 fda1 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801b47e:	4621      	mov	r1, r4
 801b480:	9a01      	ldr	r2, [sp, #4]
 801b482:	a802      	add	r0, sp, #8
 801b484:	24ff      	movs	r4, #255	; 0xff
 801b486:	f000 fda4 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801b48a:	2100      	movs	r1, #0
 801b48c:	a802      	add	r0, sp, #8
 801b48e:	f000 fd51 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b492:	b1a0      	cbz	r0, 801b4be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801b494:	280a      	cmp	r0, #10
 801b496:	d00d      	beq.n	801b4b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801b498:	682b      	ldr	r3, [r5, #0]
 801b49a:	4601      	mov	r1, r0
 801b49c:	4628      	mov	r0, r5
 801b49e:	68db      	ldr	r3, [r3, #12]
 801b4a0:	4798      	blx	r3
 801b4a2:	b138      	cbz	r0, 801b4b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801b4a4:	792b      	ldrb	r3, [r5, #4]
 801b4a6:	7a02      	ldrb	r2, [r0, #8]
 801b4a8:	1a9b      	subs	r3, r3, r2
 801b4aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801b4ae:	429c      	cmp	r4, r3
 801b4b0:	bfa8      	it	ge
 801b4b2:	461c      	movge	r4, r3
 801b4b4:	2100      	movs	r1, #0
 801b4b6:	a802      	add	r0, sp, #8
 801b4b8:	f000 fd3c 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b4bc:	e7e9      	b.n	801b492 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801b4be:	4620      	mov	r0, r4
 801b4c0:	b008      	add	sp, #32
 801b4c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b4c6:	b003      	add	sp, #12
 801b4c8:	4770      	bx	lr

0801b4ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b4ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ce:	f04f 0a00 	mov.w	sl, #0
 801b4d2:	b087      	sub	sp, #28
 801b4d4:	4614      	mov	r4, r2
 801b4d6:	461d      	mov	r5, r3
 801b4d8:	4606      	mov	r6, r0
 801b4da:	4657      	mov	r7, sl
 801b4dc:	4668      	mov	r0, sp
 801b4de:	46d1      	mov	r9, sl
 801b4e0:	4688      	mov	r8, r1
 801b4e2:	f000 fd6d 	bl	801bfc0 <_ZN8touchgfx12TextProviderC1Ev>
 801b4e6:	462a      	mov	r2, r5
 801b4e8:	4621      	mov	r1, r4
 801b4ea:	4668      	mov	r0, sp
 801b4ec:	f000 fd71 	bl	801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801b4f0:	4641      	mov	r1, r8
 801b4f2:	4668      	mov	r0, sp
 801b4f4:	f000 fd1e 	bl	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b4f8:	4605      	mov	r5, r0
 801b4fa:	b108      	cbz	r0, 801b500 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801b4fc:	280a      	cmp	r0, #10
 801b4fe:	d107      	bne.n	801b510 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b500:	45b9      	cmp	r9, r7
 801b502:	dd00      	ble.n	801b506 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801b504:	464f      	mov	r7, r9
 801b506:	f04f 0900 	mov.w	r9, #0
 801b50a:	e01e      	b.n	801b54a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801b50c:	46aa      	mov	sl, r5
 801b50e:	e7ef      	b.n	801b4f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801b510:	6833      	ldr	r3, [r6, #0]
 801b512:	4601      	mov	r1, r0
 801b514:	4630      	mov	r0, r6
 801b516:	68db      	ldr	r3, [r3, #12]
 801b518:	4798      	blx	r3
 801b51a:	4602      	mov	r2, r0
 801b51c:	2800      	cmp	r0, #0
 801b51e:	d0f5      	beq.n	801b50c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801b520:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b524:	4651      	mov	r1, sl
 801b526:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	6833      	ldr	r3, [r6, #0]
 801b52e:	8885      	ldrh	r5, [r0, #4]
 801b530:	4630      	mov	r0, r6
 801b532:	bfb4      	ite	lt
 801b534:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801b538:	2400      	movge	r4, #0
 801b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b53c:	ea44 040b 	orr.w	r4, r4, fp
 801b540:	4798      	blx	r3
 801b542:	4404      	add	r4, r0
 801b544:	444c      	add	r4, r9
 801b546:	fa1f f984 	uxth.w	r9, r4
 801b54a:	2d00      	cmp	r5, #0
 801b54c:	d1de      	bne.n	801b50c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801b54e:	4638      	mov	r0, r7
 801b550:	b007      	add	sp, #28
 801b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b556 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801b556:	2000      	movs	r0, #0
 801b558:	4770      	bx	lr

0801b55a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b55a:	b513      	push	{r0, r1, r4, lr}
 801b55c:	1d01      	adds	r1, r0, #4
 801b55e:	4603      	mov	r3, r0
 801b560:	c903      	ldmia	r1, {r0, r1}
 801b562:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b566:	2100      	movs	r1, #0
 801b568:	4618      	mov	r0, r3
 801b56a:	f8ad 1000 	strh.w	r1, [sp]
 801b56e:	f8ad 1002 	strh.w	r1, [sp, #2]
 801b572:	6819      	ldr	r1, [r3, #0]
 801b574:	690c      	ldr	r4, [r1, #16]
 801b576:	4669      	mov	r1, sp
 801b578:	47a0      	blx	r4
 801b57a:	b002      	add	sp, #8
 801b57c:	bd10      	pop	{r4, pc}

0801b57e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b57e:	b538      	push	{r3, r4, r5, lr}
 801b580:	680b      	ldr	r3, [r1, #0]
 801b582:	460c      	mov	r4, r1
 801b584:	4605      	mov	r5, r0
 801b586:	68db      	ldr	r3, [r3, #12]
 801b588:	4798      	blx	r3
 801b58a:	6823      	ldr	r3, [r4, #0]
 801b58c:	4620      	mov	r0, r4
 801b58e:	4629      	mov	r1, r5
 801b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b592:	4798      	blx	r3
 801b594:	4628      	mov	r0, r5
 801b596:	bd38      	pop	{r3, r4, r5, pc}

0801b598 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b598:	b410      	push	{r4}
 801b59a:	880a      	ldrh	r2, [r1, #0]
 801b59c:	8884      	ldrh	r4, [r0, #4]
 801b59e:	4422      	add	r2, r4
 801b5a0:	800a      	strh	r2, [r1, #0]
 801b5a2:	884a      	ldrh	r2, [r1, #2]
 801b5a4:	88c4      	ldrh	r4, [r0, #6]
 801b5a6:	4422      	add	r2, r4
 801b5a8:	804a      	strh	r2, [r1, #2]
 801b5aa:	6940      	ldr	r0, [r0, #20]
 801b5ac:	b120      	cbz	r0, 801b5b8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b5ae:	6803      	ldr	r3, [r0, #0]
 801b5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5b6:	4718      	bx	r3
 801b5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5bc:	4770      	bx	lr

0801b5be <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b5be:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5c0:	460b      	mov	r3, r1
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	4604      	mov	r4, r0
 801b5c6:	b901      	cbnz	r1, 801b5ca <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b5c8:	b1f2      	cbz	r2, 801b608 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801b5ca:	1d27      	adds	r7, r4, #4
 801b5cc:	ad02      	add	r5, sp, #8
 801b5ce:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b5d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b5d6:	88e1      	ldrh	r1, [r4, #6]
 801b5d8:	4620      	mov	r0, r4
 801b5da:	440a      	add	r2, r1
 801b5dc:	88a1      	ldrh	r1, [r4, #4]
 801b5de:	4419      	add	r1, r3
 801b5e0:	6823      	ldr	r3, [r4, #0]
 801b5e2:	b212      	sxth	r2, r2
 801b5e4:	b209      	sxth	r1, r1
 801b5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b5e8:	4798      	blx	r3
 801b5ea:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b5ee:	e885 0003 	stmia.w	r5, {r0, r1}
 801b5f2:	6960      	ldr	r0, [r4, #20]
 801b5f4:	b150      	cbz	r0, 801b60c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801b5f6:	6803      	ldr	r3, [r0, #0]
 801b5f8:	4669      	mov	r1, sp
 801b5fa:	691b      	ldr	r3, [r3, #16]
 801b5fc:	4798      	blx	r3
 801b5fe:	6960      	ldr	r0, [r4, #20]
 801b600:	6803      	ldr	r3, [r0, #0]
 801b602:	691b      	ldr	r3, [r3, #16]
 801b604:	4629      	mov	r1, r5
 801b606:	4798      	blx	r3
 801b608:	b005      	add	sp, #20
 801b60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b60c:	f7ff fc00 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 801b610:	6803      	ldr	r3, [r0, #0]
 801b612:	4669      	mov	r1, sp
 801b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b616:	4798      	blx	r3
 801b618:	f7ff fbfa 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 801b61c:	6803      	ldr	r3, [r0, #0]
 801b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b620:	e7f0      	b.n	801b604 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801b622 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b622:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b624:	8882      	ldrh	r2, [r0, #4]
 801b626:	4605      	mov	r5, r0
 801b628:	880b      	ldrh	r3, [r1, #0]
 801b62a:	460c      	mov	r4, r1
 801b62c:	4413      	add	r3, r2
 801b62e:	800b      	strh	r3, [r1, #0]
 801b630:	884b      	ldrh	r3, [r1, #2]
 801b632:	88c2      	ldrh	r2, [r0, #6]
 801b634:	4413      	add	r3, r2
 801b636:	4602      	mov	r2, r0
 801b638:	804b      	strh	r3, [r1, #2]
 801b63a:	466b      	mov	r3, sp
 801b63c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b640:	6851      	ldr	r1, [r2, #4]
 801b642:	c303      	stmia	r3!, {r0, r1}
 801b644:	4621      	mov	r1, r4
 801b646:	4668      	mov	r0, sp
 801b648:	f7f2 fe40 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801b64c:	466b      	mov	r3, sp
 801b64e:	cb03      	ldmia	r3!, {r0, r1}
 801b650:	6020      	str	r0, [r4, #0]
 801b652:	6061      	str	r1, [r4, #4]
 801b654:	6968      	ldr	r0, [r5, #20]
 801b656:	b128      	cbz	r0, 801b664 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b658:	6803      	ldr	r3, [r0, #0]
 801b65a:	691b      	ldr	r3, [r3, #16]
 801b65c:	4621      	mov	r1, r4
 801b65e:	4798      	blx	r3
 801b660:	b003      	add	sp, #12
 801b662:	bd30      	pop	{r4, r5, pc}
 801b664:	f7ff fbd4 	bl	801ae10 <_ZN8touchgfx11Application11getInstanceEv>
 801b668:	6803      	ldr	r3, [r0, #0]
 801b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b66c:	e7f6      	b.n	801b65c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b66e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b66e:	b570      	push	{r4, r5, r6, lr}
 801b670:	8882      	ldrh	r2, [r0, #4]
 801b672:	460c      	mov	r4, r1
 801b674:	880b      	ldrh	r3, [r1, #0]
 801b676:	4605      	mov	r5, r0
 801b678:	4413      	add	r3, r2
 801b67a:	800b      	strh	r3, [r1, #0]
 801b67c:	884b      	ldrh	r3, [r1, #2]
 801b67e:	88c2      	ldrh	r2, [r0, #6]
 801b680:	4413      	add	r3, r2
 801b682:	804b      	strh	r3, [r1, #2]
 801b684:	1d01      	adds	r1, r0, #4
 801b686:	4620      	mov	r0, r4
 801b688:	f7f2 fe20 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801b68c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b690:	b163      	cbz	r3, 801b6ac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b692:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b696:	b933      	cbnz	r3, 801b6a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801b698:	bd70      	pop	{r4, r5, r6, pc}
 801b69a:	6803      	ldr	r3, [r0, #0]
 801b69c:	4621      	mov	r1, r4
 801b69e:	6a1b      	ldr	r3, [r3, #32]
 801b6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6a4:	4718      	bx	r3
 801b6a6:	6968      	ldr	r0, [r5, #20]
 801b6a8:	2800      	cmp	r0, #0
 801b6aa:	d1f6      	bne.n	801b69a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801b6ac:	bd70      	pop	{r4, r5, r6, pc}

0801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b6ae:	b510      	push	{r4, lr}
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	4604      	mov	r4, r0
 801b6b4:	4608      	mov	r0, r1
 801b6b6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b6ba:	8023      	strh	r3, [r4, #0]
 801b6bc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b6c0:	8063      	strh	r3, [r4, #2]
 801b6c2:	6803      	ldr	r3, [r0, #0]
 801b6c4:	80a1      	strh	r1, [r4, #4]
 801b6c6:	4621      	mov	r1, r4
 801b6c8:	80e2      	strh	r2, [r4, #6]
 801b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6cc:	4798      	blx	r3
 801b6ce:	4620      	mov	r0, r4
 801b6d0:	bd10      	pop	{r4, pc}
	...

0801b6d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801b6d4:	b510      	push	{r4, lr}
 801b6d6:	8083      	strh	r3, [r0, #4]
 801b6d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801b6dc:	6101      	str	r1, [r0, #16]
 801b6de:	7183      	strb	r3, [r0, #6]
 801b6e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b6e4:	8282      	strh	r2, [r0, #20]
 801b6e6:	71c3      	strb	r3, [r0, #7]
 801b6e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b6ec:	7203      	strb	r3, [r0, #8]
 801b6ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b6f2:	7243      	strb	r3, [r0, #9]
 801b6f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b6f8:	8143      	strh	r3, [r0, #10]
 801b6fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801b6fe:	8183      	strh	r3, [r0, #12]
 801b700:	4b01      	ldr	r3, [pc, #4]	; (801b708 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801b702:	6003      	str	r3, [r0, #0]
 801b704:	bd10      	pop	{r4, pc}
 801b706:	bf00      	nop
 801b708:	0802106c 	.word	0x0802106c

0801b70c <_ZNK8touchgfx9ConstFont4findEt>:
 801b70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b70e:	8a84      	ldrh	r4, [r0, #20]
 801b710:	2500      	movs	r5, #0
 801b712:	260e      	movs	r6, #14
 801b714:	3c01      	subs	r4, #1
 801b716:	42a5      	cmp	r5, r4
 801b718:	dc0c      	bgt.n	801b734 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801b71a:	192a      	adds	r2, r5, r4
 801b71c:	6903      	ldr	r3, [r0, #16]
 801b71e:	1052      	asrs	r2, r2, #1
 801b720:	fb06 3302 	mla	r3, r6, r2, r3
 801b724:	889f      	ldrh	r7, [r3, #4]
 801b726:	42b9      	cmp	r1, r7
 801b728:	da01      	bge.n	801b72e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801b72a:	1e54      	subs	r4, r2, #1
 801b72c:	e7f3      	b.n	801b716 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b72e:	dd02      	ble.n	801b736 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801b730:	1c55      	adds	r5, r2, #1
 801b732:	e7f0      	b.n	801b716 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b734:	2300      	movs	r3, #0
 801b736:	4618      	mov	r0, r3
 801b738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b73a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b73c:	4605      	mov	r5, r0
 801b73e:	4617      	mov	r7, r2
 801b740:	461e      	mov	r6, r3
 801b742:	f7ff ffe3 	bl	801b70c <_ZNK8touchgfx9ConstFont4findEt>
 801b746:	b9e0      	cbnz	r0, 801b782 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801b748:	b911      	cbnz	r1, 801b750 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801b74a:	2400      	movs	r4, #0
 801b74c:	4620      	mov	r0, r4
 801b74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b750:	290a      	cmp	r1, #10
 801b752:	d0fa      	beq.n	801b74a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b754:	682b      	ldr	r3, [r5, #0]
 801b756:	4628      	mov	r0, r5
 801b758:	691b      	ldr	r3, [r3, #16]
 801b75a:	4798      	blx	r3
 801b75c:	4601      	mov	r1, r0
 801b75e:	4628      	mov	r0, r5
 801b760:	f7ff ffd4 	bl	801b70c <_ZNK8touchgfx9ConstFont4findEt>
 801b764:	4604      	mov	r4, r0
 801b766:	2800      	cmp	r0, #0
 801b768:	d0ef      	beq.n	801b74a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b76a:	682b      	ldr	r3, [r5, #0]
 801b76c:	4621      	mov	r1, r4
 801b76e:	4628      	mov	r0, r5
 801b770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b772:	4798      	blx	r3
 801b774:	6038      	str	r0, [r7, #0]
 801b776:	682b      	ldr	r3, [r5, #0]
 801b778:	4628      	mov	r0, r5
 801b77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b77c:	4798      	blx	r3
 801b77e:	7030      	strb	r0, [r6, #0]
 801b780:	e7e4      	b.n	801b74c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801b782:	4604      	mov	r4, r0
 801b784:	e7f1      	b.n	801b76a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801b786 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b786:	2002      	movs	r0, #2
 801b788:	4770      	bx	lr

0801b78a <_ZN8touchgfx12GestureEventD1Ev>:
 801b78a:	4770      	bx	lr

0801b78c <_ZN8touchgfx12GestureEventD0Ev>:
 801b78c:	b510      	push	{r4, lr}
 801b78e:	4604      	mov	r4, r0
 801b790:	210c      	movs	r1, #12
 801b792:	f002 fdf4 	bl	801e37e <_ZdlPvj>
 801b796:	4620      	mov	r0, r4
 801b798:	bd10      	pop	{r4, pc}
	...

0801b79c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b79c:	b530      	push	{r4, r5, lr}
 801b79e:	460d      	mov	r5, r1
 801b7a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b7a2:	b087      	sub	sp, #28
 801b7a4:	4604      	mov	r4, r0
 801b7a6:	b301      	cbz	r1, 801b7ea <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b7a8:	a801      	add	r0, sp, #4
 801b7aa:	f7ff ff80 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7ae:	892a      	ldrh	r2, [r5, #8]
 801b7b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b7b4:	7928      	ldrb	r0, [r5, #4]
 801b7b6:	1ad2      	subs	r2, r2, r3
 801b7b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b7ba:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b7be:	441a      	add	r2, r3
 801b7c0:	896b      	ldrh	r3, [r5, #10]
 801b7c2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b7c6:	f88d 0010 	strb.w	r0, [sp, #16]
 801b7ca:	1b5b      	subs	r3, r3, r5
 801b7cc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b7ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b7d0:	442b      	add	r3, r5
 801b7d2:	4d07      	ldr	r5, [pc, #28]	; (801b7f0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b7d4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b7d8:	a903      	add	r1, sp, #12
 801b7da:	9503      	str	r5, [sp, #12]
 801b7dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b7e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7e4:	6803      	ldr	r3, [r0, #0]
 801b7e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b7e8:	4798      	blx	r3
 801b7ea:	b007      	add	sp, #28
 801b7ec:	bd30      	pop	{r4, r5, pc}
 801b7ee:	bf00      	nop
 801b7f0:	080210b8 	.word	0x080210b8

0801b7f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7f6:	460c      	mov	r4, r1
 801b7f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b7fa:	b089      	sub	sp, #36	; 0x24
 801b7fc:	4605      	mov	r5, r0
 801b7fe:	2900      	cmp	r1, #0
 801b800:	d053      	beq.n	801b8aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801b802:	4668      	mov	r0, sp
 801b804:	f7ff ff53 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b808:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b80a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b80c:	4668      	mov	r0, sp
 801b80e:	8922      	ldrh	r2, [r4, #8]
 801b810:	88e1      	ldrh	r1, [r4, #6]
 801b812:	443a      	add	r2, r7
 801b814:	4431      	add	r1, r6
 801b816:	b212      	sxth	r2, r2
 801b818:	b209      	sxth	r1, r1
 801b81a:	f7f2 fce1 	bl	800e1e0 <_ZNK8touchgfx4Rect9intersectEss>
 801b81e:	b1c8      	cbz	r0, 801b854 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801b820:	89a2      	ldrh	r2, [r4, #12]
 801b822:	4668      	mov	r0, sp
 801b824:	8961      	ldrh	r1, [r4, #10]
 801b826:	443a      	add	r2, r7
 801b828:	4431      	add	r1, r6
 801b82a:	b212      	sxth	r2, r2
 801b82c:	b209      	sxth	r1, r1
 801b82e:	f7f2 fcd7 	bl	800e1e0 <_ZNK8touchgfx4Rect9intersectEss>
 801b832:	b978      	cbnz	r0, 801b854 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801b834:	4b1e      	ldr	r3, [pc, #120]	; (801b8b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b836:	a904      	add	r1, sp, #16
 801b838:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b83c:	9304      	str	r3, [sp, #16]
 801b83e:	2302      	movs	r3, #2
 801b840:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b844:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b848:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b84a:	f88d 3014 	strb.w	r3, [sp, #20]
 801b84e:	6803      	ldr	r3, [r0, #0]
 801b850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b852:	4798      	blx	r3
 801b854:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b856:	a802      	add	r0, sp, #8
 801b858:	f7ff ff29 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b85c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b860:	88e0      	ldrh	r0, [r4, #6]
 801b862:	8961      	ldrh	r1, [r4, #10]
 801b864:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801b868:	1a80      	subs	r0, r0, r2
 801b86a:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801b86e:	1a89      	subs	r1, r1, r2
 801b870:	8923      	ldrh	r3, [r4, #8]
 801b872:	4470      	add	r0, lr
 801b874:	89a2      	ldrh	r2, [r4, #12]
 801b876:	4471      	add	r1, lr
 801b878:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b87a:	eba3 030c 	sub.w	r3, r3, ip
 801b87e:	eba2 020c 	sub.w	r2, r2, ip
 801b882:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b886:	7927      	ldrb	r7, [r4, #4]
 801b888:	4433      	add	r3, r6
 801b88a:	4432      	add	r2, r6
 801b88c:	4c09      	ldr	r4, [pc, #36]	; (801b8b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b88e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b890:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b894:	a904      	add	r1, sp, #16
 801b896:	9404      	str	r4, [sp, #16]
 801b898:	f88d 7014 	strb.w	r7, [sp, #20]
 801b89c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b8a0:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b8a4:	6803      	ldr	r3, [r0, #0]
 801b8a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8a8:	4798      	blx	r3
 801b8aa:	b009      	add	sp, #36	; 0x24
 801b8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8ae:	bf00      	nop
 801b8b0:	0801fc88 	.word	0x0801fc88
 801b8b4:	0801fc74 	.word	0x0801fc74

0801b8b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8bc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801b8be:	b0a1      	sub	sp, #132	; 0x84
 801b8c0:	4604      	mov	r4, r0
 801b8c2:	460d      	mov	r5, r1
 801b8c4:	790b      	ldrb	r3, [r1, #4]
 801b8c6:	b16a      	cbz	r2, 801b8e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801b8c8:	b963      	cbnz	r3, 801b8e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801b8ca:	b021      	add	sp, #132	; 0x84
 801b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8d0:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b8d4:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b8d8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b8dc:	1d20      	adds	r0, r4, #4
 801b8de:	f7f3 f8d3 	bl	800ea88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b8e2:	e0a2      	b.n	801ba2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	f040 80a0 	bne.w	801ba2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801b8ea:	4a66      	ldr	r2, [pc, #408]	; (801ba84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801b8ec:	6812      	ldr	r2, [r2, #0]
 801b8ee:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801b8f2:	86a3      	strh	r3, [r4, #52]	; 0x34
 801b8f4:	f1bb 0f03 	cmp.w	fp, #3
 801b8f8:	86e3      	strh	r3, [r4, #54]	; 0x36
 801b8fa:	dde9      	ble.n	801b8d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801b8fc:	f1bb 0f0c 	cmp.w	fp, #12
 801b900:	6323      	str	r3, [r4, #48]	; 0x30
 801b902:	f04f 0303 	mov.w	r3, #3
 801b906:	f04f 0600 	mov.w	r6, #0
 801b90a:	bfd8      	it	le
 801b90c:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801b910:	495d      	ldr	r1, [pc, #372]	; (801ba88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801b912:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801b916:	f04f 0a01 	mov.w	sl, #1
 801b91a:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801b91e:	bfd8      	it	le
 801b920:	fb92 f3f3 	sdivle	r3, r2, r3
 801b924:	9300      	str	r3, [sp, #0]
 801b926:	4b59      	ldr	r3, [pc, #356]	; (801ba8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801b928:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b92c:	4b58      	ldr	r3, [pc, #352]	; (801ba90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801b92e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b932:	2248      	movs	r2, #72	; 0x48
 801b934:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b938:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b93c:	ab0e      	add	r3, sp, #56	; 0x38
 801b93e:	4618      	mov	r0, r3
 801b940:	f002 fdaa 	bl	801e498 <memcpy>
 801b944:	f04f 32ff 	mov.w	r2, #4294967295
 801b948:	f8cd b008 	str.w	fp, [sp, #8]
 801b94c:	9206      	str	r2, [sp, #24]
 801b94e:	9007      	str	r0, [sp, #28]
 801b950:	9a00      	ldr	r2, [sp, #0]
 801b952:	9b02      	ldr	r3, [sp, #8]
 801b954:	fb93 f3f2 	sdiv	r3, r3, r2
 801b958:	f10a 32ff 	add.w	r2, sl, #4294967295
 801b95c:	b29b      	uxth	r3, r3
 801b95e:	9201      	str	r2, [sp, #4]
 801b960:	9a07      	ldr	r2, [sp, #28]
 801b962:	9303      	str	r3, [sp, #12]
 801b964:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801b968:	3f04      	subs	r7, #4
 801b96a:	2300      	movs	r3, #0
 801b96c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801b970:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801b974:	a80a      	add	r0, sp, #40	; 0x28
 801b976:	9309      	str	r3, [sp, #36]	; 0x24
 801b978:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801b97c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801b980:	fb13 f302 	smulbb	r3, r3, r2
 801b984:	b29b      	uxth	r3, r3
 801b986:	9304      	str	r3, [sp, #16]
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	fb13 f302 	smulbb	r3, r3, r2
 801b98e:	b29b      	uxth	r3, r3
 801b990:	9305      	str	r3, [sp, #20]
 801b992:	9b04      	ldr	r3, [sp, #16]
 801b994:	4498      	add	r8, r3
 801b996:	9b05      	ldr	r3, [sp, #20]
 801b998:	4499      	add	r9, r3
 801b99a:	fa0f f888 	sxth.w	r8, r8
 801b99e:	fa0f f989 	sxth.w	r9, r9
 801b9a2:	4641      	mov	r1, r8
 801b9a4:	464a      	mov	r2, r9
 801b9a6:	f7f2 fc1b 	bl	800e1e0 <_ZNK8touchgfx4Rect9intersectEss>
 801b9aa:	b380      	cbz	r0, 801ba0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801b9ac:	4641      	mov	r1, r8
 801b9ae:	ab09      	add	r3, sp, #36	; 0x24
 801b9b0:	464a      	mov	r2, r9
 801b9b2:	1d20      	adds	r0, r4, #4
 801b9b4:	f7f3 f868 	bl	800ea88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b9b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b9ba:	b341      	cbz	r1, 801ba0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801b9bc:	42b1      	cmp	r1, r6
 801b9be:	d026      	beq.n	801ba0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801b9c0:	a80c      	add	r0, sp, #48	; 0x30
 801b9c2:	f7ff fe74 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9c6:	2002      	movs	r0, #2
 801b9c8:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b9cc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b9d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b9d4:	fb92 f2f0 	sdiv	r2, r2, r0
 801b9d8:	440a      	add	r2, r1
 801b9da:	1a99      	subs	r1, r3, r2
 801b9dc:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b9e0:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b9e4:	fb93 f3f0 	sdiv	r3, r3, r0
 801b9e8:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b9ec:	4403      	add	r3, r0
 801b9ee:	1ad3      	subs	r3, r2, r3
 801b9f0:	9a06      	ldr	r2, [sp, #24]
 801b9f2:	435b      	muls	r3, r3
 801b9f4:	fb01 3301 	mla	r3, r1, r1, r3
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	d208      	bcs.n	801ba0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801b9fc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ba00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ba02:	86a2      	strh	r2, [r4, #52]	; 0x34
 801ba04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ba08:	6326      	str	r6, [r4, #48]	; 0x30
 801ba0a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ba0c:	9306      	str	r3, [sp, #24]
 801ba0e:	9b01      	ldr	r3, [sp, #4]
 801ba10:	3710      	adds	r7, #16
 801ba12:	3302      	adds	r3, #2
 801ba14:	2b08      	cmp	r3, #8
 801ba16:	9301      	str	r3, [sp, #4]
 801ba18:	dda7      	ble.n	801b96a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801ba1a:	9b02      	ldr	r3, [sp, #8]
 801ba1c:	f10a 0a01 	add.w	sl, sl, #1
 801ba20:	445b      	add	r3, fp
 801ba22:	9302      	str	r3, [sp, #8]
 801ba24:	9b00      	ldr	r3, [sp, #0]
 801ba26:	4553      	cmp	r3, sl
 801ba28:	da92      	bge.n	801b950 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801ba2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ba2c:	2900      	cmp	r1, #0
 801ba2e:	f43f af4c 	beq.w	801b8ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ba32:	a80c      	add	r0, sp, #48	; 0x30
 801ba34:	2600      	movs	r6, #0
 801ba36:	f7ff fe3a 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba3a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ba3e:	88ea      	ldrh	r2, [r5, #6]
 801ba40:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801ba44:	1ad2      	subs	r2, r2, r3
 801ba46:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ba48:	7929      	ldrb	r1, [r5, #4]
 801ba4a:	441a      	add	r2, r3
 801ba4c:	892b      	ldrh	r3, [r5, #8]
 801ba4e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801ba52:	a90e      	add	r1, sp, #56	; 0x38
 801ba54:	1a1b      	subs	r3, r3, r0
 801ba56:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ba58:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801ba5c:	4403      	add	r3, r0
 801ba5e:	480d      	ldr	r0, [pc, #52]	; (801ba94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801ba60:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801ba64:	900e      	str	r0, [sp, #56]	; 0x38
 801ba66:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ba68:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801ba6c:	6803      	ldr	r3, [r0, #0]
 801ba6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba70:	4798      	blx	r3
 801ba72:	792b      	ldrb	r3, [r5, #4]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	f43f af28 	beq.w	801b8ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ba7a:	6326      	str	r6, [r4, #48]	; 0x30
 801ba7c:	86a6      	strh	r6, [r4, #52]	; 0x34
 801ba7e:	86e6      	strh	r6, [r4, #54]	; 0x36
 801ba80:	e723      	b.n	801b8ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ba82:	bf00      	nop
 801ba84:	20009abc 	.word	0x20009abc
 801ba88:	0801faec 	.word	0x0801faec
 801ba8c:	20009ab0 	.word	0x20009ab0
 801ba90:	20009ab2 	.word	0x20009ab2
 801ba94:	0801fc88 	.word	0x0801fc88

0801ba98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ba98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba9a:	4604      	mov	r4, r0
 801ba9c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801baa0:	3201      	adds	r2, #1
 801baa2:	d114      	bne.n	801bace <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801baa4:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801baa8:	2200      	movs	r2, #0
 801baaa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801baae:	6803      	ldr	r3, [r0, #0]
 801bab0:	f8ad 1006 	strh.w	r1, [sp, #6]
 801bab4:	4669      	mov	r1, sp
 801bab6:	f8ad 2000 	strh.w	r2, [sp]
 801baba:	f8ad 2002 	strh.w	r2, [sp, #2]
 801babe:	f8ad 5004 	strh.w	r5, [sp, #4]
 801bac2:	6a1b      	ldr	r3, [r3, #32]
 801bac4:	4798      	blx	r3
 801bac6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801baca:	e884 0003 	stmia.w	r4, {r0, r1}
 801bace:	4620      	mov	r0, r4
 801bad0:	b003      	add	sp, #12
 801bad2:	bd30      	pop	{r4, r5, pc}

0801bad4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801bad4:	b513      	push	{r0, r1, r4, lr}
 801bad6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801bada:	4604      	mov	r4, r0
 801badc:	3301      	adds	r3, #1
 801bade:	d109      	bne.n	801baf4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801bae0:	4601      	mov	r1, r0
 801bae2:	4668      	mov	r0, sp
 801bae4:	f7ff fde3 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bae8:	f8bd 3000 	ldrh.w	r3, [sp]
 801baec:	8423      	strh	r3, [r4, #32]
 801baee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801baf2:	8463      	strh	r3, [r4, #34]	; 0x22
 801baf4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801baf8:	b002      	add	sp, #8
 801bafa:	bd10      	pop	{r4, pc}

0801bafc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801bafc:	b513      	push	{r0, r1, r4, lr}
 801bafe:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801bb02:	4604      	mov	r4, r0
 801bb04:	3301      	adds	r3, #1
 801bb06:	d109      	bne.n	801bb1c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801bb08:	4601      	mov	r1, r0
 801bb0a:	4668      	mov	r0, sp
 801bb0c:	f7ff fdcf 	bl	801b6ae <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb10:	f8bd 3000 	ldrh.w	r3, [sp]
 801bb14:	8423      	strh	r3, [r4, #32]
 801bb16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bb1a:	8463      	strh	r3, [r4, #34]	; 0x22
 801bb1c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801bb20:	b002      	add	sp, #8
 801bb22:	bd10      	pop	{r4, pc}

0801bb24 <_ZN8touchgfx6ScreenC1Ev>:
 801bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb26:	4605      	mov	r5, r0
 801bb28:	4b18      	ldr	r3, [pc, #96]	; (801bb8c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	4918      	ldr	r1, [pc, #96]	; (801bb90 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801bb2e:	f845 3b04 	str.w	r3, [r5], #4
 801bb32:	2301      	movs	r3, #1
 801bb34:	8102      	strh	r2, [r0, #8]
 801bb36:	4604      	mov	r4, r0
 801bb38:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801bb3c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bb40:	4b14      	ldr	r3, [pc, #80]	; (801bb94 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801bb42:	8142      	strh	r2, [r0, #10]
 801bb44:	f9b3 7000 	ldrsh.w	r7, [r3]
 801bb48:	4b13      	ldr	r3, [pc, #76]	; (801bb98 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801bb4a:	8182      	strh	r2, [r0, #12]
 801bb4c:	81c2      	strh	r2, [r0, #14]
 801bb4e:	8202      	strh	r2, [r0, #16]
 801bb50:	8242      	strh	r2, [r0, #18]
 801bb52:	8282      	strh	r2, [r0, #20]
 801bb54:	82c2      	strh	r2, [r0, #22]
 801bb56:	6182      	str	r2, [r0, #24]
 801bb58:	61c2      	str	r2, [r0, #28]
 801bb5a:	6202      	str	r2, [r0, #32]
 801bb5c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801bb60:	62c2      	str	r2, [r0, #44]	; 0x2c
 801bb62:	6302      	str	r2, [r0, #48]	; 0x30
 801bb64:	8682      	strh	r2, [r0, #52]	; 0x34
 801bb66:	86c2      	strh	r2, [r0, #54]	; 0x36
 801bb68:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bb6c:	6041      	str	r1, [r0, #4]
 801bb6e:	4611      	mov	r1, r2
 801bb70:	4628      	mov	r0, r5
 801bb72:	f7f2 fd5c 	bl	800e62e <_ZN8touchgfx8Drawable5setXYEss>
 801bb76:	4639      	mov	r1, r7
 801bb78:	4628      	mov	r0, r5
 801bb7a:	f7f2 fd76 	bl	800e66a <_ZN8touchgfx8Drawable8setWidthEs>
 801bb7e:	4628      	mov	r0, r5
 801bb80:	4631      	mov	r1, r6
 801bb82:	f7f2 fd81 	bl	800e688 <_ZN8touchgfx8Drawable9setHeightEs>
 801bb86:	4620      	mov	r0, r4
 801bb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb8a:	bf00      	nop
 801bb8c:	080210cc 	.word	0x080210cc
 801bb90:	0801fb3c 	.word	0x0801fb3c
 801bb94:	20009ab0 	.word	0x20009ab0
 801bb98:	20009ab2 	.word	0x20009ab2

0801bb9c <_ZN8touchgfx6Screen4drawEv>:
 801bb9c:	4b0b      	ldr	r3, [pc, #44]	; (801bbcc <_ZN8touchgfx6Screen4drawEv+0x30>)
 801bb9e:	b507      	push	{r0, r1, r2, lr}
 801bba0:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bba4:	4b0a      	ldr	r3, [pc, #40]	; (801bbd0 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801bba6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bbaa:	4669      	mov	r1, sp
 801bbac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	f8ad 3000 	strh.w	r3, [sp]
 801bbb6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bbba:	6803      	ldr	r3, [r0, #0]
 801bbbc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bbc0:	689b      	ldr	r3, [r3, #8]
 801bbc2:	4798      	blx	r3
 801bbc4:	b003      	add	sp, #12
 801bbc6:	f85d fb04 	ldr.w	pc, [sp], #4
 801bbca:	bf00      	nop
 801bbcc:	20009ab0 	.word	0x20009ab0
 801bbd0:	20009ab2 	.word	0x20009ab2

0801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bbdc:	b087      	sub	sp, #28
 801bbde:	4681      	mov	r9, r0
 801bbe0:	460c      	mov	r4, r1
 801bbe2:	4615      	mov	r5, r2
 801bbe4:	b16b      	cbz	r3, 801bc02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bbe6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bbea:	b153      	cbz	r3, 801bc02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bbec:	4628      	mov	r0, r5
 801bbee:	f7ff ff53 	bl	801ba98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bbf2:	4621      	mov	r1, r4
 801bbf4:	f7f2 fb23 	bl	800e23e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bbf8:	69eb      	ldr	r3, [r5, #28]
 801bbfa:	b928      	cbnz	r0, 801bc08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801bbfc:	461d      	mov	r5, r3
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d1f4      	bne.n	801bbec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801bc02:	b007      	add	sp, #28
 801bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc08:	ae02      	add	r6, sp, #8
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d04a      	beq.n	801bca4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801bc0e:	682b      	ldr	r3, [r5, #0]
 801bc10:	4629      	mov	r1, r5
 801bc12:	4668      	mov	r0, sp
 801bc14:	68db      	ldr	r3, [r3, #12]
 801bc16:	4798      	blx	r3
 801bc18:	4628      	mov	r0, r5
 801bc1a:	f7ff ff5b 	bl	801bad4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bc1e:	f8bd 7000 	ldrh.w	r7, [sp]
 801bc22:	4407      	add	r7, r0
 801bc24:	4628      	mov	r0, r5
 801bc26:	f7ff ff69 	bl	801bafc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bc2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bc2e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801bc32:	b23f      	sxth	r7, r7
 801bc34:	4418      	add	r0, r3
 801bc36:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801bc3a:	4621      	mov	r1, r4
 801bc3c:	f8ad 200c 	strh.w	r2, [sp, #12]
 801bc40:	f8ad 000a 	strh.w	r0, [sp, #10]
 801bc44:	4630      	mov	r0, r6
 801bc46:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc4a:	f8ad 7008 	strh.w	r7, [sp, #8]
 801bc4e:	f7f2 fb3d 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801bc52:	4628      	mov	r0, r5
 801bc54:	f7ff ff20 	bl	801ba98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bc58:	ab04      	add	r3, sp, #16
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801bc60:	e883 0003 	stmia.w	r3, {r0, r1}
 801bc64:	4611      	mov	r1, r2
 801bc66:	4618      	mov	r0, r3
 801bc68:	f7f2 fb30 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801bc6c:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801bc70:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bc74:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801bc78:	455a      	cmp	r2, fp
 801bc7a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801bc7e:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801bc82:	f040 8096 	bne.w	801bdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc86:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bc8a:	4553      	cmp	r3, sl
 801bc8c:	f040 8091 	bne.w	801bdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc90:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bc94:	4543      	cmp	r3, r8
 801bc96:	f040 808c 	bne.w	801bdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc9a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bc9e:	42bb      	cmp	r3, r7
 801bca0:	f040 8087 	bne.w	801bdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bca4:	4628      	mov	r0, r5
 801bca6:	f7ff fef7 	bl	801ba98 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bcaa:	6861      	ldr	r1, [r4, #4]
 801bcac:	4602      	mov	r2, r0
 801bcae:	4633      	mov	r3, r6
 801bcb0:	6820      	ldr	r0, [r4, #0]
 801bcb2:	c303      	stmia	r3!, {r0, r1}
 801bcb4:	4611      	mov	r1, r2
 801bcb6:	4630      	mov	r0, r6
 801bcb8:	f7f2 fb08 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801bcbc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d09e      	beq.n	801bc02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bcc4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d09a      	beq.n	801bc02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bccc:	4628      	mov	r0, r5
 801bcce:	f7ff ff01 	bl	801bad4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bcd2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bcd6:	1a18      	subs	r0, r3, r0
 801bcd8:	f8ad 0008 	strh.w	r0, [sp, #8]
 801bcdc:	4628      	mov	r0, r5
 801bcde:	f7ff ff0d 	bl	801bafc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bce2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bce6:	4631      	mov	r1, r6
 801bce8:	1a18      	subs	r0, r3, r0
 801bcea:	f8ad 000a 	strh.w	r0, [sp, #10]
 801bcee:	4628      	mov	r0, r5
 801bcf0:	682b      	ldr	r3, [r5, #0]
 801bcf2:	689b      	ldr	r3, [r3, #8]
 801bcf4:	4798      	blx	r3
 801bcf6:	e784      	b.n	801bc02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bcf8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bcfc:	4553      	cmp	r3, sl
 801bcfe:	da10      	bge.n	801bd22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801bd00:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bd04:	4648      	mov	r0, r9
 801bd06:	f8ad 300a 	strh.w	r3, [sp, #10]
 801bd0a:	ebaa 0303 	sub.w	r3, sl, r3
 801bd0e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bd12:	4631      	mov	r1, r6
 801bd14:	f8ad 2008 	strh.w	r2, [sp, #8]
 801bd18:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bd1c:	69ea      	ldr	r2, [r5, #28]
 801bd1e:	f7ff ff59 	bl	801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd22:	f9b4 3000 	ldrsh.w	r3, [r4]
 801bd26:	455b      	cmp	r3, fp
 801bd28:	da0e      	bge.n	801bd48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801bd2a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801bd2e:	ebab 0303 	sub.w	r3, fp, r3
 801bd32:	f8ad a00a 	strh.w	sl, [sp, #10]
 801bd36:	4631      	mov	r1, r6
 801bd38:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd3c:	4648      	mov	r0, r9
 801bd3e:	f8ad 700e 	strh.w	r7, [sp, #14]
 801bd42:	69ea      	ldr	r2, [r5, #28]
 801bd44:	f7ff ff46 	bl	801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd48:	8822      	ldrh	r2, [r4, #0]
 801bd4a:	44d8      	add	r8, fp
 801bd4c:	88a3      	ldrh	r3, [r4, #4]
 801bd4e:	fa1f f888 	uxth.w	r8, r8
 801bd52:	4413      	add	r3, r2
 801bd54:	fa0f f288 	sxth.w	r2, r8
 801bd58:	b29b      	uxth	r3, r3
 801bd5a:	b219      	sxth	r1, r3
 801bd5c:	4291      	cmp	r1, r2
 801bd5e:	dd0e      	ble.n	801bd7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bd60:	eba3 0308 	sub.w	r3, r3, r8
 801bd64:	f8ad 2008 	strh.w	r2, [sp, #8]
 801bd68:	f8ad a00a 	strh.w	sl, [sp, #10]
 801bd6c:	4631      	mov	r1, r6
 801bd6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd72:	4648      	mov	r0, r9
 801bd74:	f8ad 700e 	strh.w	r7, [sp, #14]
 801bd78:	69ea      	ldr	r2, [r5, #28]
 801bd7a:	f7ff ff2b 	bl	801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd7e:	88e2      	ldrh	r2, [r4, #6]
 801bd80:	4457      	add	r7, sl
 801bd82:	8863      	ldrh	r3, [r4, #2]
 801bd84:	b2bf      	uxth	r7, r7
 801bd86:	4413      	add	r3, r2
 801bd88:	b23a      	sxth	r2, r7
 801bd8a:	b29b      	uxth	r3, r3
 801bd8c:	b219      	sxth	r1, r3
 801bd8e:	428a      	cmp	r2, r1
 801bd90:	da88      	bge.n	801bca4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801bd92:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bd96:	1bdb      	subs	r3, r3, r7
 801bd98:	f9b4 0000 	ldrsh.w	r0, [r4]
 801bd9c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bda0:	4631      	mov	r1, r6
 801bda2:	f8ad 0008 	strh.w	r0, [sp, #8]
 801bda6:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bdaa:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bdae:	69ea      	ldr	r2, [r5, #28]
 801bdb0:	e006      	b.n	801bdc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801bdb2:	f1b8 0f00 	cmp.w	r8, #0
 801bdb6:	d001      	beq.n	801bdbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801bdb8:	2f00      	cmp	r7, #0
 801bdba:	d19d      	bne.n	801bcf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801bdbc:	69ea      	ldr	r2, [r5, #28]
 801bdbe:	4621      	mov	r1, r4
 801bdc0:	4648      	mov	r0, r9
 801bdc2:	f7ff ff07 	bl	801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bdc6:	e76d      	b.n	801bca4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801bdc8 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801bdc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bdca:	2300      	movs	r3, #0
 801bdcc:	aa02      	add	r2, sp, #8
 801bdce:	4604      	mov	r4, r0
 801bdd0:	3004      	adds	r0, #4
 801bdd2:	f842 3d04 	str.w	r3, [r2, #-4]!
 801bdd6:	460d      	mov	r5, r1
 801bdd8:	f7f2 ff57 	bl	800ec8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bddc:	9a01      	ldr	r2, [sp, #4]
 801bdde:	b11a      	cbz	r2, 801bde8 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801bde0:	4629      	mov	r1, r5
 801bde2:	4620      	mov	r0, r4
 801bde4:	f7ff fef6 	bl	801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bde8:	b003      	add	sp, #12
 801bdea:	bd30      	pop	{r4, r5, pc}

0801bdec <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bdee:	4602      	mov	r2, r0
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	460d      	mov	r5, r1
 801bdf4:	466b      	mov	r3, sp
 801bdf6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bdfa:	6851      	ldr	r1, [r2, #4]
 801bdfc:	c303      	stmia	r3!, {r0, r1}
 801bdfe:	4629      	mov	r1, r5
 801be00:	4668      	mov	r0, sp
 801be02:	f7f2 fa63 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801be06:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801be0a:	4669      	mov	r1, sp
 801be0c:	b123      	cbz	r3, 801be18 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801be0e:	4620      	mov	r0, r4
 801be10:	f7ff ffda 	bl	801bdc8 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801be14:	b003      	add	sp, #12
 801be16:	bd30      	pop	{r4, r5, pc}
 801be18:	1d20      	adds	r0, r4, #4
 801be1a:	f7f2 fdca 	bl	800e9b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801be1e:	e7f9      	b.n	801be14 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801be20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801be20:	460b      	mov	r3, r1
 801be22:	680a      	ldr	r2, [r1, #0]
 801be24:	1d01      	adds	r1, r0, #4
 801be26:	6952      	ldr	r2, [r2, #20]
 801be28:	4618      	mov	r0, r3
 801be2a:	4710      	bx	r2

0801be2c <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801be2c:	680b      	ldr	r3, [r1, #0]
 801be2e:	6980      	ldr	r0, [r0, #24]
 801be30:	4418      	add	r0, r3
 801be32:	4770      	bx	lr

0801be34 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801be34:	b530      	push	{r4, r5, lr}
 801be36:	b19a      	cbz	r2, 801be60 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801be38:	7b13      	ldrb	r3, [r2, #12]
 801be3a:	b18b      	cbz	r3, 801be60 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801be3c:	7ad2      	ldrb	r2, [r2, #11]
 801be3e:	b294      	uxth	r4, r2
 801be40:	4413      	add	r3, r2
 801be42:	429c      	cmp	r4, r3
 801be44:	da0c      	bge.n	801be60 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801be46:	69c2      	ldr	r2, [r0, #28]
 801be48:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801be4c:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801be50:	428a      	cmp	r2, r1
 801be52:	d102      	bne.n	801be5a <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801be54:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801be58:	bd30      	pop	{r4, r5, pc}
 801be5a:	3401      	adds	r4, #1
 801be5c:	b2a4      	uxth	r4, r4
 801be5e:	e7f0      	b.n	801be42 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801be60:	2000      	movs	r0, #0
 801be62:	bd30      	pop	{r4, r5, pc}

0801be64 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801be64:	b530      	push	{r4, r5, lr}
 801be66:	b087      	sub	sp, #28
 801be68:	4604      	mov	r4, r0
 801be6a:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801be6e:	9505      	str	r5, [sp, #20]
 801be70:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801be74:	9504      	str	r5, [sp, #16]
 801be76:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801be7a:	9503      	str	r5, [sp, #12]
 801be7c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801be80:	9502      	str	r5, [sp, #8]
 801be82:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801be86:	9501      	str	r5, [sp, #4]
 801be88:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801be8c:	9500      	str	r5, [sp, #0]
 801be8e:	f7ff fc21 	bl	801b6d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801be92:	4b04      	ldr	r3, [pc, #16]	; (801bea4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801be94:	4620      	mov	r0, r4
 801be96:	6023      	str	r3, [r4, #0]
 801be98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be9a:	61a3      	str	r3, [r4, #24]
 801be9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be9e:	61e3      	str	r3, [r4, #28]
 801bea0:	b007      	add	sp, #28
 801bea2:	bd30      	pop	{r4, r5, pc}
 801bea4:	08021100 	.word	0x08021100

0801bea8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beaa:	4604      	mov	r4, r0
 801beac:	4d1b      	ldr	r5, [pc, #108]	; (801bf1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801beae:	2700      	movs	r7, #0
 801beb0:	2601      	movs	r6, #1
 801beb2:	6863      	ldr	r3, [r4, #4]
 801beb4:	b93b      	cbnz	r3, 801bec6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801beb6:	6821      	ldr	r1, [r4, #0]
 801beb8:	2900      	cmp	r1, #0
 801beba:	d02c      	beq.n	801bf16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801bebc:	6828      	ldr	r0, [r5, #0]
 801bebe:	6803      	ldr	r3, [r0, #0]
 801bec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bec2:	4798      	blx	r3
 801bec4:	6060      	str	r0, [r4, #4]
 801bec6:	7c23      	ldrb	r3, [r4, #16]
 801bec8:	b16b      	cbz	r3, 801bee6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801beca:	68e3      	ldr	r3, [r4, #12]
 801becc:	b12b      	cbz	r3, 801beda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801bece:	881a      	ldrh	r2, [r3, #0]
 801bed0:	b11a      	cbz	r2, 801beda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801bed2:	1c9a      	adds	r2, r3, #2
 801bed4:	60e2      	str	r2, [r4, #12]
 801bed6:	8818      	ldrh	r0, [r3, #0]
 801bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801beda:	6828      	ldr	r0, [r5, #0]
 801bedc:	7427      	strb	r7, [r4, #16]
 801bede:	6803      	ldr	r3, [r0, #0]
 801bee0:	6821      	ldr	r1, [r4, #0]
 801bee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bee4:	4798      	blx	r3
 801bee6:	6863      	ldr	r3, [r4, #4]
 801bee8:	881a      	ldrh	r2, [r3, #0]
 801beea:	b1a2      	cbz	r2, 801bf16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801beec:	2a02      	cmp	r2, #2
 801beee:	f103 0202 	add.w	r2, r3, #2
 801bef2:	6062      	str	r2, [r4, #4]
 801bef4:	d1ef      	bne.n	801bed6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801bef6:	6828      	ldr	r0, [r5, #0]
 801bef8:	6803      	ldr	r3, [r0, #0]
 801befa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801befc:	68a3      	ldr	r3, [r4, #8]
 801befe:	1d19      	adds	r1, r3, #4
 801bf00:	60a1      	str	r1, [r4, #8]
 801bf02:	6819      	ldr	r1, [r3, #0]
 801bf04:	4790      	blx	r2
 801bf06:	60e0      	str	r0, [r4, #12]
 801bf08:	2800      	cmp	r0, #0
 801bf0a:	d0d2      	beq.n	801beb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bf0c:	8803      	ldrh	r3, [r0, #0]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d0cf      	beq.n	801beb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bf12:	7426      	strb	r6, [r4, #16]
 801bf14:	e7cd      	b.n	801beb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bf16:	2000      	movs	r0, #0
 801bf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf1a:	bf00      	nop
 801bf1c:	20009abc 	.word	0x20009abc

0801bf20 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801bf20:	b538      	push	{r3, r4, r5, lr}
 801bf22:	8a83      	ldrh	r3, [r0, #20]
 801bf24:	4604      	mov	r4, r0
 801bf26:	8a45      	ldrh	r5, [r0, #18]
 801bf28:	8243      	strh	r3, [r0, #18]
 801bf2a:	f7ff ffbd 	bl	801bea8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bf2e:	82a0      	strh	r0, [r4, #20]
 801bf30:	4628      	mov	r0, r5
 801bf32:	bd38      	pop	{r3, r4, r5, pc}

0801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801bf34:	b570      	push	{r4, r5, r6, lr}
 801bf36:	460e      	mov	r6, r1
 801bf38:	4605      	mov	r5, r0
 801bf3a:	f7ff fff1 	bl	801bf20 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bf3e:	4a0d      	ldr	r2, [pc, #52]	; (801bf74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801bf40:	4601      	mov	r1, r0
 801bf42:	6814      	ldr	r4, [r2, #0]
 801bf44:	4613      	mov	r3, r2
 801bf46:	b914      	cbnz	r4, 801bf4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801bf48:	6852      	ldr	r2, [r2, #4]
 801bf4a:	07d2      	lsls	r2, r2, #31
 801bf4c:	d510      	bpl.n	801bf70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801bf4e:	6858      	ldr	r0, [r3, #4]
 801bf50:	f105 0212 	add.w	r2, r5, #18
 801bf54:	f010 0f01 	tst.w	r0, #1
 801bf58:	ea4f 0060 	mov.w	r0, r0, asr #1
 801bf5c:	bf18      	it	ne
 801bf5e:	582b      	ldrne	r3, [r5, r0]
 801bf60:	4428      	add	r0, r5
 801bf62:	bf18      	it	ne
 801bf64:	591c      	ldrne	r4, [r3, r4]
 801bf66:	4633      	mov	r3, r6
 801bf68:	46a4      	mov	ip, r4
 801bf6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf6e:	4760      	bx	ip
 801bf70:	bd70      	pop	{r4, r5, r6, pc}
 801bf72:	bf00      	nop
 801bf74:	20009a94 	.word	0x20009a94

0801bf78 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801bf78:	2300      	movs	r3, #0
 801bf7a:	b510      	push	{r4, lr}
 801bf7c:	4604      	mov	r4, r0
 801bf7e:	6043      	str	r3, [r0, #4]
 801bf80:	60c3      	str	r3, [r0, #12]
 801bf82:	7403      	strb	r3, [r0, #16]
 801bf84:	f7ff ff90 	bl	801bea8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bf88:	8260      	strh	r0, [r4, #18]
 801bf8a:	4620      	mov	r0, r4
 801bf8c:	f7ff ff8c 	bl	801bea8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bf90:	4a0a      	ldr	r2, [pc, #40]	; (801bfbc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801bf92:	82a0      	strh	r0, [r4, #20]
 801bf94:	6813      	ldr	r3, [r2, #0]
 801bf96:	4611      	mov	r1, r2
 801bf98:	b913      	cbnz	r3, 801bfa0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801bf9a:	6852      	ldr	r2, [r2, #4]
 801bf9c:	07d2      	lsls	r2, r2, #31
 801bf9e:	d50c      	bpl.n	801bfba <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801bfa0:	6848      	ldr	r0, [r1, #4]
 801bfa2:	f010 0f01 	tst.w	r0, #1
 801bfa6:	ea4f 0060 	mov.w	r0, r0, asr #1
 801bfaa:	bf18      	it	ne
 801bfac:	5822      	ldrne	r2, [r4, r0]
 801bfae:	4420      	add	r0, r4
 801bfb0:	bf18      	it	ne
 801bfb2:	58d3      	ldrne	r3, [r2, r3]
 801bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfb8:	4718      	bx	r3
 801bfba:	bd10      	pop	{r4, pc}
 801bfbc:	20009a8c 	.word	0x20009a8c

0801bfc0 <_ZN8touchgfx12TextProviderC1Ev>:
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	b510      	push	{r4, lr}
 801bfc4:	4604      	mov	r4, r0
 801bfc6:	6003      	str	r3, [r0, #0]
 801bfc8:	6043      	str	r3, [r0, #4]
 801bfca:	f7ff ffd5 	bl	801bf78 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bfce:	4620      	mov	r0, r4
 801bfd0:	bd10      	pop	{r4, pc}

0801bfd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801bfd2:	6082      	str	r2, [r0, #8]
 801bfd4:	6001      	str	r1, [r0, #0]
 801bfd6:	f7ff bfcf 	b.w	801bf78 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801bfdc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 801bfdc:	4b26      	ldr	r3, [pc, #152]	; (801c078 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 801bfde:	b570      	push	{r4, r5, r6, lr}
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	4605      	mov	r5, r0
 801bfe4:	460c      	mov	r4, r1
 801bfe6:	4616      	mov	r6, r2
 801bfe8:	b92b      	cbnz	r3, 801bff6 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 801bfea:	4b24      	ldr	r3, [pc, #144]	; (801c07c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 801bfec:	2116      	movs	r1, #22
 801bfee:	4a24      	ldr	r2, [pc, #144]	; (801c080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801bff0:	4824      	ldr	r0, [pc, #144]	; (801c084 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 801bff2:	f002 f9e1 	bl	801e3b8 <__assert_func>
 801bff6:	6898      	ldr	r0, [r3, #8]
 801bff8:	6803      	ldr	r3, [r0, #0]
 801bffa:	6a1b      	ldr	r3, [r3, #32]
 801bffc:	4798      	blx	r3
 801bffe:	2810      	cmp	r0, #16
 801c000:	d109      	bne.n	801c016 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 801c002:	00e0      	lsls	r0, r4, #3
 801c004:	022c      	lsls	r4, r5, #8
 801c006:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c00a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c00e:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 801c012:	4320      	orrs	r0, r4
 801c014:	bd70      	pop	{r4, r5, r6, pc}
 801c016:	2818      	cmp	r0, #24
 801c018:	d104      	bne.n	801c024 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 801c01a:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 801c01e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801c022:	bd70      	pop	{r4, r5, r6, pc}
 801c024:	2804      	cmp	r0, #4
 801c026:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 801c02a:	d109      	bne.n	801c040 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 801c02c:	fb14 f401 	smulbb	r4, r4, r1
 801c030:	2036      	movs	r0, #54	; 0x36
 801c032:	fb10 4405 	smlabb	r4, r0, r5, r4
 801c036:	2013      	movs	r0, #19
 801c038:	fb10 4006 	smlabb	r0, r0, r6, r4
 801c03c:	1300      	asrs	r0, r0, #12
 801c03e:	bd70      	pop	{r4, r5, r6, pc}
 801c040:	2802      	cmp	r0, #2
 801c042:	d109      	bne.n	801c058 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 801c044:	fb14 f401 	smulbb	r4, r4, r1
 801c048:	2036      	movs	r0, #54	; 0x36
 801c04a:	fb10 4405 	smlabb	r4, r0, r5, r4
 801c04e:	2013      	movs	r0, #19
 801c050:	fb10 4006 	smlabb	r0, r0, r6, r4
 801c054:	1380      	asrs	r0, r0, #14
 801c056:	bd70      	pop	{r4, r5, r6, pc}
 801c058:	2801      	cmp	r0, #1
 801c05a:	d109      	bne.n	801c070 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 801c05c:	fb14 f401 	smulbb	r4, r4, r1
 801c060:	2036      	movs	r0, #54	; 0x36
 801c062:	fb10 4405 	smlabb	r4, r0, r5, r4
 801c066:	2013      	movs	r0, #19
 801c068:	fb10 4006 	smlabb	r0, r0, r6, r4
 801c06c:	13c0      	asrs	r0, r0, #15
 801c06e:	bd70      	pop	{r4, r5, r6, pc}
 801c070:	4b05      	ldr	r3, [pc, #20]	; (801c088 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 801c072:	212f      	movs	r1, #47	; 0x2f
 801c074:	4a02      	ldr	r2, [pc, #8]	; (801c080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801c076:	e7bb      	b.n	801bff0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 801c078:	20009abc 	.word	0x20009abc
 801c07c:	08021144 	.word	0x08021144
 801c080:	080211c7 	.word	0x080211c7
 801c084:	08021187 	.word	0x08021187
 801c088:	080211ab 	.word	0x080211ab

0801c08c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c08c:	4b01      	ldr	r3, [pc, #4]	; (801c094 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c08e:	6018      	str	r0, [r3, #0]
 801c090:	4770      	bx	lr
 801c092:	bf00      	nop
 801c094:	20009b2c 	.word	0x20009b2c

0801c098 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c09c:	4f24      	ldr	r7, [pc, #144]	; (801c130 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c09e:	683b      	ldr	r3, [r7, #0]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d042      	beq.n	801c12a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c0a4:	4923      	ldr	r1, [pc, #140]	; (801c134 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c0a6:	4d24      	ldr	r5, [pc, #144]	; (801c138 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c0a8:	8808      	ldrh	r0, [r1, #0]
 801c0aa:	882a      	ldrh	r2, [r5, #0]
 801c0ac:	4e23      	ldr	r6, [pc, #140]	; (801c13c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c0ae:	4410      	add	r0, r2
 801c0b0:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 801c0b4:	4c22      	ldr	r4, [pc, #136]	; (801c140 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c0b6:	1c41      	adds	r1, r0, #1
 801c0b8:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801c0bc:	f021 0101 	bic.w	r1, r1, #1
 801c0c0:	eb03 0208 	add.w	r2, r3, r8
 801c0c4:	0409      	lsls	r1, r1, #16
 801c0c6:	6032      	str	r2, [r6, #0]
 801c0c8:	0c09      	lsrs	r1, r1, #16
 801c0ca:	0049      	lsls	r1, r1, #1
 801c0cc:	eb08 0c01 	add.w	ip, r8, r1
 801c0d0:	eb03 020c 	add.w	r2, r3, ip
 801c0d4:	44f4      	add	ip, lr
 801c0d6:	6022      	str	r2, [r4, #0]
 801c0d8:	4463      	add	r3, ip
 801c0da:	4a1a      	ldr	r2, [pc, #104]	; (801c144 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c0dc:	6013      	str	r3, [r2, #0]
 801c0de:	2300      	movs	r3, #0
 801c0e0:	4a19      	ldr	r2, [pc, #100]	; (801c148 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c0e2:	8013      	strh	r3, [r2, #0]
 801c0e4:	4a19      	ldr	r2, [pc, #100]	; (801c14c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c0e6:	6812      	ldr	r2, [r2, #0]
 801c0e8:	eba2 0208 	sub.w	r2, r2, r8
 801c0ec:	1a52      	subs	r2, r2, r1
 801c0ee:	4918      	ldr	r1, [pc, #96]	; (801c150 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c0f0:	eba2 020e 	sub.w	r2, r2, lr
 801c0f4:	469e      	mov	lr, r3
 801c0f6:	600a      	str	r2, [r1, #0]
 801c0f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c0fc:	4a15      	ldr	r2, [pc, #84]	; (801c154 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c0fe:	8013      	strh	r3, [r2, #0]
 801c100:	4283      	cmp	r3, r0
 801c102:	d007      	beq.n	801c114 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 801c104:	683a      	ldr	r2, [r7, #0]
 801c106:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801c10a:	6832      	ldr	r2, [r6, #0]
 801c10c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c110:	3301      	adds	r3, #1
 801c112:	e7f5      	b.n	801c100 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 801c114:	2300      	movs	r3, #0
 801c116:	882d      	ldrh	r5, [r5, #0]
 801c118:	6820      	ldr	r0, [r4, #0]
 801c11a:	4619      	mov	r1, r3
 801c11c:	42ab      	cmp	r3, r5
 801c11e:	d204      	bcs.n	801c12a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c120:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 801c124:	3301      	adds	r3, #1
 801c126:	7391      	strb	r1, [r2, #14]
 801c128:	e7f8      	b.n	801c11c <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 801c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c12e:	bf00      	nop
 801c130:	20009b30 	.word	0x20009b30
 801c134:	20009b4c 	.word	0x20009b4c
 801c138:	20009b50 	.word	0x20009b50
 801c13c:	20009b44 	.word	0x20009b44
 801c140:	20009b34 	.word	0x20009b34
 801c144:	20009b3c 	.word	0x20009b3c
 801c148:	20009b4e 	.word	0x20009b4e
 801c14c:	20009b38 	.word	0x20009b38
 801c150:	20009b48 	.word	0x20009b48
 801c154:	20009b40 	.word	0x20009b40

0801c158 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c158:	4b0f      	ldr	r3, [pc, #60]	; (801c198 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 801c15a:	b510      	push	{r4, lr}
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	b9d3      	cbnz	r3, 801c196 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801c160:	b1c9      	cbz	r1, 801c196 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801c162:	4b0e      	ldr	r3, [pc, #56]	; (801c19c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c164:	2406      	movs	r4, #6
 801c166:	801a      	strh	r2, [r3, #0]
 801c168:	b292      	uxth	r2, r2
 801c16a:	4b0d      	ldr	r3, [pc, #52]	; (801c1a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c16c:	881b      	ldrh	r3, [r3, #0]
 801c16e:	4413      	add	r3, r2
 801c170:	0112      	lsls	r2, r2, #4
 801c172:	fb04 2203 	mla	r2, r4, r3, r2
 801c176:	4291      	cmp	r1, r2
 801c178:	d805      	bhi.n	801c186 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 801c17a:	4b0a      	ldr	r3, [pc, #40]	; (801c1a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c17c:	2138      	movs	r1, #56	; 0x38
 801c17e:	4a0a      	ldr	r2, [pc, #40]	; (801c1a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c180:	480a      	ldr	r0, [pc, #40]	; (801c1ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c182:	f002 f919 	bl	801e3b8 <__assert_func>
 801c186:	4b0a      	ldr	r3, [pc, #40]	; (801c1b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c188:	6019      	str	r1, [r3, #0]
 801c18a:	4b0a      	ldr	r3, [pc, #40]	; (801c1b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c18c:	6018      	str	r0, [r3, #0]
 801c18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c192:	f7ff bf81 	b.w	801c098 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c196:	bd10      	pop	{r4, pc}
 801c198:	20009b3c 	.word	0x20009b3c
 801c19c:	20009b50 	.word	0x20009b50
 801c1a0:	20009b4c 	.word	0x20009b4c
 801c1a4:	08021287 	.word	0x08021287
 801c1a8:	0802131c 	.word	0x0802131c
 801c1ac:	08021262 	.word	0x08021262
 801c1b0:	20009b38 	.word	0x20009b38
 801c1b4:	20009b30 	.word	0x20009b30

0801c1b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c1b8:	b470      	push	{r4, r5, r6}
 801c1ba:	4c07      	ldr	r4, [pc, #28]	; (801c1d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c1bc:	4605      	mov	r5, r0
 801c1be:	4610      	mov	r0, r2
 801c1c0:	9a03      	ldr	r2, [sp, #12]
 801c1c2:	6826      	ldr	r6, [r4, #0]
 801c1c4:	b936      	cbnz	r6, 801c1d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c1c6:	6025      	str	r5, [r4, #0]
 801c1c8:	4c04      	ldr	r4, [pc, #16]	; (801c1dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c1ca:	8021      	strh	r1, [r4, #0]
 801c1cc:	4619      	mov	r1, r3
 801c1ce:	bc70      	pop	{r4, r5, r6}
 801c1d0:	f7ff bfc2 	b.w	801c158 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c1d4:	bc70      	pop	{r4, r5, r6}
 801c1d6:	4770      	bx	lr
 801c1d8:	20009b54 	.word	0x20009b54
 801c1dc:	20009b4c 	.word	0x20009b4c

0801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c1e0:	b508      	push	{r3, lr}
 801c1e2:	4b13      	ldr	r3, [pc, #76]	; (801c230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801c1e4:	6819      	ldr	r1, [r3, #0]
 801c1e6:	b931      	cbnz	r1, 801c1f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c1e8:	4b12      	ldr	r3, [pc, #72]	; (801c234 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c1ea:	f44f 710d 	mov.w	r1, #564	; 0x234
 801c1ee:	4a12      	ldr	r2, [pc, #72]	; (801c238 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c1f0:	4812      	ldr	r0, [pc, #72]	; (801c23c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c1f2:	f002 f8e1 	bl	801e3b8 <__assert_func>
 801c1f6:	4a12      	ldr	r2, [pc, #72]	; (801c240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c1f8:	8803      	ldrh	r3, [r0, #0]
 801c1fa:	8812      	ldrh	r2, [r2, #0]
 801c1fc:	4293      	cmp	r3, r2
 801c1fe:	da04      	bge.n	801c20a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c200:	2214      	movs	r2, #20
 801c202:	fb02 1303 	mla	r3, r2, r3, r1
 801c206:	8918      	ldrh	r0, [r3, #8]
 801c208:	bd08      	pop	{r3, pc}
 801c20a:	490e      	ldr	r1, [pc, #56]	; (801c244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c20c:	8809      	ldrh	r1, [r1, #0]
 801c20e:	4411      	add	r1, r2
 801c210:	428b      	cmp	r3, r1
 801c212:	da05      	bge.n	801c220 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 801c214:	1a9b      	subs	r3, r3, r2
 801c216:	4a0c      	ldr	r2, [pc, #48]	; (801c248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c218:	6812      	ldr	r2, [r2, #0]
 801c21a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801c21e:	e7f2      	b.n	801c206 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c224:	4293      	cmp	r3, r2
 801c226:	bf06      	itte	eq
 801c228:	4b08      	ldreq	r3, [pc, #32]	; (801c24c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c22a:	8818      	ldrheq	r0, [r3, #0]
 801c22c:	2000      	movne	r0, #0
 801c22e:	bd08      	pop	{r3, pc}
 801c230:	20009b54 	.word	0x20009b54
 801c234:	080212e0 	.word	0x080212e0
 801c238:	080213c9 	.word	0x080213c9
 801c23c:	08021262 	.word	0x08021262
 801c240:	20009b4c 	.word	0x20009b4c
 801c244:	20009b50 	.word	0x20009b50
 801c248:	20009b34 	.word	0x20009b34
 801c24c:	20009ab0 	.word	0x20009ab0

0801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c250:	b508      	push	{r3, lr}
 801c252:	4b13      	ldr	r3, [pc, #76]	; (801c2a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801c254:	6819      	ldr	r1, [r3, #0]
 801c256:	b931      	cbnz	r1, 801c266 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c258:	4b12      	ldr	r3, [pc, #72]	; (801c2a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c25a:	f44f 7112 	mov.w	r1, #584	; 0x248
 801c25e:	4a12      	ldr	r2, [pc, #72]	; (801c2a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c260:	4812      	ldr	r0, [pc, #72]	; (801c2ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c262:	f002 f8a9 	bl	801e3b8 <__assert_func>
 801c266:	4a12      	ldr	r2, [pc, #72]	; (801c2b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c268:	8803      	ldrh	r3, [r0, #0]
 801c26a:	8812      	ldrh	r2, [r2, #0]
 801c26c:	4293      	cmp	r3, r2
 801c26e:	da04      	bge.n	801c27a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c270:	2214      	movs	r2, #20
 801c272:	fb02 1303 	mla	r3, r2, r3, r1
 801c276:	8958      	ldrh	r0, [r3, #10]
 801c278:	bd08      	pop	{r3, pc}
 801c27a:	490e      	ldr	r1, [pc, #56]	; (801c2b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c27c:	8809      	ldrh	r1, [r1, #0]
 801c27e:	4411      	add	r1, r2
 801c280:	428b      	cmp	r3, r1
 801c282:	da05      	bge.n	801c290 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 801c284:	1a9b      	subs	r3, r3, r2
 801c286:	4a0c      	ldr	r2, [pc, #48]	; (801c2b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801c288:	6812      	ldr	r2, [r2, #0]
 801c28a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801c28e:	e7f2      	b.n	801c276 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801c290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c294:	4293      	cmp	r3, r2
 801c296:	bf06      	itte	eq
 801c298:	4b08      	ldreq	r3, [pc, #32]	; (801c2bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801c29a:	8818      	ldrheq	r0, [r3, #0]
 801c29c:	2000      	movne	r0, #0
 801c29e:	bd08      	pop	{r3, pc}
 801c2a0:	20009b54 	.word	0x20009b54
 801c2a4:	080212e0 	.word	0x080212e0
 801c2a8:	080213f5 	.word	0x080213f5
 801c2ac:	08021262 	.word	0x08021262
 801c2b0:	20009b4c 	.word	0x20009b4c
 801c2b4:	20009b50 	.word	0x20009b50
 801c2b8:	20009b34 	.word	0x20009b34
 801c2bc:	20009ab2 	.word	0x20009ab2

0801c2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c2c0:	4b22      	ldr	r3, [pc, #136]	; (801c34c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801c2c2:	b510      	push	{r4, lr}
 801c2c4:	681c      	ldr	r4, [r3, #0]
 801c2c6:	b934      	cbnz	r4, 801c2d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801c2c8:	4b21      	ldr	r3, [pc, #132]	; (801c350 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c2ca:	f44f 7117 	mov.w	r1, #604	; 0x25c
 801c2ce:	4a21      	ldr	r2, [pc, #132]	; (801c354 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c2d0:	4821      	ldr	r0, [pc, #132]	; (801c358 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801c2d2:	f002 f871 	bl	801e3b8 <__assert_func>
 801c2d6:	4a21      	ldr	r2, [pc, #132]	; (801c35c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801c2d8:	880b      	ldrh	r3, [r1, #0]
 801c2da:	8812      	ldrh	r2, [r2, #0]
 801c2dc:	4293      	cmp	r3, r2
 801c2de:	da10      	bge.n	801c302 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 801c2e0:	2214      	movs	r2, #20
 801c2e2:	fb02 4303 	mla	r3, r2, r3, r4
 801c2e6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c2ea:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c2ee:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801c2f2:	8a5b      	ldrh	r3, [r3, #18]
 801c2f4:	8004      	strh	r4, [r0, #0]
 801c2f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2fa:	8041      	strh	r1, [r0, #2]
 801c2fc:	8082      	strh	r2, [r0, #4]
 801c2fe:	80c3      	strh	r3, [r0, #6]
 801c300:	bd10      	pop	{r4, pc}
 801c302:	4917      	ldr	r1, [pc, #92]	; (801c360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801c304:	8809      	ldrh	r1, [r1, #0]
 801c306:	4411      	add	r1, r2
 801c308:	428b      	cmp	r3, r1
 801c30a:	da09      	bge.n	801c320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801c30c:	1a9b      	subs	r3, r3, r2
 801c30e:	4a15      	ldr	r2, [pc, #84]	; (801c364 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801c310:	6812      	ldr	r2, [r2, #0]
 801c312:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801c316:	681a      	ldr	r2, [r3, #0]
 801c318:	6002      	str	r2, [r0, #0]
 801c31a:	685a      	ldr	r2, [r3, #4]
 801c31c:	6042      	str	r2, [r0, #4]
 801c31e:	bd10      	pop	{r4, pc}
 801c320:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c324:	4293      	cmp	r3, r2
 801c326:	d10b      	bne.n	801c340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801c328:	4b0f      	ldr	r3, [pc, #60]	; (801c368 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801c32a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c32e:	4b0f      	ldr	r3, [pc, #60]	; (801c36c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801c330:	8081      	strh	r1, [r0, #4]
 801c332:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c336:	2300      	movs	r3, #0
 801c338:	80c2      	strh	r2, [r0, #6]
 801c33a:	8003      	strh	r3, [r0, #0]
 801c33c:	8043      	strh	r3, [r0, #2]
 801c33e:	bd10      	pop	{r4, pc}
 801c340:	2300      	movs	r3, #0
 801c342:	8003      	strh	r3, [r0, #0]
 801c344:	8043      	strh	r3, [r0, #2]
 801c346:	8083      	strh	r3, [r0, #4]
 801c348:	e7d9      	b.n	801c2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 801c34a:	bf00      	nop
 801c34c:	20009b54 	.word	0x20009b54
 801c350:	080212e0 	.word	0x080212e0
 801c354:	08021362 	.word	0x08021362
 801c358:	08021262 	.word	0x08021262
 801c35c:	20009b4c 	.word	0x20009b4c
 801c360:	20009b50 	.word	0x20009b50
 801c364:	20009b34 	.word	0x20009b34
 801c368:	20009ab0 	.word	0x20009ab0
 801c36c:	20009ab2 	.word	0x20009ab2

0801c370 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801c370:	4b16      	ldr	r3, [pc, #88]	; (801c3cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	b333      	cbz	r3, 801c3c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801c376:	4a16      	ldr	r2, [pc, #88]	; (801c3d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801c378:	8800      	ldrh	r0, [r0, #0]
 801c37a:	8812      	ldrh	r2, [r2, #0]
 801c37c:	4290      	cmp	r0, r2
 801c37e:	da0f      	bge.n	801c3a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 801c380:	2214      	movs	r2, #20
 801c382:	fb02 3300 	mla	r3, r2, r0, r3
 801c386:	8a19      	ldrh	r1, [r3, #16]
 801c388:	891a      	ldrh	r2, [r3, #8]
 801c38a:	4291      	cmp	r1, r2
 801c38c:	db1c      	blt.n	801c3c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801c38e:	8a58      	ldrh	r0, [r3, #18]
 801c390:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c394:	895b      	ldrh	r3, [r3, #10]
 801c396:	4298      	cmp	r0, r3
 801c398:	bfac      	ite	ge
 801c39a:	2000      	movge	r0, #0
 801c39c:	2001      	movlt	r0, #1
 801c39e:	4770      	bx	lr
 801c3a0:	4b0c      	ldr	r3, [pc, #48]	; (801c3d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801c3a2:	881b      	ldrh	r3, [r3, #0]
 801c3a4:	4413      	add	r3, r2
 801c3a6:	4298      	cmp	r0, r3
 801c3a8:	da0c      	bge.n	801c3c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801c3aa:	4b0b      	ldr	r3, [pc, #44]	; (801c3d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801c3ac:	1a80      	subs	r0, r0, r2
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801c3b4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801c3b8:	891a      	ldrh	r2, [r3, #8]
 801c3ba:	4291      	cmp	r1, r2
 801c3bc:	db04      	blt.n	801c3c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801c3be:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801c3c2:	e7e7      	b.n	801c394 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 801c3c4:	2000      	movs	r0, #0
 801c3c6:	4770      	bx	lr
 801c3c8:	2001      	movs	r0, #1
 801c3ca:	4770      	bx	lr
 801c3cc:	20009b54 	.word	0x20009b54
 801c3d0:	20009b4c 	.word	0x20009b4c
 801c3d4:	20009b50 	.word	0x20009b50
 801c3d8:	20009b34 	.word	0x20009b34

0801c3dc <_ZNK8touchgfx6Bitmap7getDataEv>:
 801c3dc:	b508      	push	{r3, lr}
 801c3de:	4b11      	ldr	r3, [pc, #68]	; (801c424 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801c3e0:	6819      	ldr	r1, [r3, #0]
 801c3e2:	b931      	cbnz	r1, 801c3f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801c3e4:	4b10      	ldr	r3, [pc, #64]	; (801c428 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801c3e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c3ea:	4a10      	ldr	r2, [pc, #64]	; (801c42c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c3ec:	4810      	ldr	r0, [pc, #64]	; (801c430 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801c3ee:	f001 ffe3 	bl	801e3b8 <__assert_func>
 801c3f2:	8803      	ldrh	r3, [r0, #0]
 801c3f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c3f8:	4293      	cmp	r3, r2
 801c3fa:	d011      	beq.n	801c420 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801c3fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c400:	4293      	cmp	r3, r2
 801c402:	d103      	bne.n	801c40c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801c404:	4b0b      	ldr	r3, [pc, #44]	; (801c434 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801c40a:	bd08      	pop	{r3, pc}
 801c40c:	4a0a      	ldr	r2, [pc, #40]	; (801c438 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c40e:	6812      	ldr	r2, [r2, #0]
 801c410:	b112      	cbz	r2, 801c418 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801c412:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c416:	b920      	cbnz	r0, 801c422 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c418:	2214      	movs	r2, #20
 801c41a:	4353      	muls	r3, r2
 801c41c:	58c8      	ldr	r0, [r1, r3]
 801c41e:	bd08      	pop	{r3, pc}
 801c420:	2000      	movs	r0, #0
 801c422:	bd08      	pop	{r3, pc}
 801c424:	20009b54 	.word	0x20009b54
 801c428:	080212e0 	.word	0x080212e0
 801c42c:	08021398 	.word	0x08021398
 801c430:	08021262 	.word	0x08021262
 801c434:	20009abc 	.word	0x20009abc
 801c438:	20009b30 	.word	0x20009b30

0801c43c <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 801c43c:	8802      	ldrh	r2, [r0, #0]
 801c43e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801c442:	429a      	cmp	r2, r3
 801c444:	dc19      	bgt.n	801c47a <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801c446:	4b0e      	ldr	r3, [pc, #56]	; (801c480 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 801c448:	881b      	ldrh	r3, [r3, #0]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	da15      	bge.n	801c47a <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801c44e:	4b0d      	ldr	r3, [pc, #52]	; (801c484 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 801c450:	6819      	ldr	r1, [r3, #0]
 801c452:	2314      	movs	r3, #20
 801c454:	fb03 1302 	mla	r3, r3, r2, r1
 801c458:	6858      	ldr	r0, [r3, #4]
 801c45a:	b178      	cbz	r0, 801c47c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801c45c:	490a      	ldr	r1, [pc, #40]	; (801c488 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 801c45e:	6809      	ldr	r1, [r1, #0]
 801c460:	b161      	cbz	r1, 801c47c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801c462:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801c466:	b14a      	cbz	r2, 801c47c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801c468:	8919      	ldrh	r1, [r3, #8]
 801c46a:	8958      	ldrh	r0, [r3, #10]
 801c46c:	4348      	muls	r0, r1
 801c46e:	0040      	lsls	r0, r0, #1
 801c470:	3003      	adds	r0, #3
 801c472:	f020 0003 	bic.w	r0, r0, #3
 801c476:	4410      	add	r0, r2
 801c478:	4770      	bx	lr
 801c47a:	2000      	movs	r0, #0
 801c47c:	4770      	bx	lr
 801c47e:	bf00      	nop
 801c480:	20009b4c 	.word	0x20009b4c
 801c484:	20009b54 	.word	0x20009b54
 801c488:	20009b30 	.word	0x20009b30

0801c48c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c48c:	b508      	push	{r3, lr}
 801c48e:	4b1c      	ldr	r3, [pc, #112]	; (801c500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c490:	6819      	ldr	r1, [r3, #0]
 801c492:	8803      	ldrh	r3, [r0, #0]
 801c494:	b1a9      	cbz	r1, 801c4c2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801c496:	4a1b      	ldr	r2, [pc, #108]	; (801c504 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801c498:	8812      	ldrh	r2, [r2, #0]
 801c49a:	4293      	cmp	r3, r2
 801c49c:	da05      	bge.n	801c4aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 801c49e:	2214      	movs	r2, #20
 801c4a0:	fb02 1303 	mla	r3, r2, r3, r1
 801c4a4:	7cd8      	ldrb	r0, [r3, #19]
 801c4a6:	0940      	lsrs	r0, r0, #5
 801c4a8:	bd08      	pop	{r3, pc}
 801c4aa:	4917      	ldr	r1, [pc, #92]	; (801c508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 801c4ac:	8809      	ldrh	r1, [r1, #0]
 801c4ae:	4411      	add	r1, r2
 801c4b0:	428b      	cmp	r3, r1
 801c4b2:	da06      	bge.n	801c4c2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801c4b4:	1a9b      	subs	r3, r3, r2
 801c4b6:	4a15      	ldr	r2, [pc, #84]	; (801c50c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801c4b8:	6812      	ldr	r2, [r2, #0]
 801c4ba:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801c4be:	7b18      	ldrb	r0, [r3, #12]
 801c4c0:	bd08      	pop	{r3, pc}
 801c4c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c4c6:	4293      	cmp	r3, r2
 801c4c8:	d10c      	bne.n	801c4e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801c4ca:	4b11      	ldr	r3, [pc, #68]	; (801c510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	6898      	ldr	r0, [r3, #8]
 801c4d0:	6803      	ldr	r3, [r0, #0]
 801c4d2:	6a1b      	ldr	r3, [r3, #32]
 801c4d4:	4798      	blx	r3
 801c4d6:	2804      	cmp	r0, #4
 801c4d8:	d00e      	beq.n	801c4f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 801c4da:	d805      	bhi.n	801c4e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c4dc:	2801      	cmp	r0, #1
 801c4de:	d00d      	beq.n	801c4fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 801c4e0:	2802      	cmp	r0, #2
 801c4e2:	d007      	beq.n	801c4f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 801c4e4:	2000      	movs	r0, #0
 801c4e6:	bd08      	pop	{r3, pc}
 801c4e8:	2810      	cmp	r0, #16
 801c4ea:	d0fb      	beq.n	801c4e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801c4ec:	2818      	cmp	r0, #24
 801c4ee:	d1f9      	bne.n	801c4e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801c4f0:	2001      	movs	r0, #1
 801c4f2:	bd08      	pop	{r3, pc}
 801c4f4:	2005      	movs	r0, #5
 801c4f6:	bd08      	pop	{r3, pc}
 801c4f8:	2006      	movs	r0, #6
 801c4fa:	bd08      	pop	{r3, pc}
 801c4fc:	2003      	movs	r0, #3
 801c4fe:	bd08      	pop	{r3, pc}
 801c500:	20009b54 	.word	0x20009b54
 801c504:	20009b4c 	.word	0x20009b4c
 801c508:	20009b50 	.word	0x20009b50
 801c50c:	20009b34 	.word	0x20009b34
 801c510:	20009abc 	.word	0x20009abc

0801c514 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801c514:	2010      	movs	r0, #16
 801c516:	4770      	bx	lr

0801c518 <_ZN8touchgfx8LCD16bpp4initEv>:
 801c518:	4770      	bx	lr
	...

0801c51c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 801c51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c520:	b086      	sub	sp, #24
 801c522:	6808      	ldr	r0, [r1, #0]
 801c524:	6849      	ldr	r1, [r1, #4]
 801c526:	4617      	mov	r7, r2
 801c528:	ab04      	add	r3, sp, #16
 801c52a:	ac04      	add	r4, sp, #16
 801c52c:	c303      	stmia	r3!, {r0, r1}
 801c52e:	4620      	mov	r0, r4
 801c530:	f7fe fb44 	bl	801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c534:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c538:	429f      	cmp	r7, r3
 801c53a:	d109      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801c53c:	4b33      	ldr	r3, [pc, #204]	; (801c60c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 801c53e:	781b      	ldrb	r3, [r3, #0]
 801c540:	b933      	cbnz	r3, 801c550 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801c542:	4b33      	ldr	r3, [pc, #204]	; (801c610 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 801c544:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801c548:	4a32      	ldr	r2, [pc, #200]	; (801c614 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 801c54a:	4833      	ldr	r0, [pc, #204]	; (801c618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 801c54c:	f001 ff34 	bl	801e3b8 <__assert_func>
 801c550:	4e32      	ldr	r6, [pc, #200]	; (801c61c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 801c552:	6830      	ldr	r0, [r6, #0]
 801c554:	46b0      	mov	r8, r6
 801c556:	6803      	ldr	r3, [r0, #0]
 801c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c55a:	4798      	blx	r3
 801c55c:	f010 0a01 	ands.w	sl, r0, #1
 801c560:	d020      	beq.n	801c5a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 801c562:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c566:	429f      	cmp	r7, r3
 801c568:	d108      	bne.n	801c57c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 801c56a:	6830      	ldr	r0, [r6, #0]
 801c56c:	6803      	ldr	r3, [r0, #0]
 801c56e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c574:	4798      	blx	r3
 801c576:	b006      	add	sp, #24
 801c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c57c:	ad06      	add	r5, sp, #24
 801c57e:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801c582:	4628      	mov	r0, r5
 801c584:	f7ff ff2a 	bl	801c3dc <_ZNK8touchgfx6Bitmap7getDataEv>
 801c588:	6836      	ldr	r6, [r6, #0]
 801c58a:	4680      	mov	r8, r0
 801c58c:	4628      	mov	r0, r5
 801c58e:	6833      	ldr	r3, [r6, #0]
 801c590:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801c592:	f7ff fe25 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c596:	4643      	mov	r3, r8
 801c598:	9000      	str	r0, [sp, #0]
 801c59a:	4630      	mov	r0, r6
 801c59c:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c5a0:	47b8      	blx	r7
 801c5a2:	e7e8      	b.n	801c576 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801c5a4:	6830      	ldr	r0, [r6, #0]
 801c5a6:	ad06      	add	r5, sp, #24
 801c5a8:	4e1d      	ldr	r6, [pc, #116]	; (801c620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 801c5aa:	6803      	ldr	r3, [r0, #0]
 801c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5ae:	4798      	blx	r3
 801c5b0:	8834      	ldrh	r4, [r6, #0]
 801c5b2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801c5b6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801c5ba:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801c5be:	4657      	mov	r7, sl
 801c5c0:	fb02 3404 	mla	r4, r2, r4, r3
 801c5c4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c5c8:	4628      	mov	r0, r5
 801c5ca:	f7ff ff07 	bl	801c3dc <_ZNK8touchgfx6Bitmap7getDataEv>
 801c5ce:	4681      	mov	r9, r0
 801c5d0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c5d4:	429f      	cmp	r7, r3
 801c5d6:	da14      	bge.n	801c602 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 801c5d8:	f8d8 0000 	ldr.w	r0, [r8]
 801c5dc:	4649      	mov	r1, r9
 801c5de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c5e2:	3701      	adds	r7, #1
 801c5e4:	6802      	ldr	r2, [r0, #0]
 801c5e6:	005b      	lsls	r3, r3, #1
 801c5e8:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	47d0      	blx	sl
 801c5f0:	8833      	ldrh	r3, [r6, #0]
 801c5f2:	4628      	mov	r0, r5
 801c5f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c5f8:	f7ff fdf2 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c5fc:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 801c600:	e7e6      	b.n	801c5d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 801c602:	4628      	mov	r0, r5
 801c604:	f7ff feea 	bl	801c3dc <_ZNK8touchgfx6Bitmap7getDataEv>
 801c608:	e7b5      	b.n	801c576 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801c60a:	bf00      	nop
 801c60c:	20009abb 	.word	0x20009abb
 801c610:	08021477 	.word	0x08021477
 801c614:	080215d4 	.word	0x080215d4
 801c618:	080214b2 	.word	0x080214b2
 801c61c:	20009abc 	.word	0x20009abc
 801c620:	20009ab6 	.word	0x20009ab6

0801c624 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c628:	b08d      	sub	sp, #52	; 0x34
 801c62a:	4688      	mov	r8, r1
 801c62c:	4614      	mov	r4, r2
 801c62e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801c632:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c636:	2f00      	cmp	r7, #0
 801c638:	d047      	beq.n	801c6ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801c63a:	6810      	ldr	r0, [r2, #0]
 801c63c:	ae08      	add	r6, sp, #32
 801c63e:	6851      	ldr	r1, [r2, #4]
 801c640:	c603      	stmia	r6!, {r0, r1}
 801c642:	6818      	ldr	r0, [r3, #0]
 801c644:	ae0a      	add	r6, sp, #40	; 0x28
 801c646:	6859      	ldr	r1, [r3, #4]
 801c648:	c603      	stmia	r6!, {r0, r1}
 801c64a:	a808      	add	r0, sp, #32
 801c64c:	f7fe fab6 	bl	801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c650:	4621      	mov	r1, r4
 801c652:	a80a      	add	r0, sp, #40	; 0x28
 801c654:	f7fe fa9a 	bl	801ab8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c658:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c65c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c660:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c664:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c668:	fb14 2103 	smlabb	r1, r4, r3, r2
 801c66c:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 801c670:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c674:	f8df 8218 	ldr.w	r8, [pc, #536]	; 801c890 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 801c678:	440a      	add	r2, r1
 801c67a:	f8d8 0000 	ldr.w	r0, [r8]
 801c67e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c682:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c686:	4413      	add	r3, r2
 801c688:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c68c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c690:	9306      	str	r3, [sp, #24]
 801c692:	6803      	ldr	r3, [r0, #0]
 801c694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c696:	4798      	blx	r3
 801c698:	2fff      	cmp	r7, #255	; 0xff
 801c69a:	d019      	beq.n	801c6d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c69c:	f010 0f04 	tst.w	r0, #4
 801c6a0:	d01a      	beq.n	801c6d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801c6a2:	f8d8 0000 	ldr.w	r0, [r8]
 801c6a6:	b2b6      	uxth	r6, r6
 801c6a8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c6ac:	6801      	ldr	r1, [r0, #0]
 801c6ae:	9504      	str	r5, [sp, #16]
 801c6b0:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801c6b4:	9703      	str	r7, [sp, #12]
 801c6b6:	9502      	str	r5, [sp, #8]
 801c6b8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801c6bc:	9600      	str	r6, [sp, #0]
 801c6be:	9501      	str	r5, [sp, #4]
 801c6c0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c6c4:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 801c6c6:	4621      	mov	r1, r4
 801c6c8:	47a8      	blx	r5
 801c6ca:	b00d      	add	sp, #52	; 0x34
 801c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6d0:	b915      	cbnz	r5, 801c6d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801c6d2:	f010 0f01 	tst.w	r0, #1
 801c6d6:	e7e3      	b.n	801c6a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c6d8:	f8d8 0000 	ldr.w	r0, [r8]
 801c6dc:	6803      	ldr	r3, [r0, #0]
 801c6de:	6a1b      	ldr	r3, [r3, #32]
 801c6e0:	4798      	blx	r3
 801c6e2:	4b69      	ldr	r3, [pc, #420]	; (801c888 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801c6e4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c6e8:	2fff      	cmp	r7, #255	; 0xff
 801c6ea:	881d      	ldrh	r5, [r3, #0]
 801c6ec:	4699      	mov	r9, r3
 801c6ee:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c6f2:	fb01 2505 	mla	r5, r1, r5, r2
 801c6f6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c6fa:	f000 80a6 	beq.w	801c84a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 801c6fe:	ea44 0205 	orr.w	r2, r4, r5
 801c702:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 801c706:	f012 0f03 	tst.w	r2, #3
 801c70a:	d154      	bne.n	801c7b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801c70c:	07f2      	lsls	r2, r6, #31
 801c70e:	d452      	bmi.n	801c7b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801c710:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 801c714:	f01e 0e01 	ands.w	lr, lr, #1
 801c718:	d14d      	bne.n	801c7b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801c71a:	2202      	movs	r2, #2
 801c71c:	9307      	str	r3, [sp, #28]
 801c71e:	fb96 f8f2 	sdiv	r8, r6, r2
 801c722:	4693      	mov	fp, r2
 801c724:	f1c8 0800 	rsb	r8, r8, #0
 801c728:	9b06      	ldr	r3, [sp, #24]
 801c72a:	459e      	cmp	lr, r3
 801c72c:	f280 80a5 	bge.w	801c87a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801c730:	f04f 0900 	mov.w	r9, #0
 801c734:	45b1      	cmp	r9, r6
 801c736:	da2e      	bge.n	801c796 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 801c738:	6829      	ldr	r1, [r5, #0]
 801c73a:	f109 0902 	add.w	r9, r9, #2
 801c73e:	f854 2b04 	ldr.w	r2, [r4], #4
 801c742:	0a0b      	lsrs	r3, r1, #8
 801c744:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 801c748:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801c74c:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 801c750:	fb00 fa0a 	mul.w	sl, r0, sl
 801c754:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 801c758:	0949      	lsrs	r1, r1, #5
 801c75a:	4343      	muls	r3, r0
 801c75c:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 801c760:	fb07 3c0c 	mla	ip, r7, ip, r3
 801c764:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 801c768:	0952      	lsrs	r2, r2, #5
 801c76a:	4341      	muls	r1, r0
 801c76c:	fb07 a303 	mla	r3, r7, r3, sl
 801c770:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 801c774:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 801c778:	0a1b      	lsrs	r3, r3, #8
 801c77a:	fb07 1202 	mla	r2, r7, r2, r1
 801c77e:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 801c782:	ea4c 0c03 	orr.w	ip, ip, r3
 801c786:	4b41      	ldr	r3, [pc, #260]	; (801c88c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 801c788:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 801c78c:	ea4c 0202 	orr.w	r2, ip, r2
 801c790:	f845 2b04 	str.w	r2, [r5], #4
 801c794:	e7ce      	b.n	801c734 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 801c796:	9b07      	ldr	r3, [sp, #28]
 801c798:	f10e 0e01 	add.w	lr, lr, #1
 801c79c:	881b      	ldrh	r3, [r3, #0]
 801c79e:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 801c7a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801c7a6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c7aa:	fb93 f3fb 	sdiv	r3, r3, fp
 801c7ae:	4443      	add	r3, r8
 801c7b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801c7b4:	e7b8      	b.n	801c728 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 801c7b6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801c7ba:	f04f 0800 	mov.w	r8, #0
 801c7be:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801c894 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 801c7c2:	005b      	lsls	r3, r3, #1
 801c7c4:	9307      	str	r3, [sp, #28]
 801c7c6:	9b06      	ldr	r3, [sp, #24]
 801c7c8:	4598      	cmp	r8, r3
 801c7ca:	da56      	bge.n	801c87a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801c7cc:	46aa      	mov	sl, r5
 801c7ce:	f04f 0c00 	mov.w	ip, #0
 801c7d2:	45b4      	cmp	ip, r6
 801c7d4:	da29      	bge.n	801c82a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 801c7d6:	f8ba 1000 	ldrh.w	r1, [sl]
 801c7da:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 801c7de:	f10c 0c01 	add.w	ip, ip, #1
 801c7e2:	ea01 0309 	and.w	r3, r1, r9
 801c7e6:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 801c7ea:	ea02 0e09 	and.w	lr, r2, r9
 801c7ee:	f001 011f 	and.w	r1, r1, #31
 801c7f2:	4343      	muls	r3, r0
 801c7f4:	fb00 fb0b 	mul.w	fp, r0, fp
 801c7f8:	fb07 3e0e 	mla	lr, r7, lr, r3
 801c7fc:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801c800:	4341      	muls	r1, r0
 801c802:	f002 021f 	and.w	r2, r2, #31
 801c806:	fb07 b303 	mla	r3, r7, r3, fp
 801c80a:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 801c80e:	fb07 1202 	mla	r2, r7, r2, r1
 801c812:	121b      	asrs	r3, r3, #8
 801c814:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801c818:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c81c:	ea4e 0e03 	orr.w	lr, lr, r3
 801c820:	ea4e 0e02 	orr.w	lr, lr, r2
 801c824:	f82a eb02 	strh.w	lr, [sl], #2
 801c828:	e7d3      	b.n	801c7d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 801c82a:	4b17      	ldr	r3, [pc, #92]	; (801c888 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801c82c:	f108 0801 	add.w	r8, r8, #1
 801c830:	9a07      	ldr	r2, [sp, #28]
 801c832:	881b      	ldrh	r3, [r3, #0]
 801c834:	1b9b      	subs	r3, r3, r6
 801c836:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c83a:	441d      	add	r5, r3
 801c83c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c840:	1b9b      	subs	r3, r3, r6
 801c842:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c846:	441c      	add	r4, r3
 801c848:	e7bd      	b.n	801c7c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 801c84a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801c84e:	2700      	movs	r7, #0
 801c850:	9b06      	ldr	r3, [sp, #24]
 801c852:	429f      	cmp	r7, r3
 801c854:	da11      	bge.n	801c87a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801c856:	f8d8 0000 	ldr.w	r0, [r8]
 801c85a:	4622      	mov	r2, r4
 801c85c:	4629      	mov	r1, r5
 801c85e:	3701      	adds	r7, #1
 801c860:	6803      	ldr	r3, [r0, #0]
 801c862:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801c864:	4653      	mov	r3, sl
 801c866:	47b0      	blx	r6
 801c868:	f8b9 3000 	ldrh.w	r3, [r9]
 801c86c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c870:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c874:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c878:	e7ea      	b.n	801c850 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 801c87a:	4b05      	ldr	r3, [pc, #20]	; (801c890 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 801c87c:	6818      	ldr	r0, [r3, #0]
 801c87e:	6803      	ldr	r3, [r0, #0]
 801c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c882:	4798      	blx	r3
 801c884:	e721      	b.n	801c6ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801c886:	bf00      	nop
 801c888:	20009ab6 	.word	0x20009ab6
 801c88c:	07e007e0 	.word	0x07e007e0
 801c890:	20009abc 	.word	0x20009abc
 801c894:	fffff800 	.word	0xfffff800

0801c898 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c89c:	4615      	mov	r5, r2
 801c89e:	b08b      	sub	sp, #44	; 0x2c
 801c8a0:	4699      	mov	r9, r3
 801c8a2:	b13b      	cbz	r3, 801c8b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c8a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c8a8:	b123      	cbz	r3, 801c8b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c8aa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	f040 808c 	bne.w	801c9cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801c8b4:	b00b      	add	sp, #44	; 0x2c
 801c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ba:	f010 0f08 	tst.w	r0, #8
 801c8be:	d011      	beq.n	801c8e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 801c8c0:	6818      	ldr	r0, [r3, #0]
 801c8c2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c8c6:	6801      	ldr	r1, [r0, #0]
 801c8c8:	9401      	str	r4, [sp, #4]
 801c8ca:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c8ce:	f8cd 9008 	str.w	r9, [sp, #8]
 801c8d2:	9400      	str	r4, [sp, #0]
 801c8d4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c8d8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 801c8da:	4629      	mov	r1, r5
 801c8dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c8e0:	47a0      	blx	r4
 801c8e2:	e7e7      	b.n	801c8b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c8e4:	6818      	ldr	r0, [r3, #0]
 801c8e6:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801c8ea:	6803      	ldr	r3, [r0, #0]
 801c8ec:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 801c8f0:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801c8f4:	6a1b      	ldr	r3, [r3, #32]
 801c8f6:	4798      	blx	r3
 801c8f8:	4a3e      	ldr	r2, [pc, #248]	; (801c9f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 801c8fa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c8fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c902:	8816      	ldrh	r6, [r2, #0]
 801c904:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c908:	fb06 1303 	mla	r3, r6, r3, r1
 801c90c:	4616      	mov	r6, r2
 801c90e:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 801c912:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c916:	d041      	beq.n	801c99c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 801c918:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 801c91c:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 801c920:	f005 051f 	and.w	r5, r5, #31
 801c924:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 801c928:	fb09 fe0e 	mul.w	lr, r9, lr
 801c92c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 801c9fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801c930:	fb09 f305 	mul.w	r3, r9, r5
 801c934:	2500      	movs	r5, #0
 801c936:	fb09 f707 	mul.w	r7, r9, r7
 801c93a:	9306      	str	r3, [sp, #24]
 801c93c:	004b      	lsls	r3, r1, #1
 801c93e:	9207      	str	r2, [sp, #28]
 801c940:	9305      	str	r3, [sp, #20]
 801c942:	4545      	cmp	r5, r8
 801c944:	da3c      	bge.n	801c9c0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801c946:	4681      	mov	r9, r0
 801c948:	f04f 0c00 	mov.w	ip, #0
 801c94c:	45a4      	cmp	ip, r4
 801c94e:	da1c      	bge.n	801c98a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 801c950:	f8b9 2000 	ldrh.w	r2, [r9]
 801c954:	f10c 0c01 	add.w	ip, ip, #1
 801c958:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801c95c:	ea02 010b 	and.w	r1, r2, fp
 801c960:	fb06 7303 	mla	r3, r6, r3, r7
 801c964:	fb06 e101 	mla	r1, r6, r1, lr
 801c968:	0a1b      	lsrs	r3, r3, #8
 801c96a:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 801c96e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c972:	430b      	orrs	r3, r1
 801c974:	f002 011f 	and.w	r1, r2, #31
 801c978:	9a06      	ldr	r2, [sp, #24]
 801c97a:	fb06 2101 	mla	r1, r6, r1, r2
 801c97e:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801c982:	430b      	orrs	r3, r1
 801c984:	f829 3b02 	strh.w	r3, [r9], #2
 801c988:	e7e0      	b.n	801c94c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 801c98a:	9b07      	ldr	r3, [sp, #28]
 801c98c:	3501      	adds	r5, #1
 801c98e:	9a05      	ldr	r2, [sp, #20]
 801c990:	881b      	ldrh	r3, [r3, #0]
 801c992:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801c996:	4413      	add	r3, r2
 801c998:	4418      	add	r0, r3
 801c99a:	e7d2      	b.n	801c942 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801c99c:	0049      	lsls	r1, r1, #1
 801c99e:	2200      	movs	r2, #0
 801c9a0:	4542      	cmp	r2, r8
 801c9a2:	da0d      	bge.n	801c9c0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801c9a4:	2300      	movs	r3, #0
 801c9a6:	42a3      	cmp	r3, r4
 801c9a8:	da03      	bge.n	801c9b2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 801c9aa:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801c9ae:	3301      	adds	r3, #1
 801c9b0:	e7f9      	b.n	801c9a6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 801c9b2:	8833      	ldrh	r3, [r6, #0]
 801c9b4:	3201      	adds	r2, #1
 801c9b6:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801c9ba:	440b      	add	r3, r1
 801c9bc:	4418      	add	r0, r3
 801c9be:	e7ef      	b.n	801c9a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 801c9c0:	4b0d      	ldr	r3, [pc, #52]	; (801c9f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801c9c2:	6818      	ldr	r0, [r3, #0]
 801c9c4:	6803      	ldr	r3, [r0, #0]
 801c9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9c8:	4798      	blx	r3
 801c9ca:	e773      	b.n	801c8b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c9cc:	6808      	ldr	r0, [r1, #0]
 801c9ce:	ab08      	add	r3, sp, #32
 801c9d0:	6849      	ldr	r1, [r1, #4]
 801c9d2:	4c09      	ldr	r4, [pc, #36]	; (801c9f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801c9d4:	c303      	stmia	r3!, {r0, r1}
 801c9d6:	a808      	add	r0, sp, #32
 801c9d8:	f7fe f8f0 	bl	801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9dc:	6820      	ldr	r0, [r4, #0]
 801c9de:	6803      	ldr	r3, [r0, #0]
 801c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9e2:	4798      	blx	r3
 801c9e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c9e8:	4623      	mov	r3, r4
 801c9ea:	f47f af66 	bne.w	801c8ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801c9ee:	f010 0f02 	tst.w	r0, #2
 801c9f2:	e764      	b.n	801c8be <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801c9f4:	20009ab6 	.word	0x20009ab6
 801c9f8:	20009abc 	.word	0x20009abc
 801c9fc:	fffff800 	.word	0xfffff800

0801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 801ca00:	ee07 0a90 	vmov	s15, r0
 801ca04:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801ca08:	ee71 1ac1 	vsub.f32	s3, s3, s2
 801ca0c:	eddf 6a08 	vldr	s13, [pc, #32]	; 801ca30 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 801ca10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ca14:	eea0 0a82 	vfma.f32	s0, s1, s4
 801ca18:	eea1 1a82 	vfma.f32	s2, s3, s4
 801ca1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ca20:	ee31 1a40 	vsub.f32	s2, s2, s0
 801ca24:	eea2 0a81 	vfma.f32	s0, s5, s2
 801ca28:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ca2c:	4770      	bx	lr
 801ca2e:	bf00      	nop
 801ca30:	437f0000 	.word	0x437f0000

0801ca34 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca38:	ed2d 8b0e 	vpush	{d8-d14}
 801ca3c:	b095      	sub	sp, #84	; 0x54
 801ca3e:	461e      	mov	r6, r3
 801ca40:	2700      	movs	r7, #0
 801ca42:	4690      	mov	r8, r2
 801ca44:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 801ca48:	a812      	add	r0, sp, #72	; 0x48
 801ca4a:	468a      	mov	sl, r1
 801ca4c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 801ca4e:	9311      	str	r3, [sp, #68]	; 0x44
 801ca50:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ca54:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 801ca58:	9301      	str	r3, [sp, #4]
 801ca5a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ca5c:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 801ca60:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ca64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801ca68:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 801ca6c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 801ca70:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 801ca74:	f7fe f8a2 	bl	801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ca7a:	6835      	ldr	r5, [r6, #0]
 801ca7c:	6818      	ldr	r0, [r3, #0]
 801ca7e:	f9b4 3000 	ldrsh.w	r3, [r4]
 801ca82:	f9b9 e000 	ldrsh.w	lr, [r9]
 801ca86:	1b40      	subs	r0, r0, r5
 801ca88:	18e9      	adds	r1, r5, r3
 801ca8a:	ebae 0c01 	sub.w	ip, lr, r1
 801ca8e:	4560      	cmp	r0, ip
 801ca90:	f340 86a2 	ble.w	801d7d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801ca94:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801ca98:	44f1      	add	r9, lr
 801ca9a:	fa0f f989 	sxth.w	r9, r9
 801ca9e:	4549      	cmp	r1, r9
 801caa0:	f300 869a 	bgt.w	801d7d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801caa4:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 801caa8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801caac:	6972      	ldr	r2, [r6, #20]
 801caae:	ed96 6a07 	vldr	s12, [r6, #28]
 801cab2:	4422      	add	r2, r4
 801cab4:	f8da 4004 	ldr.w	r4, [sl, #4]
 801cab8:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 801cabc:	fb04 5402 	mla	r4, r4, r2, r5
 801cac0:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 801cac4:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 801cac8:	4282      	cmp	r2, r0
 801caca:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 801cace:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 801cad2:	441c      	add	r4, r3
 801cad4:	bfa8      	it	ge
 801cad6:	4602      	movge	r2, r0
 801cad8:	f8da b000 	ldr.w	fp, [sl]
 801cadc:	458e      	cmp	lr, r1
 801cade:	ee06 2a90 	vmov	s13, r2
 801cae2:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 801cae6:	9208      	str	r2, [sp, #32]
 801cae8:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 801caec:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 801caf0:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801caf4:	ee69 ba2b 	vmul.f32	s23, s18, s23
 801caf8:	ee29 9a26 	vmul.f32	s18, s18, s13
 801cafc:	eecc 6a06 	vdiv.f32	s13, s24, s12
 801cb00:	ee37 aaab 	vadd.f32	s20, s15, s23
 801cb04:	ee77 aa09 	vadd.f32	s21, s14, s18
 801cb08:	ee76 9a0b 	vadd.f32	s19, s12, s22
 801cb0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cb10:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb14:	dc01      	bgt.n	801cb1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 801cb16:	970a      	str	r7, [sp, #40]	; 0x28
 801cb18:	e029      	b.n	801cb6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 801cb1a:	9a08      	ldr	r2, [sp, #32]
 801cb1c:	fb9c f1f2 	sdiv	r1, ip, r2
 801cb20:	ee06 1a90 	vmov	s13, r1
 801cb24:	434a      	muls	r2, r1
 801cb26:	2900      	cmp	r1, #0
 801cb28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cb2c:	ebac 0602 	sub.w	r6, ip, r2
 801cb30:	960a      	str	r6, [sp, #40]	; 0x28
 801cb32:	eeeb 9a26 	vfma.f32	s19, s22, s13
 801cb36:	eeab aaa6 	vfma.f32	s20, s23, s13
 801cb3a:	eee9 aa26 	vfma.f32	s21, s18, s13
 801cb3e:	dd12      	ble.n	801cb66 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 801cb40:	ee79 7acb 	vsub.f32	s15, s19, s22
 801cb44:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 801cb48:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb50:	bf14      	ite	ne
 801cb52:	eecc 6a27 	vdivne.f32	s13, s24, s15
 801cb56:	eef0 6a4c 	vmoveq.f32	s13, s24
 801cb5a:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 801cb5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cb62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cb66:	1a80      	subs	r0, r0, r2
 801cb68:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801cb6c:	4415      	add	r5, r2
 801cb6e:	18ea      	adds	r2, r5, r3
 801cb70:	4402      	add	r2, r0
 801cb72:	4591      	cmp	r9, r2
 801cb74:	bfbc      	itt	lt
 801cb76:	eba9 0003 	sublt.w	r0, r9, r3
 801cb7a:	1b40      	sublt	r0, r0, r5
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	f340 862b 	ble.w	801d7d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801cb82:	9b08      	ldr	r3, [sp, #32]
 801cb84:	9a08      	ldr	r2, [sp, #32]
 801cb86:	fb90 f3f3 	sdiv	r3, r0, r3
 801cb8a:	9309      	str	r3, [sp, #36]	; 0x24
 801cb8c:	fb02 0313 	mls	r3, r2, r3, r0
 801cb90:	930c      	str	r3, [sp, #48]	; 0x30
 801cb92:	b91b      	cbnz	r3, 801cb9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 801cb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb96:	920c      	str	r2, [sp, #48]	; 0x30
 801cb98:	3b01      	subs	r3, #1
 801cb9a:	9309      	str	r3, [sp, #36]	; 0x24
 801cb9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cb9e:	eddf ca40 	vldr	s25, [pc, #256]	; 801cca0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	9304      	str	r3, [sp, #16]
 801cba6:	9b01      	ldr	r3, [sp, #4]
 801cba8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801cbac:	9305      	str	r3, [sp, #20]
 801cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	dc03      	bgt.n	801cbbc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 801cbb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	f340 860e 	ble.w	801d7d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801cbbc:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 801cbc0:	9b08      	ldr	r3, [sp, #32]
 801cbc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cbc4:	eef0 6a67 	vmov.f32	s13, s15
 801cbc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbcc:	ee16 ba90 	vmov	fp, s13
 801cbd0:	eef0 6a47 	vmov.f32	s13, s14
 801cbd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbd8:	ee6a 8a08 	vmul.f32	s17, s20, s16
 801cbdc:	ee2a 8a88 	vmul.f32	s16, s21, s16
 801cbe0:	ee16 5a90 	vmov	r5, s13
 801cbe4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801cbe8:	ee38 7a47 	vsub.f32	s14, s16, s14
 801cbec:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801cbf0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cbf4:	ee17 2a90 	vmov	r2, s15
 801cbf8:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbfc:	ee17 2a10 	vmov	r2, s14
 801cc00:	9306      	str	r3, [sp, #24]
 801cc02:	9b08      	ldr	r3, [sp, #32]
 801cc04:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc08:	9a08      	ldr	r2, [sp, #32]
 801cc0a:	9307      	str	r3, [sp, #28]
 801cc0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc0e:	2900      	cmp	r1, #0
 801cc10:	bfc8      	it	gt
 801cc12:	4613      	movgt	r3, r2
 801cc14:	9302      	str	r3, [sp, #8]
 801cc16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	dd0d      	ble.n	801cc38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 801cc1c:	9a06      	ldr	r2, [sp, #24]
 801cc1e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc22:	fb02 bb03 	mla	fp, r2, r3, fp
 801cc26:	9a07      	ldr	r2, [sp, #28]
 801cc28:	fb02 5503 	mla	r5, r2, r3, r5
 801cc2c:	9b02      	ldr	r3, [sp, #8]
 801cc2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cc30:	1a9b      	subs	r3, r3, r2
 801cc32:	9302      	str	r3, [sp, #8]
 801cc34:	2300      	movs	r3, #0
 801cc36:	930a      	str	r3, [sp, #40]	; 0x28
 801cc38:	ea5f 432b 	movs.w	r3, fp, asr #16
 801cc3c:	d42e      	bmi.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc3e:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 801cc42:	4283      	cmp	r3, r0
 801cc44:	da2a      	bge.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc46:	142b      	asrs	r3, r5, #16
 801cc48:	d428      	bmi.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc4a:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801cc4e:	428b      	cmp	r3, r1
 801cc50:	da24      	bge.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc52:	9b02      	ldr	r3, [sp, #8]
 801cc54:	9a06      	ldr	r2, [sp, #24]
 801cc56:	3b01      	subs	r3, #1
 801cc58:	fb03 b202 	mla	r2, r3, r2, fp
 801cc5c:	1412      	asrs	r2, r2, #16
 801cc5e:	d41d      	bmi.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc60:	4282      	cmp	r2, r0
 801cc62:	da1b      	bge.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc64:	9a07      	ldr	r2, [sp, #28]
 801cc66:	fb03 5302 	mla	r3, r3, r2, r5
 801cc6a:	141b      	asrs	r3, r3, #16
 801cc6c:	d416      	bmi.n	801cc9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801cc6e:	428b      	cmp	r3, r1
 801cc70:	bfb4      	ite	lt
 801cc72:	2300      	movlt	r3, #0
 801cc74:	2301      	movge	r3, #1
 801cc76:	9303      	str	r3, [sp, #12]
 801cc78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cc7a:	2b0b      	cmp	r3, #11
 801cc7c:	f200 82d7 	bhi.w	801d22e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 801cc80:	e8df f013 	tbh	[pc, r3, lsl #1]
 801cc84:	03430531 	.word	0x03430531
 801cc88:	02ca02e8 	.word	0x02ca02e8
 801cc8c:	02d502d5 	.word	0x02d502d5
 801cc90:	02d502d5 	.word	0x02d502d5
 801cc94:	01c5026b 	.word	0x01c5026b
 801cc98:	00100160 	.word	0x00100160
 801cc9c:	2301      	movs	r3, #1
 801cc9e:	e7ea      	b.n	801cc76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 801cca0:	3d800000 	.word	0x3d800000
 801cca4:	f04f 0a00 	mov.w	sl, #0
 801cca8:	9b02      	ldr	r3, [sp, #8]
 801ccaa:	4553      	cmp	r3, sl
 801ccac:	f340 82bb 	ble.w	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ccb0:	9a03      	ldr	r2, [sp, #12]
 801ccb2:	ea4f 412b 	mov.w	r1, fp, asr #16
 801ccb6:	142b      	asrs	r3, r5, #16
 801ccb8:	b17a      	cbz	r2, 801ccda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 801ccba:	2900      	cmp	r1, #0
 801ccbc:	f2c0 813b 	blt.w	801cf36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801ccc0:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ccc4:	4291      	cmp	r1, r2
 801ccc6:	f280 8136 	bge.w	801cf36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	f2c0 8133 	blt.w	801cf36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801ccd0:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801ccd4:	4293      	cmp	r3, r2
 801ccd6:	f280 812e 	bge.w	801cf36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801ccda:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ccde:	9804      	ldr	r0, [sp, #16]
 801cce0:	fb03 1102 	mla	r1, r3, r2, r1
 801cce4:	9b04      	ldr	r3, [sp, #16]
 801cce6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801ccea:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 801ccee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ccf2:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 801ccf6:	6859      	ldr	r1, [r3, #4]
 801ccf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ccfc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801cd00:	685a      	ldr	r2, [r3, #4]
 801cd02:	0e3b      	lsrs	r3, r7, #24
 801cd04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cd08:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801cd0c:	435e      	muls	r6, r3
 801cd0e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801cd12:	435f      	muls	r7, r3
 801cd14:	ee06 ea90 	vmov	s13, lr
 801cd18:	0a36      	lsrs	r6, r6, #8
 801cd1a:	ee07 3a90 	vmov	s15, r3
 801cd1e:	0a3f      	lsrs	r7, r7, #8
 801cd20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cd24:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801cd28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd2c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cd30:	433e      	orrs	r6, r7
 801cd32:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801cd36:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cd3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801cd3e:	fb0e f707 	mul.w	r7, lr, r7
 801cd42:	fb0e f101 	mul.w	r1, lr, r1
 801cd46:	0a3f      	lsrs	r7, r7, #8
 801cd48:	960b      	str	r6, [sp, #44]	; 0x2c
 801cd4a:	0a09      	lsrs	r1, r1, #8
 801cd4c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801cd50:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cd54:	430f      	orrs	r7, r1
 801cd56:	0e01      	lsrs	r1, r0, #24
 801cd58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cd5c:	fb01 f808 	mul.w	r8, r1, r8
 801cd60:	ee07 1a10 	vmov	s14, r1
 801cd64:	4348      	muls	r0, r1
 801cd66:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cd6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd6e:	0a00      	lsrs	r0, r0, #8
 801cd70:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801cd74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cd78:	ea48 0800 	orr.w	r8, r8, r0
 801cd7c:	0e10      	lsrs	r0, r2, #24
 801cd7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cd82:	fb00 f909 	mul.w	r9, r0, r9
 801cd86:	4342      	muls	r2, r0
 801cd88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cd8c:	0a12      	lsrs	r2, r2, #8
 801cd8e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 801cd92:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cd96:	ea49 0902 	orr.w	r9, r9, r2
 801cd9a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801cd9e:	ee0d 2a10 	vmov	s26, r2
 801cda2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801cda6:	ea4f 4319 	mov.w	r3, r9, lsr #16
 801cdaa:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801cdae:	ee0d 2a90 	vmov	s27, r2
 801cdb2:	ee01 3a90 	vmov	s3, r3
 801cdb6:	ea4f 4318 	mov.w	r3, r8, lsr #16
 801cdba:	eef8 daed 	vcvt.f32.s32	s27, s27
 801cdbe:	ee2d da2c 	vmul.f32	s26, s26, s25
 801cdc2:	ee01 3a10 	vmov	s2, r3
 801cdc6:	0c3b      	lsrs	r3, r7, #16
 801cdc8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801cdcc:	ee6d daac 	vmul.f32	s27, s27, s25
 801cdd0:	eeed 7a26 	vfma.f32	s15, s26, s13
 801cdd4:	ee06 0a90 	vmov	s13, r0
 801cdd8:	ee00 3a90 	vmov	s1, r3
 801cddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cde2:	0c1b      	lsrs	r3, r3, #16
 801cde4:	eef0 2a6d 	vmov.f32	s5, s27
 801cde8:	eeb0 2a4d 	vmov.f32	s4, s26
 801cdec:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801cdf0:	ee00 3a10 	vmov	s0, r3
 801cdf4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801cdf8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801cdfc:	eead 7a26 	vfma.f32	s14, s26, s13
 801ce00:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ce04:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ce08:	eeed 7a87 	vfma.f32	s15, s27, s14
 801ce0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ce10:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801ce14:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ce18:	4630      	mov	r0, r6
 801ce1a:	f7ff fdf1 	bl	801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801ce1e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 801ce22:	eeb0 ea40 	vmov.f32	s28, s0
 801ce26:	4630      	mov	r0, r6
 801ce28:	ee01 3a90 	vmov	s3, r3
 801ce2c:	f3c8 2307 	ubfx	r3, r8, #8, #8
 801ce30:	eef0 2a6d 	vmov.f32	s5, s27
 801ce34:	ee01 3a10 	vmov	s2, r3
 801ce38:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ce3c:	eeb0 2a4d 	vmov.f32	s4, s26
 801ce40:	ee00 3a90 	vmov	s1, r3
 801ce44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce46:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ce4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ce4e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ce52:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ce56:	ee00 3a10 	vmov	s0, r3
 801ce5a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ce5e:	f7ff fdcf 	bl	801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801ce62:	eef0 ea40 	vmov.f32	s29, s0
 801ce66:	fa5f f389 	uxtb.w	r3, r9
 801ce6a:	4630      	mov	r0, r6
 801ce6c:	eef0 2a6d 	vmov.f32	s5, s27
 801ce70:	ee01 3a90 	vmov	s3, r3
 801ce74:	fa5f f388 	uxtb.w	r3, r8
 801ce78:	eeb0 2a4d 	vmov.f32	s4, s26
 801ce7c:	ee01 3a10 	vmov	s2, r3
 801ce80:	b2fb      	uxtb	r3, r7
 801ce82:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ce86:	ee00 3a90 	vmov	s1, r3
 801ce8a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801ce8e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ce92:	ee00 3a10 	vmov	s0, r3
 801ce96:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ce9a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ce9e:	f7ff fdaf 	bl	801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801cea2:	2e00      	cmp	r6, #0
 801cea4:	d047      	beq.n	801cf36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801cea6:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801ceaa:	2eff      	cmp	r6, #255	; 0xff
 801ceac:	ee17 2a90 	vmov	r2, s15
 801ceb0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ceb4:	f3c2 0285 	ubfx	r2, r2, #2, #6
 801ceb8:	ee17 3a90 	vmov	r3, s15
 801cebc:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801cec0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801cec4:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 801cec8:	ee17 3a90 	vmov	r3, s15
 801cecc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ced0:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 801ced4:	d102      	bne.n	801cedc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 801ced6:	9a01      	ldr	r2, [sp, #4]
 801ced8:	2aff      	cmp	r2, #255	; 0xff
 801ceda:	d02a      	beq.n	801cf32 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 801cedc:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 801cee0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801cee4:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 801cee8:	fb12 fe06 	smulbb	lr, r2, r6
 801ceec:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 801cef0:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 801cef4:	f000 001f 	and.w	r0, r0, #31
 801cef8:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 801cefc:	f022 0207 	bic.w	r2, r2, #7
 801cf00:	f026 0607 	bic.w	r6, r6, #7
 801cf04:	434a      	muls	r2, r1
 801cf06:	434f      	muls	r7, r1
 801cf08:	fb0e 2606 	mla	r6, lr, r6, r2
 801cf0c:	4ad0      	ldr	r2, [pc, #832]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801cf0e:	4348      	muls	r0, r1
 801cf10:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 801cf14:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801cf18:	f003 031f 	and.w	r3, r3, #31
 801cf1c:	fb0e 7202 	mla	r2, lr, r2, r7
 801cf20:	fb0e 0303 	mla	r3, lr, r3, r0
 801cf24:	0c12      	lsrs	r2, r2, #16
 801cf26:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801cf2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cf2e:	4316      	orrs	r6, r2
 801cf30:	4333      	orrs	r3, r6
 801cf32:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 801cf36:	9b06      	ldr	r3, [sp, #24]
 801cf38:	f10a 0a01 	add.w	sl, sl, #1
 801cf3c:	449b      	add	fp, r3
 801cf3e:	9b07      	ldr	r3, [sp, #28]
 801cf40:	441d      	add	r5, r3
 801cf42:	e6b1      	b.n	801cca8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 801cf44:	2000      	movs	r0, #0
 801cf46:	9b02      	ldr	r3, [sp, #8]
 801cf48:	4283      	cmp	r3, r0
 801cf4a:	f340 816c 	ble.w	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801cf4e:	9b03      	ldr	r3, [sp, #12]
 801cf50:	ea4f 422b 	mov.w	r2, fp, asr #16
 801cf54:	1429      	asrs	r1, r5, #16
 801cf56:	b15b      	cbz	r3, 801cf70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 801cf58:	2a00      	cmp	r2, #0
 801cf5a:	db52      	blt.n	801d002 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801cf5c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801cf60:	429a      	cmp	r2, r3
 801cf62:	da4e      	bge.n	801d002 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801cf64:	2900      	cmp	r1, #0
 801cf66:	db4c      	blt.n	801d002 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801cf68:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801cf6c:	4299      	cmp	r1, r3
 801cf6e:	da48      	bge.n	801d002 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801cf70:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801cf74:	fb01 2303 	mla	r3, r1, r3, r2
 801cf78:	9a04      	ldr	r2, [sp, #16]
 801cf7a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801cf7e:	0e31      	lsrs	r1, r6, #24
 801cf80:	d03f      	beq.n	801d002 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801cf82:	0972      	lsrs	r2, r6, #5
 801cf84:	4bb2      	ldr	r3, [pc, #712]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801cf86:	29ff      	cmp	r1, #255	; 0xff
 801cf88:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 801cf8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cf90:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801cf94:	ea43 0302 	orr.w	r3, r3, r2
 801cf98:	ea43 0306 	orr.w	r3, r3, r6
 801cf9c:	b29b      	uxth	r3, r3
 801cf9e:	d102      	bne.n	801cfa6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 801cfa0:	9a01      	ldr	r2, [sp, #4]
 801cfa2:	2aff      	cmp	r2, #255	; 0xff
 801cfa4:	d02b      	beq.n	801cffe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 801cfa6:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801cfaa:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 801cfae:	9a01      	ldr	r2, [sp, #4]
 801cfb0:	f02e 0e07 	bic.w	lr, lr, #7
 801cfb4:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 801cfb8:	4351      	muls	r1, r2
 801cfba:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 801cfbe:	f007 071f 	and.w	r7, r7, #31
 801cfc2:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 801cfc6:	f022 0207 	bic.w	r2, r2, #7
 801cfca:	4372      	muls	r2, r6
 801cfcc:	fb06 fc0c 	mul.w	ip, r6, ip
 801cfd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 801cfd4:	4a9e      	ldr	r2, [pc, #632]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801cfd6:	4377      	muls	r7, r6
 801cfd8:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801cfdc:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801cfe0:	f003 031f 	and.w	r3, r3, #31
 801cfe4:	fb01 c202 	mla	r2, r1, r2, ip
 801cfe8:	fb01 7303 	mla	r3, r1, r3, r7
 801cfec:	0c12      	lsrs	r2, r2, #16
 801cfee:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801cff2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cff6:	ea4e 0e02 	orr.w	lr, lr, r2
 801cffa:	ea4e 0303 	orr.w	r3, lr, r3
 801cffe:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801d002:	9b06      	ldr	r3, [sp, #24]
 801d004:	3001      	adds	r0, #1
 801d006:	449b      	add	fp, r3
 801d008:	9b07      	ldr	r3, [sp, #28]
 801d00a:	441d      	add	r5, r3
 801d00c:	e79b      	b.n	801cf46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 801d00e:	f04f 0e00 	mov.w	lr, #0
 801d012:	9b02      	ldr	r3, [sp, #8]
 801d014:	4573      	cmp	r3, lr
 801d016:	f340 8106 	ble.w	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d01a:	9903      	ldr	r1, [sp, #12]
 801d01c:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d020:	142b      	asrs	r3, r5, #16
 801d022:	b179      	cbz	r1, 801d044 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 801d024:	2a00      	cmp	r2, #0
 801d026:	f2c0 8091 	blt.w	801d14c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d02a:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d02e:	428a      	cmp	r2, r1
 801d030:	f280 808c 	bge.w	801d14c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d034:	2b00      	cmp	r3, #0
 801d036:	f2c0 8089 	blt.w	801d14c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d03a:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801d03e:	428b      	cmp	r3, r1
 801d040:	f280 8084 	bge.w	801d14c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801d044:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d048:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 801d04c:	9804      	ldr	r0, [sp, #16]
 801d04e:	fb03 2301 	mla	r3, r3, r1, r2
 801d052:	9a04      	ldr	r2, [sp, #16]
 801d054:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d058:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801d05c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801d060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d064:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d068:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801d06c:	6850      	ldr	r0, [r2, #4]
 801d06e:	fb01 f70a 	mul.w	r7, r1, sl
 801d072:	0a3f      	lsrs	r7, r7, #8
 801d074:	ebaa 0607 	sub.w	r6, sl, r7
 801d078:	eba1 0907 	sub.w	r9, r1, r7
 801d07c:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 801d080:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801d084:	fb01 f10a 	mul.w	r1, r1, sl
 801d088:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 801d08c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d090:	0a0a      	lsrs	r2, r1, #8
 801d092:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 801d096:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d09a:	4371      	muls	r1, r6
 801d09c:	fb06 f808 	mul.w	r8, r6, r8
 801d0a0:	fb02 110a 	mla	r1, r2, sl, r1
 801d0a4:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 801d0a8:	fb02 8c0c 	mla	ip, r2, ip, r8
 801d0ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d0b0:	fb07 110a 	mla	r1, r7, sl, r1
 801d0b4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d0b8:	fb07 cc00 	mla	ip, r7, r0, ip
 801d0bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d0c0:	fb09 110a 	mla	r1, r9, sl, r1
 801d0c4:	fb09 cc03 	mla	ip, r9, r3, ip
 801d0c8:	4b61      	ldr	r3, [pc, #388]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d0ca:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 801d0ce:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 801d0d2:	ea41 0a0a 	orr.w	sl, r1, sl
 801d0d6:	ea4f 315a 	mov.w	r1, sl, lsr #13
 801d0da:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 801d0de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d0e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d0e6:	4319      	orrs	r1, r3
 801d0e8:	9b01      	ldr	r3, [sp, #4]
 801d0ea:	2bff      	cmp	r3, #255	; 0xff
 801d0ec:	ea41 010a 	orr.w	r1, r1, sl
 801d0f0:	d02a      	beq.n	801d148 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 801d0f2:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 801d0f6:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 801d0fa:	9e05      	ldr	r6, [sp, #20]
 801d0fc:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 801d100:	f023 0307 	bic.w	r3, r3, #7
 801d104:	9f05      	ldr	r7, [sp, #20]
 801d106:	f020 0007 	bic.w	r0, r0, #7
 801d10a:	4370      	muls	r0, r6
 801d10c:	9e01      	ldr	r6, [sp, #4]
 801d10e:	fb06 0303 	mla	r3, r6, r3, r0
 801d112:	484f      	ldr	r0, [pc, #316]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d114:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 801d118:	f002 021f 	and.w	r2, r2, #31
 801d11c:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 801d120:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 801d124:	437e      	muls	r6, r7
 801d126:	9f01      	ldr	r7, [sp, #4]
 801d128:	f001 011f 	and.w	r1, r1, #31
 801d12c:	fb07 6000 	mla	r0, r7, r0, r6
 801d130:	0a00      	lsrs	r0, r0, #8
 801d132:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d136:	4303      	orrs	r3, r0
 801d138:	9805      	ldr	r0, [sp, #20]
 801d13a:	4342      	muls	r2, r0
 801d13c:	b29b      	uxth	r3, r3
 801d13e:	fb07 2101 	mla	r1, r7, r1, r2
 801d142:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801d146:	4319      	orrs	r1, r3
 801d148:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 801d14c:	9b06      	ldr	r3, [sp, #24]
 801d14e:	f10e 0e01 	add.w	lr, lr, #1
 801d152:	449b      	add	fp, r3
 801d154:	9b07      	ldr	r3, [sp, #28]
 801d156:	441d      	add	r5, r3
 801d158:	e75b      	b.n	801d012 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 801d15a:	2600      	movs	r6, #0
 801d15c:	9b02      	ldr	r3, [sp, #8]
 801d15e:	42b3      	cmp	r3, r6
 801d160:	dd61      	ble.n	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d162:	9b03      	ldr	r3, [sp, #12]
 801d164:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d168:	1429      	asrs	r1, r5, #16
 801d16a:	b15b      	cbz	r3, 801d184 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 801d16c:	2a00      	cmp	r2, #0
 801d16e:	db4d      	blt.n	801d20c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d170:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801d174:	429a      	cmp	r2, r3
 801d176:	da49      	bge.n	801d20c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d178:	2900      	cmp	r1, #0
 801d17a:	db47      	blt.n	801d20c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d17c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d180:	4299      	cmp	r1, r3
 801d182:	da43      	bge.n	801d20c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801d184:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801d188:	fb01 2303 	mla	r3, r1, r3, r2
 801d18c:	9a04      	ldr	r2, [sp, #16]
 801d18e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d192:	4b2f      	ldr	r3, [pc, #188]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d194:	094a      	lsrs	r2, r1, #5
 801d196:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801d19a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d19e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d1a2:	4313      	orrs	r3, r2
 801d1a4:	9a01      	ldr	r2, [sp, #4]
 801d1a6:	430b      	orrs	r3, r1
 801d1a8:	2aff      	cmp	r2, #255	; 0xff
 801d1aa:	b29b      	uxth	r3, r3
 801d1ac:	d02c      	beq.n	801d208 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 801d1ae:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 801d1b2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801d1b6:	9f05      	ldr	r7, [sp, #20]
 801d1b8:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 801d1bc:	f022 0207 	bic.w	r2, r2, #7
 801d1c0:	f020 0007 	bic.w	r0, r0, #7
 801d1c4:	4378      	muls	r0, r7
 801d1c6:	9f01      	ldr	r7, [sp, #4]
 801d1c8:	fb07 0202 	mla	r2, r7, r2, r0
 801d1cc:	4820      	ldr	r0, [pc, #128]	; (801d250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801d1ce:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801d1d2:	f001 011f 	and.w	r1, r1, #31
 801d1d6:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 801d1da:	9a05      	ldr	r2, [sp, #20]
 801d1dc:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 801d1e0:	f003 031f 	and.w	r3, r3, #31
 801d1e4:	4357      	muls	r7, r2
 801d1e6:	9a01      	ldr	r2, [sp, #4]
 801d1e8:	fb02 7000 	mla	r0, r2, r0, r7
 801d1ec:	0a00      	lsrs	r0, r0, #8
 801d1ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d1f2:	ea4e 0200 	orr.w	r2, lr, r0
 801d1f6:	9805      	ldr	r0, [sp, #20]
 801d1f8:	4341      	muls	r1, r0
 801d1fa:	9801      	ldr	r0, [sp, #4]
 801d1fc:	b292      	uxth	r2, r2
 801d1fe:	fb00 1303 	mla	r3, r0, r3, r1
 801d202:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801d206:	4313      	orrs	r3, r2
 801d208:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 801d20c:	9b06      	ldr	r3, [sp, #24]
 801d20e:	3601      	adds	r6, #1
 801d210:	449b      	add	fp, r3
 801d212:	9b07      	ldr	r3, [sp, #28]
 801d214:	441d      	add	r5, r3
 801d216:	e7a1      	b.n	801d15c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 801d218:	2300      	movs	r3, #0
 801d21a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d21c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d21e:	9b02      	ldr	r3, [sp, #8]
 801d220:	4293      	cmp	r3, r2
 801d222:	f300 811b 	bgt.w	801d45c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 801d226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d22a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d230:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d234:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d238:	2b00      	cmp	r3, #0
 801d23a:	ee7a aa89 	vadd.f32	s21, s21, s18
 801d23e:	f340 82cb 	ble.w	801d7d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d242:	3b01      	subs	r3, #1
 801d244:	eeb0 7a48 	vmov.f32	s14, s16
 801d248:	eef0 7a68 	vmov.f32	s15, s17
 801d24c:	9309      	str	r3, [sp, #36]	; 0x24
 801d24e:	e4ae      	b.n	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 801d250:	fffff800 	.word	0xfffff800
 801d254:	2000      	movs	r0, #0
 801d256:	9b02      	ldr	r3, [sp, #8]
 801d258:	4283      	cmp	r3, r0
 801d25a:	dde4      	ble.n	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d25c:	9a03      	ldr	r2, [sp, #12]
 801d25e:	ea4f 432b 	mov.w	r3, fp, asr #16
 801d262:	1429      	asrs	r1, r5, #16
 801d264:	b15a      	cbz	r2, 801d27e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 801d266:	2b00      	cmp	r3, #0
 801d268:	db49      	blt.n	801d2fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d26a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d26e:	4293      	cmp	r3, r2
 801d270:	da45      	bge.n	801d2fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d272:	2900      	cmp	r1, #0
 801d274:	db43      	blt.n	801d2fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d276:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801d27a:	4291      	cmp	r1, r2
 801d27c:	da3f      	bge.n	801d2fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d27e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d282:	fb01 3202 	mla	r2, r1, r2, r3
 801d286:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d288:	685b      	ldr	r3, [r3, #4]
 801d28a:	5c99      	ldrb	r1, [r3, r2]
 801d28c:	b3b9      	cbz	r1, 801d2fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801d28e:	9b04      	ldr	r3, [sp, #16]
 801d290:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801d294:	9a01      	ldr	r2, [sp, #4]
 801d296:	2aff      	cmp	r2, #255	; 0xff
 801d298:	d101      	bne.n	801d29e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 801d29a:	29ff      	cmp	r1, #255	; 0xff
 801d29c:	d02d      	beq.n	801d2fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 801d29e:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801d2a2:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 801d2a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d2aa:	f02e 0e07 	bic.w	lr, lr, #7
 801d2ae:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 801d2b2:	fb12 f101 	smulbb	r1, r2, r1
 801d2b6:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 801d2ba:	f007 071f 	and.w	r7, r7, #31
 801d2be:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 801d2c2:	f022 0207 	bic.w	r2, r2, #7
 801d2c6:	4372      	muls	r2, r6
 801d2c8:	fb06 fc0c 	mul.w	ip, r6, ip
 801d2cc:	fb01 2e0e 	mla	lr, r1, lr, r2
 801d2d0:	4a61      	ldr	r2, [pc, #388]	; (801d458 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801d2d2:	4377      	muls	r7, r6
 801d2d4:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801d2d8:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801d2dc:	f003 031f 	and.w	r3, r3, #31
 801d2e0:	fb01 c202 	mla	r2, r1, r2, ip
 801d2e4:	fb01 7303 	mla	r3, r1, r3, r7
 801d2e8:	0c12      	lsrs	r2, r2, #16
 801d2ea:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801d2ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d2f2:	ea4e 0e02 	orr.w	lr, lr, r2
 801d2f6:	ea4e 0303 	orr.w	r3, lr, r3
 801d2fa:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801d2fe:	9b06      	ldr	r3, [sp, #24]
 801d300:	3001      	adds	r0, #1
 801d302:	449b      	add	fp, r3
 801d304:	9b07      	ldr	r3, [sp, #28]
 801d306:	441d      	add	r5, r3
 801d308:	e7a5      	b.n	801d256 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 801d30a:	2300      	movs	r3, #0
 801d30c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d30e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d310:	9b02      	ldr	r3, [sp, #8]
 801d312:	4293      	cmp	r3, r2
 801d314:	dd87      	ble.n	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d316:	9b03      	ldr	r3, [sp, #12]
 801d318:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d31c:	1429      	asrs	r1, r5, #16
 801d31e:	b17b      	cbz	r3, 801d340 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 801d320:	2a00      	cmp	r2, #0
 801d322:	f2c0 8092 	blt.w	801d44a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801d326:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801d32a:	429a      	cmp	r2, r3
 801d32c:	f280 808d 	bge.w	801d44a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801d330:	2900      	cmp	r1, #0
 801d332:	f2c0 808a 	blt.w	801d44a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801d336:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d33a:	4299      	cmp	r1, r3
 801d33c:	f280 8085 	bge.w	801d44a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801d340:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801d344:	f3c5 3603 	ubfx	r6, r5, #12, #4
 801d348:	9804      	ldr	r0, [sp, #16]
 801d34a:	fb01 2103 	mla	r1, r1, r3, r2
 801d34e:	9a04      	ldr	r2, [sp, #16]
 801d350:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801d354:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 801d358:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801d35c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801d360:	8879      	ldrh	r1, [r7, #2]
 801d362:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801d366:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 801d36a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d36e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 801d372:	fb06 f302 	mul.w	r3, r6, r2
 801d376:	ea4e 0e09 	orr.w	lr, lr, r9
 801d37a:	ea4f 4901 	mov.w	r9, r1, lsl #16
 801d37e:	10db      	asrs	r3, r3, #3
 801d380:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801d384:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801d388:	f1c6 0710 	rsb	r7, r6, #16
 801d38c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d390:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 801d394:	1abf      	subs	r7, r7, r2
 801d396:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801d39a:	ea49 0101 	orr.w	r1, r9, r1
 801d39e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d3a2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801d3a6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801d3aa:	4351      	muls	r1, r2
 801d3ac:	9a01      	ldr	r2, [sp, #4]
 801d3ae:	ea4a 0808 	orr.w	r8, sl, r8
 801d3b2:	fb0e 1107 	mla	r1, lr, r7, r1
 801d3b6:	2aff      	cmp	r2, #255	; 0xff
 801d3b8:	fb03 1108 	mla	r1, r3, r8, r1
 801d3bc:	ea4f 480c 	mov.w	r8, ip, lsl #16
 801d3c0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d3c4:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 801d3c8:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801d3cc:	ea48 0c0c 	orr.w	ip, r8, ip
 801d3d0:	fb03 110c 	mla	r1, r3, ip, r1
 801d3d4:	ea4f 5951 	mov.w	r9, r1, lsr #21
 801d3d8:	ea4f 1351 	mov.w	r3, r1, lsr #5
 801d3dc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d3e0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d3e4:	ea49 0303 	orr.w	r3, r9, r3
 801d3e8:	b29b      	uxth	r3, r3
 801d3ea:	d02b      	beq.n	801d444 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 801d3ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d3ee:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 801d3f2:	9805      	ldr	r0, [sp, #20]
 801d3f4:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 801d3f8:	f026 0607 	bic.w	r6, r6, #7
 801d3fc:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 801d400:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801d404:	f001 011f 	and.w	r1, r1, #31
 801d408:	f022 0207 	bic.w	r2, r2, #7
 801d40c:	4342      	muls	r2, r0
 801d40e:	9801      	ldr	r0, [sp, #4]
 801d410:	fb00 2606 	mla	r6, r0, r6, r2
 801d414:	4a10      	ldr	r2, [pc, #64]	; (801d458 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801d416:	9805      	ldr	r0, [sp, #20]
 801d418:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 801d41c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801d420:	4347      	muls	r7, r0
 801d422:	9801      	ldr	r0, [sp, #4]
 801d424:	f003 031f 	and.w	r3, r3, #31
 801d428:	fb00 7202 	mla	r2, r0, r2, r7
 801d42c:	0a12      	lsrs	r2, r2, #8
 801d42e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d432:	4316      	orrs	r6, r2
 801d434:	9a05      	ldr	r2, [sp, #20]
 801d436:	4351      	muls	r1, r2
 801d438:	fb00 1303 	mla	r3, r0, r3, r1
 801d43c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801d440:	4333      	orrs	r3, r6
 801d442:	b29b      	uxth	r3, r3
 801d444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d446:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801d44a:	9b06      	ldr	r3, [sp, #24]
 801d44c:	449b      	add	fp, r3
 801d44e:	9b07      	ldr	r3, [sp, #28]
 801d450:	441d      	add	r5, r3
 801d452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d454:	3301      	adds	r3, #1
 801d456:	e759      	b.n	801d30c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 801d458:	fffff800 	.word	0xfffff800
 801d45c:	9903      	ldr	r1, [sp, #12]
 801d45e:	ea4f 432b 	mov.w	r3, fp, asr #16
 801d462:	142a      	asrs	r2, r5, #16
 801d464:	b179      	cbz	r1, 801d486 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 801d466:	2b00      	cmp	r3, #0
 801d468:	f2c0 8136 	blt.w	801d6d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801d46c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d470:	428b      	cmp	r3, r1
 801d472:	f280 8131 	bge.w	801d6d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801d476:	2a00      	cmp	r2, #0
 801d478:	f2c0 812e 	blt.w	801d6d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801d47c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801d480:	428a      	cmp	r2, r1
 801d482:	f280 8129 	bge.w	801d6d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801d486:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d48a:	fb02 3301 	mla	r3, r2, r1, r3
 801d48e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d490:	6850      	ldr	r0, [r2, #4]
 801d492:	18c2      	adds	r2, r0, r3
 801d494:	5cc0      	ldrb	r0, [r0, r3]
 801d496:	900d      	str	r0, [sp, #52]	; 0x34
 801d498:	7850      	ldrb	r0, [r2, #1]
 801d49a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801d49e:	900e      	str	r0, [sp, #56]	; 0x38
 801d4a0:	5c50      	ldrb	r0, [r2, r1]
 801d4a2:	440a      	add	r2, r1
 801d4a4:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 801d4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4ac:	7852      	ldrb	r2, [r2, #1]
 801d4ae:	ee07 0a10 	vmov	s14, r0
 801d4b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801d4b6:	900f      	str	r0, [sp, #60]	; 0x3c
 801d4b8:	9210      	str	r2, [sp, #64]	; 0x40
 801d4ba:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801d4be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801d4c2:	ee0d 2a10 	vmov	s26, r2
 801d4c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801d4ca:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d4ce:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801d4d2:	ee0d 2a90 	vmov	s27, r2
 801d4d6:	ee2d da2c 	vmul.f32	s26, s26, s25
 801d4da:	eef8 daed 	vcvt.f32.s32	s27, s27
 801d4de:	eeed 7a26 	vfma.f32	s15, s26, s13
 801d4e2:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 801d4e6:	ee6d daac 	vmul.f32	s27, s27, s25
 801d4ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801d4ee:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801d4f2:	eead 7a26 	vfma.f32	s14, s26, s13
 801d4f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d4fa:	eeed 7a87 	vfma.f32	s15, s27, s14
 801d4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d502:	ee17 6a90 	vmov	r6, s15
 801d506:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 801d50a:	f000 80e5 	beq.w	801d6d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801d50e:	9a04      	ldr	r2, [sp, #16]
 801d510:	eef0 2a6d 	vmov.f32	s5, s27
 801d514:	eeb0 2a4d 	vmov.f32	s4, s26
 801d518:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 801d51c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 801d520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d522:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801d526:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d52a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 801d52e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 801d532:	f00a 001f 	and.w	r0, sl, #31
 801d536:	4358      	muls	r0, r3
 801d538:	1203      	asrs	r3, r0, #8
 801d53a:	f009 001f 	and.w	r0, r9, #31
 801d53e:	ee01 3a90 	vmov	s3, r3
 801d542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d544:	4358      	muls	r0, r3
 801d546:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d54a:	1203      	asrs	r3, r0, #8
 801d54c:	f008 001f 	and.w	r0, r8, #31
 801d550:	ee01 3a10 	vmov	s2, r3
 801d554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d556:	4358      	muls	r0, r3
 801d558:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d55c:	1203      	asrs	r3, r0, #8
 801d55e:	f007 001f 	and.w	r0, r7, #31
 801d562:	ee00 3a90 	vmov	s1, r3
 801d566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d568:	4358      	muls	r0, r3
 801d56a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d56e:	1203      	asrs	r3, r0, #8
 801d570:	4630      	mov	r0, r6
 801d572:	ee00 3a10 	vmov	s0, r3
 801d576:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d57a:	f7ff fa41 	bl	801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801d57e:	f3ca 1045 	ubfx	r0, sl, #5, #6
 801d582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d584:	eeb0 ea40 	vmov.f32	s28, s0
 801d588:	eef0 2a6d 	vmov.f32	s5, s27
 801d58c:	4358      	muls	r0, r3
 801d58e:	eeb0 2a4d 	vmov.f32	s4, s26
 801d592:	1203      	asrs	r3, r0, #8
 801d594:	f3c9 1045 	ubfx	r0, r9, #5, #6
 801d598:	ee01 3a90 	vmov	s3, r3
 801d59c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d59e:	4358      	muls	r0, r3
 801d5a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d5a4:	1203      	asrs	r3, r0, #8
 801d5a6:	f3c8 1045 	ubfx	r0, r8, #5, #6
 801d5aa:	ee01 3a10 	vmov	s2, r3
 801d5ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5b0:	4358      	muls	r0, r3
 801d5b2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d5b6:	1203      	asrs	r3, r0, #8
 801d5b8:	f3c7 1045 	ubfx	r0, r7, #5, #6
 801d5bc:	0aff      	lsrs	r7, r7, #11
 801d5be:	ee00 3a90 	vmov	s1, r3
 801d5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5c4:	4358      	muls	r0, r3
 801d5c6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d5ca:	1203      	asrs	r3, r0, #8
 801d5cc:	4630      	mov	r0, r6
 801d5ce:	ee00 3a10 	vmov	s0, r3
 801d5d2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d5d6:	f7ff fa13 	bl	801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801d5da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5dc:	ea4f 21da 	mov.w	r1, sl, lsr #11
 801d5e0:	eef0 ea40 	vmov.f32	s29, s0
 801d5e4:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 801d5e8:	4630      	mov	r0, r6
 801d5ea:	fb03 fa01 	mul.w	sl, r3, r1
 801d5ee:	eef0 2a6d 	vmov.f32	s5, s27
 801d5f2:	eeb0 2a4d 	vmov.f32	s4, s26
 801d5f6:	ea4f 232a 	mov.w	r3, sl, asr #8
 801d5fa:	ee01 3a90 	vmov	s3, r3
 801d5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d600:	fb03 f902 	mul.w	r9, r3, r2
 801d604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d606:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d60a:	ea4f 2329 	mov.w	r3, r9, asr #8
 801d60e:	ee01 3a10 	vmov	s2, r3
 801d612:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 801d616:	fb02 f803 	mul.w	r8, r2, r3
 801d61a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d61e:	ea4f 2328 	mov.w	r3, r8, asr #8
 801d622:	ee00 3a90 	vmov	s1, r3
 801d626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d628:	437b      	muls	r3, r7
 801d62a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d62e:	121b      	asrs	r3, r3, #8
 801d630:	ee00 3a10 	vmov	s0, r3
 801d634:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d638:	f7ff f9e2 	bl	801ca00 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801d63c:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801d640:	2eff      	cmp	r6, #255	; 0xff
 801d642:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801d646:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801d64a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801d64e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801d652:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801d656:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801d65a:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801d65e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801d662:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801d666:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801d66a:	ea43 0302 	orr.w	r3, r3, r2
 801d66e:	b29b      	uxth	r3, r3
 801d670:	d102      	bne.n	801d678 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 801d672:	9a01      	ldr	r2, [sp, #4]
 801d674:	2aff      	cmp	r2, #255	; 0xff
 801d676:	d02c      	beq.n	801d6d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 801d678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d67a:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 801d67e:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 801d682:	f027 0707 	bic.w	r7, r7, #7
 801d686:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d68a:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 801d68e:	fb12 f606 	smulbb	r6, r2, r6
 801d692:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 801d696:	f000 001f 	and.w	r0, r0, #31
 801d69a:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 801d69e:	f022 0207 	bic.w	r2, r2, #7
 801d6a2:	434a      	muls	r2, r1
 801d6a4:	fb01 fe0e 	mul.w	lr, r1, lr
 801d6a8:	fb06 2707 	mla	r7, r6, r7, r2
 801d6ac:	4a4d      	ldr	r2, [pc, #308]	; (801d7e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801d6ae:	4348      	muls	r0, r1
 801d6b0:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 801d6b4:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801d6b8:	f003 031f 	and.w	r3, r3, #31
 801d6bc:	fb06 e202 	mla	r2, r6, r2, lr
 801d6c0:	fb06 0303 	mla	r3, r6, r3, r0
 801d6c4:	0c12      	lsrs	r2, r2, #16
 801d6c6:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801d6ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d6ce:	4317      	orrs	r7, r2
 801d6d0:	433b      	orrs	r3, r7
 801d6d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d6d4:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801d6d8:	9b06      	ldr	r3, [sp, #24]
 801d6da:	449b      	add	fp, r3
 801d6dc:	9b07      	ldr	r3, [sp, #28]
 801d6de:	441d      	add	r5, r3
 801d6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6e2:	3301      	adds	r3, #1
 801d6e4:	e599      	b.n	801d21a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 801d6e6:	9b01      	ldr	r3, [sp, #4]
 801d6e8:	2bff      	cmp	r3, #255	; 0xff
 801d6ea:	d105      	bne.n	801d6f8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	9a02      	ldr	r2, [sp, #8]
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	dc51      	bgt.n	801d798 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 801d6f4:	4613      	mov	r3, r2
 801d6f6:	e596      	b.n	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d6f8:	2000      	movs	r0, #0
 801d6fa:	9b02      	ldr	r3, [sp, #8]
 801d6fc:	4283      	cmp	r3, r0
 801d6fe:	f77f ad92 	ble.w	801d226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801d702:	9b03      	ldr	r3, [sp, #12]
 801d704:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d708:	1429      	asrs	r1, r5, #16
 801d70a:	b15b      	cbz	r3, 801d724 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 801d70c:	2a00      	cmp	r2, #0
 801d70e:	db3d      	blt.n	801d78c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801d710:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801d714:	429a      	cmp	r2, r3
 801d716:	da39      	bge.n	801d78c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801d718:	2900      	cmp	r1, #0
 801d71a:	db37      	blt.n	801d78c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801d71c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d720:	4299      	cmp	r1, r3
 801d722:	da33      	bge.n	801d78c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801d724:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801d728:	9f05      	ldr	r7, [sp, #20]
 801d72a:	fb01 2303 	mla	r3, r1, r3, r2
 801d72e:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 801d732:	9a04      	ldr	r2, [sp, #16]
 801d734:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801d738:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 801d73c:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 801d740:	f023 0307 	bic.w	r3, r3, #7
 801d744:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 801d748:	f002 021f 	and.w	r2, r2, #31
 801d74c:	437b      	muls	r3, r7
 801d74e:	f026 0607 	bic.w	r6, r6, #7
 801d752:	9f01      	ldr	r7, [sp, #4]
 801d754:	fb07 3606 	mla	r6, r7, r6, r3
 801d758:	4b22      	ldr	r3, [pc, #136]	; (801d7e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801d75a:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801d75e:	f001 011f 	and.w	r1, r1, #31
 801d762:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 801d766:	9b05      	ldr	r3, [sp, #20]
 801d768:	435f      	muls	r7, r3
 801d76a:	9b01      	ldr	r3, [sp, #4]
 801d76c:	fb03 730e 	mla	r3, r3, lr, r7
 801d770:	0a1b      	lsrs	r3, r3, #8
 801d772:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d776:	431e      	orrs	r6, r3
 801d778:	9b05      	ldr	r3, [sp, #20]
 801d77a:	4359      	muls	r1, r3
 801d77c:	9b01      	ldr	r3, [sp, #4]
 801d77e:	fb03 1202 	mla	r2, r3, r2, r1
 801d782:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801d786:	4316      	orrs	r6, r2
 801d788:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 801d78c:	9b06      	ldr	r3, [sp, #24]
 801d78e:	3001      	adds	r0, #1
 801d790:	449b      	add	fp, r3
 801d792:	9b07      	ldr	r3, [sp, #28]
 801d794:	441d      	add	r5, r3
 801d796:	e7b0      	b.n	801d6fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 801d798:	9a03      	ldr	r2, [sp, #12]
 801d79a:	ea4f 412b 	mov.w	r1, fp, asr #16
 801d79e:	1428      	asrs	r0, r5, #16
 801d7a0:	b15a      	cbz	r2, 801d7ba <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 801d7a2:	2900      	cmp	r1, #0
 801d7a4:	db12      	blt.n	801d7cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801d7a6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d7aa:	4291      	cmp	r1, r2
 801d7ac:	da0e      	bge.n	801d7cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801d7ae:	2800      	cmp	r0, #0
 801d7b0:	db0c      	blt.n	801d7cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801d7b2:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801d7b6:	4290      	cmp	r0, r2
 801d7b8:	da08      	bge.n	801d7cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801d7ba:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d7be:	fb00 1202 	mla	r2, r0, r2, r1
 801d7c2:	9904      	ldr	r1, [sp, #16]
 801d7c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801d7c8:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 801d7cc:	9a06      	ldr	r2, [sp, #24]
 801d7ce:	3301      	adds	r3, #1
 801d7d0:	4493      	add	fp, r2
 801d7d2:	9a07      	ldr	r2, [sp, #28]
 801d7d4:	4415      	add	r5, r2
 801d7d6:	e78a      	b.n	801d6ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 801d7d8:	b015      	add	sp, #84	; 0x54
 801d7da:	ecbd 8b0e 	vpop	{d8-d14}
 801d7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e2:	bf00      	nop
 801d7e4:	fffff800 	.word	0xfffff800

0801d7e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ec:	b08f      	sub	sp, #60	; 0x3c
 801d7ee:	460c      	mov	r4, r1
 801d7f0:	4680      	mov	r8, r0
 801d7f2:	4699      	mov	r9, r3
 801d7f4:	6808      	ldr	r0, [r1, #0]
 801d7f6:	ab0a      	add	r3, sp, #40	; 0x28
 801d7f8:	6849      	ldr	r1, [r1, #4]
 801d7fa:	c303      	stmia	r3!, {r0, r1}
 801d7fc:	6810      	ldr	r0, [r2, #0]
 801d7fe:	ab0c      	add	r3, sp, #48	; 0x30
 801d800:	6851      	ldr	r1, [r2, #4]
 801d802:	c303      	stmia	r3!, {r0, r1}
 801d804:	a80a      	add	r0, sp, #40	; 0x28
 801d806:	f7fd f9d9 	bl	801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d80a:	4621      	mov	r1, r4
 801d80c:	a80c      	add	r0, sp, #48	; 0x30
 801d80e:	4c58      	ldr	r4, [pc, #352]	; (801d970 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801d810:	f7fd f9bc 	bl	801ab8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d814:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d818:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d81c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d820:	6820      	ldr	r0, [r4, #0]
 801d822:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d826:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d82a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801d82e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d832:	440a      	add	r2, r1
 801d834:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d838:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d83c:	4413      	add	r3, r2
 801d83e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d842:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d846:	9305      	str	r3, [sp, #20]
 801d848:	6803      	ldr	r3, [r0, #0]
 801d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d84c:	4798      	blx	r3
 801d84e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d852:	d118      	bne.n	801d886 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d854:	f010 0f20 	tst.w	r0, #32
 801d858:	6820      	ldr	r0, [r4, #0]
 801d85a:	d017      	beq.n	801d88c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d85c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801d860:	b2bf      	uxth	r7, r7
 801d862:	6801      	ldr	r1, [r0, #0]
 801d864:	9402      	str	r4, [sp, #8]
 801d866:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d86a:	f8cd 900c 	str.w	r9, [sp, #12]
 801d86e:	9401      	str	r4, [sp, #4]
 801d870:	9700      	str	r7, [sp, #0]
 801d872:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d876:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801d878:	4641      	mov	r1, r8
 801d87a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d87e:	47a0      	blx	r4
 801d880:	b00f      	add	sp, #60	; 0x3c
 801d882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d886:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d88a:	e7e5      	b.n	801d858 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 801d88c:	6803      	ldr	r3, [r0, #0]
 801d88e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801d978 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 801d892:	6a1b      	ldr	r3, [r3, #32]
 801d894:	4798      	blx	r3
 801d896:	4a37      	ldr	r2, [pc, #220]	; (801d974 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801d898:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d89c:	f04f 0c00 	mov.w	ip, #0
 801d8a0:	8813      	ldrh	r3, [r2, #0]
 801d8a2:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801d8a6:	9209      	str	r2, [sp, #36]	; 0x24
 801d8a8:	fb04 1303 	mla	r3, r4, r3, r1
 801d8ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d8b0:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801d8b4:	0099      	lsls	r1, r3, #2
 801d8b6:	005b      	lsls	r3, r3, #1
 801d8b8:	9108      	str	r1, [sp, #32]
 801d8ba:	9307      	str	r3, [sp, #28]
 801d8bc:	9b05      	ldr	r3, [sp, #20]
 801d8be:	459c      	cmp	ip, r3
 801d8c0:	da4f      	bge.n	801d962 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 801d8c2:	4686      	mov	lr, r0
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	42bb      	cmp	r3, r7
 801d8c8:	da3a      	bge.n	801d940 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 801d8ca:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 801d8ce:	0e2e      	lsrs	r6, r5, #24
 801d8d0:	d012      	beq.n	801d8f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801d8d2:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 801d8d6:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 801d8da:	0969      	lsrs	r1, r5, #5
 801d8dc:	2eff      	cmp	r6, #255	; 0xff
 801d8de:	b2a4      	uxth	r4, r4
 801d8e0:	9206      	str	r2, [sp, #24]
 801d8e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d8e6:	d10b      	bne.n	801d900 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801d8e8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d8ec:	d108      	bne.n	801d900 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801d8ee:	430c      	orrs	r4, r1
 801d8f0:	4322      	orrs	r2, r4
 801d8f2:	4614      	mov	r4, r2
 801d8f4:	f8ae 4000 	strh.w	r4, [lr]
 801d8f8:	f10e 0e02 	add.w	lr, lr, #2
 801d8fc:	3301      	adds	r3, #1
 801d8fe:	e7e2      	b.n	801d8c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801d900:	fb06 f609 	mul.w	r6, r6, r9
 801d904:	f8be 5000 	ldrh.w	r5, [lr]
 801d908:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 801d90c:	ea05 020a 	and.w	r2, r5, sl
 801d910:	4374      	muls	r4, r6
 801d912:	4371      	muls	r1, r6
 801d914:	fb0b 4402 	mla	r4, fp, r2, r4
 801d918:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 801d91c:	f005 051f 	and.w	r5, r5, #31
 801d920:	fb0b 1102 	mla	r1, fp, r2, r1
 801d924:	9a06      	ldr	r2, [sp, #24]
 801d926:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 801d92a:	0c09      	lsrs	r1, r1, #16
 801d92c:	4356      	muls	r6, r2
 801d92e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d932:	fb0b 6505 	mla	r5, fp, r5, r6
 801d936:	430c      	orrs	r4, r1
 801d938:	f3c5 4504 	ubfx	r5, r5, #16, #5
 801d93c:	432c      	orrs	r4, r5
 801d93e:	e7d9      	b.n	801d8f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801d940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d942:	f10c 0c01 	add.w	ip, ip, #1
 801d946:	9a07      	ldr	r2, [sp, #28]
 801d948:	881b      	ldrh	r3, [r3, #0]
 801d94a:	1bdb      	subs	r3, r3, r7
 801d94c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d950:	9a08      	ldr	r2, [sp, #32]
 801d952:	4418      	add	r0, r3
 801d954:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d958:	1bdb      	subs	r3, r3, r7
 801d95a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d95e:	4498      	add	r8, r3
 801d960:	e7ac      	b.n	801d8bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 801d962:	4b03      	ldr	r3, [pc, #12]	; (801d970 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801d964:	6818      	ldr	r0, [r3, #0]
 801d966:	6803      	ldr	r3, [r0, #0]
 801d968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d96a:	4798      	blx	r3
 801d96c:	e788      	b.n	801d880 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d96e:	bf00      	nop
 801d970:	20009abc 	.word	0x20009abc
 801d974:	20009ab6 	.word	0x20009ab6
 801d978:	fffff800 	.word	0xfffff800

0801d97c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d980:	9d06      	ldr	r5, [sp, #24]
 801d982:	461c      	mov	r4, r3
 801d984:	460e      	mov	r6, r1
 801d986:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801d98a:	f89d 7020 	ldrb.w	r7, [sp, #32]
 801d98e:	b142      	cbz	r2, 801d9a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801d990:	2a02      	cmp	r2, #2
 801d992:	d010      	beq.n	801d9b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 801d994:	4b0b      	ldr	r3, [pc, #44]	; (801d9c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 801d996:	f240 11b9 	movw	r1, #441	; 0x1b9
 801d99a:	4a0b      	ldr	r2, [pc, #44]	; (801d9c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 801d99c:	480b      	ldr	r0, [pc, #44]	; (801d9cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 801d99e:	f000 fd0b 	bl	801e3b8 <__assert_func>
 801d9a2:	6802      	ldr	r2, [r0, #0]
 801d9a4:	9306      	str	r3, [sp, #24]
 801d9a6:	462b      	mov	r3, r5
 801d9a8:	9707      	str	r7, [sp, #28]
 801d9aa:	6916      	ldr	r6, [r2, #16]
 801d9ac:	4622      	mov	r2, r4
 801d9ae:	46b4      	mov	ip, r6
 801d9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9b4:	4760      	bx	ip
 801d9b6:	462a      	mov	r2, r5
 801d9b8:	4621      	mov	r1, r4
 801d9ba:	4630      	mov	r0, r6
 801d9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9c0:	f7ff bf12 	b.w	801d7e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d9c4:	080214e4 	.word	0x080214e4
 801d9c8:	08021643 	.word	0x08021643
 801d9cc:	080214b2 	.word	0x080214b2

0801d9d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9d4:	b08b      	sub	sp, #44	; 0x2c
 801d9d6:	460e      	mov	r6, r1
 801d9d8:	4604      	mov	r4, r0
 801d9da:	6851      	ldr	r1, [r2, #4]
 801d9dc:	6810      	ldr	r0, [r2, #0]
 801d9de:	ad06      	add	r5, sp, #24
 801d9e0:	4617      	mov	r7, r2
 801d9e2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801d9e6:	c503      	stmia	r5!, {r0, r1}
 801d9e8:	6818      	ldr	r0, [r3, #0]
 801d9ea:	ad08      	add	r5, sp, #32
 801d9ec:	6859      	ldr	r1, [r3, #4]
 801d9ee:	c503      	stmia	r5!, {r0, r1}
 801d9f0:	a806      	add	r0, sp, #24
 801d9f2:	f7fd f8e3 	bl	801abbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9f6:	4639      	mov	r1, r7
 801d9f8:	a808      	add	r0, sp, #32
 801d9fa:	f7fd f8c7 	bl	801ab8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9fe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801da02:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801da06:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801da0a:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801da0e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da12:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801da16:	1871      	adds	r1, r6, r1
 801da18:	9101      	str	r1, [sp, #4]
 801da1a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801da1e:	440a      	add	r2, r1
 801da20:	f8ad 2020 	strh.w	r2, [sp, #32]
 801da24:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801da28:	4413      	add	r3, r2
 801da2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801da2e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801da32:	9302      	str	r3, [sp, #8]
 801da34:	4b64      	ldr	r3, [pc, #400]	; (801dbc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801da36:	6818      	ldr	r0, [r3, #0]
 801da38:	6803      	ldr	r3, [r0, #0]
 801da3a:	6a1b      	ldr	r3, [r3, #32]
 801da3c:	4798      	blx	r3
 801da3e:	4b63      	ldr	r3, [pc, #396]	; (801dbcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 801da40:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 801da44:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801da48:	881a      	ldrh	r2, [r3, #0]
 801da4a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801da4e:	fb06 1202 	mla	r2, r6, r2, r1
 801da52:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801da56:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801da5a:	b212      	sxth	r2, r2
 801da5c:	9204      	str	r2, [sp, #16]
 801da5e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801da62:	9203      	str	r2, [sp, #12]
 801da64:	d051      	beq.n	801db0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 801da66:	f04f 0800 	mov.w	r8, #0
 801da6a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 801dbd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801da6e:	9305      	str	r3, [sp, #20]
 801da70:	9b02      	ldr	r3, [sp, #8]
 801da72:	4598      	cmp	r8, r3
 801da74:	f280 809f 	bge.w	801dbb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801da78:	2100      	movs	r1, #0
 801da7a:	42a9      	cmp	r1, r5
 801da7c:	da30      	bge.n	801dae0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 801da7e:	9b01      	ldr	r3, [sp, #4]
 801da80:	5c5e      	ldrb	r6, [r3, r1]
 801da82:	b35e      	cbz	r6, 801dadc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 801da84:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801da88:	fb1b f606 	smulbb	r6, fp, r6
 801da8c:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 801da90:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 801da94:	ea0e 0309 	and.w	r3, lr, r9
 801da98:	ea02 0c09 	and.w	ip, r2, r9
 801da9c:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 801daa0:	437b      	muls	r3, r7
 801daa2:	f00e 0e1f 	and.w	lr, lr, #31
 801daa6:	fb07 fa0a 	mul.w	sl, r7, sl
 801daaa:	fb06 3c0c 	mla	ip, r6, ip, r3
 801daae:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801dab2:	fb07 fe0e 	mul.w	lr, r7, lr
 801dab6:	f002 021f 	and.w	r2, r2, #31
 801daba:	fb06 a303 	mla	r3, r6, r3, sl
 801dabe:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 801dac2:	fb06 ee02 	mla	lr, r6, r2, lr
 801dac6:	0c1b      	lsrs	r3, r3, #16
 801dac8:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 801dacc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dad0:	ea4c 0c03 	orr.w	ip, ip, r3
 801dad4:	ea4c 0c0e 	orr.w	ip, ip, lr
 801dad8:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801dadc:	3101      	adds	r1, #1
 801dade:	e7cc      	b.n	801da7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 801dae0:	9b05      	ldr	r3, [sp, #20]
 801dae2:	f108 0801 	add.w	r8, r8, #1
 801dae6:	9a03      	ldr	r2, [sp, #12]
 801dae8:	881b      	ldrh	r3, [r3, #0]
 801daea:	1b5b      	subs	r3, r3, r5
 801daec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801daf0:	4418      	add	r0, r3
 801daf2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801daf6:	1b5b      	subs	r3, r3, r5
 801daf8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801dafc:	4414      	add	r4, r2
 801dafe:	9a04      	ldr	r2, [sp, #16]
 801db00:	4413      	add	r3, r2
 801db02:	9a01      	ldr	r2, [sp, #4]
 801db04:	441a      	add	r2, r3
 801db06:	9201      	str	r2, [sp, #4]
 801db08:	e7b2      	b.n	801da70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 801db0a:	f04f 0900 	mov.w	r9, #0
 801db0e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801dbd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801db12:	9305      	str	r3, [sp, #20]
 801db14:	9b02      	ldr	r3, [sp, #8]
 801db16:	4599      	cmp	r9, r3
 801db18:	da4d      	bge.n	801dbb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801db1a:	4607      	mov	r7, r0
 801db1c:	2600      	movs	r6, #0
 801db1e:	42ae      	cmp	r6, r5
 801db20:	da34      	bge.n	801db8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 801db22:	9b01      	ldr	r3, [sp, #4]
 801db24:	5d99      	ldrb	r1, [r3, r6]
 801db26:	b121      	cbz	r1, 801db32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801db28:	29ff      	cmp	r1, #255	; 0xff
 801db2a:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 801db2e:	d103      	bne.n	801db38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801db30:	803a      	strh	r2, [r7, #0]
 801db32:	3702      	adds	r7, #2
 801db34:	3601      	adds	r6, #1
 801db36:	e7f2      	b.n	801db1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 801db38:	f8b7 c000 	ldrh.w	ip, [r7]
 801db3c:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 801db40:	ea02 080a 	and.w	r8, r2, sl
 801db44:	ea0c 030a 	and.w	r3, ip, sl
 801db48:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 801db4c:	f00c 0c1f 	and.w	ip, ip, #31
 801db50:	fb0e f303 	mul.w	r3, lr, r3
 801db54:	fb0e fb0b 	mul.w	fp, lr, fp
 801db58:	fb01 3808 	mla	r8, r1, r8, r3
 801db5c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801db60:	fb0e fc0c 	mul.w	ip, lr, ip
 801db64:	f002 021f 	and.w	r2, r2, #31
 801db68:	fb01 b303 	mla	r3, r1, r3, fp
 801db6c:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 801db70:	fb01 cc02 	mla	ip, r1, r2, ip
 801db74:	0a1b      	lsrs	r3, r3, #8
 801db76:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 801db7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db7e:	ea48 0803 	orr.w	r8, r8, r3
 801db82:	ea48 080c 	orr.w	r8, r8, ip
 801db86:	f8a7 8000 	strh.w	r8, [r7]
 801db8a:	e7d2      	b.n	801db32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801db8c:	9b05      	ldr	r3, [sp, #20]
 801db8e:	f109 0901 	add.w	r9, r9, #1
 801db92:	9a03      	ldr	r2, [sp, #12]
 801db94:	881b      	ldrh	r3, [r3, #0]
 801db96:	1b5b      	subs	r3, r3, r5
 801db98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801db9c:	4418      	add	r0, r3
 801db9e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dba2:	1b5b      	subs	r3, r3, r5
 801dba4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801dba8:	4414      	add	r4, r2
 801dbaa:	9a04      	ldr	r2, [sp, #16]
 801dbac:	4413      	add	r3, r2
 801dbae:	9a01      	ldr	r2, [sp, #4]
 801dbb0:	441a      	add	r2, r3
 801dbb2:	9201      	str	r2, [sp, #4]
 801dbb4:	e7ae      	b.n	801db14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dbb6:	4b04      	ldr	r3, [pc, #16]	; (801dbc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801dbb8:	6818      	ldr	r0, [r3, #0]
 801dbba:	6803      	ldr	r3, [r0, #0]
 801dbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbbe:	4798      	blx	r3
 801dbc0:	b00b      	add	sp, #44	; 0x2c
 801dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbc6:	bf00      	nop
 801dbc8:	20009abc 	.word	0x20009abc
 801dbcc:	20009ab6 	.word	0x20009ab6
 801dbd0:	fffff800 	.word	0xfffff800

0801dbd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbd8:	b089      	sub	sp, #36	; 0x24
 801dbda:	4682      	mov	sl, r0
 801dbdc:	4689      	mov	r9, r1
 801dbde:	4690      	mov	r8, r2
 801dbe0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801dbe4:	461f      	mov	r7, r3
 801dbe6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dbe8:	b365      	cbz	r5, 801dc44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801dbea:	4608      	mov	r0, r1
 801dbec:	f7fe faf8 	bl	801c1e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbf0:	4606      	mov	r6, r0
 801dbf2:	4648      	mov	r0, r9
 801dbf4:	f7fe fb2c 	bl	801c250 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbf8:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dbfc:	4648      	mov	r0, r9
 801dbfe:	f8ad 8008 	strh.w	r8, [sp, #8]
 801dc02:	f8ad 700a 	strh.w	r7, [sp, #10]
 801dc06:	f8ad 600c 	strh.w	r6, [sp, #12]
 801dc0a:	f7fe fc3f 	bl	801c48c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc0e:	2801      	cmp	r0, #1
 801dc10:	d105      	bne.n	801dc1e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 801dc12:	4b64      	ldr	r3, [pc, #400]	; (801dda4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 801dc14:	2160      	movs	r1, #96	; 0x60
 801dc16:	4a64      	ldr	r2, [pc, #400]	; (801dda8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 801dc18:	4864      	ldr	r0, [pc, #400]	; (801ddac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 801dc1a:	f000 fbcd 	bl	801e3b8 <__assert_func>
 801dc1e:	4648      	mov	r0, r9
 801dc20:	f7fe fbdc 	bl	801c3dc <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc24:	4606      	mov	r6, r0
 801dc26:	4648      	mov	r0, r9
 801dc28:	f7fe fc08 	bl	801c43c <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 801dc2c:	4680      	mov	r8, r0
 801dc2e:	4648      	mov	r0, r9
 801dc30:	f7fe fc2c 	bl	801c48c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc34:	2802      	cmp	r0, #2
 801dc36:	d108      	bne.n	801dc4a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dc38:	462b      	mov	r3, r5
 801dc3a:	4622      	mov	r2, r4
 801dc3c:	a902      	add	r1, sp, #8
 801dc3e:	4630      	mov	r0, r6
 801dc40:	f7ff fdd2 	bl	801d7e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc44:	b009      	add	sp, #36	; 0x24
 801dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc4a:	4648      	mov	r0, r9
 801dc4c:	f7fe fb90 	bl	801c370 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dc50:	b950      	cbnz	r0, 801dc68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dc52:	f8da 3000 	ldr.w	r3, [sl]
 801dc56:	aa02      	add	r2, sp, #8
 801dc58:	9001      	str	r0, [sp, #4]
 801dc5a:	4631      	mov	r1, r6
 801dc5c:	9500      	str	r5, [sp, #0]
 801dc5e:	4650      	mov	r0, sl
 801dc60:	691d      	ldr	r5, [r3, #16]
 801dc62:	4623      	mov	r3, r4
 801dc64:	47a8      	blx	r5
 801dc66:	e7ed      	b.n	801dc44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801dc68:	af06      	add	r7, sp, #24
 801dc6a:	4649      	mov	r1, r9
 801dc6c:	f10d 0910 	add.w	r9, sp, #16
 801dc70:	4638      	mov	r0, r7
 801dc72:	f7fe fb25 	bl	801c2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dc76:	e897 0003 	ldmia.w	r7, {r0, r1}
 801dc7a:	e889 0003 	stmia.w	r9, {r0, r1}
 801dc7e:	4621      	mov	r1, r4
 801dc80:	4648      	mov	r0, r9
 801dc82:	f7f0 fb23 	bl	800e2cc <_ZN8touchgfx4RectaNERKS0_>
 801dc86:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801dc8a:	b113      	cbz	r3, 801dc92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 801dc8c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801dc90:	b913      	cbnz	r3, 801dc98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801dc92:	9500      	str	r5, [sp, #0]
 801dc94:	4623      	mov	r3, r4
 801dc96:	e07f      	b.n	801dd98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 801dc98:	f8da 3000 	ldr.w	r3, [sl]
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	9500      	str	r5, [sp, #0]
 801dca0:	4631      	mov	r1, r6
 801dca2:	9201      	str	r2, [sp, #4]
 801dca4:	4650      	mov	r0, sl
 801dca6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801dcaa:	aa02      	add	r2, sp, #8
 801dcac:	464b      	mov	r3, r9
 801dcae:	47d8      	blx	fp
 801dcb0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dcb4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801dcb8:	4293      	cmp	r3, r2
 801dcba:	dd13      	ble.n	801dce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 801dcbc:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dcc0:	1a9b      	subs	r3, r3, r2
 801dcc2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dcc6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dcca:	4630      	mov	r0, r6
 801dccc:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dcd0:	aa02      	add	r2, sp, #8
 801dcd2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dcd6:	4641      	mov	r1, r8
 801dcd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dcdc:	463b      	mov	r3, r7
 801dcde:	9500      	str	r5, [sp, #0]
 801dce0:	f7ff fe76 	bl	801d9d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dce4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dce8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dcec:	4293      	cmp	r3, r2
 801dcee:	dd13      	ble.n	801dd18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 801dcf0:	1a9b      	subs	r3, r3, r2
 801dcf2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dcf6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dcfa:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dcfe:	aa02      	add	r2, sp, #8
 801dd00:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dd04:	4630      	mov	r0, r6
 801dd06:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dd0a:	463b      	mov	r3, r7
 801dd0c:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dd10:	4641      	mov	r1, r8
 801dd12:	9500      	str	r5, [sp, #0]
 801dd14:	f7ff fe5c 	bl	801d9d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dd18:	88a2      	ldrh	r2, [r4, #4]
 801dd1a:	8823      	ldrh	r3, [r4, #0]
 801dd1c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801dd20:	4413      	add	r3, r2
 801dd22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dd26:	440a      	add	r2, r1
 801dd28:	b29b      	uxth	r3, r3
 801dd2a:	b292      	uxth	r2, r2
 801dd2c:	b218      	sxth	r0, r3
 801dd2e:	b211      	sxth	r1, r2
 801dd30:	4288      	cmp	r0, r1
 801dd32:	dd13      	ble.n	801dd5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 801dd34:	1a9b      	subs	r3, r3, r2
 801dd36:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dd3a:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 801dd3e:	aa02      	add	r2, sp, #8
 801dd40:	f8ad 1018 	strh.w	r1, [sp, #24]
 801dd44:	4641      	mov	r1, r8
 801dd46:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dd4a:	463b      	mov	r3, r7
 801dd4c:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dd50:	4630      	mov	r0, r6
 801dd52:	9500      	str	r5, [sp, #0]
 801dd54:	f8ad e01a 	strh.w	lr, [sp, #26]
 801dd58:	f7ff fe3a 	bl	801d9d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dd5c:	88e2      	ldrh	r2, [r4, #6]
 801dd5e:	8863      	ldrh	r3, [r4, #2]
 801dd60:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801dd64:	4413      	add	r3, r2
 801dd66:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801dd6a:	440a      	add	r2, r1
 801dd6c:	b29b      	uxth	r3, r3
 801dd6e:	b292      	uxth	r2, r2
 801dd70:	b218      	sxth	r0, r3
 801dd72:	b211      	sxth	r1, r2
 801dd74:	4288      	cmp	r0, r1
 801dd76:	f77f af65 	ble.w	801dc44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801dd7a:	1a9b      	subs	r3, r3, r2
 801dd7c:	f9b4 e000 	ldrsh.w	lr, [r4]
 801dd80:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dd84:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dd88:	463b      	mov	r3, r7
 801dd8a:	f8ad e018 	strh.w	lr, [sp, #24]
 801dd8e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801dd92:	f8ad 001c 	strh.w	r0, [sp, #28]
 801dd96:	9500      	str	r5, [sp, #0]
 801dd98:	aa02      	add	r2, sp, #8
 801dd9a:	4641      	mov	r1, r8
 801dd9c:	4630      	mov	r0, r6
 801dd9e:	f7ff fe17 	bl	801d9d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dda2:	e74f      	b.n	801dc44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801dda4:	08021422 	.word	0x08021422
 801dda8:	08021550 	.word	0x08021550
 801ddac:	080214b2 	.word	0x080214b2

0801ddb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ddb0:	b138      	cbz	r0, 801ddc2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ddb2:	2902      	cmp	r1, #2
 801ddb4:	d00b      	beq.n	801ddce <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 801ddb6:	2903      	cmp	r1, #3
 801ddb8:	d00c      	beq.n	801ddd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ddba:	2901      	cmp	r1, #1
 801ddbc:	d10d      	bne.n	801ddda <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801ddbe:	2001      	movs	r0, #1
 801ddc0:	4770      	bx	lr
 801ddc2:	2902      	cmp	r1, #2
 801ddc4:	d006      	beq.n	801ddd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ddc6:	2903      	cmp	r1, #3
 801ddc8:	d007      	beq.n	801ddda <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801ddca:	2901      	cmp	r1, #1
 801ddcc:	d1f7      	bne.n	801ddbe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 801ddce:	4b05      	ldr	r3, [pc, #20]	; (801dde4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ddd0:	8818      	ldrh	r0, [r3, #0]
 801ddd2:	4770      	bx	lr
 801ddd4:	f04f 30ff 	mov.w	r0, #4294967295
 801ddd8:	4770      	bx	lr
 801ddda:	4b02      	ldr	r3, [pc, #8]	; (801dde4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dddc:	8818      	ldrh	r0, [r3, #0]
 801ddde:	4240      	negs	r0, r0
 801dde0:	4770      	bx	lr
 801dde2:	bf00      	nop
 801dde4:	20009ab6 	.word	0x20009ab6

0801dde8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801dde8:	b140      	cbz	r0, 801ddfc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801ddea:	2902      	cmp	r1, #2
 801ddec:	d00c      	beq.n	801de08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 801ddee:	2903      	cmp	r1, #3
 801ddf0:	d00d      	beq.n	801de0e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801ddf2:	2901      	cmp	r1, #1
 801ddf4:	d10f      	bne.n	801de16 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801ddf6:	4b09      	ldr	r3, [pc, #36]	; (801de1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ddf8:	8818      	ldrh	r0, [r3, #0]
 801ddfa:	4770      	bx	lr
 801ddfc:	2902      	cmp	r1, #2
 801ddfe:	d006      	beq.n	801de0e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801de00:	2903      	cmp	r1, #3
 801de02:	d008      	beq.n	801de16 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801de04:	2901      	cmp	r1, #1
 801de06:	d1f6      	bne.n	801ddf6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 801de08:	f04f 30ff 	mov.w	r0, #4294967295
 801de0c:	4770      	bx	lr
 801de0e:	4b03      	ldr	r3, [pc, #12]	; (801de1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801de10:	8818      	ldrh	r0, [r3, #0]
 801de12:	4240      	negs	r0, r0
 801de14:	4770      	bx	lr
 801de16:	2001      	movs	r0, #1
 801de18:	4770      	bx	lr
 801de1a:	bf00      	nop
 801de1c:	20009ab6 	.word	0x20009ab6

0801de20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 801de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de24:	b097      	sub	sp, #92	; 0x5c
 801de26:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801de2a:	910d      	str	r1, [sp, #52]	; 0x34
 801de2c:	a912      	add	r1, sp, #72	; 0x48
 801de2e:	f899 000d 	ldrb.w	r0, [r9, #13]
 801de32:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 801de36:	f010 0f08 	tst.w	r0, #8
 801de3a:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 801de3e:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 801de42:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 801de46:	e881 000c 	stmia.w	r1, {r2, r3}
 801de4a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801de4e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801de52:	920b      	str	r2, [sp, #44]	; 0x2c
 801de54:	bf0c      	ite	eq
 801de56:	2200      	moveq	r2, #0
 801de58:	f44f 7280 	movne.w	r2, #256	; 0x100
 801de5c:	f899 1006 	ldrb.w	r1, [r9, #6]
 801de60:	f010 0f10 	tst.w	r0, #16
 801de64:	9307      	str	r3, [sp, #28]
 801de66:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801de6a:	bf0c      	ite	eq
 801de6c:	2000      	moveq	r0, #0
 801de6e:	f44f 7080 	movne.w	r0, #256	; 0x100
 801de72:	430a      	orrs	r2, r1
 801de74:	9308      	str	r3, [sp, #32]
 801de76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de78:	920a      	str	r2, [sp, #40]	; 0x28
 801de7a:	f000 813b 	beq.w	801e0f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801de7e:	f899 2007 	ldrb.w	r2, [r9, #7]
 801de82:	4302      	orrs	r2, r0
 801de84:	9209      	str	r2, [sp, #36]	; 0x24
 801de86:	f000 8135 	beq.w	801e0f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801de8a:	f999 1009 	ldrsb.w	r1, [r9, #9]
 801de8e:	2c00      	cmp	r4, #0
 801de90:	f000 80db 	beq.w	801e04a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 801de94:	1a61      	subs	r1, r4, r1
 801de96:	b28c      	uxth	r4, r1
 801de98:	0422      	lsls	r2, r4, #16
 801de9a:	d504      	bpl.n	801dea6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801de9c:	eba8 0404 	sub.w	r4, r8, r4
 801dea0:	fa0f f884 	sxth.w	r8, r4
 801dea4:	2400      	movs	r4, #0
 801dea6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801deaa:	88df      	ldrh	r7, [r3, #6]
 801deac:	4580      	cmp	r8, r0
 801deae:	b282      	uxth	r2, r0
 801deb0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 801deb4:	bfb8      	it	lt
 801deb6:	18a1      	addlt	r1, r4, r2
 801deb8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 801debc:	44be      	add	lr, r7
 801debe:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801dec2:	bfbc      	itt	lt
 801dec4:	eba1 0108 	sublt.w	r1, r1, r8
 801dec8:	4680      	movlt	r8, r0
 801deca:	a812      	add	r0, sp, #72	; 0x48
 801decc:	bfb8      	it	lt
 801dece:	b28c      	uxthlt	r4, r1
 801ded0:	8899      	ldrh	r1, [r3, #4]
 801ded2:	fa0f f38e 	sxth.w	r3, lr
 801ded6:	440a      	add	r2, r1
 801ded8:	4641      	mov	r1, r8
 801deda:	930e      	str	r3, [sp, #56]	; 0x38
 801dedc:	4bb1      	ldr	r3, [pc, #708]	; (801e1a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801dede:	b212      	sxth	r2, r2
 801dee0:	f893 b000 	ldrb.w	fp, [r3]
 801dee4:	920f      	str	r2, [sp, #60]	; 0x3c
 801dee6:	f10b 3eff 	add.w	lr, fp, #4294967295
 801deea:	9a07      	ldr	r2, [sp, #28]
 801deec:	f1de 0300 	rsbs	r3, lr, #0
 801def0:	eb43 030e 	adc.w	r3, r3, lr
 801def4:	930c      	str	r3, [sp, #48]	; 0x30
 801def6:	4653      	mov	r3, sl
 801def8:	f7fc fd52 	bl	801a9a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801defc:	4641      	mov	r1, r8
 801defe:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801df02:	4653      	mov	r3, sl
 801df04:	9a07      	ldr	r2, [sp, #28]
 801df06:	a812      	add	r0, sp, #72	; 0x48
 801df08:	f7fc fd65 	bl	801a9d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801df0c:	a916      	add	r1, sp, #88	; 0x58
 801df0e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801df12:	a815      	add	r0, sp, #84	; 0x54
 801df14:	f7fc fe20 	bl	801ab58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801df18:	f1ba 0f00 	cmp.w	sl, #0
 801df1c:	f040 8099 	bne.w	801e052 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 801df20:	f1bb 0f01 	cmp.w	fp, #1
 801df24:	f040 809d 	bne.w	801e062 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 801df28:	4a9f      	ldr	r2, [pc, #636]	; (801e1a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801df2a:	2d04      	cmp	r5, #4
 801df2c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801df30:	8811      	ldrh	r1, [r2, #0]
 801df32:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801df36:	fb01 2303 	mla	r3, r1, r3, r2
 801df3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801df3c:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801df40:	f04f 03ff 	mov.w	r3, #255	; 0xff
 801df44:	fa43 f305 	asr.w	r3, r3, r5
 801df48:	b2db      	uxtb	r3, r3
 801df4a:	930d      	str	r3, [sp, #52]	; 0x34
 801df4c:	ea6f 0303 	mvn.w	r3, r3
 801df50:	b2db      	uxtb	r3, r3
 801df52:	9310      	str	r3, [sp, #64]	; 0x40
 801df54:	f1c5 0308 	rsb	r3, r5, #8
 801df58:	b2db      	uxtb	r3, r3
 801df5a:	9309      	str	r3, [sp, #36]	; 0x24
 801df5c:	d104      	bne.n	801df68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801df5e:	f899 300d 	ldrb.w	r3, [r9, #13]
 801df62:	07da      	lsls	r2, r3, #31
 801df64:	f100 8118 	bmi.w	801e198 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801df68:	b91c      	cbnz	r4, 801df72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 801df6a:	9b08      	ldr	r3, [sp, #32]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	f000 80c4 	beq.w	801e0fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 801df72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801df76:	9909      	ldr	r1, [sp, #36]	; 0x24
 801df78:	fb16 4303 	smlabb	r3, r6, r3, r4
 801df7c:	fb13 f305 	smulbb	r3, r3, r5
 801df80:	b29b      	uxth	r3, r3
 801df82:	f003 0207 	and.w	r2, r3, #7
 801df86:	1a8a      	subs	r2, r1, r2
 801df88:	9926      	ldr	r1, [sp, #152]	; 0x98
 801df8a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801df8e:	b2d2      	uxtb	r2, r2
 801df90:	9326      	str	r3, [sp, #152]	; 0x98
 801df92:	9b08      	ldr	r3, [sp, #32]
 801df94:	1aff      	subs	r7, r7, r3
 801df96:	b2bf      	uxth	r7, r7
 801df98:	4651      	mov	r1, sl
 801df9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801df9c:	f7ff ff08 	bl	801ddb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801dfa0:	4651      	mov	r1, sl
 801dfa2:	4681      	mov	r9, r0
 801dfa4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801dfa6:	f7ff ff1f 	bl	801dde8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801dfaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfac:	9907      	ldr	r1, [sp, #28]
 801dfae:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801dfb2:	eba3 0e01 	sub.w	lr, r3, r1
 801dfb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dfb8:	eba8 0104 	sub.w	r1, r8, r4
 801dfbc:	1a59      	subs	r1, r3, r1
 801dfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfc0:	4299      	cmp	r1, r3
 801dfc2:	bfd4      	ite	le
 801dfc4:	ebc4 0101 	rsble	r1, r4, r1
 801dfc8:	ebc4 0103 	rsbgt	r1, r4, r3
 801dfcc:	4577      	cmp	r7, lr
 801dfce:	fb09 0011 	mls	r0, r9, r1, r0
 801dfd2:	eba6 0301 	sub.w	r3, r6, r1
 801dfd6:	bfa8      	it	ge
 801dfd8:	4677      	movge	r7, lr
 801dfda:	0040      	lsls	r0, r0, #1
 801dfdc:	436b      	muls	r3, r5
 801dfde:	9008      	str	r0, [sp, #32]
 801dfe0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 801dfe4:	fb0a f000 	mul.w	r0, sl, r0
 801dfe8:	9007      	str	r0, [sp, #28]
 801dfea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801dfec:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dff0:	900e      	str	r0, [sp, #56]	; 0x38
 801dff2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801dff4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dff8:	900f      	str	r0, [sp, #60]	; 0x3c
 801dffa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801dffc:	f000 001f 	and.w	r0, r0, #31
 801e000:	9011      	str	r0, [sp, #68]	; 0x44
 801e002:	2f00      	cmp	r7, #0
 801e004:	dd76      	ble.n	801e0f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801e006:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 801e00a:	4689      	mov	r9, r1
 801e00c:	46d8      	mov	r8, fp
 801e00e:	900c      	str	r0, [sp, #48]	; 0x30
 801e010:	f1b9 0f00 	cmp.w	r9, #0
 801e014:	f340 80a6 	ble.w	801e164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e018:	9826      	ldr	r0, [sp, #152]	; 0x98
 801e01a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e01c:	7800      	ldrb	r0, [r0, #0]
 801e01e:	4090      	lsls	r0, r2
 801e020:	4020      	ands	r0, r4
 801e022:	d009      	beq.n	801e038 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 801e024:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e026:	4320      	orrs	r0, r4
 801e028:	28ff      	cmp	r0, #255	; 0xff
 801e02a:	d168      	bne.n	801e0fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e02c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e02e:	2cff      	cmp	r4, #255	; 0xff
 801e030:	d165      	bne.n	801e0fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e032:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e034:	f8a8 4000 	strh.w	r4, [r8]
 801e038:	2a00      	cmp	r2, #0
 801e03a:	f000 808e 	beq.w	801e15a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801e03e:	1b52      	subs	r2, r2, r5
 801e040:	b2d2      	uxtb	r2, r2
 801e042:	44d0      	add	r8, sl
 801e044:	f109 39ff 	add.w	r9, r9, #4294967295
 801e048:	e7e2      	b.n	801e010 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 801e04a:	4488      	add	r8, r1
 801e04c:	fa0f f888 	sxth.w	r8, r8
 801e050:	e729      	b.n	801dea6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801e052:	f1ba 0f01 	cmp.w	sl, #1
 801e056:	f47f af67 	bne.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e05a:	f1bb 0f01 	cmp.w	fp, #1
 801e05e:	f47f af63 	bne.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e062:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801e1b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e066:	f8db 0000 	ldr.w	r0, [fp]
 801e06a:	6803      	ldr	r3, [r0, #0]
 801e06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e06e:	4798      	blx	r3
 801e070:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e074:	465a      	mov	r2, fp
 801e076:	d006      	beq.n	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e078:	2d04      	cmp	r5, #4
 801e07a:	bf0a      	itet	eq
 801e07c:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 801e080:	2300      	movne	r3, #0
 801e082:	f003 0301 	andeq.w	r3, r3, #1
 801e086:	05c0      	lsls	r0, r0, #23
 801e088:	f140 8081 	bpl.w	801e18e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801e08c:	2d08      	cmp	r5, #8
 801e08e:	d17e      	bne.n	801e18e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801e090:	2b00      	cmp	r3, #0
 801e092:	bf0c      	ite	eq
 801e094:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e098:	2180      	movne	r1, #128	; 0x80
 801e09a:	2c00      	cmp	r4, #0
 801e09c:	f47f af44 	bne.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e0a0:	9b08      	ldr	r3, [sp, #32]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	f47f af40 	bne.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e0ac:	4443      	add	r3, r8
 801e0ae:	4298      	cmp	r0, r3
 801e0b0:	f6ff af3a 	blt.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e0b4:	9807      	ldr	r0, [sp, #28]
 801e0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0b8:	4403      	add	r3, r0
 801e0ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e0bc:	4298      	cmp	r0, r3
 801e0be:	f6ff af33 	blt.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e0c2:	2d08      	cmp	r5, #8
 801e0c4:	6810      	ldr	r0, [r2, #0]
 801e0c6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801e0ca:	bf18      	it	ne
 801e0cc:	3601      	addne	r6, #1
 801e0ce:	6804      	ldr	r4, [r0, #0]
 801e0d0:	9105      	str	r1, [sp, #20]
 801e0d2:	bf18      	it	ne
 801e0d4:	f026 0601 	bicne.w	r6, r6, #1
 801e0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e0da:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801e0de:	bf18      	it	ne
 801e0e0:	b2b6      	uxthne	r6, r6
 801e0e2:	9104      	str	r1, [sp, #16]
 801e0e4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e0e6:	9602      	str	r6, [sp, #8]
 801e0e8:	9103      	str	r1, [sp, #12]
 801e0ea:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e0ec:	e88d 00c0 	stmia.w	sp, {r6, r7}
 801e0f0:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 801e0f2:	47a0      	blx	r4
 801e0f4:	b017      	add	sp, #92	; 0x5c
 801e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e0fc:	e74c      	b.n	801df98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 801e0fe:	f8b8 c000 	ldrh.w	ip, [r8]
 801e102:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801e106:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 801e10a:	fb10 f004 	smulbb	r0, r0, r4
 801e10e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e110:	f026 0607 	bic.w	r6, r6, #7
 801e114:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 801e118:	fb0e f606 	mul.w	r6, lr, r6
 801e11c:	fb00 6604 	mla	r6, r0, r4, r6
 801e120:	4c22      	ldr	r4, [pc, #136]	; (801e1ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e122:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 801e126:	940a      	str	r4, [sp, #40]	; 0x28
 801e128:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 801e12c:	f00c 0c1f 	and.w	ip, ip, #31
 801e130:	fb0e f404 	mul.w	r4, lr, r4
 801e134:	fb0e fc0c 	mul.w	ip, lr, ip
 801e138:	4626      	mov	r6, r4
 801e13a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e13c:	fb00 6404 	mla	r4, r0, r4, r6
 801e140:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e142:	0c24      	lsrs	r4, r4, #16
 801e144:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e148:	4334      	orrs	r4, r6
 801e14a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e14c:	fb00 cc06 	mla	ip, r0, r6, ip
 801e150:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 801e154:	ea44 040c 	orr.w	r4, r4, ip
 801e158:	e76c      	b.n	801e034 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 801e15a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e15c:	3201      	adds	r2, #1
 801e15e:	9226      	str	r2, [sp, #152]	; 0x98
 801e160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e162:	e76e      	b.n	801e042 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801e164:	b16b      	cbz	r3, 801e182 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 801e166:	4293      	cmp	r3, r2
 801e168:	dd08      	ble.n	801e17c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801e16a:	1b58      	subs	r0, r3, r5
 801e16c:	2408      	movs	r4, #8
 801e16e:	1a80      	subs	r0, r0, r2
 801e170:	fb90 f0f4 	sdiv	r0, r0, r4
 801e174:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801e176:	3001      	adds	r0, #1
 801e178:	4404      	add	r4, r0
 801e17a:	9426      	str	r4, [sp, #152]	; 0x98
 801e17c:	1ad2      	subs	r2, r2, r3
 801e17e:	f002 0207 	and.w	r2, r2, #7
 801e182:	9807      	ldr	r0, [sp, #28]
 801e184:	3f01      	subs	r7, #1
 801e186:	9c08      	ldr	r4, [sp, #32]
 801e188:	4420      	add	r0, r4
 801e18a:	4483      	add	fp, r0
 801e18c:	e739      	b.n	801e002 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e18e:	2b00      	cmp	r3, #0
 801e190:	f43f aeca 	beq.w	801df28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801e194:	2180      	movs	r1, #128	; 0x80
 801e196:	e780      	b.n	801e09a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801e198:	07f3      	lsls	r3, r6, #31
 801e19a:	f57f aee5 	bpl.w	801df68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e19e:	3601      	adds	r6, #1
 801e1a0:	b2b6      	uxth	r6, r6
 801e1a2:	e6e1      	b.n	801df68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e1a4:	20009ab4 	.word	0x20009ab4
 801e1a8:	20009ab6 	.word	0x20009ab6
 801e1ac:	fffff800 	.word	0xfffff800
 801e1b0:	20009abc 	.word	0x20009abc

0801e1b4 <CRC_Lock>:
 801e1b4:	4a13      	ldr	r2, [pc, #76]	; (801e204 <CRC_Lock+0x50>)
 801e1b6:	6813      	ldr	r3, [r2, #0]
 801e1b8:	f023 0301 	bic.w	r3, r3, #1
 801e1bc:	6013      	str	r3, [r2, #0]
 801e1be:	4b12      	ldr	r3, [pc, #72]	; (801e208 <CRC_Lock+0x54>)
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	b9a3      	cbnz	r3, 801e1ee <CRC_Lock+0x3a>
 801e1c4:	4b11      	ldr	r3, [pc, #68]	; (801e20c <CRC_Lock+0x58>)
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e1cc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e1d0:	d10d      	bne.n	801e1ee <CRC_Lock+0x3a>
 801e1d2:	4b0f      	ldr	r3, [pc, #60]	; (801e210 <CRC_Lock+0x5c>)
 801e1d4:	2201      	movs	r2, #1
 801e1d6:	601a      	str	r2, [r3, #0]
 801e1d8:	681a      	ldr	r2, [r3, #0]
 801e1da:	2a00      	cmp	r2, #0
 801e1dc:	d1fc      	bne.n	801e1d8 <CRC_Lock+0x24>
 801e1de:	4b0d      	ldr	r3, [pc, #52]	; (801e214 <CRC_Lock+0x60>)
 801e1e0:	6018      	str	r0, [r3, #0]
 801e1e2:	6818      	ldr	r0, [r3, #0]
 801e1e4:	4288      	cmp	r0, r1
 801e1e6:	bf14      	ite	ne
 801e1e8:	2000      	movne	r0, #0
 801e1ea:	2001      	moveq	r0, #1
 801e1ec:	4770      	bx	lr
 801e1ee:	4b0a      	ldr	r3, [pc, #40]	; (801e218 <CRC_Lock+0x64>)
 801e1f0:	2201      	movs	r2, #1
 801e1f2:	601a      	str	r2, [r3, #0]
 801e1f4:	681a      	ldr	r2, [r3, #0]
 801e1f6:	2a00      	cmp	r2, #0
 801e1f8:	d1fc      	bne.n	801e1f4 <CRC_Lock+0x40>
 801e1fa:	4b08      	ldr	r3, [pc, #32]	; (801e21c <CRC_Lock+0x68>)
 801e1fc:	6018      	str	r0, [r3, #0]
 801e1fe:	6818      	ldr	r0, [r3, #0]
 801e200:	4281      	cmp	r1, r0
 801e202:	e7f0      	b.n	801e1e6 <CRC_Lock+0x32>
 801e204:	e0002000 	.word	0xe0002000
 801e208:	e0042000 	.word	0xe0042000
 801e20c:	5c001000 	.word	0x5c001000
 801e210:	58024c08 	.word	0x58024c08
 801e214:	58024c00 	.word	0x58024c00
 801e218:	40023008 	.word	0x40023008
 801e21c:	40023000 	.word	0x40023000

0801e220 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801e220:	6101      	str	r1, [r0, #16]
 801e222:	4770      	bx	lr

0801e224 <_ZN8touchgfx8Gestures4tickEv>:
 801e224:	7b83      	ldrb	r3, [r0, #14]
 801e226:	b14b      	cbz	r3, 801e23c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801e228:	8903      	ldrh	r3, [r0, #8]
 801e22a:	3301      	adds	r3, #1
 801e22c:	b29b      	uxth	r3, r3
 801e22e:	2b07      	cmp	r3, #7
 801e230:	8103      	strh	r3, [r0, #8]
 801e232:	bf81      	itttt	hi
 801e234:	2300      	movhi	r3, #0
 801e236:	8143      	strhhi	r3, [r0, #10]
 801e238:	8183      	strhhi	r3, [r0, #12]
 801e23a:	7383      	strbhi	r3, [r0, #14]
 801e23c:	4770      	bx	lr
	...

0801e240 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801e240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e244:	4604      	mov	r4, r0
 801e246:	4698      	mov	r8, r3
 801e248:	8880      	ldrh	r0, [r0, #4]
 801e24a:	4617      	mov	r7, r2
 801e24c:	4b1d      	ldr	r3, [pc, #116]	; (801e2c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801e24e:	460e      	mov	r6, r1
 801e250:	f8ad 0006 	strh.w	r0, [sp, #6]
 801e254:	eba8 0000 	sub.w	r0, r8, r0
 801e258:	9300      	str	r3, [sp, #0]
 801e25a:	2300      	movs	r3, #0
 801e25c:	b280      	uxth	r0, r0
 801e25e:	8aa2      	ldrh	r2, [r4, #20]
 801e260:	f88d 3004 	strb.w	r3, [sp, #4]
 801e264:	b203      	sxth	r3, r0
 801e266:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e26a:	88e1      	ldrh	r1, [r4, #6]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e272:	f8ad 1008 	strh.w	r1, [sp, #8]
 801e276:	bfb8      	it	lt
 801e278:	4240      	neglt	r0, r0
 801e27a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e27e:	bfb8      	it	lt
 801e280:	b203      	sxthlt	r3, r0
 801e282:	4293      	cmp	r3, r2
 801e284:	dc0c      	bgt.n	801e2a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801e286:	1a69      	subs	r1, r5, r1
 801e288:	b289      	uxth	r1, r1
 801e28a:	b20b      	sxth	r3, r1
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	bfbc      	itt	lt
 801e290:	4249      	neglt	r1, r1
 801e292:	b20b      	sxthlt	r3, r1
 801e294:	429a      	cmp	r2, r3
 801e296:	db03      	blt.n	801e2a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801e298:	2000      	movs	r0, #0
 801e29a:	b004      	add	sp, #16
 801e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2a0:	6920      	ldr	r0, [r4, #16]
 801e2a2:	4669      	mov	r1, sp
 801e2a4:	eba8 0606 	sub.w	r6, r8, r6
 801e2a8:	1bef      	subs	r7, r5, r7
 801e2aa:	6803      	ldr	r3, [r0, #0]
 801e2ac:	685b      	ldr	r3, [r3, #4]
 801e2ae:	4798      	blx	r3
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	2001      	movs	r0, #1
 801e2b4:	8166      	strh	r6, [r4, #10]
 801e2b6:	8123      	strh	r3, [r4, #8]
 801e2b8:	81a7      	strh	r7, [r4, #12]
 801e2ba:	f8a4 8004 	strh.w	r8, [r4, #4]
 801e2be:	80e5      	strh	r5, [r4, #6]
 801e2c0:	73a0      	strb	r0, [r4, #14]
 801e2c2:	e7ea      	b.n	801e29a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 801e2c4:	0801fc74 	.word	0x0801fc74

0801e2c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801e2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2ca:	461e      	mov	r6, r3
 801e2cc:	1e4b      	subs	r3, r1, #1
 801e2ce:	b085      	sub	sp, #20
 801e2d0:	4604      	mov	r4, r0
 801e2d2:	2b01      	cmp	r3, #1
 801e2d4:	460d      	mov	r5, r1
 801e2d6:	4617      	mov	r7, r2
 801e2d8:	d845      	bhi.n	801e366 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 801e2da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e2de:	1cd3      	adds	r3, r2, #3
 801e2e0:	b29b      	uxth	r3, r3
 801e2e2:	2b06      	cmp	r3, #6
 801e2e4:	d913      	bls.n	801e30e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 801e2e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801e2ea:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e2ee:	4820      	ldr	r0, [pc, #128]	; (801e370 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801e2f0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e2f4:	a901      	add	r1, sp, #4
 801e2f6:	9001      	str	r0, [sp, #4]
 801e2f8:	2000      	movs	r0, #0
 801e2fa:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e2fe:	f88d 0008 	strb.w	r0, [sp, #8]
 801e302:	6920      	ldr	r0, [r4, #16]
 801e304:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e308:	6803      	ldr	r3, [r0, #0]
 801e30a:	689b      	ldr	r3, [r3, #8]
 801e30c:	4798      	blx	r3
 801e30e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e312:	1cd3      	adds	r3, r2, #3
 801e314:	b29b      	uxth	r3, r3
 801e316:	2b06      	cmp	r3, #6
 801e318:	d913      	bls.n	801e342 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801e31a:	4815      	ldr	r0, [pc, #84]	; (801e370 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801e31c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e320:	9001      	str	r0, [sp, #4]
 801e322:	2001      	movs	r0, #1
 801e324:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e328:	f88d 0008 	strb.w	r0, [sp, #8]
 801e32c:	6920      	ldr	r0, [r4, #16]
 801e32e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e332:	a901      	add	r1, sp, #4
 801e334:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e338:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e33c:	6803      	ldr	r3, [r0, #0]
 801e33e:	689b      	ldr	r3, [r3, #8]
 801e340:	4798      	blx	r3
 801e342:	4b0c      	ldr	r3, [pc, #48]	; (801e374 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 801e344:	a901      	add	r1, sp, #4
 801e346:	6920      	ldr	r0, [r4, #16]
 801e348:	9301      	str	r3, [sp, #4]
 801e34a:	2300      	movs	r3, #0
 801e34c:	f88d 5008 	strb.w	r5, [sp, #8]
 801e350:	f8ad 700a 	strh.w	r7, [sp, #10]
 801e354:	f8ad 600c 	strh.w	r6, [sp, #12]
 801e358:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e35c:	6803      	ldr	r3, [r0, #0]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	4798      	blx	r3
 801e362:	b005      	add	sp, #20
 801e364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e366:	2900      	cmp	r1, #0
 801e368:	d1eb      	bne.n	801e342 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801e36a:	80a2      	strh	r2, [r4, #4]
 801e36c:	80c6      	strh	r6, [r0, #6]
 801e36e:	e7e8      	b.n	801e342 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801e370:	080210b8 	.word	0x080210b8
 801e374:	0801fc88 	.word	0x0801fc88

0801e378 <__cxa_pure_virtual>:
 801e378:	b508      	push	{r3, lr}
 801e37a:	f000 f811 	bl	801e3a0 <_ZSt9terminatev>

0801e37e <_ZdlPvj>:
 801e37e:	f000 b800 	b.w	801e382 <_ZdlPv>

0801e382 <_ZdlPv>:
 801e382:	f000 b881 	b.w	801e488 <free>

0801e386 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e386:	b508      	push	{r3, lr}
 801e388:	4780      	blx	r0
 801e38a:	f000 f80e 	bl	801e3aa <abort>
	...

0801e390 <_ZSt13get_terminatev>:
 801e390:	4b02      	ldr	r3, [pc, #8]	; (801e39c <_ZSt13get_terminatev+0xc>)
 801e392:	6818      	ldr	r0, [r3, #0]
 801e394:	f3bf 8f5b 	dmb	ish
 801e398:	4770      	bx	lr
 801e39a:	bf00      	nop
 801e39c:	2000007c 	.word	0x2000007c

0801e3a0 <_ZSt9terminatev>:
 801e3a0:	b508      	push	{r3, lr}
 801e3a2:	f7ff fff5 	bl	801e390 <_ZSt13get_terminatev>
 801e3a6:	f7ff ffee 	bl	801e386 <_ZN10__cxxabiv111__terminateEPFvvE>

0801e3aa <abort>:
 801e3aa:	b508      	push	{r3, lr}
 801e3ac:	2006      	movs	r0, #6
 801e3ae:	f000 fc2f 	bl	801ec10 <raise>
 801e3b2:	2001      	movs	r0, #1
 801e3b4:	f7f9 fc9c 	bl	8017cf0 <_exit>

0801e3b8 <__assert_func>:
 801e3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e3ba:	461c      	mov	r4, r3
 801e3bc:	4b09      	ldr	r3, [pc, #36]	; (801e3e4 <__assert_func+0x2c>)
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	4605      	mov	r5, r0
 801e3c2:	68d8      	ldr	r0, [r3, #12]
 801e3c4:	b152      	cbz	r2, 801e3dc <__assert_func+0x24>
 801e3c6:	4b08      	ldr	r3, [pc, #32]	; (801e3e8 <__assert_func+0x30>)
 801e3c8:	9100      	str	r1, [sp, #0]
 801e3ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801e3ce:	4907      	ldr	r1, [pc, #28]	; (801e3ec <__assert_func+0x34>)
 801e3d0:	462b      	mov	r3, r5
 801e3d2:	4622      	mov	r2, r4
 801e3d4:	f000 f81a 	bl	801e40c <fiprintf>
 801e3d8:	f7ff ffe7 	bl	801e3aa <abort>
 801e3dc:	4b04      	ldr	r3, [pc, #16]	; (801e3f0 <__assert_func+0x38>)
 801e3de:	461a      	mov	r2, r3
 801e3e0:	e7f2      	b.n	801e3c8 <__assert_func+0x10>
 801e3e2:	bf00      	nop
 801e3e4:	20000080 	.word	0x20000080
 801e3e8:	080216da 	.word	0x080216da
 801e3ec:	080216e7 	.word	0x080216e7
 801e3f0:	08021715 	.word	0x08021715

0801e3f4 <atexit>:
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	4601      	mov	r1, r0
 801e3f8:	461a      	mov	r2, r3
 801e3fa:	4618      	mov	r0, r3
 801e3fc:	f000 bce4 	b.w	801edc8 <__register_exitproc>

0801e400 <__errno>:
 801e400:	4b01      	ldr	r3, [pc, #4]	; (801e408 <__errno+0x8>)
 801e402:	6818      	ldr	r0, [r3, #0]
 801e404:	4770      	bx	lr
 801e406:	bf00      	nop
 801e408:	20000080 	.word	0x20000080

0801e40c <fiprintf>:
 801e40c:	b40e      	push	{r1, r2, r3}
 801e40e:	b503      	push	{r0, r1, lr}
 801e410:	4601      	mov	r1, r0
 801e412:	ab03      	add	r3, sp, #12
 801e414:	4805      	ldr	r0, [pc, #20]	; (801e42c <fiprintf+0x20>)
 801e416:	f853 2b04 	ldr.w	r2, [r3], #4
 801e41a:	6800      	ldr	r0, [r0, #0]
 801e41c:	9301      	str	r3, [sp, #4]
 801e41e:	f000 f921 	bl	801e664 <_vfiprintf_r>
 801e422:	b002      	add	sp, #8
 801e424:	f85d eb04 	ldr.w	lr, [sp], #4
 801e428:	b003      	add	sp, #12
 801e42a:	4770      	bx	lr
 801e42c:	20000080 	.word	0x20000080

0801e430 <__libc_init_array>:
 801e430:	b570      	push	{r4, r5, r6, lr}
 801e432:	4e0d      	ldr	r6, [pc, #52]	; (801e468 <__libc_init_array+0x38>)
 801e434:	4c0d      	ldr	r4, [pc, #52]	; (801e46c <__libc_init_array+0x3c>)
 801e436:	1ba4      	subs	r4, r4, r6
 801e438:	10a4      	asrs	r4, r4, #2
 801e43a:	2500      	movs	r5, #0
 801e43c:	42a5      	cmp	r5, r4
 801e43e:	d109      	bne.n	801e454 <__libc_init_array+0x24>
 801e440:	4e0b      	ldr	r6, [pc, #44]	; (801e470 <__libc_init_array+0x40>)
 801e442:	4c0c      	ldr	r4, [pc, #48]	; (801e474 <__libc_init_array+0x44>)
 801e444:	f000 ffb0 	bl	801f3a8 <_init>
 801e448:	1ba4      	subs	r4, r4, r6
 801e44a:	10a4      	asrs	r4, r4, #2
 801e44c:	2500      	movs	r5, #0
 801e44e:	42a5      	cmp	r5, r4
 801e450:	d105      	bne.n	801e45e <__libc_init_array+0x2e>
 801e452:	bd70      	pop	{r4, r5, r6, pc}
 801e454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e458:	4798      	blx	r3
 801e45a:	3501      	adds	r5, #1
 801e45c:	e7ee      	b.n	801e43c <__libc_init_array+0xc>
 801e45e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e462:	4798      	blx	r3
 801e464:	3501      	adds	r5, #1
 801e466:	e7f2      	b.n	801e44e <__libc_init_array+0x1e>
 801e468:	08049c20 	.word	0x08049c20
 801e46c:	08049c20 	.word	0x08049c20
 801e470:	08049c20 	.word	0x08049c20
 801e474:	08049c30 	.word	0x08049c30

0801e478 <malloc>:
 801e478:	4b02      	ldr	r3, [pc, #8]	; (801e484 <malloc+0xc>)
 801e47a:	4601      	mov	r1, r0
 801e47c:	6818      	ldr	r0, [r3, #0]
 801e47e:	f000 b86d 	b.w	801e55c <_malloc_r>
 801e482:	bf00      	nop
 801e484:	20000080 	.word	0x20000080

0801e488 <free>:
 801e488:	4b02      	ldr	r3, [pc, #8]	; (801e494 <free+0xc>)
 801e48a:	4601      	mov	r1, r0
 801e48c:	6818      	ldr	r0, [r3, #0]
 801e48e:	f000 b817 	b.w	801e4c0 <_free_r>
 801e492:	bf00      	nop
 801e494:	20000080 	.word	0x20000080

0801e498 <memcpy>:
 801e498:	b510      	push	{r4, lr}
 801e49a:	1e43      	subs	r3, r0, #1
 801e49c:	440a      	add	r2, r1
 801e49e:	4291      	cmp	r1, r2
 801e4a0:	d100      	bne.n	801e4a4 <memcpy+0xc>
 801e4a2:	bd10      	pop	{r4, pc}
 801e4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e4a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e4ac:	e7f7      	b.n	801e49e <memcpy+0x6>

0801e4ae <memset>:
 801e4ae:	4402      	add	r2, r0
 801e4b0:	4603      	mov	r3, r0
 801e4b2:	4293      	cmp	r3, r2
 801e4b4:	d100      	bne.n	801e4b8 <memset+0xa>
 801e4b6:	4770      	bx	lr
 801e4b8:	f803 1b01 	strb.w	r1, [r3], #1
 801e4bc:	e7f9      	b.n	801e4b2 <memset+0x4>
	...

0801e4c0 <_free_r>:
 801e4c0:	b538      	push	{r3, r4, r5, lr}
 801e4c2:	4605      	mov	r5, r0
 801e4c4:	2900      	cmp	r1, #0
 801e4c6:	d045      	beq.n	801e554 <_free_r+0x94>
 801e4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e4cc:	1f0c      	subs	r4, r1, #4
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	bfb8      	it	lt
 801e4d2:	18e4      	addlt	r4, r4, r3
 801e4d4:	f000 feba 	bl	801f24c <__malloc_lock>
 801e4d8:	4a1f      	ldr	r2, [pc, #124]	; (801e558 <_free_r+0x98>)
 801e4da:	6813      	ldr	r3, [r2, #0]
 801e4dc:	4610      	mov	r0, r2
 801e4de:	b933      	cbnz	r3, 801e4ee <_free_r+0x2e>
 801e4e0:	6063      	str	r3, [r4, #4]
 801e4e2:	6014      	str	r4, [r2, #0]
 801e4e4:	4628      	mov	r0, r5
 801e4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4ea:	f000 beb0 	b.w	801f24e <__malloc_unlock>
 801e4ee:	42a3      	cmp	r3, r4
 801e4f0:	d90c      	bls.n	801e50c <_free_r+0x4c>
 801e4f2:	6821      	ldr	r1, [r4, #0]
 801e4f4:	1862      	adds	r2, r4, r1
 801e4f6:	4293      	cmp	r3, r2
 801e4f8:	bf04      	itt	eq
 801e4fa:	681a      	ldreq	r2, [r3, #0]
 801e4fc:	685b      	ldreq	r3, [r3, #4]
 801e4fe:	6063      	str	r3, [r4, #4]
 801e500:	bf04      	itt	eq
 801e502:	1852      	addeq	r2, r2, r1
 801e504:	6022      	streq	r2, [r4, #0]
 801e506:	6004      	str	r4, [r0, #0]
 801e508:	e7ec      	b.n	801e4e4 <_free_r+0x24>
 801e50a:	4613      	mov	r3, r2
 801e50c:	685a      	ldr	r2, [r3, #4]
 801e50e:	b10a      	cbz	r2, 801e514 <_free_r+0x54>
 801e510:	42a2      	cmp	r2, r4
 801e512:	d9fa      	bls.n	801e50a <_free_r+0x4a>
 801e514:	6819      	ldr	r1, [r3, #0]
 801e516:	1858      	adds	r0, r3, r1
 801e518:	42a0      	cmp	r0, r4
 801e51a:	d10b      	bne.n	801e534 <_free_r+0x74>
 801e51c:	6820      	ldr	r0, [r4, #0]
 801e51e:	4401      	add	r1, r0
 801e520:	1858      	adds	r0, r3, r1
 801e522:	4282      	cmp	r2, r0
 801e524:	6019      	str	r1, [r3, #0]
 801e526:	d1dd      	bne.n	801e4e4 <_free_r+0x24>
 801e528:	6810      	ldr	r0, [r2, #0]
 801e52a:	6852      	ldr	r2, [r2, #4]
 801e52c:	605a      	str	r2, [r3, #4]
 801e52e:	4401      	add	r1, r0
 801e530:	6019      	str	r1, [r3, #0]
 801e532:	e7d7      	b.n	801e4e4 <_free_r+0x24>
 801e534:	d902      	bls.n	801e53c <_free_r+0x7c>
 801e536:	230c      	movs	r3, #12
 801e538:	602b      	str	r3, [r5, #0]
 801e53a:	e7d3      	b.n	801e4e4 <_free_r+0x24>
 801e53c:	6820      	ldr	r0, [r4, #0]
 801e53e:	1821      	adds	r1, r4, r0
 801e540:	428a      	cmp	r2, r1
 801e542:	bf04      	itt	eq
 801e544:	6811      	ldreq	r1, [r2, #0]
 801e546:	6852      	ldreq	r2, [r2, #4]
 801e548:	6062      	str	r2, [r4, #4]
 801e54a:	bf04      	itt	eq
 801e54c:	1809      	addeq	r1, r1, r0
 801e54e:	6021      	streq	r1, [r4, #0]
 801e550:	605c      	str	r4, [r3, #4]
 801e552:	e7c7      	b.n	801e4e4 <_free_r+0x24>
 801e554:	bd38      	pop	{r3, r4, r5, pc}
 801e556:	bf00      	nop
 801e558:	20009b58 	.word	0x20009b58

0801e55c <_malloc_r>:
 801e55c:	b570      	push	{r4, r5, r6, lr}
 801e55e:	1ccd      	adds	r5, r1, #3
 801e560:	f025 0503 	bic.w	r5, r5, #3
 801e564:	3508      	adds	r5, #8
 801e566:	2d0c      	cmp	r5, #12
 801e568:	bf38      	it	cc
 801e56a:	250c      	movcc	r5, #12
 801e56c:	2d00      	cmp	r5, #0
 801e56e:	4606      	mov	r6, r0
 801e570:	db01      	blt.n	801e576 <_malloc_r+0x1a>
 801e572:	42a9      	cmp	r1, r5
 801e574:	d903      	bls.n	801e57e <_malloc_r+0x22>
 801e576:	230c      	movs	r3, #12
 801e578:	6033      	str	r3, [r6, #0]
 801e57a:	2000      	movs	r0, #0
 801e57c:	bd70      	pop	{r4, r5, r6, pc}
 801e57e:	f000 fe65 	bl	801f24c <__malloc_lock>
 801e582:	4a21      	ldr	r2, [pc, #132]	; (801e608 <_malloc_r+0xac>)
 801e584:	6814      	ldr	r4, [r2, #0]
 801e586:	4621      	mov	r1, r4
 801e588:	b991      	cbnz	r1, 801e5b0 <_malloc_r+0x54>
 801e58a:	4c20      	ldr	r4, [pc, #128]	; (801e60c <_malloc_r+0xb0>)
 801e58c:	6823      	ldr	r3, [r4, #0]
 801e58e:	b91b      	cbnz	r3, 801e598 <_malloc_r+0x3c>
 801e590:	4630      	mov	r0, r6
 801e592:	f000 fb05 	bl	801eba0 <_sbrk_r>
 801e596:	6020      	str	r0, [r4, #0]
 801e598:	4629      	mov	r1, r5
 801e59a:	4630      	mov	r0, r6
 801e59c:	f000 fb00 	bl	801eba0 <_sbrk_r>
 801e5a0:	1c43      	adds	r3, r0, #1
 801e5a2:	d124      	bne.n	801e5ee <_malloc_r+0x92>
 801e5a4:	230c      	movs	r3, #12
 801e5a6:	6033      	str	r3, [r6, #0]
 801e5a8:	4630      	mov	r0, r6
 801e5aa:	f000 fe50 	bl	801f24e <__malloc_unlock>
 801e5ae:	e7e4      	b.n	801e57a <_malloc_r+0x1e>
 801e5b0:	680b      	ldr	r3, [r1, #0]
 801e5b2:	1b5b      	subs	r3, r3, r5
 801e5b4:	d418      	bmi.n	801e5e8 <_malloc_r+0x8c>
 801e5b6:	2b0b      	cmp	r3, #11
 801e5b8:	d90f      	bls.n	801e5da <_malloc_r+0x7e>
 801e5ba:	600b      	str	r3, [r1, #0]
 801e5bc:	50cd      	str	r5, [r1, r3]
 801e5be:	18cc      	adds	r4, r1, r3
 801e5c0:	4630      	mov	r0, r6
 801e5c2:	f000 fe44 	bl	801f24e <__malloc_unlock>
 801e5c6:	f104 000b 	add.w	r0, r4, #11
 801e5ca:	1d23      	adds	r3, r4, #4
 801e5cc:	f020 0007 	bic.w	r0, r0, #7
 801e5d0:	1ac3      	subs	r3, r0, r3
 801e5d2:	d0d3      	beq.n	801e57c <_malloc_r+0x20>
 801e5d4:	425a      	negs	r2, r3
 801e5d6:	50e2      	str	r2, [r4, r3]
 801e5d8:	e7d0      	b.n	801e57c <_malloc_r+0x20>
 801e5da:	428c      	cmp	r4, r1
 801e5dc:	684b      	ldr	r3, [r1, #4]
 801e5de:	bf16      	itet	ne
 801e5e0:	6063      	strne	r3, [r4, #4]
 801e5e2:	6013      	streq	r3, [r2, #0]
 801e5e4:	460c      	movne	r4, r1
 801e5e6:	e7eb      	b.n	801e5c0 <_malloc_r+0x64>
 801e5e8:	460c      	mov	r4, r1
 801e5ea:	6849      	ldr	r1, [r1, #4]
 801e5ec:	e7cc      	b.n	801e588 <_malloc_r+0x2c>
 801e5ee:	1cc4      	adds	r4, r0, #3
 801e5f0:	f024 0403 	bic.w	r4, r4, #3
 801e5f4:	42a0      	cmp	r0, r4
 801e5f6:	d005      	beq.n	801e604 <_malloc_r+0xa8>
 801e5f8:	1a21      	subs	r1, r4, r0
 801e5fa:	4630      	mov	r0, r6
 801e5fc:	f000 fad0 	bl	801eba0 <_sbrk_r>
 801e600:	3001      	adds	r0, #1
 801e602:	d0cf      	beq.n	801e5a4 <_malloc_r+0x48>
 801e604:	6025      	str	r5, [r4, #0]
 801e606:	e7db      	b.n	801e5c0 <_malloc_r+0x64>
 801e608:	20009b58 	.word	0x20009b58
 801e60c:	20009b5c 	.word	0x20009b5c

0801e610 <__sfputc_r>:
 801e610:	6893      	ldr	r3, [r2, #8]
 801e612:	3b01      	subs	r3, #1
 801e614:	2b00      	cmp	r3, #0
 801e616:	b410      	push	{r4}
 801e618:	6093      	str	r3, [r2, #8]
 801e61a:	da08      	bge.n	801e62e <__sfputc_r+0x1e>
 801e61c:	6994      	ldr	r4, [r2, #24]
 801e61e:	42a3      	cmp	r3, r4
 801e620:	db01      	blt.n	801e626 <__sfputc_r+0x16>
 801e622:	290a      	cmp	r1, #10
 801e624:	d103      	bne.n	801e62e <__sfputc_r+0x1e>
 801e626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e62a:	f000 bb0d 	b.w	801ec48 <__swbuf_r>
 801e62e:	6813      	ldr	r3, [r2, #0]
 801e630:	1c58      	adds	r0, r3, #1
 801e632:	6010      	str	r0, [r2, #0]
 801e634:	7019      	strb	r1, [r3, #0]
 801e636:	4608      	mov	r0, r1
 801e638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e63c:	4770      	bx	lr

0801e63e <__sfputs_r>:
 801e63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e640:	4606      	mov	r6, r0
 801e642:	460f      	mov	r7, r1
 801e644:	4614      	mov	r4, r2
 801e646:	18d5      	adds	r5, r2, r3
 801e648:	42ac      	cmp	r4, r5
 801e64a:	d101      	bne.n	801e650 <__sfputs_r+0x12>
 801e64c:	2000      	movs	r0, #0
 801e64e:	e007      	b.n	801e660 <__sfputs_r+0x22>
 801e650:	463a      	mov	r2, r7
 801e652:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e656:	4630      	mov	r0, r6
 801e658:	f7ff ffda 	bl	801e610 <__sfputc_r>
 801e65c:	1c43      	adds	r3, r0, #1
 801e65e:	d1f3      	bne.n	801e648 <__sfputs_r+0xa>
 801e660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e664 <_vfiprintf_r>:
 801e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e668:	460c      	mov	r4, r1
 801e66a:	b09d      	sub	sp, #116	; 0x74
 801e66c:	4617      	mov	r7, r2
 801e66e:	461d      	mov	r5, r3
 801e670:	4606      	mov	r6, r0
 801e672:	b118      	cbz	r0, 801e67c <_vfiprintf_r+0x18>
 801e674:	6983      	ldr	r3, [r0, #24]
 801e676:	b90b      	cbnz	r3, 801e67c <_vfiprintf_r+0x18>
 801e678:	f000 fcfa 	bl	801f070 <__sinit>
 801e67c:	4b7c      	ldr	r3, [pc, #496]	; (801e870 <_vfiprintf_r+0x20c>)
 801e67e:	429c      	cmp	r4, r3
 801e680:	d158      	bne.n	801e734 <_vfiprintf_r+0xd0>
 801e682:	6874      	ldr	r4, [r6, #4]
 801e684:	89a3      	ldrh	r3, [r4, #12]
 801e686:	0718      	lsls	r0, r3, #28
 801e688:	d55e      	bpl.n	801e748 <_vfiprintf_r+0xe4>
 801e68a:	6923      	ldr	r3, [r4, #16]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d05b      	beq.n	801e748 <_vfiprintf_r+0xe4>
 801e690:	2300      	movs	r3, #0
 801e692:	9309      	str	r3, [sp, #36]	; 0x24
 801e694:	2320      	movs	r3, #32
 801e696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e69a:	2330      	movs	r3, #48	; 0x30
 801e69c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6a0:	9503      	str	r5, [sp, #12]
 801e6a2:	f04f 0b01 	mov.w	fp, #1
 801e6a6:	46b8      	mov	r8, r7
 801e6a8:	4645      	mov	r5, r8
 801e6aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e6ae:	b10b      	cbz	r3, 801e6b4 <_vfiprintf_r+0x50>
 801e6b0:	2b25      	cmp	r3, #37	; 0x25
 801e6b2:	d154      	bne.n	801e75e <_vfiprintf_r+0xfa>
 801e6b4:	ebb8 0a07 	subs.w	sl, r8, r7
 801e6b8:	d00b      	beq.n	801e6d2 <_vfiprintf_r+0x6e>
 801e6ba:	4653      	mov	r3, sl
 801e6bc:	463a      	mov	r2, r7
 801e6be:	4621      	mov	r1, r4
 801e6c0:	4630      	mov	r0, r6
 801e6c2:	f7ff ffbc 	bl	801e63e <__sfputs_r>
 801e6c6:	3001      	adds	r0, #1
 801e6c8:	f000 80c2 	beq.w	801e850 <_vfiprintf_r+0x1ec>
 801e6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6ce:	4453      	add	r3, sl
 801e6d0:	9309      	str	r3, [sp, #36]	; 0x24
 801e6d2:	f898 3000 	ldrb.w	r3, [r8]
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	f000 80ba 	beq.w	801e850 <_vfiprintf_r+0x1ec>
 801e6dc:	2300      	movs	r3, #0
 801e6de:	f04f 32ff 	mov.w	r2, #4294967295
 801e6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e6e6:	9304      	str	r3, [sp, #16]
 801e6e8:	9307      	str	r3, [sp, #28]
 801e6ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e6ee:	931a      	str	r3, [sp, #104]	; 0x68
 801e6f0:	46a8      	mov	r8, r5
 801e6f2:	2205      	movs	r2, #5
 801e6f4:	f818 1b01 	ldrb.w	r1, [r8], #1
 801e6f8:	485e      	ldr	r0, [pc, #376]	; (801e874 <_vfiprintf_r+0x210>)
 801e6fa:	f7e1 fd89 	bl	8000210 <memchr>
 801e6fe:	9b04      	ldr	r3, [sp, #16]
 801e700:	bb78      	cbnz	r0, 801e762 <_vfiprintf_r+0xfe>
 801e702:	06d9      	lsls	r1, r3, #27
 801e704:	bf44      	itt	mi
 801e706:	2220      	movmi	r2, #32
 801e708:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e70c:	071a      	lsls	r2, r3, #28
 801e70e:	bf44      	itt	mi
 801e710:	222b      	movmi	r2, #43	; 0x2b
 801e712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e716:	782a      	ldrb	r2, [r5, #0]
 801e718:	2a2a      	cmp	r2, #42	; 0x2a
 801e71a:	d02a      	beq.n	801e772 <_vfiprintf_r+0x10e>
 801e71c:	9a07      	ldr	r2, [sp, #28]
 801e71e:	46a8      	mov	r8, r5
 801e720:	2000      	movs	r0, #0
 801e722:	250a      	movs	r5, #10
 801e724:	4641      	mov	r1, r8
 801e726:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e72a:	3b30      	subs	r3, #48	; 0x30
 801e72c:	2b09      	cmp	r3, #9
 801e72e:	d969      	bls.n	801e804 <_vfiprintf_r+0x1a0>
 801e730:	b360      	cbz	r0, 801e78c <_vfiprintf_r+0x128>
 801e732:	e024      	b.n	801e77e <_vfiprintf_r+0x11a>
 801e734:	4b50      	ldr	r3, [pc, #320]	; (801e878 <_vfiprintf_r+0x214>)
 801e736:	429c      	cmp	r4, r3
 801e738:	d101      	bne.n	801e73e <_vfiprintf_r+0xda>
 801e73a:	68b4      	ldr	r4, [r6, #8]
 801e73c:	e7a2      	b.n	801e684 <_vfiprintf_r+0x20>
 801e73e:	4b4f      	ldr	r3, [pc, #316]	; (801e87c <_vfiprintf_r+0x218>)
 801e740:	429c      	cmp	r4, r3
 801e742:	bf08      	it	eq
 801e744:	68f4      	ldreq	r4, [r6, #12]
 801e746:	e79d      	b.n	801e684 <_vfiprintf_r+0x20>
 801e748:	4621      	mov	r1, r4
 801e74a:	4630      	mov	r0, r6
 801e74c:	f000 face 	bl	801ecec <__swsetup_r>
 801e750:	2800      	cmp	r0, #0
 801e752:	d09d      	beq.n	801e690 <_vfiprintf_r+0x2c>
 801e754:	f04f 30ff 	mov.w	r0, #4294967295
 801e758:	b01d      	add	sp, #116	; 0x74
 801e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e75e:	46a8      	mov	r8, r5
 801e760:	e7a2      	b.n	801e6a8 <_vfiprintf_r+0x44>
 801e762:	4a44      	ldr	r2, [pc, #272]	; (801e874 <_vfiprintf_r+0x210>)
 801e764:	1a80      	subs	r0, r0, r2
 801e766:	fa0b f000 	lsl.w	r0, fp, r0
 801e76a:	4318      	orrs	r0, r3
 801e76c:	9004      	str	r0, [sp, #16]
 801e76e:	4645      	mov	r5, r8
 801e770:	e7be      	b.n	801e6f0 <_vfiprintf_r+0x8c>
 801e772:	9a03      	ldr	r2, [sp, #12]
 801e774:	1d11      	adds	r1, r2, #4
 801e776:	6812      	ldr	r2, [r2, #0]
 801e778:	9103      	str	r1, [sp, #12]
 801e77a:	2a00      	cmp	r2, #0
 801e77c:	db01      	blt.n	801e782 <_vfiprintf_r+0x11e>
 801e77e:	9207      	str	r2, [sp, #28]
 801e780:	e004      	b.n	801e78c <_vfiprintf_r+0x128>
 801e782:	4252      	negs	r2, r2
 801e784:	f043 0302 	orr.w	r3, r3, #2
 801e788:	9207      	str	r2, [sp, #28]
 801e78a:	9304      	str	r3, [sp, #16]
 801e78c:	f898 3000 	ldrb.w	r3, [r8]
 801e790:	2b2e      	cmp	r3, #46	; 0x2e
 801e792:	d10e      	bne.n	801e7b2 <_vfiprintf_r+0x14e>
 801e794:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e798:	2b2a      	cmp	r3, #42	; 0x2a
 801e79a:	d138      	bne.n	801e80e <_vfiprintf_r+0x1aa>
 801e79c:	9b03      	ldr	r3, [sp, #12]
 801e79e:	1d1a      	adds	r2, r3, #4
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	9203      	str	r2, [sp, #12]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	bfb8      	it	lt
 801e7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 801e7ac:	f108 0802 	add.w	r8, r8, #2
 801e7b0:	9305      	str	r3, [sp, #20]
 801e7b2:	4d33      	ldr	r5, [pc, #204]	; (801e880 <_vfiprintf_r+0x21c>)
 801e7b4:	f898 1000 	ldrb.w	r1, [r8]
 801e7b8:	2203      	movs	r2, #3
 801e7ba:	4628      	mov	r0, r5
 801e7bc:	f7e1 fd28 	bl	8000210 <memchr>
 801e7c0:	b140      	cbz	r0, 801e7d4 <_vfiprintf_r+0x170>
 801e7c2:	2340      	movs	r3, #64	; 0x40
 801e7c4:	1b40      	subs	r0, r0, r5
 801e7c6:	fa03 f000 	lsl.w	r0, r3, r0
 801e7ca:	9b04      	ldr	r3, [sp, #16]
 801e7cc:	4303      	orrs	r3, r0
 801e7ce:	f108 0801 	add.w	r8, r8, #1
 801e7d2:	9304      	str	r3, [sp, #16]
 801e7d4:	f898 1000 	ldrb.w	r1, [r8]
 801e7d8:	482a      	ldr	r0, [pc, #168]	; (801e884 <_vfiprintf_r+0x220>)
 801e7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e7de:	2206      	movs	r2, #6
 801e7e0:	f108 0701 	add.w	r7, r8, #1
 801e7e4:	f7e1 fd14 	bl	8000210 <memchr>
 801e7e8:	2800      	cmp	r0, #0
 801e7ea:	d037      	beq.n	801e85c <_vfiprintf_r+0x1f8>
 801e7ec:	4b26      	ldr	r3, [pc, #152]	; (801e888 <_vfiprintf_r+0x224>)
 801e7ee:	bb1b      	cbnz	r3, 801e838 <_vfiprintf_r+0x1d4>
 801e7f0:	9b03      	ldr	r3, [sp, #12]
 801e7f2:	3307      	adds	r3, #7
 801e7f4:	f023 0307 	bic.w	r3, r3, #7
 801e7f8:	3308      	adds	r3, #8
 801e7fa:	9303      	str	r3, [sp, #12]
 801e7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7fe:	444b      	add	r3, r9
 801e800:	9309      	str	r3, [sp, #36]	; 0x24
 801e802:	e750      	b.n	801e6a6 <_vfiprintf_r+0x42>
 801e804:	fb05 3202 	mla	r2, r5, r2, r3
 801e808:	2001      	movs	r0, #1
 801e80a:	4688      	mov	r8, r1
 801e80c:	e78a      	b.n	801e724 <_vfiprintf_r+0xc0>
 801e80e:	2300      	movs	r3, #0
 801e810:	f108 0801 	add.w	r8, r8, #1
 801e814:	9305      	str	r3, [sp, #20]
 801e816:	4619      	mov	r1, r3
 801e818:	250a      	movs	r5, #10
 801e81a:	4640      	mov	r0, r8
 801e81c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e820:	3a30      	subs	r2, #48	; 0x30
 801e822:	2a09      	cmp	r2, #9
 801e824:	d903      	bls.n	801e82e <_vfiprintf_r+0x1ca>
 801e826:	2b00      	cmp	r3, #0
 801e828:	d0c3      	beq.n	801e7b2 <_vfiprintf_r+0x14e>
 801e82a:	9105      	str	r1, [sp, #20]
 801e82c:	e7c1      	b.n	801e7b2 <_vfiprintf_r+0x14e>
 801e82e:	fb05 2101 	mla	r1, r5, r1, r2
 801e832:	2301      	movs	r3, #1
 801e834:	4680      	mov	r8, r0
 801e836:	e7f0      	b.n	801e81a <_vfiprintf_r+0x1b6>
 801e838:	ab03      	add	r3, sp, #12
 801e83a:	9300      	str	r3, [sp, #0]
 801e83c:	4622      	mov	r2, r4
 801e83e:	4b13      	ldr	r3, [pc, #76]	; (801e88c <_vfiprintf_r+0x228>)
 801e840:	a904      	add	r1, sp, #16
 801e842:	4630      	mov	r0, r6
 801e844:	f3af 8000 	nop.w
 801e848:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e84c:	4681      	mov	r9, r0
 801e84e:	d1d5      	bne.n	801e7fc <_vfiprintf_r+0x198>
 801e850:	89a3      	ldrh	r3, [r4, #12]
 801e852:	065b      	lsls	r3, r3, #25
 801e854:	f53f af7e 	bmi.w	801e754 <_vfiprintf_r+0xf0>
 801e858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e85a:	e77d      	b.n	801e758 <_vfiprintf_r+0xf4>
 801e85c:	ab03      	add	r3, sp, #12
 801e85e:	9300      	str	r3, [sp, #0]
 801e860:	4622      	mov	r2, r4
 801e862:	4b0a      	ldr	r3, [pc, #40]	; (801e88c <_vfiprintf_r+0x228>)
 801e864:	a904      	add	r1, sp, #16
 801e866:	4630      	mov	r0, r6
 801e868:	f000 f888 	bl	801e97c <_printf_i>
 801e86c:	e7ec      	b.n	801e848 <_vfiprintf_r+0x1e4>
 801e86e:	bf00      	nop
 801e870:	08021770 	.word	0x08021770
 801e874:	0802171c 	.word	0x0802171c
 801e878:	08021790 	.word	0x08021790
 801e87c:	08021750 	.word	0x08021750
 801e880:	08021722 	.word	0x08021722
 801e884:	08021726 	.word	0x08021726
 801e888:	00000000 	.word	0x00000000
 801e88c:	0801e63f 	.word	0x0801e63f

0801e890 <_printf_common>:
 801e890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e894:	4691      	mov	r9, r2
 801e896:	461f      	mov	r7, r3
 801e898:	688a      	ldr	r2, [r1, #8]
 801e89a:	690b      	ldr	r3, [r1, #16]
 801e89c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e8a0:	4293      	cmp	r3, r2
 801e8a2:	bfb8      	it	lt
 801e8a4:	4613      	movlt	r3, r2
 801e8a6:	f8c9 3000 	str.w	r3, [r9]
 801e8aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e8ae:	4606      	mov	r6, r0
 801e8b0:	460c      	mov	r4, r1
 801e8b2:	b112      	cbz	r2, 801e8ba <_printf_common+0x2a>
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	f8c9 3000 	str.w	r3, [r9]
 801e8ba:	6823      	ldr	r3, [r4, #0]
 801e8bc:	0699      	lsls	r1, r3, #26
 801e8be:	bf42      	ittt	mi
 801e8c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e8c4:	3302      	addmi	r3, #2
 801e8c6:	f8c9 3000 	strmi.w	r3, [r9]
 801e8ca:	6825      	ldr	r5, [r4, #0]
 801e8cc:	f015 0506 	ands.w	r5, r5, #6
 801e8d0:	d107      	bne.n	801e8e2 <_printf_common+0x52>
 801e8d2:	f104 0a19 	add.w	sl, r4, #25
 801e8d6:	68e3      	ldr	r3, [r4, #12]
 801e8d8:	f8d9 2000 	ldr.w	r2, [r9]
 801e8dc:	1a9b      	subs	r3, r3, r2
 801e8de:	42ab      	cmp	r3, r5
 801e8e0:	dc28      	bgt.n	801e934 <_printf_common+0xa4>
 801e8e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e8e6:	6822      	ldr	r2, [r4, #0]
 801e8e8:	3300      	adds	r3, #0
 801e8ea:	bf18      	it	ne
 801e8ec:	2301      	movne	r3, #1
 801e8ee:	0692      	lsls	r2, r2, #26
 801e8f0:	d42d      	bmi.n	801e94e <_printf_common+0xbe>
 801e8f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e8f6:	4639      	mov	r1, r7
 801e8f8:	4630      	mov	r0, r6
 801e8fa:	47c0      	blx	r8
 801e8fc:	3001      	adds	r0, #1
 801e8fe:	d020      	beq.n	801e942 <_printf_common+0xb2>
 801e900:	6823      	ldr	r3, [r4, #0]
 801e902:	68e5      	ldr	r5, [r4, #12]
 801e904:	f8d9 2000 	ldr.w	r2, [r9]
 801e908:	f003 0306 	and.w	r3, r3, #6
 801e90c:	2b04      	cmp	r3, #4
 801e90e:	bf08      	it	eq
 801e910:	1aad      	subeq	r5, r5, r2
 801e912:	68a3      	ldr	r3, [r4, #8]
 801e914:	6922      	ldr	r2, [r4, #16]
 801e916:	bf0c      	ite	eq
 801e918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e91c:	2500      	movne	r5, #0
 801e91e:	4293      	cmp	r3, r2
 801e920:	bfc4      	itt	gt
 801e922:	1a9b      	subgt	r3, r3, r2
 801e924:	18ed      	addgt	r5, r5, r3
 801e926:	f04f 0900 	mov.w	r9, #0
 801e92a:	341a      	adds	r4, #26
 801e92c:	454d      	cmp	r5, r9
 801e92e:	d11a      	bne.n	801e966 <_printf_common+0xd6>
 801e930:	2000      	movs	r0, #0
 801e932:	e008      	b.n	801e946 <_printf_common+0xb6>
 801e934:	2301      	movs	r3, #1
 801e936:	4652      	mov	r2, sl
 801e938:	4639      	mov	r1, r7
 801e93a:	4630      	mov	r0, r6
 801e93c:	47c0      	blx	r8
 801e93e:	3001      	adds	r0, #1
 801e940:	d103      	bne.n	801e94a <_printf_common+0xba>
 801e942:	f04f 30ff 	mov.w	r0, #4294967295
 801e946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e94a:	3501      	adds	r5, #1
 801e94c:	e7c3      	b.n	801e8d6 <_printf_common+0x46>
 801e94e:	18e1      	adds	r1, r4, r3
 801e950:	1c5a      	adds	r2, r3, #1
 801e952:	2030      	movs	r0, #48	; 0x30
 801e954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e958:	4422      	add	r2, r4
 801e95a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e95e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e962:	3302      	adds	r3, #2
 801e964:	e7c5      	b.n	801e8f2 <_printf_common+0x62>
 801e966:	2301      	movs	r3, #1
 801e968:	4622      	mov	r2, r4
 801e96a:	4639      	mov	r1, r7
 801e96c:	4630      	mov	r0, r6
 801e96e:	47c0      	blx	r8
 801e970:	3001      	adds	r0, #1
 801e972:	d0e6      	beq.n	801e942 <_printf_common+0xb2>
 801e974:	f109 0901 	add.w	r9, r9, #1
 801e978:	e7d8      	b.n	801e92c <_printf_common+0x9c>
	...

0801e97c <_printf_i>:
 801e97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e980:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e984:	460c      	mov	r4, r1
 801e986:	7e09      	ldrb	r1, [r1, #24]
 801e988:	b085      	sub	sp, #20
 801e98a:	296e      	cmp	r1, #110	; 0x6e
 801e98c:	4617      	mov	r7, r2
 801e98e:	4606      	mov	r6, r0
 801e990:	4698      	mov	r8, r3
 801e992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e994:	f000 80b3 	beq.w	801eafe <_printf_i+0x182>
 801e998:	d822      	bhi.n	801e9e0 <_printf_i+0x64>
 801e99a:	2963      	cmp	r1, #99	; 0x63
 801e99c:	d036      	beq.n	801ea0c <_printf_i+0x90>
 801e99e:	d80a      	bhi.n	801e9b6 <_printf_i+0x3a>
 801e9a0:	2900      	cmp	r1, #0
 801e9a2:	f000 80b9 	beq.w	801eb18 <_printf_i+0x19c>
 801e9a6:	2958      	cmp	r1, #88	; 0x58
 801e9a8:	f000 8083 	beq.w	801eab2 <_printf_i+0x136>
 801e9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e9b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e9b4:	e032      	b.n	801ea1c <_printf_i+0xa0>
 801e9b6:	2964      	cmp	r1, #100	; 0x64
 801e9b8:	d001      	beq.n	801e9be <_printf_i+0x42>
 801e9ba:	2969      	cmp	r1, #105	; 0x69
 801e9bc:	d1f6      	bne.n	801e9ac <_printf_i+0x30>
 801e9be:	6820      	ldr	r0, [r4, #0]
 801e9c0:	6813      	ldr	r3, [r2, #0]
 801e9c2:	0605      	lsls	r5, r0, #24
 801e9c4:	f103 0104 	add.w	r1, r3, #4
 801e9c8:	d52a      	bpl.n	801ea20 <_printf_i+0xa4>
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	6011      	str	r1, [r2, #0]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	da03      	bge.n	801e9da <_printf_i+0x5e>
 801e9d2:	222d      	movs	r2, #45	; 0x2d
 801e9d4:	425b      	negs	r3, r3
 801e9d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e9da:	486f      	ldr	r0, [pc, #444]	; (801eb98 <_printf_i+0x21c>)
 801e9dc:	220a      	movs	r2, #10
 801e9de:	e039      	b.n	801ea54 <_printf_i+0xd8>
 801e9e0:	2973      	cmp	r1, #115	; 0x73
 801e9e2:	f000 809d 	beq.w	801eb20 <_printf_i+0x1a4>
 801e9e6:	d808      	bhi.n	801e9fa <_printf_i+0x7e>
 801e9e8:	296f      	cmp	r1, #111	; 0x6f
 801e9ea:	d020      	beq.n	801ea2e <_printf_i+0xb2>
 801e9ec:	2970      	cmp	r1, #112	; 0x70
 801e9ee:	d1dd      	bne.n	801e9ac <_printf_i+0x30>
 801e9f0:	6823      	ldr	r3, [r4, #0]
 801e9f2:	f043 0320 	orr.w	r3, r3, #32
 801e9f6:	6023      	str	r3, [r4, #0]
 801e9f8:	e003      	b.n	801ea02 <_printf_i+0x86>
 801e9fa:	2975      	cmp	r1, #117	; 0x75
 801e9fc:	d017      	beq.n	801ea2e <_printf_i+0xb2>
 801e9fe:	2978      	cmp	r1, #120	; 0x78
 801ea00:	d1d4      	bne.n	801e9ac <_printf_i+0x30>
 801ea02:	2378      	movs	r3, #120	; 0x78
 801ea04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ea08:	4864      	ldr	r0, [pc, #400]	; (801eb9c <_printf_i+0x220>)
 801ea0a:	e055      	b.n	801eab8 <_printf_i+0x13c>
 801ea0c:	6813      	ldr	r3, [r2, #0]
 801ea0e:	1d19      	adds	r1, r3, #4
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	6011      	str	r1, [r2, #0]
 801ea14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ea18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea1c:	2301      	movs	r3, #1
 801ea1e:	e08c      	b.n	801eb3a <_printf_i+0x1be>
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	6011      	str	r1, [r2, #0]
 801ea24:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ea28:	bf18      	it	ne
 801ea2a:	b21b      	sxthne	r3, r3
 801ea2c:	e7cf      	b.n	801e9ce <_printf_i+0x52>
 801ea2e:	6813      	ldr	r3, [r2, #0]
 801ea30:	6825      	ldr	r5, [r4, #0]
 801ea32:	1d18      	adds	r0, r3, #4
 801ea34:	6010      	str	r0, [r2, #0]
 801ea36:	0628      	lsls	r0, r5, #24
 801ea38:	d501      	bpl.n	801ea3e <_printf_i+0xc2>
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	e002      	b.n	801ea44 <_printf_i+0xc8>
 801ea3e:	0668      	lsls	r0, r5, #25
 801ea40:	d5fb      	bpl.n	801ea3a <_printf_i+0xbe>
 801ea42:	881b      	ldrh	r3, [r3, #0]
 801ea44:	4854      	ldr	r0, [pc, #336]	; (801eb98 <_printf_i+0x21c>)
 801ea46:	296f      	cmp	r1, #111	; 0x6f
 801ea48:	bf14      	ite	ne
 801ea4a:	220a      	movne	r2, #10
 801ea4c:	2208      	moveq	r2, #8
 801ea4e:	2100      	movs	r1, #0
 801ea50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ea54:	6865      	ldr	r5, [r4, #4]
 801ea56:	60a5      	str	r5, [r4, #8]
 801ea58:	2d00      	cmp	r5, #0
 801ea5a:	f2c0 8095 	blt.w	801eb88 <_printf_i+0x20c>
 801ea5e:	6821      	ldr	r1, [r4, #0]
 801ea60:	f021 0104 	bic.w	r1, r1, #4
 801ea64:	6021      	str	r1, [r4, #0]
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d13d      	bne.n	801eae6 <_printf_i+0x16a>
 801ea6a:	2d00      	cmp	r5, #0
 801ea6c:	f040 808e 	bne.w	801eb8c <_printf_i+0x210>
 801ea70:	4665      	mov	r5, ip
 801ea72:	2a08      	cmp	r2, #8
 801ea74:	d10b      	bne.n	801ea8e <_printf_i+0x112>
 801ea76:	6823      	ldr	r3, [r4, #0]
 801ea78:	07db      	lsls	r3, r3, #31
 801ea7a:	d508      	bpl.n	801ea8e <_printf_i+0x112>
 801ea7c:	6923      	ldr	r3, [r4, #16]
 801ea7e:	6862      	ldr	r2, [r4, #4]
 801ea80:	429a      	cmp	r2, r3
 801ea82:	bfde      	ittt	le
 801ea84:	2330      	movle	r3, #48	; 0x30
 801ea86:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ea8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ea8e:	ebac 0305 	sub.w	r3, ip, r5
 801ea92:	6123      	str	r3, [r4, #16]
 801ea94:	f8cd 8000 	str.w	r8, [sp]
 801ea98:	463b      	mov	r3, r7
 801ea9a:	aa03      	add	r2, sp, #12
 801ea9c:	4621      	mov	r1, r4
 801ea9e:	4630      	mov	r0, r6
 801eaa0:	f7ff fef6 	bl	801e890 <_printf_common>
 801eaa4:	3001      	adds	r0, #1
 801eaa6:	d14d      	bne.n	801eb44 <_printf_i+0x1c8>
 801eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 801eaac:	b005      	add	sp, #20
 801eaae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eab2:	4839      	ldr	r0, [pc, #228]	; (801eb98 <_printf_i+0x21c>)
 801eab4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801eab8:	6813      	ldr	r3, [r2, #0]
 801eaba:	6821      	ldr	r1, [r4, #0]
 801eabc:	1d1d      	adds	r5, r3, #4
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	6015      	str	r5, [r2, #0]
 801eac2:	060a      	lsls	r2, r1, #24
 801eac4:	d50b      	bpl.n	801eade <_printf_i+0x162>
 801eac6:	07ca      	lsls	r2, r1, #31
 801eac8:	bf44      	itt	mi
 801eaca:	f041 0120 	orrmi.w	r1, r1, #32
 801eace:	6021      	strmi	r1, [r4, #0]
 801ead0:	b91b      	cbnz	r3, 801eada <_printf_i+0x15e>
 801ead2:	6822      	ldr	r2, [r4, #0]
 801ead4:	f022 0220 	bic.w	r2, r2, #32
 801ead8:	6022      	str	r2, [r4, #0]
 801eada:	2210      	movs	r2, #16
 801eadc:	e7b7      	b.n	801ea4e <_printf_i+0xd2>
 801eade:	064d      	lsls	r5, r1, #25
 801eae0:	bf48      	it	mi
 801eae2:	b29b      	uxthmi	r3, r3
 801eae4:	e7ef      	b.n	801eac6 <_printf_i+0x14a>
 801eae6:	4665      	mov	r5, ip
 801eae8:	fbb3 f1f2 	udiv	r1, r3, r2
 801eaec:	fb02 3311 	mls	r3, r2, r1, r3
 801eaf0:	5cc3      	ldrb	r3, [r0, r3]
 801eaf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801eaf6:	460b      	mov	r3, r1
 801eaf8:	2900      	cmp	r1, #0
 801eafa:	d1f5      	bne.n	801eae8 <_printf_i+0x16c>
 801eafc:	e7b9      	b.n	801ea72 <_printf_i+0xf6>
 801eafe:	6813      	ldr	r3, [r2, #0]
 801eb00:	6825      	ldr	r5, [r4, #0]
 801eb02:	6961      	ldr	r1, [r4, #20]
 801eb04:	1d18      	adds	r0, r3, #4
 801eb06:	6010      	str	r0, [r2, #0]
 801eb08:	0628      	lsls	r0, r5, #24
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	d501      	bpl.n	801eb12 <_printf_i+0x196>
 801eb0e:	6019      	str	r1, [r3, #0]
 801eb10:	e002      	b.n	801eb18 <_printf_i+0x19c>
 801eb12:	066a      	lsls	r2, r5, #25
 801eb14:	d5fb      	bpl.n	801eb0e <_printf_i+0x192>
 801eb16:	8019      	strh	r1, [r3, #0]
 801eb18:	2300      	movs	r3, #0
 801eb1a:	6123      	str	r3, [r4, #16]
 801eb1c:	4665      	mov	r5, ip
 801eb1e:	e7b9      	b.n	801ea94 <_printf_i+0x118>
 801eb20:	6813      	ldr	r3, [r2, #0]
 801eb22:	1d19      	adds	r1, r3, #4
 801eb24:	6011      	str	r1, [r2, #0]
 801eb26:	681d      	ldr	r5, [r3, #0]
 801eb28:	6862      	ldr	r2, [r4, #4]
 801eb2a:	2100      	movs	r1, #0
 801eb2c:	4628      	mov	r0, r5
 801eb2e:	f7e1 fb6f 	bl	8000210 <memchr>
 801eb32:	b108      	cbz	r0, 801eb38 <_printf_i+0x1bc>
 801eb34:	1b40      	subs	r0, r0, r5
 801eb36:	6060      	str	r0, [r4, #4]
 801eb38:	6863      	ldr	r3, [r4, #4]
 801eb3a:	6123      	str	r3, [r4, #16]
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb42:	e7a7      	b.n	801ea94 <_printf_i+0x118>
 801eb44:	6923      	ldr	r3, [r4, #16]
 801eb46:	462a      	mov	r2, r5
 801eb48:	4639      	mov	r1, r7
 801eb4a:	4630      	mov	r0, r6
 801eb4c:	47c0      	blx	r8
 801eb4e:	3001      	adds	r0, #1
 801eb50:	d0aa      	beq.n	801eaa8 <_printf_i+0x12c>
 801eb52:	6823      	ldr	r3, [r4, #0]
 801eb54:	079b      	lsls	r3, r3, #30
 801eb56:	d413      	bmi.n	801eb80 <_printf_i+0x204>
 801eb58:	68e0      	ldr	r0, [r4, #12]
 801eb5a:	9b03      	ldr	r3, [sp, #12]
 801eb5c:	4298      	cmp	r0, r3
 801eb5e:	bfb8      	it	lt
 801eb60:	4618      	movlt	r0, r3
 801eb62:	e7a3      	b.n	801eaac <_printf_i+0x130>
 801eb64:	2301      	movs	r3, #1
 801eb66:	464a      	mov	r2, r9
 801eb68:	4639      	mov	r1, r7
 801eb6a:	4630      	mov	r0, r6
 801eb6c:	47c0      	blx	r8
 801eb6e:	3001      	adds	r0, #1
 801eb70:	d09a      	beq.n	801eaa8 <_printf_i+0x12c>
 801eb72:	3501      	adds	r5, #1
 801eb74:	68e3      	ldr	r3, [r4, #12]
 801eb76:	9a03      	ldr	r2, [sp, #12]
 801eb78:	1a9b      	subs	r3, r3, r2
 801eb7a:	42ab      	cmp	r3, r5
 801eb7c:	dcf2      	bgt.n	801eb64 <_printf_i+0x1e8>
 801eb7e:	e7eb      	b.n	801eb58 <_printf_i+0x1dc>
 801eb80:	2500      	movs	r5, #0
 801eb82:	f104 0919 	add.w	r9, r4, #25
 801eb86:	e7f5      	b.n	801eb74 <_printf_i+0x1f8>
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	d1ac      	bne.n	801eae6 <_printf_i+0x16a>
 801eb8c:	7803      	ldrb	r3, [r0, #0]
 801eb8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eb92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eb96:	e76c      	b.n	801ea72 <_printf_i+0xf6>
 801eb98:	0802172d 	.word	0x0802172d
 801eb9c:	0802173e 	.word	0x0802173e

0801eba0 <_sbrk_r>:
 801eba0:	b538      	push	{r3, r4, r5, lr}
 801eba2:	4c06      	ldr	r4, [pc, #24]	; (801ebbc <_sbrk_r+0x1c>)
 801eba4:	2300      	movs	r3, #0
 801eba6:	4605      	mov	r5, r0
 801eba8:	4608      	mov	r0, r1
 801ebaa:	6023      	str	r3, [r4, #0]
 801ebac:	f7f9 f918 	bl	8017de0 <_sbrk>
 801ebb0:	1c43      	adds	r3, r0, #1
 801ebb2:	d102      	bne.n	801ebba <_sbrk_r+0x1a>
 801ebb4:	6823      	ldr	r3, [r4, #0]
 801ebb6:	b103      	cbz	r3, 801ebba <_sbrk_r+0x1a>
 801ebb8:	602b      	str	r3, [r5, #0]
 801ebba:	bd38      	pop	{r3, r4, r5, pc}
 801ebbc:	2000a73c 	.word	0x2000a73c

0801ebc0 <_raise_r>:
 801ebc0:	291f      	cmp	r1, #31
 801ebc2:	b538      	push	{r3, r4, r5, lr}
 801ebc4:	4604      	mov	r4, r0
 801ebc6:	460d      	mov	r5, r1
 801ebc8:	d904      	bls.n	801ebd4 <_raise_r+0x14>
 801ebca:	2316      	movs	r3, #22
 801ebcc:	6003      	str	r3, [r0, #0]
 801ebce:	f04f 30ff 	mov.w	r0, #4294967295
 801ebd2:	bd38      	pop	{r3, r4, r5, pc}
 801ebd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ebd6:	b112      	cbz	r2, 801ebde <_raise_r+0x1e>
 801ebd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ebdc:	b94b      	cbnz	r3, 801ebf2 <_raise_r+0x32>
 801ebde:	4620      	mov	r0, r4
 801ebe0:	f000 f830 	bl	801ec44 <_getpid_r>
 801ebe4:	462a      	mov	r2, r5
 801ebe6:	4601      	mov	r1, r0
 801ebe8:	4620      	mov	r0, r4
 801ebea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ebee:	f000 b817 	b.w	801ec20 <_kill_r>
 801ebf2:	2b01      	cmp	r3, #1
 801ebf4:	d00a      	beq.n	801ec0c <_raise_r+0x4c>
 801ebf6:	1c59      	adds	r1, r3, #1
 801ebf8:	d103      	bne.n	801ec02 <_raise_r+0x42>
 801ebfa:	2316      	movs	r3, #22
 801ebfc:	6003      	str	r3, [r0, #0]
 801ebfe:	2001      	movs	r0, #1
 801ec00:	e7e7      	b.n	801ebd2 <_raise_r+0x12>
 801ec02:	2400      	movs	r4, #0
 801ec04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ec08:	4628      	mov	r0, r5
 801ec0a:	4798      	blx	r3
 801ec0c:	2000      	movs	r0, #0
 801ec0e:	e7e0      	b.n	801ebd2 <_raise_r+0x12>

0801ec10 <raise>:
 801ec10:	4b02      	ldr	r3, [pc, #8]	; (801ec1c <raise+0xc>)
 801ec12:	4601      	mov	r1, r0
 801ec14:	6818      	ldr	r0, [r3, #0]
 801ec16:	f7ff bfd3 	b.w	801ebc0 <_raise_r>
 801ec1a:	bf00      	nop
 801ec1c:	20000080 	.word	0x20000080

0801ec20 <_kill_r>:
 801ec20:	b538      	push	{r3, r4, r5, lr}
 801ec22:	4c07      	ldr	r4, [pc, #28]	; (801ec40 <_kill_r+0x20>)
 801ec24:	2300      	movs	r3, #0
 801ec26:	4605      	mov	r5, r0
 801ec28:	4608      	mov	r0, r1
 801ec2a:	4611      	mov	r1, r2
 801ec2c:	6023      	str	r3, [r4, #0]
 801ec2e:	f7f9 f84f 	bl	8017cd0 <_kill>
 801ec32:	1c43      	adds	r3, r0, #1
 801ec34:	d102      	bne.n	801ec3c <_kill_r+0x1c>
 801ec36:	6823      	ldr	r3, [r4, #0]
 801ec38:	b103      	cbz	r3, 801ec3c <_kill_r+0x1c>
 801ec3a:	602b      	str	r3, [r5, #0]
 801ec3c:	bd38      	pop	{r3, r4, r5, pc}
 801ec3e:	bf00      	nop
 801ec40:	2000a73c 	.word	0x2000a73c

0801ec44 <_getpid_r>:
 801ec44:	f7f9 b83c 	b.w	8017cc0 <_getpid>

0801ec48 <__swbuf_r>:
 801ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec4a:	460e      	mov	r6, r1
 801ec4c:	4614      	mov	r4, r2
 801ec4e:	4605      	mov	r5, r0
 801ec50:	b118      	cbz	r0, 801ec5a <__swbuf_r+0x12>
 801ec52:	6983      	ldr	r3, [r0, #24]
 801ec54:	b90b      	cbnz	r3, 801ec5a <__swbuf_r+0x12>
 801ec56:	f000 fa0b 	bl	801f070 <__sinit>
 801ec5a:	4b21      	ldr	r3, [pc, #132]	; (801ece0 <__swbuf_r+0x98>)
 801ec5c:	429c      	cmp	r4, r3
 801ec5e:	d12a      	bne.n	801ecb6 <__swbuf_r+0x6e>
 801ec60:	686c      	ldr	r4, [r5, #4]
 801ec62:	69a3      	ldr	r3, [r4, #24]
 801ec64:	60a3      	str	r3, [r4, #8]
 801ec66:	89a3      	ldrh	r3, [r4, #12]
 801ec68:	071a      	lsls	r2, r3, #28
 801ec6a:	d52e      	bpl.n	801ecca <__swbuf_r+0x82>
 801ec6c:	6923      	ldr	r3, [r4, #16]
 801ec6e:	b363      	cbz	r3, 801ecca <__swbuf_r+0x82>
 801ec70:	6923      	ldr	r3, [r4, #16]
 801ec72:	6820      	ldr	r0, [r4, #0]
 801ec74:	1ac0      	subs	r0, r0, r3
 801ec76:	6963      	ldr	r3, [r4, #20]
 801ec78:	b2f6      	uxtb	r6, r6
 801ec7a:	4283      	cmp	r3, r0
 801ec7c:	4637      	mov	r7, r6
 801ec7e:	dc04      	bgt.n	801ec8a <__swbuf_r+0x42>
 801ec80:	4621      	mov	r1, r4
 801ec82:	4628      	mov	r0, r5
 801ec84:	f000 f98a 	bl	801ef9c <_fflush_r>
 801ec88:	bb28      	cbnz	r0, 801ecd6 <__swbuf_r+0x8e>
 801ec8a:	68a3      	ldr	r3, [r4, #8]
 801ec8c:	3b01      	subs	r3, #1
 801ec8e:	60a3      	str	r3, [r4, #8]
 801ec90:	6823      	ldr	r3, [r4, #0]
 801ec92:	1c5a      	adds	r2, r3, #1
 801ec94:	6022      	str	r2, [r4, #0]
 801ec96:	701e      	strb	r6, [r3, #0]
 801ec98:	6963      	ldr	r3, [r4, #20]
 801ec9a:	3001      	adds	r0, #1
 801ec9c:	4283      	cmp	r3, r0
 801ec9e:	d004      	beq.n	801ecaa <__swbuf_r+0x62>
 801eca0:	89a3      	ldrh	r3, [r4, #12]
 801eca2:	07db      	lsls	r3, r3, #31
 801eca4:	d519      	bpl.n	801ecda <__swbuf_r+0x92>
 801eca6:	2e0a      	cmp	r6, #10
 801eca8:	d117      	bne.n	801ecda <__swbuf_r+0x92>
 801ecaa:	4621      	mov	r1, r4
 801ecac:	4628      	mov	r0, r5
 801ecae:	f000 f975 	bl	801ef9c <_fflush_r>
 801ecb2:	b190      	cbz	r0, 801ecda <__swbuf_r+0x92>
 801ecb4:	e00f      	b.n	801ecd6 <__swbuf_r+0x8e>
 801ecb6:	4b0b      	ldr	r3, [pc, #44]	; (801ece4 <__swbuf_r+0x9c>)
 801ecb8:	429c      	cmp	r4, r3
 801ecba:	d101      	bne.n	801ecc0 <__swbuf_r+0x78>
 801ecbc:	68ac      	ldr	r4, [r5, #8]
 801ecbe:	e7d0      	b.n	801ec62 <__swbuf_r+0x1a>
 801ecc0:	4b09      	ldr	r3, [pc, #36]	; (801ece8 <__swbuf_r+0xa0>)
 801ecc2:	429c      	cmp	r4, r3
 801ecc4:	bf08      	it	eq
 801ecc6:	68ec      	ldreq	r4, [r5, #12]
 801ecc8:	e7cb      	b.n	801ec62 <__swbuf_r+0x1a>
 801ecca:	4621      	mov	r1, r4
 801eccc:	4628      	mov	r0, r5
 801ecce:	f000 f80d 	bl	801ecec <__swsetup_r>
 801ecd2:	2800      	cmp	r0, #0
 801ecd4:	d0cc      	beq.n	801ec70 <__swbuf_r+0x28>
 801ecd6:	f04f 37ff 	mov.w	r7, #4294967295
 801ecda:	4638      	mov	r0, r7
 801ecdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecde:	bf00      	nop
 801ece0:	08021770 	.word	0x08021770
 801ece4:	08021790 	.word	0x08021790
 801ece8:	08021750 	.word	0x08021750

0801ecec <__swsetup_r>:
 801ecec:	4b32      	ldr	r3, [pc, #200]	; (801edb8 <__swsetup_r+0xcc>)
 801ecee:	b570      	push	{r4, r5, r6, lr}
 801ecf0:	681d      	ldr	r5, [r3, #0]
 801ecf2:	4606      	mov	r6, r0
 801ecf4:	460c      	mov	r4, r1
 801ecf6:	b125      	cbz	r5, 801ed02 <__swsetup_r+0x16>
 801ecf8:	69ab      	ldr	r3, [r5, #24]
 801ecfa:	b913      	cbnz	r3, 801ed02 <__swsetup_r+0x16>
 801ecfc:	4628      	mov	r0, r5
 801ecfe:	f000 f9b7 	bl	801f070 <__sinit>
 801ed02:	4b2e      	ldr	r3, [pc, #184]	; (801edbc <__swsetup_r+0xd0>)
 801ed04:	429c      	cmp	r4, r3
 801ed06:	d10f      	bne.n	801ed28 <__swsetup_r+0x3c>
 801ed08:	686c      	ldr	r4, [r5, #4]
 801ed0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed0e:	b29a      	uxth	r2, r3
 801ed10:	0715      	lsls	r5, r2, #28
 801ed12:	d42c      	bmi.n	801ed6e <__swsetup_r+0x82>
 801ed14:	06d0      	lsls	r0, r2, #27
 801ed16:	d411      	bmi.n	801ed3c <__swsetup_r+0x50>
 801ed18:	2209      	movs	r2, #9
 801ed1a:	6032      	str	r2, [r6, #0]
 801ed1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed20:	81a3      	strh	r3, [r4, #12]
 801ed22:	f04f 30ff 	mov.w	r0, #4294967295
 801ed26:	e03e      	b.n	801eda6 <__swsetup_r+0xba>
 801ed28:	4b25      	ldr	r3, [pc, #148]	; (801edc0 <__swsetup_r+0xd4>)
 801ed2a:	429c      	cmp	r4, r3
 801ed2c:	d101      	bne.n	801ed32 <__swsetup_r+0x46>
 801ed2e:	68ac      	ldr	r4, [r5, #8]
 801ed30:	e7eb      	b.n	801ed0a <__swsetup_r+0x1e>
 801ed32:	4b24      	ldr	r3, [pc, #144]	; (801edc4 <__swsetup_r+0xd8>)
 801ed34:	429c      	cmp	r4, r3
 801ed36:	bf08      	it	eq
 801ed38:	68ec      	ldreq	r4, [r5, #12]
 801ed3a:	e7e6      	b.n	801ed0a <__swsetup_r+0x1e>
 801ed3c:	0751      	lsls	r1, r2, #29
 801ed3e:	d512      	bpl.n	801ed66 <__swsetup_r+0x7a>
 801ed40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed42:	b141      	cbz	r1, 801ed56 <__swsetup_r+0x6a>
 801ed44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed48:	4299      	cmp	r1, r3
 801ed4a:	d002      	beq.n	801ed52 <__swsetup_r+0x66>
 801ed4c:	4630      	mov	r0, r6
 801ed4e:	f7ff fbb7 	bl	801e4c0 <_free_r>
 801ed52:	2300      	movs	r3, #0
 801ed54:	6363      	str	r3, [r4, #52]	; 0x34
 801ed56:	89a3      	ldrh	r3, [r4, #12]
 801ed58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ed5c:	81a3      	strh	r3, [r4, #12]
 801ed5e:	2300      	movs	r3, #0
 801ed60:	6063      	str	r3, [r4, #4]
 801ed62:	6923      	ldr	r3, [r4, #16]
 801ed64:	6023      	str	r3, [r4, #0]
 801ed66:	89a3      	ldrh	r3, [r4, #12]
 801ed68:	f043 0308 	orr.w	r3, r3, #8
 801ed6c:	81a3      	strh	r3, [r4, #12]
 801ed6e:	6923      	ldr	r3, [r4, #16]
 801ed70:	b94b      	cbnz	r3, 801ed86 <__swsetup_r+0x9a>
 801ed72:	89a3      	ldrh	r3, [r4, #12]
 801ed74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ed78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ed7c:	d003      	beq.n	801ed86 <__swsetup_r+0x9a>
 801ed7e:	4621      	mov	r1, r4
 801ed80:	4630      	mov	r0, r6
 801ed82:	f000 fa23 	bl	801f1cc <__smakebuf_r>
 801ed86:	89a2      	ldrh	r2, [r4, #12]
 801ed88:	f012 0301 	ands.w	r3, r2, #1
 801ed8c:	d00c      	beq.n	801eda8 <__swsetup_r+0xbc>
 801ed8e:	2300      	movs	r3, #0
 801ed90:	60a3      	str	r3, [r4, #8]
 801ed92:	6963      	ldr	r3, [r4, #20]
 801ed94:	425b      	negs	r3, r3
 801ed96:	61a3      	str	r3, [r4, #24]
 801ed98:	6923      	ldr	r3, [r4, #16]
 801ed9a:	b953      	cbnz	r3, 801edb2 <__swsetup_r+0xc6>
 801ed9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eda0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801eda4:	d1ba      	bne.n	801ed1c <__swsetup_r+0x30>
 801eda6:	bd70      	pop	{r4, r5, r6, pc}
 801eda8:	0792      	lsls	r2, r2, #30
 801edaa:	bf58      	it	pl
 801edac:	6963      	ldrpl	r3, [r4, #20]
 801edae:	60a3      	str	r3, [r4, #8]
 801edb0:	e7f2      	b.n	801ed98 <__swsetup_r+0xac>
 801edb2:	2000      	movs	r0, #0
 801edb4:	e7f7      	b.n	801eda6 <__swsetup_r+0xba>
 801edb6:	bf00      	nop
 801edb8:	20000080 	.word	0x20000080
 801edbc:	08021770 	.word	0x08021770
 801edc0:	08021790 	.word	0x08021790
 801edc4:	08021750 	.word	0x08021750

0801edc8 <__register_exitproc>:
 801edc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edcc:	4d2c      	ldr	r5, [pc, #176]	; (801ee80 <__register_exitproc+0xb8>)
 801edce:	682c      	ldr	r4, [r5, #0]
 801edd0:	4607      	mov	r7, r0
 801edd2:	460e      	mov	r6, r1
 801edd4:	4691      	mov	r9, r2
 801edd6:	4698      	mov	r8, r3
 801edd8:	b934      	cbnz	r4, 801ede8 <__register_exitproc+0x20>
 801edda:	4b2a      	ldr	r3, [pc, #168]	; (801ee84 <__register_exitproc+0xbc>)
 801eddc:	4c2a      	ldr	r4, [pc, #168]	; (801ee88 <__register_exitproc+0xc0>)
 801edde:	602c      	str	r4, [r5, #0]
 801ede0:	b113      	cbz	r3, 801ede8 <__register_exitproc+0x20>
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ede8:	6863      	ldr	r3, [r4, #4]
 801edea:	2b1f      	cmp	r3, #31
 801edec:	dd3d      	ble.n	801ee6a <__register_exitproc+0xa2>
 801edee:	4b27      	ldr	r3, [pc, #156]	; (801ee8c <__register_exitproc+0xc4>)
 801edf0:	b91b      	cbnz	r3, 801edfa <__register_exitproc+0x32>
 801edf2:	f04f 30ff 	mov.w	r0, #4294967295
 801edf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edfa:	208c      	movs	r0, #140	; 0x8c
 801edfc:	f7ff fb3c 	bl	801e478 <malloc>
 801ee00:	4604      	mov	r4, r0
 801ee02:	2800      	cmp	r0, #0
 801ee04:	d0f5      	beq.n	801edf2 <__register_exitproc+0x2a>
 801ee06:	2300      	movs	r3, #0
 801ee08:	682a      	ldr	r2, [r5, #0]
 801ee0a:	6002      	str	r2, [r0, #0]
 801ee0c:	6043      	str	r3, [r0, #4]
 801ee0e:	6028      	str	r0, [r5, #0]
 801ee10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801ee14:	b30f      	cbz	r7, 801ee5a <__register_exitproc+0x92>
 801ee16:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ee1a:	f7ff fb2d 	bl	801e478 <malloc>
 801ee1e:	2800      	cmp	r0, #0
 801ee20:	d0e7      	beq.n	801edf2 <__register_exitproc+0x2a>
 801ee22:	2300      	movs	r3, #0
 801ee24:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ee28:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801ee2c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ee30:	6862      	ldr	r2, [r4, #4]
 801ee32:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801ee36:	2301      	movs	r3, #1
 801ee38:	4093      	lsls	r3, r2
 801ee3a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801ee3e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801ee42:	431a      	orrs	r2, r3
 801ee44:	2f02      	cmp	r7, #2
 801ee46:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801ee4a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801ee4e:	bf02      	ittt	eq
 801ee50:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801ee54:	4313      	orreq	r3, r2
 801ee56:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801ee5a:	6863      	ldr	r3, [r4, #4]
 801ee5c:	1c5a      	adds	r2, r3, #1
 801ee5e:	3302      	adds	r3, #2
 801ee60:	6062      	str	r2, [r4, #4]
 801ee62:	2000      	movs	r0, #0
 801ee64:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801ee68:	e7c5      	b.n	801edf6 <__register_exitproc+0x2e>
 801ee6a:	2f00      	cmp	r7, #0
 801ee6c:	d0f5      	beq.n	801ee5a <__register_exitproc+0x92>
 801ee6e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ee72:	2800      	cmp	r0, #0
 801ee74:	d1dc      	bne.n	801ee30 <__register_exitproc+0x68>
 801ee76:	4b05      	ldr	r3, [pc, #20]	; (801ee8c <__register_exitproc+0xc4>)
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d0ba      	beq.n	801edf2 <__register_exitproc+0x2a>
 801ee7c:	e7cb      	b.n	801ee16 <__register_exitproc+0x4e>
 801ee7e:	bf00      	nop
 801ee80:	20009bec 	.word	0x20009bec
 801ee84:	00000000 	.word	0x00000000
 801ee88:	20009b60 	.word	0x20009b60
 801ee8c:	0801e479 	.word	0x0801e479

0801ee90 <__sflush_r>:
 801ee90:	898a      	ldrh	r2, [r1, #12]
 801ee92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee96:	4605      	mov	r5, r0
 801ee98:	0710      	lsls	r0, r2, #28
 801ee9a:	460c      	mov	r4, r1
 801ee9c:	d458      	bmi.n	801ef50 <__sflush_r+0xc0>
 801ee9e:	684b      	ldr	r3, [r1, #4]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	dc05      	bgt.n	801eeb0 <__sflush_r+0x20>
 801eea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	dc02      	bgt.n	801eeb0 <__sflush_r+0x20>
 801eeaa:	2000      	movs	r0, #0
 801eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eeb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eeb2:	2e00      	cmp	r6, #0
 801eeb4:	d0f9      	beq.n	801eeaa <__sflush_r+0x1a>
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801eebc:	682f      	ldr	r7, [r5, #0]
 801eebe:	6a21      	ldr	r1, [r4, #32]
 801eec0:	602b      	str	r3, [r5, #0]
 801eec2:	d032      	beq.n	801ef2a <__sflush_r+0x9a>
 801eec4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eec6:	89a3      	ldrh	r3, [r4, #12]
 801eec8:	075a      	lsls	r2, r3, #29
 801eeca:	d505      	bpl.n	801eed8 <__sflush_r+0x48>
 801eecc:	6863      	ldr	r3, [r4, #4]
 801eece:	1ac0      	subs	r0, r0, r3
 801eed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eed2:	b10b      	cbz	r3, 801eed8 <__sflush_r+0x48>
 801eed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eed6:	1ac0      	subs	r0, r0, r3
 801eed8:	2300      	movs	r3, #0
 801eeda:	4602      	mov	r2, r0
 801eedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eede:	6a21      	ldr	r1, [r4, #32]
 801eee0:	4628      	mov	r0, r5
 801eee2:	47b0      	blx	r6
 801eee4:	1c43      	adds	r3, r0, #1
 801eee6:	89a3      	ldrh	r3, [r4, #12]
 801eee8:	d106      	bne.n	801eef8 <__sflush_r+0x68>
 801eeea:	6829      	ldr	r1, [r5, #0]
 801eeec:	291d      	cmp	r1, #29
 801eeee:	d848      	bhi.n	801ef82 <__sflush_r+0xf2>
 801eef0:	4a29      	ldr	r2, [pc, #164]	; (801ef98 <__sflush_r+0x108>)
 801eef2:	40ca      	lsrs	r2, r1
 801eef4:	07d6      	lsls	r6, r2, #31
 801eef6:	d544      	bpl.n	801ef82 <__sflush_r+0xf2>
 801eef8:	2200      	movs	r2, #0
 801eefa:	6062      	str	r2, [r4, #4]
 801eefc:	04d9      	lsls	r1, r3, #19
 801eefe:	6922      	ldr	r2, [r4, #16]
 801ef00:	6022      	str	r2, [r4, #0]
 801ef02:	d504      	bpl.n	801ef0e <__sflush_r+0x7e>
 801ef04:	1c42      	adds	r2, r0, #1
 801ef06:	d101      	bne.n	801ef0c <__sflush_r+0x7c>
 801ef08:	682b      	ldr	r3, [r5, #0]
 801ef0a:	b903      	cbnz	r3, 801ef0e <__sflush_r+0x7e>
 801ef0c:	6560      	str	r0, [r4, #84]	; 0x54
 801ef0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef10:	602f      	str	r7, [r5, #0]
 801ef12:	2900      	cmp	r1, #0
 801ef14:	d0c9      	beq.n	801eeaa <__sflush_r+0x1a>
 801ef16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef1a:	4299      	cmp	r1, r3
 801ef1c:	d002      	beq.n	801ef24 <__sflush_r+0x94>
 801ef1e:	4628      	mov	r0, r5
 801ef20:	f7ff face 	bl	801e4c0 <_free_r>
 801ef24:	2000      	movs	r0, #0
 801ef26:	6360      	str	r0, [r4, #52]	; 0x34
 801ef28:	e7c0      	b.n	801eeac <__sflush_r+0x1c>
 801ef2a:	2301      	movs	r3, #1
 801ef2c:	4628      	mov	r0, r5
 801ef2e:	47b0      	blx	r6
 801ef30:	1c41      	adds	r1, r0, #1
 801ef32:	d1c8      	bne.n	801eec6 <__sflush_r+0x36>
 801ef34:	682b      	ldr	r3, [r5, #0]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d0c5      	beq.n	801eec6 <__sflush_r+0x36>
 801ef3a:	2b1d      	cmp	r3, #29
 801ef3c:	d001      	beq.n	801ef42 <__sflush_r+0xb2>
 801ef3e:	2b16      	cmp	r3, #22
 801ef40:	d101      	bne.n	801ef46 <__sflush_r+0xb6>
 801ef42:	602f      	str	r7, [r5, #0]
 801ef44:	e7b1      	b.n	801eeaa <__sflush_r+0x1a>
 801ef46:	89a3      	ldrh	r3, [r4, #12]
 801ef48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef4c:	81a3      	strh	r3, [r4, #12]
 801ef4e:	e7ad      	b.n	801eeac <__sflush_r+0x1c>
 801ef50:	690f      	ldr	r7, [r1, #16]
 801ef52:	2f00      	cmp	r7, #0
 801ef54:	d0a9      	beq.n	801eeaa <__sflush_r+0x1a>
 801ef56:	0793      	lsls	r3, r2, #30
 801ef58:	680e      	ldr	r6, [r1, #0]
 801ef5a:	bf08      	it	eq
 801ef5c:	694b      	ldreq	r3, [r1, #20]
 801ef5e:	600f      	str	r7, [r1, #0]
 801ef60:	bf18      	it	ne
 801ef62:	2300      	movne	r3, #0
 801ef64:	eba6 0807 	sub.w	r8, r6, r7
 801ef68:	608b      	str	r3, [r1, #8]
 801ef6a:	f1b8 0f00 	cmp.w	r8, #0
 801ef6e:	dd9c      	ble.n	801eeaa <__sflush_r+0x1a>
 801ef70:	4643      	mov	r3, r8
 801ef72:	463a      	mov	r2, r7
 801ef74:	6a21      	ldr	r1, [r4, #32]
 801ef76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ef78:	4628      	mov	r0, r5
 801ef7a:	47b0      	blx	r6
 801ef7c:	2800      	cmp	r0, #0
 801ef7e:	dc06      	bgt.n	801ef8e <__sflush_r+0xfe>
 801ef80:	89a3      	ldrh	r3, [r4, #12]
 801ef82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef86:	81a3      	strh	r3, [r4, #12]
 801ef88:	f04f 30ff 	mov.w	r0, #4294967295
 801ef8c:	e78e      	b.n	801eeac <__sflush_r+0x1c>
 801ef8e:	4407      	add	r7, r0
 801ef90:	eba8 0800 	sub.w	r8, r8, r0
 801ef94:	e7e9      	b.n	801ef6a <__sflush_r+0xda>
 801ef96:	bf00      	nop
 801ef98:	20400001 	.word	0x20400001

0801ef9c <_fflush_r>:
 801ef9c:	b538      	push	{r3, r4, r5, lr}
 801ef9e:	690b      	ldr	r3, [r1, #16]
 801efa0:	4605      	mov	r5, r0
 801efa2:	460c      	mov	r4, r1
 801efa4:	b1db      	cbz	r3, 801efde <_fflush_r+0x42>
 801efa6:	b118      	cbz	r0, 801efb0 <_fflush_r+0x14>
 801efa8:	6983      	ldr	r3, [r0, #24]
 801efaa:	b90b      	cbnz	r3, 801efb0 <_fflush_r+0x14>
 801efac:	f000 f860 	bl	801f070 <__sinit>
 801efb0:	4b0c      	ldr	r3, [pc, #48]	; (801efe4 <_fflush_r+0x48>)
 801efb2:	429c      	cmp	r4, r3
 801efb4:	d109      	bne.n	801efca <_fflush_r+0x2e>
 801efb6:	686c      	ldr	r4, [r5, #4]
 801efb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efbc:	b17b      	cbz	r3, 801efde <_fflush_r+0x42>
 801efbe:	4621      	mov	r1, r4
 801efc0:	4628      	mov	r0, r5
 801efc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801efc6:	f7ff bf63 	b.w	801ee90 <__sflush_r>
 801efca:	4b07      	ldr	r3, [pc, #28]	; (801efe8 <_fflush_r+0x4c>)
 801efcc:	429c      	cmp	r4, r3
 801efce:	d101      	bne.n	801efd4 <_fflush_r+0x38>
 801efd0:	68ac      	ldr	r4, [r5, #8]
 801efd2:	e7f1      	b.n	801efb8 <_fflush_r+0x1c>
 801efd4:	4b05      	ldr	r3, [pc, #20]	; (801efec <_fflush_r+0x50>)
 801efd6:	429c      	cmp	r4, r3
 801efd8:	bf08      	it	eq
 801efda:	68ec      	ldreq	r4, [r5, #12]
 801efdc:	e7ec      	b.n	801efb8 <_fflush_r+0x1c>
 801efde:	2000      	movs	r0, #0
 801efe0:	bd38      	pop	{r3, r4, r5, pc}
 801efe2:	bf00      	nop
 801efe4:	08021770 	.word	0x08021770
 801efe8:	08021790 	.word	0x08021790
 801efec:	08021750 	.word	0x08021750

0801eff0 <std>:
 801eff0:	2300      	movs	r3, #0
 801eff2:	b510      	push	{r4, lr}
 801eff4:	4604      	mov	r4, r0
 801eff6:	e9c0 3300 	strd	r3, r3, [r0]
 801effa:	6083      	str	r3, [r0, #8]
 801effc:	8181      	strh	r1, [r0, #12]
 801effe:	6643      	str	r3, [r0, #100]	; 0x64
 801f000:	81c2      	strh	r2, [r0, #14]
 801f002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f006:	6183      	str	r3, [r0, #24]
 801f008:	4619      	mov	r1, r3
 801f00a:	2208      	movs	r2, #8
 801f00c:	305c      	adds	r0, #92	; 0x5c
 801f00e:	f7ff fa4e 	bl	801e4ae <memset>
 801f012:	4b05      	ldr	r3, [pc, #20]	; (801f028 <std+0x38>)
 801f014:	6263      	str	r3, [r4, #36]	; 0x24
 801f016:	4b05      	ldr	r3, [pc, #20]	; (801f02c <std+0x3c>)
 801f018:	62a3      	str	r3, [r4, #40]	; 0x28
 801f01a:	4b05      	ldr	r3, [pc, #20]	; (801f030 <std+0x40>)
 801f01c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f01e:	4b05      	ldr	r3, [pc, #20]	; (801f034 <std+0x44>)
 801f020:	6224      	str	r4, [r4, #32]
 801f022:	6323      	str	r3, [r4, #48]	; 0x30
 801f024:	bd10      	pop	{r4, pc}
 801f026:	bf00      	nop
 801f028:	0801f251 	.word	0x0801f251
 801f02c:	0801f273 	.word	0x0801f273
 801f030:	0801f2ab 	.word	0x0801f2ab
 801f034:	0801f2cf 	.word	0x0801f2cf

0801f038 <_cleanup_r>:
 801f038:	4901      	ldr	r1, [pc, #4]	; (801f040 <_cleanup_r+0x8>)
 801f03a:	f000 b885 	b.w	801f148 <_fwalk_reent>
 801f03e:	bf00      	nop
 801f040:	0801ef9d 	.word	0x0801ef9d

0801f044 <__sfmoreglue>:
 801f044:	b570      	push	{r4, r5, r6, lr}
 801f046:	1e4a      	subs	r2, r1, #1
 801f048:	2568      	movs	r5, #104	; 0x68
 801f04a:	4355      	muls	r5, r2
 801f04c:	460e      	mov	r6, r1
 801f04e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f052:	f7ff fa83 	bl	801e55c <_malloc_r>
 801f056:	4604      	mov	r4, r0
 801f058:	b140      	cbz	r0, 801f06c <__sfmoreglue+0x28>
 801f05a:	2100      	movs	r1, #0
 801f05c:	e9c0 1600 	strd	r1, r6, [r0]
 801f060:	300c      	adds	r0, #12
 801f062:	60a0      	str	r0, [r4, #8]
 801f064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f068:	f7ff fa21 	bl	801e4ae <memset>
 801f06c:	4620      	mov	r0, r4
 801f06e:	bd70      	pop	{r4, r5, r6, pc}

0801f070 <__sinit>:
 801f070:	6983      	ldr	r3, [r0, #24]
 801f072:	b510      	push	{r4, lr}
 801f074:	4604      	mov	r4, r0
 801f076:	bb33      	cbnz	r3, 801f0c6 <__sinit+0x56>
 801f078:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801f07c:	6503      	str	r3, [r0, #80]	; 0x50
 801f07e:	4b12      	ldr	r3, [pc, #72]	; (801f0c8 <__sinit+0x58>)
 801f080:	4a12      	ldr	r2, [pc, #72]	; (801f0cc <__sinit+0x5c>)
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	6282      	str	r2, [r0, #40]	; 0x28
 801f086:	4298      	cmp	r0, r3
 801f088:	bf04      	itt	eq
 801f08a:	2301      	moveq	r3, #1
 801f08c:	6183      	streq	r3, [r0, #24]
 801f08e:	f000 f81f 	bl	801f0d0 <__sfp>
 801f092:	6060      	str	r0, [r4, #4]
 801f094:	4620      	mov	r0, r4
 801f096:	f000 f81b 	bl	801f0d0 <__sfp>
 801f09a:	60a0      	str	r0, [r4, #8]
 801f09c:	4620      	mov	r0, r4
 801f09e:	f000 f817 	bl	801f0d0 <__sfp>
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	60e0      	str	r0, [r4, #12]
 801f0a6:	2104      	movs	r1, #4
 801f0a8:	6860      	ldr	r0, [r4, #4]
 801f0aa:	f7ff ffa1 	bl	801eff0 <std>
 801f0ae:	2201      	movs	r2, #1
 801f0b0:	2109      	movs	r1, #9
 801f0b2:	68a0      	ldr	r0, [r4, #8]
 801f0b4:	f7ff ff9c 	bl	801eff0 <std>
 801f0b8:	2202      	movs	r2, #2
 801f0ba:	2112      	movs	r1, #18
 801f0bc:	68e0      	ldr	r0, [r4, #12]
 801f0be:	f7ff ff97 	bl	801eff0 <std>
 801f0c2:	2301      	movs	r3, #1
 801f0c4:	61a3      	str	r3, [r4, #24]
 801f0c6:	bd10      	pop	{r4, pc}
 801f0c8:	08021718 	.word	0x08021718
 801f0cc:	0801f039 	.word	0x0801f039

0801f0d0 <__sfp>:
 801f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0d2:	4b1b      	ldr	r3, [pc, #108]	; (801f140 <__sfp+0x70>)
 801f0d4:	681e      	ldr	r6, [r3, #0]
 801f0d6:	69b3      	ldr	r3, [r6, #24]
 801f0d8:	4607      	mov	r7, r0
 801f0da:	b913      	cbnz	r3, 801f0e2 <__sfp+0x12>
 801f0dc:	4630      	mov	r0, r6
 801f0de:	f7ff ffc7 	bl	801f070 <__sinit>
 801f0e2:	3648      	adds	r6, #72	; 0x48
 801f0e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f0e8:	3b01      	subs	r3, #1
 801f0ea:	d503      	bpl.n	801f0f4 <__sfp+0x24>
 801f0ec:	6833      	ldr	r3, [r6, #0]
 801f0ee:	b133      	cbz	r3, 801f0fe <__sfp+0x2e>
 801f0f0:	6836      	ldr	r6, [r6, #0]
 801f0f2:	e7f7      	b.n	801f0e4 <__sfp+0x14>
 801f0f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f0f8:	b16d      	cbz	r5, 801f116 <__sfp+0x46>
 801f0fa:	3468      	adds	r4, #104	; 0x68
 801f0fc:	e7f4      	b.n	801f0e8 <__sfp+0x18>
 801f0fe:	2104      	movs	r1, #4
 801f100:	4638      	mov	r0, r7
 801f102:	f7ff ff9f 	bl	801f044 <__sfmoreglue>
 801f106:	6030      	str	r0, [r6, #0]
 801f108:	2800      	cmp	r0, #0
 801f10a:	d1f1      	bne.n	801f0f0 <__sfp+0x20>
 801f10c:	230c      	movs	r3, #12
 801f10e:	603b      	str	r3, [r7, #0]
 801f110:	4604      	mov	r4, r0
 801f112:	4620      	mov	r0, r4
 801f114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f116:	4b0b      	ldr	r3, [pc, #44]	; (801f144 <__sfp+0x74>)
 801f118:	6665      	str	r5, [r4, #100]	; 0x64
 801f11a:	e9c4 5500 	strd	r5, r5, [r4]
 801f11e:	60a5      	str	r5, [r4, #8]
 801f120:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801f124:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801f128:	2208      	movs	r2, #8
 801f12a:	4629      	mov	r1, r5
 801f12c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f130:	f7ff f9bd 	bl	801e4ae <memset>
 801f134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f13c:	e7e9      	b.n	801f112 <__sfp+0x42>
 801f13e:	bf00      	nop
 801f140:	08021718 	.word	0x08021718
 801f144:	ffff0001 	.word	0xffff0001

0801f148 <_fwalk_reent>:
 801f148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f14c:	4680      	mov	r8, r0
 801f14e:	4689      	mov	r9, r1
 801f150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f154:	2600      	movs	r6, #0
 801f156:	b914      	cbnz	r4, 801f15e <_fwalk_reent+0x16>
 801f158:	4630      	mov	r0, r6
 801f15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f15e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801f162:	3f01      	subs	r7, #1
 801f164:	d501      	bpl.n	801f16a <_fwalk_reent+0x22>
 801f166:	6824      	ldr	r4, [r4, #0]
 801f168:	e7f5      	b.n	801f156 <_fwalk_reent+0xe>
 801f16a:	89ab      	ldrh	r3, [r5, #12]
 801f16c:	2b01      	cmp	r3, #1
 801f16e:	d907      	bls.n	801f180 <_fwalk_reent+0x38>
 801f170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f174:	3301      	adds	r3, #1
 801f176:	d003      	beq.n	801f180 <_fwalk_reent+0x38>
 801f178:	4629      	mov	r1, r5
 801f17a:	4640      	mov	r0, r8
 801f17c:	47c8      	blx	r9
 801f17e:	4306      	orrs	r6, r0
 801f180:	3568      	adds	r5, #104	; 0x68
 801f182:	e7ee      	b.n	801f162 <_fwalk_reent+0x1a>

0801f184 <__swhatbuf_r>:
 801f184:	b570      	push	{r4, r5, r6, lr}
 801f186:	460e      	mov	r6, r1
 801f188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f18c:	2900      	cmp	r1, #0
 801f18e:	b096      	sub	sp, #88	; 0x58
 801f190:	4614      	mov	r4, r2
 801f192:	461d      	mov	r5, r3
 801f194:	da07      	bge.n	801f1a6 <__swhatbuf_r+0x22>
 801f196:	2300      	movs	r3, #0
 801f198:	602b      	str	r3, [r5, #0]
 801f19a:	89b3      	ldrh	r3, [r6, #12]
 801f19c:	061a      	lsls	r2, r3, #24
 801f19e:	d410      	bmi.n	801f1c2 <__swhatbuf_r+0x3e>
 801f1a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f1a4:	e00e      	b.n	801f1c4 <__swhatbuf_r+0x40>
 801f1a6:	466a      	mov	r2, sp
 801f1a8:	f000 f8b8 	bl	801f31c <_fstat_r>
 801f1ac:	2800      	cmp	r0, #0
 801f1ae:	dbf2      	blt.n	801f196 <__swhatbuf_r+0x12>
 801f1b0:	9a01      	ldr	r2, [sp, #4]
 801f1b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f1b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f1ba:	425a      	negs	r2, r3
 801f1bc:	415a      	adcs	r2, r3
 801f1be:	602a      	str	r2, [r5, #0]
 801f1c0:	e7ee      	b.n	801f1a0 <__swhatbuf_r+0x1c>
 801f1c2:	2340      	movs	r3, #64	; 0x40
 801f1c4:	2000      	movs	r0, #0
 801f1c6:	6023      	str	r3, [r4, #0]
 801f1c8:	b016      	add	sp, #88	; 0x58
 801f1ca:	bd70      	pop	{r4, r5, r6, pc}

0801f1cc <__smakebuf_r>:
 801f1cc:	898b      	ldrh	r3, [r1, #12]
 801f1ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f1d0:	079d      	lsls	r5, r3, #30
 801f1d2:	4606      	mov	r6, r0
 801f1d4:	460c      	mov	r4, r1
 801f1d6:	d507      	bpl.n	801f1e8 <__smakebuf_r+0x1c>
 801f1d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f1dc:	6023      	str	r3, [r4, #0]
 801f1de:	6123      	str	r3, [r4, #16]
 801f1e0:	2301      	movs	r3, #1
 801f1e2:	6163      	str	r3, [r4, #20]
 801f1e4:	b002      	add	sp, #8
 801f1e6:	bd70      	pop	{r4, r5, r6, pc}
 801f1e8:	ab01      	add	r3, sp, #4
 801f1ea:	466a      	mov	r2, sp
 801f1ec:	f7ff ffca 	bl	801f184 <__swhatbuf_r>
 801f1f0:	9900      	ldr	r1, [sp, #0]
 801f1f2:	4605      	mov	r5, r0
 801f1f4:	4630      	mov	r0, r6
 801f1f6:	f7ff f9b1 	bl	801e55c <_malloc_r>
 801f1fa:	b948      	cbnz	r0, 801f210 <__smakebuf_r+0x44>
 801f1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f200:	059a      	lsls	r2, r3, #22
 801f202:	d4ef      	bmi.n	801f1e4 <__smakebuf_r+0x18>
 801f204:	f023 0303 	bic.w	r3, r3, #3
 801f208:	f043 0302 	orr.w	r3, r3, #2
 801f20c:	81a3      	strh	r3, [r4, #12]
 801f20e:	e7e3      	b.n	801f1d8 <__smakebuf_r+0xc>
 801f210:	4b0d      	ldr	r3, [pc, #52]	; (801f248 <__smakebuf_r+0x7c>)
 801f212:	62b3      	str	r3, [r6, #40]	; 0x28
 801f214:	89a3      	ldrh	r3, [r4, #12]
 801f216:	6020      	str	r0, [r4, #0]
 801f218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f21c:	81a3      	strh	r3, [r4, #12]
 801f21e:	9b00      	ldr	r3, [sp, #0]
 801f220:	6163      	str	r3, [r4, #20]
 801f222:	9b01      	ldr	r3, [sp, #4]
 801f224:	6120      	str	r0, [r4, #16]
 801f226:	b15b      	cbz	r3, 801f240 <__smakebuf_r+0x74>
 801f228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f22c:	4630      	mov	r0, r6
 801f22e:	f000 f887 	bl	801f340 <_isatty_r>
 801f232:	b128      	cbz	r0, 801f240 <__smakebuf_r+0x74>
 801f234:	89a3      	ldrh	r3, [r4, #12]
 801f236:	f023 0303 	bic.w	r3, r3, #3
 801f23a:	f043 0301 	orr.w	r3, r3, #1
 801f23e:	81a3      	strh	r3, [r4, #12]
 801f240:	89a3      	ldrh	r3, [r4, #12]
 801f242:	431d      	orrs	r5, r3
 801f244:	81a5      	strh	r5, [r4, #12]
 801f246:	e7cd      	b.n	801f1e4 <__smakebuf_r+0x18>
 801f248:	0801f039 	.word	0x0801f039

0801f24c <__malloc_lock>:
 801f24c:	4770      	bx	lr

0801f24e <__malloc_unlock>:
 801f24e:	4770      	bx	lr

0801f250 <__sread>:
 801f250:	b510      	push	{r4, lr}
 801f252:	460c      	mov	r4, r1
 801f254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f258:	f000 f894 	bl	801f384 <_read_r>
 801f25c:	2800      	cmp	r0, #0
 801f25e:	bfab      	itete	ge
 801f260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f262:	89a3      	ldrhlt	r3, [r4, #12]
 801f264:	181b      	addge	r3, r3, r0
 801f266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f26a:	bfac      	ite	ge
 801f26c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f26e:	81a3      	strhlt	r3, [r4, #12]
 801f270:	bd10      	pop	{r4, pc}

0801f272 <__swrite>:
 801f272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f276:	461f      	mov	r7, r3
 801f278:	898b      	ldrh	r3, [r1, #12]
 801f27a:	05db      	lsls	r3, r3, #23
 801f27c:	4605      	mov	r5, r0
 801f27e:	460c      	mov	r4, r1
 801f280:	4616      	mov	r6, r2
 801f282:	d505      	bpl.n	801f290 <__swrite+0x1e>
 801f284:	2302      	movs	r3, #2
 801f286:	2200      	movs	r2, #0
 801f288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f28c:	f000 f868 	bl	801f360 <_lseek_r>
 801f290:	89a3      	ldrh	r3, [r4, #12]
 801f292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f29a:	81a3      	strh	r3, [r4, #12]
 801f29c:	4632      	mov	r2, r6
 801f29e:	463b      	mov	r3, r7
 801f2a0:	4628      	mov	r0, r5
 801f2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2a6:	f000 b817 	b.w	801f2d8 <_write_r>

0801f2aa <__sseek>:
 801f2aa:	b510      	push	{r4, lr}
 801f2ac:	460c      	mov	r4, r1
 801f2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2b2:	f000 f855 	bl	801f360 <_lseek_r>
 801f2b6:	1c43      	adds	r3, r0, #1
 801f2b8:	89a3      	ldrh	r3, [r4, #12]
 801f2ba:	bf15      	itete	ne
 801f2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 801f2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f2c6:	81a3      	strheq	r3, [r4, #12]
 801f2c8:	bf18      	it	ne
 801f2ca:	81a3      	strhne	r3, [r4, #12]
 801f2cc:	bd10      	pop	{r4, pc}

0801f2ce <__sclose>:
 801f2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2d2:	f000 b813 	b.w	801f2fc <_close_r>
	...

0801f2d8 <_write_r>:
 801f2d8:	b538      	push	{r3, r4, r5, lr}
 801f2da:	4c07      	ldr	r4, [pc, #28]	; (801f2f8 <_write_r+0x20>)
 801f2dc:	4605      	mov	r5, r0
 801f2de:	4608      	mov	r0, r1
 801f2e0:	4611      	mov	r1, r2
 801f2e2:	2200      	movs	r2, #0
 801f2e4:	6022      	str	r2, [r4, #0]
 801f2e6:	461a      	mov	r2, r3
 801f2e8:	f7f8 fd29 	bl	8017d3e <_write>
 801f2ec:	1c43      	adds	r3, r0, #1
 801f2ee:	d102      	bne.n	801f2f6 <_write_r+0x1e>
 801f2f0:	6823      	ldr	r3, [r4, #0]
 801f2f2:	b103      	cbz	r3, 801f2f6 <_write_r+0x1e>
 801f2f4:	602b      	str	r3, [r5, #0]
 801f2f6:	bd38      	pop	{r3, r4, r5, pc}
 801f2f8:	2000a73c 	.word	0x2000a73c

0801f2fc <_close_r>:
 801f2fc:	b538      	push	{r3, r4, r5, lr}
 801f2fe:	4c06      	ldr	r4, [pc, #24]	; (801f318 <_close_r+0x1c>)
 801f300:	2300      	movs	r3, #0
 801f302:	4605      	mov	r5, r0
 801f304:	4608      	mov	r0, r1
 801f306:	6023      	str	r3, [r4, #0]
 801f308:	f7f8 fd35 	bl	8017d76 <_close>
 801f30c:	1c43      	adds	r3, r0, #1
 801f30e:	d102      	bne.n	801f316 <_close_r+0x1a>
 801f310:	6823      	ldr	r3, [r4, #0]
 801f312:	b103      	cbz	r3, 801f316 <_close_r+0x1a>
 801f314:	602b      	str	r3, [r5, #0]
 801f316:	bd38      	pop	{r3, r4, r5, pc}
 801f318:	2000a73c 	.word	0x2000a73c

0801f31c <_fstat_r>:
 801f31c:	b538      	push	{r3, r4, r5, lr}
 801f31e:	4c07      	ldr	r4, [pc, #28]	; (801f33c <_fstat_r+0x20>)
 801f320:	2300      	movs	r3, #0
 801f322:	4605      	mov	r5, r0
 801f324:	4608      	mov	r0, r1
 801f326:	4611      	mov	r1, r2
 801f328:	6023      	str	r3, [r4, #0]
 801f32a:	f7f8 fd30 	bl	8017d8e <_fstat>
 801f32e:	1c43      	adds	r3, r0, #1
 801f330:	d102      	bne.n	801f338 <_fstat_r+0x1c>
 801f332:	6823      	ldr	r3, [r4, #0]
 801f334:	b103      	cbz	r3, 801f338 <_fstat_r+0x1c>
 801f336:	602b      	str	r3, [r5, #0]
 801f338:	bd38      	pop	{r3, r4, r5, pc}
 801f33a:	bf00      	nop
 801f33c:	2000a73c 	.word	0x2000a73c

0801f340 <_isatty_r>:
 801f340:	b538      	push	{r3, r4, r5, lr}
 801f342:	4c06      	ldr	r4, [pc, #24]	; (801f35c <_isatty_r+0x1c>)
 801f344:	2300      	movs	r3, #0
 801f346:	4605      	mov	r5, r0
 801f348:	4608      	mov	r0, r1
 801f34a:	6023      	str	r3, [r4, #0]
 801f34c:	f7f8 fd2f 	bl	8017dae <_isatty>
 801f350:	1c43      	adds	r3, r0, #1
 801f352:	d102      	bne.n	801f35a <_isatty_r+0x1a>
 801f354:	6823      	ldr	r3, [r4, #0]
 801f356:	b103      	cbz	r3, 801f35a <_isatty_r+0x1a>
 801f358:	602b      	str	r3, [r5, #0]
 801f35a:	bd38      	pop	{r3, r4, r5, pc}
 801f35c:	2000a73c 	.word	0x2000a73c

0801f360 <_lseek_r>:
 801f360:	b538      	push	{r3, r4, r5, lr}
 801f362:	4c07      	ldr	r4, [pc, #28]	; (801f380 <_lseek_r+0x20>)
 801f364:	4605      	mov	r5, r0
 801f366:	4608      	mov	r0, r1
 801f368:	4611      	mov	r1, r2
 801f36a:	2200      	movs	r2, #0
 801f36c:	6022      	str	r2, [r4, #0]
 801f36e:	461a      	mov	r2, r3
 801f370:	f7f8 fd28 	bl	8017dc4 <_lseek>
 801f374:	1c43      	adds	r3, r0, #1
 801f376:	d102      	bne.n	801f37e <_lseek_r+0x1e>
 801f378:	6823      	ldr	r3, [r4, #0]
 801f37a:	b103      	cbz	r3, 801f37e <_lseek_r+0x1e>
 801f37c:	602b      	str	r3, [r5, #0]
 801f37e:	bd38      	pop	{r3, r4, r5, pc}
 801f380:	2000a73c 	.word	0x2000a73c

0801f384 <_read_r>:
 801f384:	b538      	push	{r3, r4, r5, lr}
 801f386:	4c07      	ldr	r4, [pc, #28]	; (801f3a4 <_read_r+0x20>)
 801f388:	4605      	mov	r5, r0
 801f38a:	4608      	mov	r0, r1
 801f38c:	4611      	mov	r1, r2
 801f38e:	2200      	movs	r2, #0
 801f390:	6022      	str	r2, [r4, #0]
 801f392:	461a      	mov	r2, r3
 801f394:	f7f8 fcb6 	bl	8017d04 <_read>
 801f398:	1c43      	adds	r3, r0, #1
 801f39a:	d102      	bne.n	801f3a2 <_read_r+0x1e>
 801f39c:	6823      	ldr	r3, [r4, #0]
 801f39e:	b103      	cbz	r3, 801f3a2 <_read_r+0x1e>
 801f3a0:	602b      	str	r3, [r5, #0]
 801f3a2:	bd38      	pop	{r3, r4, r5, pc}
 801f3a4:	2000a73c 	.word	0x2000a73c

0801f3a8 <_init>:
 801f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3aa:	bf00      	nop
 801f3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f3ae:	bc08      	pop	{r3}
 801f3b0:	469e      	mov	lr, r3
 801f3b2:	4770      	bx	lr

0801f3b4 <_fini>:
 801f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3b6:	bf00      	nop
 801f3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f3ba:	bc08      	pop	{r3}
 801f3bc:	469e      	mov	lr, r3
 801f3be:	4770      	bx	lr
